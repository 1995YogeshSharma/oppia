from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/signup/Signup.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Data and controllers for the Oppia profile page.\n */\n\noppia.controller(\'Signup\', [\n  \'$scope\', \'$http\', \'$rootScope\', \'$uibModal\', \'AlertsService\', \'UrlService\',\n  \'FocusManagerService\', \'siteAnalyticsService\', \'UrlInterpolationService\',\n  function(\n      $scope, $http, $rootScope, $uibModal, AlertsService, UrlService,\n      FocusManagerService, siteAnalyticsService, UrlInterpolationService) {\n    var _SIGNUP_DATA_URL = \'/signuphandler/data\';\n    $rootScope.loadingMessage = \'I18N_SIGNUP_LOADING\';\n    $scope.warningI18nCode = \'\';\n    $scope.siteName = GLOBALS.SITE_NAME;\n    $scope.showEmailPreferencesForm = GLOBALS.CAN_SEND_EMAILS;\n    $scope.submissionInProcess = false;\n\n    $http.get(_SIGNUP_DATA_URL).then(function(response) {\n      var data = response.data;\n      $rootScope.loadingMessage = \'\';\n      $scope.username = data.username;\n      $scope.hasEverRegistered = data.has_ever_registered;\n      $scope.hasAgreedToLatestTerms = data.has_agreed_to_latest_terms;\n      $scope.hasUsername = Boolean($scope.username);\n      FocusManagerService.setFocus(\'usernameInputField\');\n    });\n\n    $scope.blurredAtLeastOnce = false;\n    $scope.canReceiveEmailUpdates = null;\n\n    $scope.isFormValid = function() {\n      return (\n        $scope.hasAgreedToLatestTerms &&\n        ($scope.hasUsername || !$scope.getWarningText($scope.username))\n      );\n    };\n\n    $scope.showLicenseExplanationModal = function() {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/signup/licence_explanation_modal_directive.html\'),\n        backdrop: true,\n        resolve: {},\n        controller: [\n          \'$scope\', \'$uibModalInstance\', function($scope, $uibModalInstance) {\n            $scope.siteName = GLOBALS.SITE_NAME;\n            $scope.close = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n          }\n        ]\n      });\n    };\n\n    $scope.onUsernameInputFormBlur = function(username) {\n      if ($scope.hasUsername) {\n        return;\n      }\n      AlertsService.clearWarnings();\n      $scope.blurredAtLeastOnce = true;\n      $scope.updateWarningText(username);\n      if (!$scope.warningI18nCode) {\n        $http.post(\'usernamehandler/data\', {\n          username: $scope.username\n        }).then(function(response) {\n          if (response.data.username_is_taken) {\n            $scope.warningI18nCode = \'I18N_SIGNUP_ERROR_USERNAME_TAKEN\';\n          }\n        });\n      }\n    };\n\n    // Returns the warning text corresponding to the validation error for the\n    // given username, or an empty string if the username is valid.\n    $scope.updateWarningText = function(username) {\n      var alphanumeric = /^[A-Za-z0-9]+$/;\n      var admin = /admin/i;\n      var oppia = /oppia/i;\n\n      if (!username) {\n        $scope.warningI18nCode = \'I18N_SIGNUP_ERROR_NO_USERNAME\';\n      } else if (username.indexOf(\' \') !== -1) {\n        $scope.warningI18nCode = \'I18N_SIGNUP_ERROR_USERNAME_WITH_SPACES\';\n      } else if (username.length > 50) {\n        $scope.warningI18nCode = \'I18N_SIGNUP_ERROR_USERNAME_MORE_50_CHARS\';\n      } else if (!alphanumeric.test(username)) {\n        $scope.warningI18nCode = \'I18N_SIGNUP_ERROR_USERNAME_ONLY_ALPHANUM\';\n      } else if (admin.test(username)) {\n        $scope.warningI18nCode = \'I18N_SIGNUP_ERROR_USERNAME_WITH_ADMIN\';\n      } else if (oppia.test(username)) {\n        $scope.warningI18nCode = \'I18N_SIGNUP_ERROR_USERNAME_NOT_AVAILABLE\';\n      } else {\n        $scope.warningI18nCode = \'\';\n      }\n    };\n\n    $scope.onSelectEmailPreference = function() {\n      $scope.emailPreferencesWarningText = \'\';\n    };\n\n    $scope.submitPrerequisitesForm = function(\n        agreedToTerms, username, canReceiveEmailUpdates) {\n      if (!agreedToTerms) {\n        AlertsService.addWarning(\'I18N_SIGNUP_ERROR_MUST_AGREE_TO_TERMS\');\n        return;\n      }\n\n      if (!$scope.hasUsername && $scope.warningI18nCode) {\n        return;\n      }\n\n      var requestParams = {\n        agreed_to_terms: agreedToTerms,\n        can_receive_email_updates: null\n      };\n\n      var defaultDashboard = constants.DASHBOARD_TYPE_LEARNER;\n      var returnUrl = window.decodeURIComponent(\n        UrlService.getUrlParams().return_url);\n\n      if (returnUrl.indexOf(\'creator_dashboard\') !== -1) {\n        defaultDashboard = constants.DASHBOARD_TYPE_CREATOR;\n      } else {\n        defaultDashboard = constants.DASHBOARD_TYPE_LEARNER;\n      }\n\n      var requestParams = {\n        agreed_to_terms: agreedToTerms,\n        can_receive_email_updates: null,\n        default_dashboard: defaultDashboard\n      };\n\n      if (!$scope.hasUsername) {\n        requestParams.username = username;\n      }\n\n      if (GLOBALS.CAN_SEND_EMAILS && !$scope.hasUsername) {\n        if (canReceiveEmailUpdates === null) {\n          $scope.emailPreferencesWarningText = \'I18N_SIGNUP_FIELD_REQUIRED\';\n          return;\n        }\n\n        if (canReceiveEmailUpdates === \'yes\') {\n          requestParams.can_receive_email_updates = true;\n        } else if (canReceiveEmailUpdates === \'no\') {\n          requestParams.can_receive_email_updates = false;\n        } else {\n          throw Error(\n            \'Invalid value for email preferences: \' + canReceiveEmailUpdates);\n        }\n      }\n\n      siteAnalyticsService.registerNewSignupEvent();\n\n      $scope.submissionInProcess = true;\n      $http.post(_SIGNUP_DATA_URL, requestParams).then(function() {\n        window.location = window.decodeURIComponent(\n          UrlService.getUrlParams().return_url);\n      }, function() {\n        $scope.submissionInProcess = false;\n      });\n    };\n  }\n]);'

blocks = {}
debug_info = ''
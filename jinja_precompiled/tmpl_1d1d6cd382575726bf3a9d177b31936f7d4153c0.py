from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/StoryContentsObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for StoryContentsObjectFactory.\n */\n\ndescribe(\'Story contents object factory\', function() {\n  var StoryContentsObjectFactory = null;\n  var _sampleSubtopic = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    StoryContentsObjectFactory = $injector.get(\'StoryContentsObjectFactory\');\n\n    var sampleStoryContentsBackendDict = {\n      initial_node_id: \'node_1\',\n      nodes: [\n        {\n          id: \'node_1\',\n          prerequisite_skill_ids: [\'skill_1\'],\n          acquired_skill_ids: [\'skill_2\'],\n          destination_node_ids: [\'node_2\'],\n          outline: \'Outline\',\n          exploration_id: null,\n          outline_is_finalized: false\n        }, {\n          id: \'node_2\',\n          prerequisite_skill_ids: [\'skill_2\'],\n          acquired_skill_ids: [\'skill_3\', \'skill_4\'],\n          destination_node_ids: [],\n          outline: \'Outline 2\',\n          exploration_id: \'exp_1\',\n          outline_is_finalized: true\n        }],\n      next_node_id: \'node_3\'\n    };\n    _sampleStoryContents = StoryContentsObjectFactory.createFromBackendDict(\n      sampleStoryContentsBackendDict);\n  }));\n\n  it(\'should correctly return index of node (or -1, if not present) \' +\n     \'based on id\', function() {\n    expect(_sampleStoryContents.getNodeIndex(\'node_1\')).toEqual(0);\n    expect(_sampleStoryContents.getNodeIndex(\'node_10\')).toEqual(-1);\n  });\n\n  it(\'should correctly correctly validate valid story contents\', function() {\n    expect(_sampleStoryContents.validate()).toEqual([]);\n  });\n\n  it(\'should correctly correctly validate case where prerequisite skills \' +\n     \'are not acquired by the user\', function() {\n    _sampleStoryContents.addNode();\n    _sampleStoryContents.addDestinationNodeIdToNode(\'node_1\', \'node_3\');\n    _sampleStoryContents.addPrerequisiteSkillIdToNode(\'node_3\', \'skill_3\');\n    expect(_sampleStoryContents.validate()).toEqual([\n      \'The prerequisite skill with id skill_3 was not completed before node \' +\n      \'with id node_3 was unlocked\'\n    ]);\n  });\n\n  it(\'should correctly correctly validate the case where the story graph \' +\n    \'has loops\', function() {\n    _sampleStoryContents.addNode();\n    _sampleStoryContents.addDestinationNodeIdToNode(\'node_2\', \'node_3\');\n    _sampleStoryContents.addDestinationNodeIdToNode(\'node_3\', \'node_1\');\n    expect(_sampleStoryContents.validate()).toEqual([\n      \'Loops are not allowed in the node graph\'\n    ]);\n  });\n\n  it(\'should correctly correctly validate the case where the story graph is\' +\n    \' disconnected.\', function() {\n    _sampleStoryContents.addNode();\n    expect(_sampleStoryContents.validate()).toEqual([\n      \'The node with id node_3 is disconnected from the graph\'\n    ]);\n  });\n\n  it(\'should correctly throw error when node id is invalid for any function\',\n    function() {\n      expect(function() {\n        _sampleStoryContents.setInitialNodeId(\'node_5\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.deleteNode(\'node_5\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.setNodeExplorationId(\'node_5\', \'id\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.setNodeOutline(\'node_5\', \'Outline\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.markNodeOutlineAsFinalized(\'node_5\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.markNodeOutlineAsNotFinalized(\'node_5\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.addPrerequisiteSkillIdToNode(\'node_5\', \'skill_1\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.removePrerequisiteSkillIdFromNode(\n          \'node_5\', \'skill_1\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.addAcquiredSkillIdToNode(\'node_5\', \'skill_1\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.removeAcquiredSkillIdFromNode(\'node_5\', \'skill_1\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.addDestinationNodeIdToNode(\'node_5\', \'node_1\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryContents.removeDestinationNodeIdFromNode(\n          \'node_5\', \'node_1\');\n      }).toThrow();\n    });\n});'

blocks = {}
debug_info = ''
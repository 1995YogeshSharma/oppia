from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/objects/FractionObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview unit tests for the fraction object type factory service.\n */\ndescribe(\'FractionObjectFactory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'fraction object factory\', function() {\n    var errors = null;\n    var Fraction = null;\n\n    beforeEach(inject(function($injector) {\n      errors = $injector.get(\'FRACTION_PARSING_ERRORS\');\n      Fraction = $injector.get(\'FractionObjectFactory\');\n    }));\n\n    it(\'should convert itself to a string in fraction format\', function() {\n      expect(new Fraction(true, 1, 2, 3).toString()).toBe(\'-1 2/3\');\n      expect(new Fraction(false, 1, 2, 3).toString()).toBe(\'1 2/3\');\n      expect(new Fraction(true, 0, 2, 3).toString()).toBe(\'-2/3\');\n      expect(new Fraction(false, 0, 2, 3).toString()).toBe(\'2/3\');\n      expect(new Fraction(true, 1, 0, 3).toString()).toBe(\'-1\');\n      expect(new Fraction(false, 1, 0, 3).toString()).toBe(\'1\');\n      expect(new Fraction(true, 0, 0, 3).toString()).toBe(\'0\');\n      expect(new Fraction(false, 0, 0, 3).toString()).toBe(\'0\');\n    });\n\n    it(\'should return the correct integer part\', function() {\n      expect(new Fraction(true, 1, 2, 3).getIntegerPart()).toBe(-1);\n      expect(new Fraction(false, 1, 2, 3).getIntegerPart()).toBe(1);\n      expect(new Fraction(true, 0, 2, 3).getIntegerPart()).toBe(0);\n      expect(new Fraction(false, 0, 2, 3).getIntegerPart()).toBe(0);\n      expect(new Fraction(true, 1, 0, 3).getIntegerPart()).toBe(-1);\n      expect(new Fraction(false, 1, 0, 3).getIntegerPart()).toBe(1);\n      expect(new Fraction(true, 0, 0, 3).getIntegerPart()).toBe(0);\n      expect(new Fraction(false, 0, 0, 3).getIntegerPart()).toBe(0);\n    });\n\n    it(\'should parse valid strings\', function() {\n      expect(Fraction.fromRawInputString(\'10/ 2\').toDict()).toEqual(\n        new Fraction(false, 0, 10, 2).toDict());\n      expect(Fraction.fromRawInputString(\'10/20\').toDict()).toEqual(\n        new Fraction(false, 0, 10, 20).toDict());\n      expect(Fraction.fromRawInputString(\'1   1/ 2\').toDict()).toEqual(\n        new Fraction(false, 1, 1, 2).toDict());\n      expect(Fraction.fromRawInputString(\'- 1 1 /2\').toDict()).toEqual(\n        new Fraction(true, 1, 1, 2).toDict());\n      expect(Fraction.fromRawInputString(\'1      \').toDict()).toEqual(\n        new Fraction(false, 1, 0, 1).toDict());\n      expect(Fraction.fromRawInputString(\'  - 1\').toDict()).toEqual(\n        new Fraction(true, 1, 0, 1).toDict());\n      expect(Fraction.fromRawInputString(\'1  /  22\').toDict()).toEqual(\n        new Fraction(false, 0, 1, 22).toDict());\n      expect(Fraction.fromRawInputString(\' -1 /2\').toDict()).toEqual(\n        new Fraction(true, 0, 1, 2).toDict());\n      expect(Fraction.fromRawInputString(\'0  1/2\').toDict()).toEqual(\n        new Fraction(false, 0, 1, 2).toDict());\n      expect(Fraction.fromRawInputString(\'1 0 /2\').toDict()).toEqual(\n        new Fraction(false, 1, 0, 2).toDict());\n    });\n\n    it(\'should throw errors for invalid fractions\', function() {\n      // Invalid characters.\n      expect(function() {\n        Fraction.fromRawInputString(\'3 \\ b\');\n      }).toThrow(new Error(errors.INVALID_CHARS));\n      expect(function() {\n        Fraction.fromRawInputString(\'a 3/5\');\n      }).toThrow(new Error(errors.INVALID_CHARS));\n      expect(function() {\n        Fraction.fromRawInputString(\'5 b/c\');\n      }).toThrow(new Error(errors.INVALID_CHARS));\n      expect(function() {\n        Fraction.fromRawInputString(\'a b/c\');\n      }).toThrow(new Error(errors.INVALID_CHARS));\n      // Invalid format.\n      expect(function() {\n        Fraction.fromRawInputString(\'1 / -3\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      expect(function() {\n        Fraction.fromRawInputString(\'-1 -3/2\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      expect(function() {\n        Fraction.fromRawInputString(\'3 -\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      expect(function() {\n        Fraction.fromRawInputString(\'1  1\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      expect(function() {\n        Fraction.fromRawInputString(\'1/3 1/2\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      expect(function() {\n        Fraction.fromRawInputString(\'1 2 3 / 4\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      expect(function() {\n        Fraction.fromRawInputString(\'1 / 2 3\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      expect(function() {\n        Fraction.fromRawInputString(\'- / 3\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      expect(function() {\n        Fraction.fromRawInputString(\'/ 3\');\n      }).toThrow(new Error(errors.INVALID_FORMAT));\n      // Division by zero.\n      expect(function() {\n        Fraction.fromRawInputString(\' 1/0\');\n      }).toThrow(new Error(errors.DIVISION_BY_ZERO));\n      expect(function() {\n        Fraction.fromRawInputString(\'1 2 /0\');\n      }).toThrow(new Error(errors.DIVISION_BY_ZERO));\n    });\n\n    it(\'should convert to the correct float value\', function() {\n      expect(Fraction.fromRawInputString(\'1\').toFloat()).toEqual(1);\n      expect(Fraction.fromRawInputString(\'1 0/5\').toFloat()).toEqual(1);\n      expect(Fraction.fromRawInputString(\'1 4/5\').toFloat()).toEqual(1.8);\n      expect(Fraction.fromRawInputString(\'0 4/5\').toFloat()).toEqual(0.8);\n      expect(Fraction.fromRawInputString(\'-10/10\').toFloat()).toEqual(-1);\n      expect(Fraction.fromRawInputString(\'0 40/50\').toFloat()).toEqual(0.8);\n      expect(Fraction.fromRawInputString(\'0 2/3\').toFloat()).toEqual(2 / 3);\n      expect(Fraction.fromRawInputString(\'0 25/5\').toFloat()).toEqual(5);\n      expect(Fraction.fromRawInputString(\'4 1/3\').toFloat()).toEqual(13 / 3);\n    });\n\n    it(\'should correctly detect nonzero integer part\', function() {\n      expect(\n        Fraction.fromRawInputString(\'0\').hasNonzeroIntegerPart()).toBe(false);\n      expect(\n        Fraction.fromRawInputString(\'1\').hasNonzeroIntegerPart()).toBe(true);\n      expect(\n        Fraction.fromRawInputString(\'1 0/5\').hasNonzeroIntegerPart()\n      ).toBe(true);\n      expect(\n        Fraction.fromRawInputString(\'1 3/5\').hasNonzeroIntegerPart()\n      ).toBe(true);\n      expect(\n        Fraction.fromRawInputString(\'7/5\').hasNonzeroIntegerPart()).toBe(false);\n      expect(\n        Fraction.fromRawInputString(\'2/5\').hasNonzeroIntegerPart()).toBe(false);\n    });\n\n    it(\'should correctly detect improper fractions\', function() {\n      expect(Fraction.fromRawInputString(\'0\').isImproperFraction()).toBe(false);\n      expect(Fraction.fromRawInputString(\'1\').isImproperFraction()).toBe(false);\n      expect(\n        Fraction.fromRawInputString(\'1 0/5\').isImproperFraction()\n      ).toBe(false);\n      expect(\n        Fraction.fromRawInputString(\'1 3/5\').isImproperFraction()\n      ).toBe(false);\n      expect(\n        Fraction.fromRawInputString(\'2/5\').isImproperFraction()).toBe(false);\n      expect(\n        Fraction.fromRawInputString(\'7/5\').isImproperFraction()).toBe(true);\n      expect(\n        Fraction.fromRawInputString(\'5/5\').isImproperFraction()).toBe(true);\n    });\n  });\n});'

blocks = {}
debug_info = ''
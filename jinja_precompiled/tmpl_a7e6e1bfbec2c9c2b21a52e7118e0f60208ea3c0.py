from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/suggestion/SuggestionThreadObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n* @fileoverview Unit tests for SuggestionThreadObjectFactory.\n*/\n\ndescribe(\'Suggestion thread object factory\', function() {\n  beforeEach(function() {\n    module(\'oppia\', function($provide){\n      $provide.constant(\'ENABLE_GENERALIZED_FEEDBACK_THREADS\', true);\n    });\n  });\n  var SuggestionThreadObjectFactory = null;\n  var SuggestionObjectFactory = null;\n\n  beforeEach(inject(function($injector) {\n    SuggestionThreadObjectFactory = $injector.get(\n      \'SuggestionThreadObjectFactory\');\n    SuggestionObjectFactory = $injector.get(\'SuggestionObjectFactory\');\n  }));\n\n  it(\'should create a new suggestion thread from a backend dict.\', function(){\n    suggestionThreadBackendDict = {\n      last_updated: 1000,\n      original_author_username: \'author\',\n      status: \'accepted\',\n      subject: \'sample subject\',\n      summary: \'sample summary\',\n      message_count: 10,\n      state_name: \'state 1\',\n      thread_id: \'exploration.exp1.thread1\'\n    };\n\n    suggestionBackendDict = {\n      suggestion_id: \'exploration.exp1.thread1\',\n      suggestion_type: \'edit_exploration_state_content\',\n      target_type: \'exploration\',\n      target_id: \'exp1\',\n      target_version_at_submission: 1,\n      status: \'accepted\',\n      author_name: \'author\',\n      change: {\n        cmd: \'edit_state_property\',\n        property_name: \'content\',\n        state_name: \'state_1\',\n        new_value: {\n          html: \'new suggestion content\'\n        },\n        old_value: {\n          html: \'old suggestion content\'\n        }\n      },\n      last_updated: 1000\n    };\n    constants.ENABLE_GENERALIZED_FEEDBACK_THREADS = true;\n    suggestionThread = SuggestionThreadObjectFactory.createFromBackendDicts(\n      suggestionThreadBackendDict, suggestionBackendDict);\n    expect(suggestionThread.status).toEqual(\'accepted\');\n    expect(suggestionThread.subject).toEqual(\'sample subject\');\n    expect(suggestionThread.summary).toEqual(\'sample summary\');\n    expect(suggestionThread.originalAuthorName).toEqual(\'author\');\n    expect(suggestionThread.lastUpdated).toEqual(1000);\n    expect(suggestionThread.messageCount).toEqual(10);\n    expect(suggestionThread.threadId).toEqual(\'exploration.exp1.thread1\');\n    expect(suggestionThread.suggestion.suggestionType).toEqual(\n      \'edit_exploration_state_content\');\n    expect(suggestionThread.suggestion.targetType).toEqual(\'exploration\');\n    expect(suggestionThread.suggestion.targetId).toEqual(\'exp1\');\n    expect(suggestionThread.suggestion.suggestionId).toEqual(\n      \'exploration.exp1.thread1\');\n    expect(suggestionThread.suggestion.status).toEqual(\'accepted\');\n    expect(suggestionThread.suggestion.authorName).toEqual(\'author\');\n    expect(suggestionThread.suggestion.newValue.html).toEqual(\n      \'new suggestion content\');\n    expect(suggestionThread.suggestion.oldValue.html).toEqual(\n      \'old suggestion content\');\n    expect(suggestionThread.suggestion.lastUpdated).toEqual(1000);\n    expect(suggestionThread.suggestion.getThreadId()).toEqual(\n      \'exploration.exp1.thread1\');\n    expect(suggestionThread.isSuggestionThread()).toEqual(true);\n    expect(suggestionThread.isSuggestionHandled()).toEqual(true);\n    suggestionThread.suggestion.status = \'review\';\n    expect(suggestionThread.isSuggestionHandled()).toEqual(false);\n    expect(suggestionThread.getSuggestionStatus()).toEqual(\'review\');\n    expect(suggestionThread.getSuggestionStateName()).toEqual(\'state_1\');\n    expect(suggestionThread.getReplacementHtmlFromSuggestion()).toEqual(\n      \'new suggestion content\');\n\n    messages = [{\n      text: \'message1\'\n    }, {\n      text: \'message2\'\n    }];\n    suggestionThread.setMessages(messages);\n    expect(suggestionThread.messages).toEqual(messages);\n    constants.ENABLE_GENERALIZED_FEEDBACK_THREADS = false;\n  });\n});'

blocks = {}
debug_info = ''
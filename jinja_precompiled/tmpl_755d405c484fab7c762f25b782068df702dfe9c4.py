from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/feedback_tab/ThreadDataServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for ThreadDataService, which retrieves thread\n * data for the feedback tab of the exploration editor.\n */\n\ndescribe(\'retrieving threads service\', function() {\n  var expId = \'12345\';\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n  beforeEach(function() {\n    module(\'oppia\');\n    module(function($provide) {\n      $provide.value(\'ExplorationDataService\', {\n        explorationId: expId\n      });\n    });\n  });\n\n  var ThreadDataService, httpBackend;\n  beforeEach(inject(function($httpBackend, _ThreadDataService_) {\n    ThreadDataService = _ThreadDataService_;\n    httpBackend = $httpBackend;\n  }));\n\n  it(\'should retrieve feedback threads\', function() {\n    var mockFeedbackThreads = [\n      {\n        last_updated: 1441870501230.642,\n        original_author_username: \'test_learner\',\n        state_name: null,\n        status: \'open\',\n        subject: \'Feedback from a learner\',\n        summary: null,\n        thread_id: \'abc1\'\n      },\n      {\n        last_updated: 1441870501231.642,\n        original_author_username: \'test_learner\',\n        state_name: null,\n        status: \'open\',\n        subject: \'Feedback from a learner\',\n        summary: null,\n        thread_id: \'abc2\'\n      }\n    ];\n\n    var mockOpenSuggestionThreads = [\n      {\n        last_updated: 1441870501232.642,\n        original_author_username: \'test_learner\',\n        state_name: null,\n        status: \'open\',\n        subject: \'Suggestion from a learner\',\n        summary: null,\n        thread_id: \'abc3\'\n      },\n      {\n        last_updated: 1441870501233.642,\n        original_author_username: \'test_learner\',\n        state_name: null,\n        status: \'open\',\n        subject: \'Suggestion from a learner\',\n        summary: null,\n        thread_id: \'abc4\'\n      }\n    ];\n\n    httpBackend.whenGET(\'/threadlisthandler/\' + expId).respond({\n      threads: mockFeedbackThreads\n    });\n\n    httpBackend.whenGET(\n      \'/suggestionlisthandler/\' + expId + \'?has_suggestion=true&list_type=all\'\n    ).respond({\n      threads: mockOpenSuggestionThreads\n    });\n\n    ThreadDataService.fetchThreads();\n    httpBackend.flush();\n\n    for (var i = 0; i < mockFeedbackThreads.length; i++) {\n      expect(ThreadDataService.data.feedbackThreads).toContain(\n        mockFeedbackThreads[i]);\n    }\n    for (var i = 0; i < mockOpenSuggestionThreads.length; i++) {\n      expect(ThreadDataService.data.suggestionThreads).toContain(\n        mockOpenSuggestionThreads[i]);\n    }\n  });\n});'

blocks = {}
debug_info = ''
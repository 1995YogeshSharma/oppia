from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/feedback_tab/ThreadDataServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for ThreadDataService, which retrieves thread\n * data for the feedback tab of the exploration editor.\n */\n\ndescribe(\'retrieving threads service\', function() {\n  var expId = \'12345\';\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n  beforeEach(function() {\n    module(\'oppia\');\n    module(function($provide) {\n      $provide.value(\'ExplorationDataService\', {\n        explorationId: expId\n      });\n    });\n  });\n\n  var ThreadDataService, httpBackend;\n  beforeEach(inject(function($httpBackend, _ThreadDataService_) {\n    ThreadDataService = _ThreadDataService_;\n    httpBackend = $httpBackend;\n  }));\n\n  it(\'should retrieve feedback threads\', function() {\n    var mockFeedbackThreads = [\n      {\n        last_updated: 1441870501230.642,\n        original_author_username: \'test_learner\',\n        state_name: null,\n        status: \'open\',\n        subject: \'Feedback from a learner\',\n        summary: null,\n        thread_id: \'abc1\'\n      },\n      {\n        last_updated: 1441870501231.642,\n        original_author_username: \'test_learner\',\n        state_name: null,\n        status: \'open\',\n        subject: \'Feedback from a learner\',\n        summary: null,\n        thread_id: \'abc2\'\n      }\n    ];\n\n    var mockGeneralSuggestionThreads = [\n      {\n        assigned_reviewer_id: null,\n        author_name: \'author_1\',\n        change_cmd: {\n          new_value: {\n            html: \'new content html\',\n            audio_translation: {}\n          },\n          old_value: null,\n          cmd: \'edit_state_property\',\n          state_name: \'state_1\',\n          property_name: \'content\'\n        },\n        final_reviewer_id: null,\n        last_updated: 1528564605944.896,\n        score_category: \'content.Algebra\',\n        status: \'received\',\n        suggestion_id: \'exploration.exp_1.1234\',\n        suggestion_type: \'edit_exploration_state_content\',\n        target_id: \'exp_1\',\n        target_type: \'exploration\',\n        target_version_at_submission: 1,\n        thread_id: \'exp_1.1234\'\n      }\n    ];\n    var feedbackThreadsForSuggestionThreads = [\n      {\n        description: \'Suggestion\',\n        last_updated: 1441870501231.642,\n        original_author_username: \'test_learner\',\n        state_name: null,\n        status: \'open\',\n        subject: \'Suggestion from a learner\',\n        summary: null,\n        thread_id: \'exp_1.1234\'\n      }\n    ];\n    httpBackend.whenGET(\'/threadlisthandler/\' + expId).respond({\n      threads: mockFeedbackThreads.join(feedbackThreadsForSuggestionThreads)\n    });\n\n    httpBackend.whenGET(\n      \'/generalsuggestionlisthandler?target_type=exploration\' +\n      \'&target_id=\' + expId).respond({\n      suggestions: mockGeneralSuggestionThreads\n    });\n\n    ThreadDataService.fetchThreads(function() {\n      for (var i = 0; i < mockFeedbackThreads.length; i++) {\n        expect(ThreadDataService.data.feedbackThreads).toContain(\n          mockFeedbackThreads[i]);\n      }\n\n      for (var i = 0; i < mockGeneralSuggestionThreads.length; i++) {\n        expect(ThreadDataService.data.suggestionThreads).toContain(\n          mockGeneralSuggestionThreads[i]);\n      }\n    });\n    httpBackend.flush();\n  });\n});'

blocks = {}
debug_info = ''
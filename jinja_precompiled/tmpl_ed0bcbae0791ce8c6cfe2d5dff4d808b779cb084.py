from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/ExtractImageFilenamesFromStateServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \'License\');\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \'AS-IS\' BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the extracting image files in state service.\n */\n\ndescribe(\'Extracting Image file names in the state service\', function() {\n  beforeEach(function() {\n    module(\'oppia\');\n    // Set a global value for INTERACTION_SPECS that will be used by all the\n    // descendant dependencies.\n    module(function($provide) {\n      $provide.constant(\'INTERACTION_SPECS\', {\n        TextInput: {\n          is_terminal: false\n        },\n        ItemSelectionInput: {\n          is_terminal: false\n        },\n        MultipleChoiceInput: {\n          is_terminal: false\n        },\n        Continue: {\n          is_terminal: false\n        },\n        EndExploration: {\n          is_terminal: true\n        }\n      });\n    });\n  });\n\n  var eifss, eof, ecs;\n  var $rootScope = null;\n  var explorationDict;\n  var ImageFilenamesInExploration;\n  beforeEach(inject(function($injector) {\n    eof = $injector.get(\'ExplorationObjectFactory\');\n    ecs = $injector.get(\'ContextService\');\n    eifss = $injector.get(\'ExtractImageFilenamesFromStateService\');\n    spyOn(ecs, \'getExplorationId\').and.returnValue(\'1\');\n    $rootScope = $injector.get(\'$rootScope\');\n    explorationDict = {\n      id: 1,\n      title: \'My Title\',\n      category: \'Art\',\n      objective: \'Your objective\',\n      tags: [],\n      blurb: \'\',\n      author_notes: \'\',\n      states_schema_version: 15,\n      init_state_name: \'Introduction\',\n      states: {\n        \'State 1\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'\'\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {}\n          },\n          interaction: {\n            id: \'Continue\',\n            default_outcome: {\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'\'\n              },\n              dest: \'State 3\',\n              param_changes: []\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              buttonText: {\n                value: \'Continue\'\n              }\n            },\n            solution: null,\n            answer_groups: [],\n            hints: []\n          },\n          classifier_model_id: null\n        },\n        \'State 3\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'Congratulations, you have finished!\'\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {}\n          },\n          interaction: {\n            id: \'EndExploration\',\n            default_outcome: null,\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              recommendedExplorationIds: {\n                value: []\n              }\n            },\n            solution: null,\n            answer_groups: [],\n            hints: []\n          },\n          classifier_model_id: null\n        },\n        Introduction: {\n          classifier_model_id: null,\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'Multiple Choice\'\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {},\n            feedback_1: {},\n            feedback_2: {}\n          },\n          interaction: {\n            id: \'MultipleChoiceInput\',\n            default_outcome: {\n              dest: \'Introduction\',\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'Try Again!\'\n              }\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              choices: {\n                value: [\n                  \'<p> Go to ItemSelection <oppia-noninteractive-image\' +\n                  \' filepath-with-value="&amp;quot;sIMultipleChoice1.png&amp;\' +\n                  \'quot;"></oppia-noninteractive-image></p>\',\n                  \'<p> Go to ImageAndRegion<oppia-noninteractive-image\' +\n                  \' filepath-with-value="&amp;quot;sIMultipleChoice2.png&amp;\' +\n                  \'quot;"></oppia-noninteractive-image></p>\'\n                ]\n              }\n            },\n            answer_groups: [\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 4\',\n                  feedback: {\n                    content_id: \'feedback_1\',\n                    html: \'<p>We are going to ItemSelection\' +\n                          \'<oppia-noninteractive-image filepath-with-value=\' +\n                          \'"&amp;quot;sIOutcomeFeedback.png&amp;quot;">\' +\n                          \'</oppia-noninteractive-image></p>\'\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [\n                  {\n                    inputs: {\n                      x: 0\n                    },\n                    rule_type: \'Equals\'\n                  }\n                ]\n              },\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 5\',\n                  feedback: {\n                    content_id: \'feedback_2\',\n                    html: "Let\'s go to state 5 ImageAndRegion"\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [\n                  {\n                    inputs: {\n                      x: 1\n                    },\n                    rule_type: \'Equals\'\n                  }\n                ]\n              }\n            ],\n            hints: [],\n            solution: null\n          }\n        },\n        \'State 4\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'<p><oppia-noninteractive-image filepath-with-value="&amp;\' +\n                  \'quot;s4Content.png&amp;quot;">\' +\n                  \'</oppia-noninteractive-image></p>\'\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {},\n            feedback_1: {},\n            feedback_2: {}\n          },\n          interaction: {\n            id: \'ItemSelectionInput\',\n            default_outcome: {\n              feedback: {\n                content_id: \'content\',\n                html: \'<p>Try Again! <oppia-noninteractive-image\' +\n                      \'filepath-with-value="&amp;quot;\' +\n                      \'s4DefaultOutcomeFeedback.png&amp;quot;">\' +\n                      \'</oppia-noninteractive-image></p>\'\n              },\n              dest: \'State 4\',\n              param_changes: []\n            },\n            confirmed_unclassifies_answers: [],\n            customization_args: {\n              minAllowableSelectionCount: {\n                value: 1\n              },\n              maxAllowableSelectionCount: {\n                value: 2\n              },\n              choices: {\n                value: [\n                  \'<p><oppia-noninteractive-image filepath-with-value="&amp;\' +\n                  \'quot;s4Choice1.png&amp;quot;">\' +\n                  \'</oppia-noninteractive-image></p>\',\n                  \'<p><oppia-noninteractive-image filepath-with-value="&amp;\' +\n                  \'quot;s4Choice2.png&amp;quot;">\' +\n                  \'</oppia-noninteractive-image></p>\']\n              }\n            },\n            hints: [],\n            solution: null,\n            answer_groups: [\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 6\',\n                  feedback: {\n                    content_id: \'feedback_1\',\n                    html: "It is choice number 1. Let\'s go to the Text Input"\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [\n                  {\n                    inputs: {\n                      x: [\n                        \'<p><oppia-noninteractive-image filepath-with-value=\' +\n                        \'"&amp;quot;s4Choice1.png&amp;quot;">\' +\n                        \'</oppia-noninteractive-image></p>\'\n                      ]\n                    },\n                    rule_type: \'Equals\'\n                  }\n                ]\n              },\n              {\n                labelled_as_correct: true,\n                outcome: {\n                  dest: \'State 1\',\n                  feedback: {\n                    content_id: \'feedback_2\',\n                    html: \'It is choice number 2\'\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [\n                  {\n                    inputs: {\n                      x: [\n                        \'<p><oppia-noninteractive-image filepath-with-value=\' +\n                        \'"&amp;quot;s4Choice2.png&amp;quot;">\' +\n                        \'</oppia-noninteractive-image></p>\'\n                      ]\n                    },\n                    rule_type: \'Equals\'\n                  }\n                ]\n              }\n            ]\n          }\n        },\n        \'State 5\': {\n          classifier_model_id: null,\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'\'\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {},\n            feedback_1: {},\n            feedback_2: {},\n            feedback_3: {},\n            feedback_4: {},\n            feedback_5: {}\n          },\n          interaction: {\n            id: \'ImageClickInput\',\n            confirmed_unclassified_answers: [],\n            default_outcome: {\n              dest: \'State 5\',\n              feedback: {\n                content_id: \'content\',\n                html: \'Try Again!\'\n              }\n            },\n            answer_groups: [\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 5\',\n                  feedback: {\n                    content_id: \'feeedback_1\',\n                    html: \'<p>That is the class definition. Try again.</p>\'\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [{\n                  inputs: {\n                    x: \'classdef\'\n                  },\n                  rule_type: \'IsInRegion\'\n                }]\n              },\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 5\',\n                  feedback: {\n                    content_id: \'feeedback_2\',\n                    html: \'<p>That is a function, which is close to what you\' +\n                          \'are looking for. Try again!</p>\'\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [{\n                  inputs: {\n                    x: \'instancefunc\'\n                  },\n                  rule_type: \'IsInRegion\'\n                }]\n              },\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 5\',\n                  feedback: {\n                    content_id: \'feeedback_3\',\n                    html: \'<p>That is the class docstring. Try again.</p>\'\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [{\n                  inputs: {\n                    x: \'docstring\'\n                  },\n                  rule_type: \'IsInRegion\'\n                }]\n              },\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 5\',\n                  feedback: {\n                    content_id: \'feeedback_4\',\n                    html: "<p>That\'s a classmethod. It does execute code," +\n                          "but it doesn\'t construct anything. Try again!</p>"\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [{\n                  inputs: {\n                    x: \'classfunc\'\n                  },\n                  rule_type: \'IsInRegion\'\n                }]\n              },\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 1\',\n                  feedback: {\n                    content_id: \'feeedback_5\',\n                    html: \'<p>You found it! This is the code responsible for\' +\n                          \'constructing a new class object.</p>\'\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null\n                },\n                rule_specs: [{\n                  inputs: {\n                    x: \'ctor\'\n                  },\n                  rule_type: \'IsInRegion\'\n                }]\n              }\n            ],\n            customization_args: {\n              highlightRegionsOnHover: {\n                value: true\n              },\n              imageAndRegions: {\n                value: {\n                  imagePath: \'s5ImagePath.png\',\n                  labeledRegions: [{\n                    label: \'classdef\',\n                    region: {\n                      area: [\n                        [0.004291845493562232, 0.004692192192192192],\n                        [0.40987124463519314, 0.05874624624624625]\n                      ],\n                      regionType: \'Rectangle\'\n                    }\n                  },\n                  {\n                    label: \'docstring\',\n                    region: {\n                      area: [\n                        [0.07296137339055794, 0.06475225225225226],\n                        [0.9892703862660944, 0.1218093093093093]\n                      ],\n                      regionType: \'Rectangle\'\n                    }\n                  },\n                  {\n                    label: \'instancefunc\',\n                    region: {\n                      area: [\n                        [0.07296137339055794, 0.15183933933933935],\n                        [0.6995708154506438, 0.44012762762762764]\n                      ],\n                      regionType: \'Rectangle\'\n                    }\n                  },\n                  {\n                    label: \'classfunc\',\n                    region: {\n                      area: [\n                        [0.06866952789699571, 0.46114864864864863],\n                        [0.6931330472103004, 0.776463963963964]\n                      ],\n                      regionType: \'Rectangle\'\n                    }\n                  },\n                  {\n                    label: \'ctor\',\n                    region: {\n                      area: [\n                        [0.06437768240343347, 0.821509009009009],\n                        [0.740343347639485, 0.9926801801801802]\n                      ],\n                      regionType: \'Rectangle\'\n                    }\n                  }]\n                }\n              }\n            },\n            hints: [],\n            solution: null\n          }\n        },\n        \'State 6\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'<p>Text Input Content</p>\'\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {},\n            feedback_1: {},\n            feedback_2: {},\n            hint_1: {},\n            solution: {}\n          },\n          interaction: {\n            id: \'TextInput\',\n            default_outcome: {\n              dest: \'State 6\',\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'<p>Try again.</p>\'\n              },\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              rows: {\n                value: 1\n              },\n              placeholder: {\n                value: \'\'\n              }\n            },\n            answer_groups: [{\n              rule_specs: [{\n                inputs: {\n                  x: \'1\'\n                },\n                rule_type: \'Contains\'\n              }],\n              outcome: {\n                dest: \'State 1\',\n                feedback: {\n                  content_id: \'feedback_1\',\n                  html: "<p>Let\'s go to State 1</p>"\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null\n              }\n            }, {\n              rule_specs: [{\n                inputs: {\n                  x: \'2\'\n                },\n                rule_type: \'Contains\'\n              }],\n              outcome: {\n                dest: \'State 1\',\n                feedback: {\n                  content_id: \'feedback_2\',\n                  html: "<p>Let\'s go to State 1</p>"\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null\n              }\n            }],\n            hints: [{\n              hint_content: {\n                content_id: \'hint_1\',\n                html: \'<p><oppia-noninteractive-image filepath-with-value="\' +\n                      \'&amp;quot;s6Hint1.png&amp;quot;">\' +\n                      \'</oppia-noninteractive-image></p>\'\n              }\n            }],\n            solution: {\n              answer_is_exclusive: false,\n              correct_answer: \'cat\',\n              explanation: {\n                content_id: \'solution\',\n                html: \'<p><oppia-noninteractive-image filepath-with-value="\' +\n                      \'&amp;quot;s6SolutionExplanation.png&amp;quot;">\' +\n                      \'</oppia-noninteractive-image></p>\'\n              }\n            },\n          },\n          classifier_model_id: null\n        }\n      },\n      param_specs: {},\n      param_changes: [],\n      version: 1\n    };\n\n    ImageFilenamesInExploration = {\n      \'State 1\': [],\n      \'State 3\': [],\n      \'State 4\': [\'s4Content.png\', \'s4Choice1.png\', \'s4Choice2.png\',\n        \'s4DefaultOutcomeFeedback.png\'],\n      \'State 5\': [\'s5ImagePath.png\'],\n      \'State 6\': [\'s6Hint1.png\', \'s6SolutionExplanation.png\'],\n      Introduction: [\'sIMultipleChoice1.png\', \'sIMultipleChoice2.png\',\n        \'sIOutcomeFeedback.png\']\n    };\n  }));\n\n  it(\'should get all the filenames of the images in a state\',\n    function() {\n      var exploration = eof.createFromBackendDict(explorationDict);\n      var states = exploration.getStates();\n      var stateNames = states.getStateNames();\n      stateNames.forEach(function(statename) {\n        var filenamesInState = (\n          eifss.getImageFilenamesInState(states.getState(statename)));\n        filenamesInState.forEach(function(filename) {\n          expect(ImageFilenamesInExploration[statename]).toContain(filename);\n        });\n      });\n    });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/TopicRightsObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for TopicRightsObjectFactory.\n */\n\ndescribe(\'Topic rights object factory\', function() {\n  var TopicRightsObjectFactory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    TopicRightsObjectFactory = $injector.get(\'TopicRightsObjectFactory\');\n    var initialTopicRightsBackendObject = {\n      published: false,\n      can_edit_topic: true,\n      can_publish_topic: true\n    };\n\n    sampleTopicRights = TopicRightsObjectFactory.createFromBackendDict(\n      initialTopicRightsBackendObject);\n  }));\n\n  it(\'should be able to publish and unpublish topic when user can edit it\',\n    function() {\n      expect(sampleTopicRights.isPublished()).toBe(false);\n\n      sampleTopicRights.markTopicAsPublished();\n      expect(sampleTopicRights.isPublished()).toBe(true);\n\n      sampleTopicRights.markTopicAsUnpublished();\n      expect(sampleTopicRights.isPublished()).toBe(false);\n    });\n\n  it(\'should throw error and not be able to publish or unpublish topic when \' +\n    \'user cannot edit topic\',\n  function() {\n    expect(sampleTopicRights.isPublished()).toBe(false);\n\n    var exampleTopicRightsBackendObject = {\n      is_published: false,\n      can_edit_topic: true,\n      can_publish_topic: false\n    };\n\n    exampleTopicRights = TopicRightsObjectFactory.createFromBackendDict(\n      exampleTopicRightsBackendObject);\n\n    expect(function() {\n      exampleTopicRights.markTopicAsPublished();\n    }).toThrow(new Error(\'User is not allowed to publish this topic.\'));\n\n    expect(function() {\n      exampleTopicRights.markTopicAsUnpublished();\n    }).toThrow(new Error(\'User is not allowed to unpublish this topic.\'));\n  });\n\n  it(\'should create an empty topic rights object\', function() {\n    var emptyTopicRightsBackendObject = (\n      TopicRightsObjectFactory.createInterstitialRights());\n\n    expect(emptyTopicRightsBackendObject.isPublished()).toEqual(false);\n    expect(emptyTopicRightsBackendObject.canEditTopic()).toEqual(false);\n    expect(emptyTopicRightsBackendObject.canPublishTopic()).toEqual(false);\n  });\n\n  it(\'should make a copy from another topic rights\', function() {\n    var emptyTopicRightsBackendObject = (\n      TopicRightsObjectFactory.createInterstitialRights());\n\n    emptyTopicRightsBackendObject.copyFromTopicRights(sampleTopicRights);\n\n    expect(emptyTopicRightsBackendObject.isPublished()).toEqual(false);\n    expect(emptyTopicRightsBackendObject.canEditTopic()).toEqual(true);\n    expect(emptyTopicRightsBackendObject.canPublishTopic()).toEqual(true);\n    expect(emptyTopicRightsBackendObject.canEditName()).toEqual(true);\n  });\n});'

blocks = {}
debug_info = ''
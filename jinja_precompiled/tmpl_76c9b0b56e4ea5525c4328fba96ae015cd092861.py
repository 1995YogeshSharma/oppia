from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/ExplorationPropertyService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Services for storing exploration properties for\n * displaying and editing them in multiple places in the UI,\n * with base class as ExplorationPropertyService.\n */\n\noppia.factory(\'ExplorationPropertyService\', [\n  \'$rootScope\', \'$log\', \'ChangeListService\', \'AlertsService\',\n  function($rootScope, $log, ChangeListService, AlertsService) {\n    // Public base API for data services corresponding to exploration properties\n    // (title, category, etc.)\n\n    var BACKEND_CONVERSIONS = {\n      param_changes: function(paramChanges) {\n        return paramChanges.map(function(paramChange) {\n          return paramChange.toBackendDict();\n        });\n      },\n      param_specs: function(paramSpecs) {\n        return paramSpecs.toBackendDict();\n      },\n    };\n\n    return {\n      init: function(value) {\n        if (this.propertyName === null) {\n          throw \'Exploration property name cannot be null.\';\n        }\n\n        $log.info(\'Initializing exploration \' + this.propertyName + \':\', value);\n\n        // The current value of the property (which may not have been saved to\n        // the frontend yet). In general, this will be bound directly to the UI.\n        this.displayed = angular.copy(value);\n        // The previous (saved-in-the-frontend) value of the property. Here,\n        // \'saved\' means that this is the latest value of the property as\n        // determined by the frontend change list.\n        this.savedMemento = angular.copy(value);\n\n        $rootScope.$broadcast(\'explorationPropertyChanged\');\n      },\n      // Returns whether the current value has changed from the memento.\n      hasChanged: function() {\n        return !angular.equals(this.savedMemento, this.displayed);\n      },\n      // The backend name for this property. THIS MUST BE SPECIFIED BY\n      // SUBCLASSES.\n      propertyName: null,\n      // Transforms the given value into a normalized form. THIS CAN BE\n      // OVERRIDDEN BY SUBCLASSES. The default behavior is to do nothing.\n      _normalize: function(value) {\n        return value;\n      },\n      // Validates the given value and returns a boolean stating whether it\n      // is valid or not. THIS CAN BE OVERRIDDEN BY SUBCLASSES. The default\n      // behavior is to always return true.\n      _isValid: function(value) {\n        return true;\n      },\n      // Normalizes the displayed value. Then, if the memento and the displayed\n      // value are the same, does nothing. Otherwise, creates a new entry in the\n      // change list, and updates the memento to the displayed value.\n      saveDisplayedValue: function() {\n        if (this.propertyName === null) {\n          throw \'Exploration property name cannot be null.\';\n        }\n\n        this.displayed = this._normalize(this.displayed);\n\n        if (!this._isValid(this.displayed) || !this.hasChanged()) {\n          this.restoreFromMemento();\n          return;\n        }\n\n        if (angular.equals(this.displayed, this.savedMemento)) {\n          return;\n        }\n\n        AlertsService.clearWarnings();\n\n        var newBackendValue = angular.copy(this.displayed);\n        var oldBackendValue = angular.copy(this.savedMemento);\n\n        if (BACKEND_CONVERSIONS.hasOwnProperty(this.propertyName)) {\n          newBackendValue =\n            BACKEND_CONVERSIONS[this.propertyName](this.displayed);\n          oldBackendValue =\n            BACKEND_CONVERSIONS[this.propertyName](this.savedMemento);\n        }\n\n        ChangeListService.editExplorationProperty(\n          this.propertyName, newBackendValue, oldBackendValue);\n        this.savedMemento = angular.copy(this.displayed);\n\n        $rootScope.$broadcast(\'explorationPropertyChanged\');\n      },\n      // Reverts the displayed value to the saved memento.\n      restoreFromMemento: function() {\n        this.displayed = angular.copy(this.savedMemento);\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
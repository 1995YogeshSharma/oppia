from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/topic_editor/TopicEditorNavbarDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the navbar of the topic editor.\n */\n\noppia.directive(\'topicEditorNavbar\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/topic_editor/topic_editor_navbar_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'$uibModal\', \'AlertsService\',\n        \'UndoRedoService\', \'TopicEditorStateService\', \'UrlService\',\n        \'TopicRightsBackendApiService\', \'TopicEditorRoutingService\',\n        \'EVENT_TOPIC_INITIALIZED\', \'EVENT_TOPIC_REINITIALIZED\',\n        \'EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED\',\n        function(\n            $scope, $rootScope, $uibModal, AlertsService,\n            UndoRedoService, TopicEditorStateService, UrlService,\n            TopicRightsBackendApiService, TopicEditorRoutingService,\n            EVENT_TOPIC_INITIALIZED, EVENT_TOPIC_REINITIALIZED,\n            EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED) {\n          $scope.topicId = UrlService.getTopicIdFromUrl();\n          $scope.topic = TopicEditorStateService.getTopic();\n          $scope.validationIssues = [];\n          $scope.topicRights = TopicEditorStateService.getTopicRights();\n          $scope.isSaveInProgress = TopicEditorStateService.isSavingTopic;\n          $scope.getTabStatuses = TopicEditorRoutingService.getTabStatuses;\n          $scope.selectMainTab = TopicEditorRoutingService.navigateToMainTab;\n          $scope.selectSubtopicsTab =\n            TopicEditorRoutingService.navigateToSubtopicsTab;\n          $scope.selectQuestionsTab =\n            TopicEditorRoutingService.navigateToQuestionsTab;\n\n          var _validateTopic = function() {\n            $scope.validationIssues = $scope.topic.validate();\n          };\n\n          $scope.publishTopic = function() {\n            if (!$scope.topicRights.canPublishTopic()) {\n              return false;\n            }\n            TopicRightsBackendApiService.publishTopic($scope.topicId).then(\n              function() {\n                $scope.topicRights.markTopicAsPublished();\n                TopicEditorStateService.setTopicRights($scope.topicRights);\n              });\n          };\n\n          $scope.discardChanges = function() {\n            UndoRedoService.clearChanges();\n            TopicEditorStateService.loadTopic($scope.topicId);\n          };\n\n          $scope.getChangeListLength = function() {\n            return UndoRedoService.getChangeCount();\n          };\n\n          $scope.isTopicSaveable = function() {\n            return (\n              $scope.getChangeListLength() > 0 &&\n              $scope.getWarningsCount() === 0);\n          };\n\n          $scope.getWarningsCount = function() {\n            return $scope.validationIssues.length;\n          };\n\n          $scope.saveChanges = function() {\n            var topicIsPublished = $scope.topicRights.isPublished();\n            var modalInstance = $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/topic_editor/topic_editor_save_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\',\n                function($scope, $uibModalInstance) {\n                  $scope.isTopicPublished = topicIsPublished;\n\n                  $scope.save = function(commitMessage) {\n                    $uibModalInstance.close(commitMessage);\n                  };\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                  };\n                }\n              ]\n            });\n\n            modalInstance.result.then(function(commitMessage) {\n              TopicEditorStateService.saveTopic(commitMessage);\n            });\n          };\n\n          $scope.unpublishTopic = function() {\n            if (!$scope.topicRights.canPublishTopic()) {\n              return false;\n            }\n            TopicRightsBackendApiService.unpublishTopic($scope.topicId).then(\n              function() {\n                $scope.topicRights.markTopicAsUnpublished();\n                TopicEditorStateService.setTopicRights($scope.topicRights);\n              });\n          };\n\n          $scope.$on(EVENT_TOPIC_INITIALIZED, _validateTopic);\n          $scope.$on(EVENT_TOPIC_REINITIALIZED, _validateTopic);\n          $scope.$on(\n            EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED, _validateTopic);\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
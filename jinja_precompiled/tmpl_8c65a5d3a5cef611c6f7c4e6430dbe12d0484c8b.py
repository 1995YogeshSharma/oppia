from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/TopicUpdateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to build changes to a topic. These changes may\n * then be used by other services, such as a backend API service to update the\n * topic in the backend. This service also registers all changes with the\n * undo/redo service.\n */\n\n// These should match the constants defined in core.domain.topic_domain.\n\noppia.constant(\'CMD_ADD_SUBTOPIC\', \'add_subtopic\');\noppia.constant(\'CMD_DELETE_SUBTOPIC\', \'delete_subtopic\');\noppia.constant(\'CMD_ADD_UNCATEGORIZED_SKILL_ID\', \'add_uncategorized_skill_id\');\noppia.constant(\n  \'CMD_REMOVE_UNCATEGORIZED_SKILL_ID\', \'remove_uncategorized_skill_id\');\noppia.constant(\'CMD_MOVE_SKILL_ID_TO_SUBTOPIC\', \'move_skill_id_to_subtopic\');\noppia.constant(\n  \'CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC\', \'remove_skill_id_from_subtopic\');\n\noppia.constant(\'CMD_UPDATE_TOPIC_PROPERTY\', \'update_topic_property\');\noppia.constant(\'CMD_UPDATE_SUBTOPIC_PROPERTY\', \'update_subtopic_property\');\noppia.constant(\n  \'CMD_UPDATE_SUBTOPIC_PAGE_PROPERTY\', \'update_subtopic_page_property\');\n\noppia.constant(\'TOPIC_PROPERTY_NAME\', \'name\');\noppia.constant(\'TOPIC_PROPERTY_DESCRIPTION\', \'description\');\noppia.constant(\'TOPIC_PROPERTY_CANONICAL_STORY_IDS\', \'canonical_story_ids\');\noppia.constant(\'TOPIC_PROPERTY_ADDITIONAL_STORY_IDS\', \'additional_story_ids\');\noppia.constant(\'TOPIC_PROPERTY_LANGUAGE_CODE\', \'language_code\');\n\noppia.constant(\'SUBTOPIC_PROPERTY_TITLE\', \'title\');\n\noppia.constant(\'SUBTOPIC_PAGE_PROPERTY_HTML_DATA\', \'html_data\');\n\noppia.factory(\'TopicUpdateService\', [\n  \'ChangeObjectFactory\', \'UndoRedoService\',\n  \'CMD_ADD_SUBTOPIC\', \'CMD_DELETE_SUBTOPIC\',\n  \'CMD_ADD_UNCATEGORIZED_SKILL_ID\', \'CMD_REMOVE_UNCATEGORIZED_SKILL_ID\',\n  \'CMD_MOVE_SKILL_ID_TO_SUBTOPIC\', \'CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC\',\n  \'CMD_UPDATE_TOPIC_PROPERTY\', \'CMD_UPDATE_SUBTOPIC_PROPERTY\',\n  \'CMD_UPDATE_SUBTOPIC_PAGE_PROPERTY\', \'TOPIC_PROPERTY_NAME\',\n  \'TOPIC_PROPERTY_DESCRIPTION\', \'TOPIC_PROPERTY_CANONICAL_STORY_IDS\',\n  \'TOPIC_PROPERTY_ADDITIONAL_STORY_IDS\', \'TOPIC_PROPERTY_LANGUAGE_CODE\',\n  \'SUBTOPIC_PROPERTY_TITLE\', \'SUBTOPIC_PAGE_PROPERTY_HTML_DATA\', function(\n      ChangeObjectFactory, UndoRedoService,\n      CMD_ADD_SUBTOPIC, CMD_DELETE_SUBTOPIC,\n      CMD_ADD_UNCATEGORIZED_SKILL_ID, CMD_REMOVE_UNCATEGORIZED_SKILL_ID,\n      CMD_MOVE_SKILL_ID_TO_SUBTOPIC, CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC,\n      CMD_UPDATE_TOPIC_PROPERTY, CMD_UPDATE_SUBTOPIC_PROPERTY,\n      CMD_UPDATE_SUBTOPIC_PAGE_PROPERTY, TOPIC_PROPERTY_NAME,\n      TOPIC_PROPERTY_DESCRIPTION, TOPIC_PROPERTY_CANONICAL_STORY_IDS,\n      TOPIC_PROPERTY_ADDITIONAL_STORY_IDS, TOPIC_PROPERTY_LANGUAGE_CODE,\n      SUBTOPIC_PROPERTY_TITLE, SUBTOPIC_PAGE_PROPERTY_HTML_DATA) {\n    // Creates a change using an apply function, reverse function, a change\n    // command and related parameters. The change is applied to a given\n    // topic.\n    // entity can be a topic object or a subtopic page object.\n    var _applyChange = function(entity, command, params, apply, reverse) {\n      var changeDict = angular.copy(params);\n      changeDict.cmd = command;\n      var changeObj = ChangeObjectFactory.create(changeDict, apply, reverse);\n      UndoRedoService.applyChange(changeObj, entity);\n    };\n\n    var _getParameterFromChangeDict = function(changeDict, paramName) {\n      return changeDict[paramName];\n    };\n\n    // Applies a topic property change, specifically. See _applyChange()\n    // for details on the other behavior of this function.\n    var _applyTopicPropertyChange = function(\n        topic, propertyName, newValue, oldValue, apply, reverse) {\n      _applyChange(topic, CMD_UPDATE_TOPIC_PROPERTY, {\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue),\n        change_affects_subtopic_page: false\n      }, apply, reverse);\n    };\n\n    var _applySubtopicPropertyChange = function(\n        topic, propertyName, subtopicId, newValue, oldValue, apply, reverse) {\n      _applyChange(topic, CMD_UPDATE_SUBTOPIC_PROPERTY, {\n        subtopic_id: subtopicId,\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue),\n        change_affects_subtopic_page: false\n      }, apply, reverse);\n    };\n\n    var _applySubtopicPagePropertyChange = function(\n        subtopicPage, propertyName, subtopicId, newValue, oldValue, apply,\n        reverse) {\n      _applyChange(subtopicPage, CMD_UPDATE_SUBTOPIC_PAGE_PROPERTY, {\n        subtopic_id: subtopicId,\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue),\n        change_affects_subtopic_page: true\n      }, apply, reverse);\n    };\n\n    var _getNewPropertyValueFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'new_value\');\n    };\n\n    var _getSubtopicIdFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'subtopic_id\');\n    };\n\n    // These functions are associated with updates available in\n    // core.domain.topic_services.apply_change_list.\n    return {\n      /**\n       * Changes the name of a topic and records the change in the\n       * undo/redo service.\n       */\n      setTopicName: function(topic, name) {\n        var oldName = angular.copy(topic.getName());\n        _applyTopicPropertyChange(\n          topic, TOPIC_PROPERTY_NAME, name, oldName,\n          function(changeDict, topic) {\n            // Apply\n            var name = _getNewPropertyValueFromChangeDict(changeDict);\n            topic.setName(name);\n          }, function(changeDict, topic) {\n            // Undo.\n            topic.setName(oldName);\n          });\n      },\n\n      /**\n       * Changes the description of a topic and records the change in the\n       * undo/redo service.\n       */\n      setTopicDescription: function(topic, description) {\n        var oldDescription = angular.copy(topic.getDescription());\n        _applyTopicPropertyChange(\n          topic, TOPIC_PROPERTY_DESCRIPTION, description, oldDescription,\n          function(changeDict, topic) {\n            // Apply\n            var description = _getNewPropertyValueFromChangeDict(changeDict);\n            topic.setDescription(description);\n          }, function(changeDict, topic) {\n            // Undo.\n            topic.setDescription(oldDescription);\n          });\n      },\n\n      /**\n       * Changes the language code of a topic and records the change in\n       * the undo/redo service.\n       */\n      setTopicLanguageCode: function(topic, languageCode) {\n        var oldLanguageCode = angular.copy(topic.getLanguageCode());\n        _applyTopicPropertyChange(\n          topic, TOPIC_PROPERTY_LANGUAGE_CODE, languageCode,\n          oldLanguageCode,\n          function(changeDict, topic) {\n            // Apply.\n            var languageCode = _getNewPropertyValueFromChangeDict(changeDict);\n            topic.setLanguageCode(languageCode);\n          }, function(changeDict, topic) {\n            // Undo.\n            topic.setLanguageCode(oldLanguageCode);\n          });\n      },\n\n      /**\n       * Creates a subtopic and adds it to the topic and records the change in\n       * the undo/redo service.\n       */\n      addSubtopic: function(topic, title) {\n        var nextSubtopicId = topic.getNextSubtopicId();\n        _applyChange(topic, CMD_ADD_SUBTOPIC, {\n          subtopic_id: nextSubtopicId,\n          title: title,\n          change_affects_subtopic_page: false\n        }, function(changeDict, topic) {\n          // Apply.\n          topic.addSubtopic(title);\n        }, function(changeDict, topic) {\n          // Undo.\n          var subtopicId = _getSubtopicIdFromChangeDict(changeDict);\n          topic.deleteSubtopic(subtopicId);\n        });\n      },\n\n      /**\n       * @param {Topic} topic - The topic object to be edited.\n       * @param {number} subtopicId - The id of the subtopic to delete.\n       */\n      deleteSubtopic: function(topic, subtopicId) {\n        var subtopic = topic.getSubtopicById(subtopicId);\n        if (!subtopic) {\n          throw Error(\'Subtopic doesn\\\'t exist\');\n        }\n        var newlyCreated = false;\n        var changeList = UndoRedoService.getCommittableChangeList();\n        for (var i = 0; i < changeList.length; i++) {\n          if (changeList[i].cmd === \'add_subtopic\' &&\n              changeList[i].subtopic_id === subtopicId) {\n            newlyCreated = true;\n          }\n        }\n        if (newlyCreated) {\n          // Get the current change list.\n          var currentChangeList = UndoRedoService.getChangeList();\n          var indicesToDelete = [];\n          // Loop over the current changelist and handle all the cases where\n          // a skill moved into the subtopic or moved out of it.\n          for (var i = 0; i < currentChangeList.length; i++) {\n            var changeDict =\n              currentChangeList[i].getBackendChangeObject();\n            if (changeDict.cmd === CMD_MOVE_SKILL_ID_TO_SUBTOPIC) {\n              // If a skill was moved into the subtopic, then that change is\n              // modified to have the skill move into the uncategorized section\n              // since after this delete, it would be as if this subtopic never\n              // existed.\n              if (changeDict.new_subtopic_id === subtopicId) {\n                // If the origin of the move operation was the uncategorized\n                // section itself, delete that change, since no change is to be\n                // done following the previous comment.\n                if (changeDict.old_subtopic_id === null) {\n                  indicesToDelete.push(i);\n                } else {\n                  // Change the move operation to the deleted subtopic to a\n                  // remove operation, to move that skill into the uncategorized\n                  // section from its origin.\n                  changeDict.cmd = CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC;\n                  changeDict.subtopic_id = changeDict.old_subtopic_id;\n                  delete changeDict.old_subtopic_id;\n                  delete changeDict.new_subtopic_id;\n                }\n              } else if (changeDict.old_subtopic_id === subtopicId) {\n                // Any operation where a skill was moved out of this subtopic\n                // would now be equivalent to a move out from the uncategorized\n                // section, as a newly created subtopic wouldn\'t have any skills\n                // of its own initially, and any skills moved into it have been\n                // shifted to the uncategorized section.\n                changeDict.old_subtopic_id = null;\n              }\n            } else if (changeDict.cmd === CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC) {\n              // If a skill was removed from this subtopic, then that change\n              // should be deleted, since all skills moved into the subtopic\n              // have already been moved into the uncategorized section.\n              if (changeDict.subtopic_id === subtopicId) {\n                indicesToDelete.push(i);\n              }\n            }\n            currentChangeList[i].setBackendChangeObject(changeDict);\n          }\n          for (var i = 0; i < currentChangeList.length; i++) {\n            var backendChangeDict =\n              currentChangeList[i].getBackendChangeObject();\n            if (backendChangeDict.hasOwnProperty(\'subtopic_id\')) {\n              if (backendChangeDict.subtopic_id === subtopicId) {\n                // The indices in the change list corresponding to changes to\n                // the currently deleted and newly created subtopic are to be\n                // removed from the list.\n                indicesToDelete.push(i);\n                continue;\n              }\n              // When a newly created subtopic is deleted, the subtopics created\n              // after it would have their id reduced by 1.\n              if (backendChangeDict.subtopic_id > subtopicId) {\n                backendChangeDict.subtopic_id--;\n              }\n            }\n            if (backendChangeDict.hasOwnProperty(\'old_subtopic_id\')) {\n              if (backendChangeDict.old_subtopic_id > subtopicId) {\n                backendChangeDict.old_subtopic_id--;\n              }\n            }\n            if (backendChangeDict.hasOwnProperty(\'new_subtopic_id\')) {\n              if (backendChangeDict.new_subtopic_id > subtopicId) {\n                backendChangeDict.new_subtopic_id--;\n              }\n            }\n            // Apply the above id reduction changes to the backend change.\n            currentChangeList[i].setBackendChangeObject(backendChangeDict);\n          }\n          // The new change list is found by deleting the above found elements.\n          var newChangeList = currentChangeList.filter(function(change) {\n            var changeObjectIndex = currentChangeList.indexOf(change);\n            // Return all elements that were not deleted.\n            return (indicesToDelete.indexOf(changeObjectIndex) === -1);\n          });\n          // The new changelist is set.\n          UndoRedoService.setChangeList(newChangeList);\n          topic.deleteSubtopic(subtopicId, newlyCreated);\n          return;\n        }\n        _applyChange(topic, CMD_DELETE_SUBTOPIC, {\n          subtopic_id: subtopicId,\n          change_affects_subtopic_page: false\n        }, function(changeDict, topic) {\n          // Apply.\n          topic.deleteSubtopic(subtopicId, newlyCreated);\n        }, function(changeDict, topic) {\n          // Undo.\n          throw Error(\'A deleted subtopic cannot be restored\');\n        });\n      },\n\n      /**\n       * Moves a skill to a subtopic from either another subtopic or\n       * uncategorized skills and records the change in the undo/redo service.\n       */\n      moveSkillToSubtopic: function(\n          topic, oldSubtopicId, newSubtopicId, skillSummary) {\n        if (newSubtopicId === null) {\n          throw Error(\'New subtopic cannot be null\');\n        }\n        if (oldSubtopicId !== null) {\n          var oldSubtopic = topic.getSubtopicById(oldSubtopicId);\n        }\n        var newSubtopic = topic.getSubtopicById(newSubtopicId);\n        _applyChange(topic, CMD_MOVE_SKILL_ID_TO_SUBTOPIC, {\n          old_subtopic_id: oldSubtopicId,\n          new_subtopic_id: newSubtopicId,\n          skill_id: skillSummary.getId(),\n          change_affects_subtopic_page: false\n        }, function(changeDict, topic) {\n          // Apply.\n          if (oldSubtopicId === null) {\n            topic.removeUncategorizedSkill(skillSummary.getId());\n          } else {\n            oldSubtopic.removeSkill(skillSummary.getId());\n          }\n          newSubtopic.addSkill(\n            skillSummary.getId(), skillSummary.getDescription());\n        }, function(changeDict, topic) {\n          // Undo.\n          newSubtopic.removeSkill(skillSummary.getId());\n          if (oldSubtopicId === null) {\n            topic.addUncategorizedSkill(\n              skillSummary.getId(), skillSummary.getDescription());\n          } else {\n            oldSubtopic.addSkill(\n              skillSummary.getId(), skillSummary.getDescription());\n          }\n        });\n      },\n\n      /**\n       * Moves a skill from a subtopic to uncategorized skills\n       * and records the change in the undo/redo service.\n       */\n      removeSkillFromSubtopic: function(topic, subtopicId, skillSummary) {\n        var subtopic = topic.getSubtopicById(subtopicId);\n        _applyChange(topic, CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC, {\n          subtopic_id: subtopicId,\n          skill_id: skillSummary.getId(),\n          change_affects_subtopic_page: false\n        }, function(changeDict, topic) {\n          // Apply.\n          subtopic.removeSkill(skillSummary.getId());\n          if (!topic.hasUncategorizedSkill(skillSummary.getId())) {\n            topic.addUncategorizedSkill(\n              skillSummary.getId(), skillSummary.getDescription());\n          }\n        }, function(changeDict, topic) {\n          // Undo.\n          subtopic.addSkill(\n            skillSummary.getId(), skillSummary.getDescription());\n          topic.removeUncategorizedSkill(skillSummary.getId());\n        });\n      },\n\n      /**\n       * Changes the title of a subtopic and records the change in\n       * the undo/redo service.\n       */\n      setSubtopicTitle: function(topic, subtopicId, title) {\n        var subtopic = topic.getSubtopicById(subtopicId);\n        if (!subtopic) {\n          throw Error(\'Subtopic doesn\\\'t exist\');\n        }\n        var oldTitle = angular.copy(subtopic.getTitle());\n        _applySubtopicPropertyChange(\n          topic, SUBTOPIC_PROPERTY_TITLE, subtopicId, title, oldTitle,\n          function(changeDict, topic) {\n            // Apply.\n            var title = _getNewPropertyValueFromChangeDict(changeDict);\n            subtopic.setTitle(title);\n          }, function(changeDict, topic) {\n            // Undo.\n            subtopic.setTitle(oldTitle);\n          });\n      },\n\n      /**\n       * Changes the html data of a subtopic page and records the change in\n       * the undo/redo service.\n       */\n      setSubtopicPageHtmlData: function(subtopicPage, subtopicId, htmlData) {\n        var oldHtmlData = angular.copy(subtopicPage.getHtmlData());\n        _applySubtopicPagePropertyChange(\n          subtopicPage, SUBTOPIC_PAGE_PROPERTY_HTML_DATA, subtopicId, htmlData,\n          oldHtmlData, function(changeDict, subtopicPage) {\n            // Apply.\n            subtopicPage.setHtmlData(htmlData);\n          }, function(changeDict, subtopicPage) {\n            // Undo.\n            subtopicPage.setHtmlData(oldHtmlData);\n          });\n      },\n\n      /**\n       * Adds an additional story id to a topic and records the change\n       * in the undo/redo service.\n       */\n      addAdditionalStoryId: function(topic, storyId) {\n        var oldAdditionalStoryIdsList = angular.copy(\n          topic.getAdditionalStoryIds());\n        var newAdditionalStoryIdsList = angular.copy(oldAdditionalStoryIdsList);\n        newAdditionalStoryIdsList.push(storyId);\n        _applyTopicPropertyChange(\n          topic, TOPIC_PROPERTY_ADDITIONAL_STORY_IDS, newAdditionalStoryIdsList,\n          oldAdditionalStoryIdsList,\n          function(changeDict, topic) {\n            // Apply.\n            topic.addAdditionalStoryId(storyId);\n          }, function(changeDict, topic) {\n            // Undo.\n            topic.removeAdditionalStoryId(storyId);\n          });\n      },\n\n      /**\n       * Removes an additional story id from a topic and records the change\n       * in the undo/redo service.\n       */\n      removeAdditionalStoryId: function(topic, storyId) {\n        var oldAdditionalStoryIdsList = angular.copy(\n          topic.getAdditionalStoryIds());\n        var newAdditionalStoryIdsList = angular.copy(oldAdditionalStoryIdsList);\n        var index = newAdditionalStoryIdsList.indexOf(storyId);\n        if (index === -1) {\n          throw Error(\n            \'Given story id is not present in additional stories of topic.\');\n        }\n        newAdditionalStoryIdsList.splice(index, 1);\n        _applyTopicPropertyChange(\n          topic, TOPIC_PROPERTY_ADDITIONAL_STORY_IDS, newAdditionalStoryIdsList,\n          oldAdditionalStoryIdsList,\n          function(changeDict, topic) {\n            // Apply.\n            topic.removeAdditionalStoryId(storyId);\n          }, function(changeDict, topic) {\n            // Undo.\n            topic.addAdditionalStoryId(storyId);\n          });\n      },\n\n      /**\n       * Adds a canonical story id to a topic and records the change\n       * in the undo/redo service.\n       */\n      addCanonicalStoryId: function(topic, storyId) {\n        var oldCanonicalStoryIdsList = angular.copy(\n          topic.getCanonicalStoryIds());\n        newCanonicalStoryIdsList = angular.copy(oldCanonicalStoryIdsList);\n        newCanonicalStoryIdsList.push(storyId);\n        _applyTopicPropertyChange(\n          topic, TOPIC_PROPERTY_CANONICAL_STORY_IDS, newCanonicalStoryIdsList,\n          oldCanonicalStoryIdsList,\n          function(changeDict, topic) {\n            // Apply.\n            topic.addCanonicalStoryId(storyId);\n          }, function(changeDict, topic) {\n            // Undo.\n            topic.removeCanonicalStoryId(storyId);\n          });\n      },\n\n      /**\n       * Removes an canonical story id from a topic and records the change\n       * in the undo/redo service.\n       */\n      removeCanonicalStoryId: function(topic, storyId) {\n        var oldCanonicalStoryIdsList = angular.copy(\n          topic.getCanonicalStoryIds());\n        var newCanonicalStoryIdsList = angular.copy(oldCanonicalStoryIdsList);\n        var index = newCanonicalStoryIdsList.indexOf(storyId);\n        if (index === -1) {\n          throw Error(\n            \'Given story id is not present in additional stories of topic.\');\n        }\n        newCanonicalStoryIdsList.splice(index, 1);\n        _applyTopicPropertyChange(\n          topic, TOPIC_PROPERTY_CANONICAL_STORY_IDS, newCanonicalStoryIdsList,\n          oldCanonicalStoryIdsList,\n          function(changeDict, topic) {\n            // Apply.\n            topic.removeCanonicalStoryId(storyId);\n          }, function(changeDict, topic) {\n            // Undo.\n            topic.addCanonicalStoryId(storyId);\n          });\n      },\n\n      /**\n       * Adds an uncategorized skill to a topic and records the change\n       * in the undo/redo service.\n       */\n      addUncategorizedSkill: function(topic, skillSummary) {\n        _applyChange(topic, CMD_ADD_UNCATEGORIZED_SKILL_ID, {\n          new_uncategorized_skill_id: skillSummary.getId(),\n          change_affects_subtopic_page: false\n        }, function(changeDict, topic) {\n          // Apply.\n          var newSkillId = _getParameterFromChangeDict(\n            changeDict, \'new_uncategorized_skill_id\');\n          topic.addUncategorizedSkill(\n            newSkillId, skillSummary.getDescription());\n        }, function(changeDict, topic) {\n          // Undo.\n          var newSkillId = _getParameterFromChangeDict(\n            changeDict, \'new_uncategorized_skill_id\');\n          topic.removeUncategorizedSkill(newSkillId);\n        });\n      },\n\n      /**\n       * Removes an uncategorized skill from a topic and records the change\n       * in the undo/redo service.\n       */\n      removeUncategorizedSkill: function(topic, skillSummary) {\n        _applyChange(topic, CMD_REMOVE_UNCATEGORIZED_SKILL_ID, {\n          uncategorized_skill_id: skillSummary.getId(),\n          change_affects_subtopic_page: false\n        }, function(changeDict, topic) {\n          // Apply.\n          var newSkillId = _getParameterFromChangeDict(\n            changeDict, \'uncategorized_skill_id\');\n          topic.removeUncategorizedSkill(newSkillId);\n        }, function(changeDict, topic) {\n          // Undo.\n          var newSkillId = _getParameterFromChangeDict(\n            changeDict, \'uncategorized_skill_id\');\n          topic.addUncategorizedSkill(\n            newSkillId, skillSummary.getDescription());\n        });\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/StatisticsTab.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the exploration statistics tab in the\n * exploration editor.\n */\n\noppia.constant(\'IMPROVE_TYPE_INCOMPLETE\', \'incomplete\');\n\noppia.controller(\'StatisticsTab\', [\n  \'$scope\', \'$http\', \'$uibModal\', \'AlertsService\', \'ExplorationStatesService\',\n  \'ExplorationDataService\', \'ComputeGraphService\', \'DateTimeFormatService\',\n  \'StatesObjectFactory\', \'StateImprovementSuggestionService\',\n  \'ReadOnlyExplorationBackendApiService\', \'UrlInterpolationService\',\n  \'RouterService\', \'StateRulesStatsService\', \'IMPROVE_TYPE_INCOMPLETE\',\n  function(\n      $scope, $http, $uibModal, AlertsService, ExplorationStatesService,\n      ExplorationDataService, ComputeGraphService, DateTimeFormatService,\n      StatesObjectFactory, StateImprovementSuggestionService,\n      ReadOnlyExplorationBackendApiService, UrlInterpolationService,\n      RouterService, StateRulesStatsService, IMPROVE_TYPE_INCOMPLETE) {\n    $scope.COMPLETION_RATE_CHART_OPTIONS = {\n      chartAreaWidth: 300,\n      colors: [\'green\', \'firebrick\'],\n      height: 100,\n      legendPosition: \'right\',\n      width: 500\n    };\n    $scope.COMPLETION_RATE_PIE_CHART_OPTIONS = {\n      title: \'\',\n      left: 230,\n      pieHole: 0.6,\n      pieSliceTextStyleColor: \'black\',\n      pieSliceBorderColor: \'black\',\n      chartAreaWidth: 500,\n      colors: [\'#008808\', \'#d8d8d8\'],\n      height: 300,\n      legendPosition: \'right\',\n      width: 600\n    };\n    var _EXPLORATION_STATS_VERSION_ALL = \'all\';\n    $scope.currentVersion = _EXPLORATION_STATS_VERSION_ALL;\n\n    $scope.getLocaleAbbreviatedDatetimeString = function(millisSinceEpoch) {\n      return DateTimeFormatService.getLocaleAbbreviatedDatetimeString(\n        millisSinceEpoch);\n    };\n\n    $scope.hasTabLoaded = false;\n    $scope.$on(\'refreshStatisticsTab\', function() {\n      $scope.refreshExplorationStatistics(_EXPLORATION_STATS_VERSION_ALL);\n    });\n\n    $scope.explorationHasBeenVisited = false;\n    $scope.refreshExplorationStatistics = function(version) {\n      $scope.explorationStatisticsUrl = (\n        \'/createhandler/statistics/\' + ExplorationDataService.explorationId);\n\n      $http.get($scope.explorationStatisticsUrl).then(function(statsResponse) {\n        var data = statsResponse.data;\n        var numStarts = data.num_starts;\n        var numActualStarts = data.num_actual_starts;\n        var numCompletions = data.num_completions;\n        $scope.stateStats = data.state_stats_mapping;\n\n        ReadOnlyExplorationBackendApiService.loadLatestExploration(\n          ExplorationDataService.explorationId).then(function(response) {\n          var statesDict = response.exploration.states;\n          var states = StatesObjectFactory.createFromBackendDict(statesDict);\n          var initStateName = response.exploration.init_state_name;\n\n          $scope.statsGraphData = ComputeGraphService.compute(\n            initStateName, states);\n          var improvements = (\n            StateImprovementSuggestionService.getStateImprovements(\n              states, $scope.stateStats));\n          $scope.highlightStates = {};\n          improvements.forEach(function(impItem) {\n            // TODO(bhenning): This is the feedback for improvement types\n            // and should be included with the definitions of the\n            // improvement types.\n            if (impItem.type === IMPROVE_TYPE_INCOMPLETE) {\n              $scope.highlightStates[impItem.stateName] = (\n                \'May be confusing\');\n            }\n          });\n        });\n\n        if (numActualStarts > 0) {\n          $scope.explorationHasBeenVisited = true;\n        }\n\n        $scope.numPassersby = numStarts - numActualStarts;\n        $scope.pieChartData = [\n          [\'Type\', \'Number\'],\n          [\'Completions\', numCompletions],\n          [\'Non-Completions\', numActualStarts - numCompletions]\n        ];\n      });\n    };\n\n    $scope.onClickStateInStatsGraph = function(stateName) {\n      $scope.showStateStatsModal(stateName, $scope.highlightStates[stateName]);\n    };\n\n    $scope.showStateStatsModal = function(stateName, improvementType) {\n      AlertsService.clearWarnings();\n\n      StateRulesStatsService.computeStateRulesStats(\n        ExplorationStatesService.getState(stateName)\n      ).then(function(stateRulesStats) {\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_editor/statistics_tab/\' +\n            \'state_stats_modal_directive.html\'),\n          backdrop: true,\n          resolve: {\n            stateName: function() {\n              return stateName;\n            },\n            stateStats: function() {\n              return $scope.stateStats[stateName];\n            },\n            improvementType: function() {\n              return improvementType;\n            },\n            visualizationsInfo: function() {\n              return stateRulesStats.visualizations_info;\n            }\n          },\n          controller: [\n            \'$scope\', \'$uibModalInstance\', \'$filter\', \'$injector\', \'stateName\',\n            \'stateStats\', \'improvementType\', \'visualizationsInfo\',\n            \'HtmlEscaperService\', \'AngularNameService\',\n            \'AnswerClassificationService\',\n            function(\n                $scope, $uibModalInstance, $filter, $injector, stateName,\n                stateStats, improvementType, visualizationsInfo,\n                HtmlEscaperService, AngularNameService,\n                AnswerClassificationService) {\n              var COMPLETION_RATE_PIE_CHART_OPTIONS = {\n                left: 20,\n                pieHole: 0.6,\n                pieSliceTextStyleColor: \'black\',\n                pieSliceBorderColor: \'black\',\n                chartAreaWidth: 240,\n                colors: [\'#d8d8d8\', \'#008808\', \'blue\'],\n                height: 270,\n                legendPosition: \'right\',\n                width: 240\n              };\n\n              var title1 = \'Answer feedback statistics\';\n              $scope.COMPLETION_RATE_PIE_CHART_OPTIONS1 = angular.copy(\n                COMPLETION_RATE_PIE_CHART_OPTIONS);\n              $scope.COMPLETION_RATE_PIE_CHART_OPTIONS1.title = title1;\n\n              var title2 = \'Solution usage statistics\';\n              $scope.COMPLETION_RATE_PIE_CHART_OPTIONS2 = angular.copy(\n                COMPLETION_RATE_PIE_CHART_OPTIONS);\n              $scope.COMPLETION_RATE_PIE_CHART_OPTIONS2.title = title2;\n\n              $scope.stateName = stateName;\n              $scope.stateStats = stateStats;\n              $scope.improvementType = improvementType;\n\n              var usefulFeedbackCount = (\n                $scope.stateStats.useful_feedback_count);\n              var totalAnswersCount = (\n                $scope.stateStats.total_answers_count);\n              if (totalAnswersCount > 0) {\n                $scope.hasExplorationBeenAnswered = true;\n              }\n              $scope.pieChartData1 = [\n                [\'Type\', \'Number\'],\n                [\'Default feedback\', totalAnswersCount - usefulFeedbackCount],\n                [\'Specific feedback\', usefulFeedbackCount],\n              ];\n\n              var numTimesSolutionViewed = (\n                $scope.stateStats.num_times_solution_viewed);\n              $scope.pieChartData2 = [\n                [\'Type\', \'Number\'],\n                [\'Solutions used to answer\', numTimesSolutionViewed],\n                [\'Solutions not used\', totalAnswersCount - (\n                  numTimesSolutionViewed)]\n              ];\n\n              var _getVisualizationsHtml = function() {\n                var htmlSnippets = visualizationsInfo.map(function(vizInfo) {\n                  var escapedData =\n                    HtmlEscaperService.objToEscapedJson(vizInfo.data);\n                  var escapedOptions =\n                    HtmlEscaperService.objToEscapedJson(vizInfo.options);\n\n                  var el = $(\n                    \'<oppia-visualization-\' +\n                    $filter(\'camelCaseToHyphens\')(vizInfo.id) + \'/>\');\n                  el.attr(\'escaped-data\', escapedData);\n                  el.attr(\'escaped-options\', escapedOptions);\n                  el.attr(\n                    \'addressed-info-is-supported\',\n                    vizInfo.addressed_info_is_supported);\n                  return el.get(0).outerHTML;\n                });\n\n                return htmlSnippets.join(\'\');\n              };\n\n              $scope.visualizationsHtml = _getVisualizationsHtml();\n\n              $scope.cancel = function() {\n                $uibModalInstance.dismiss(\'cancel\');\n                AlertsService.clearWarnings();\n              };\n\n              $scope.navigateToStateEditor = function() {\n                $scope.cancel();\n                RouterService.navigateToMainTab(stateName);\n              };\n            }\n          ]\n        });\n      });\n    };\n  }\n]);'

blocks = {}
debug_info = ''
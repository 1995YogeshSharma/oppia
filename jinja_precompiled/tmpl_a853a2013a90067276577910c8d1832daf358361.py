from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/GuestCollectionProgressServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for GuestCollectionProgressService.\n */\n\ndescribe(\'Guest collection progress service\', function() {\n  var GuestCollectionProgressService = null;\n  var CollectionObjectFactory = null;\n  var CollectionNodeObjectFactory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    GuestCollectionProgressService = $injector.get(\n      \'GuestCollectionProgressService\');\n    CollectionObjectFactory = $injector.get(\'CollectionObjectFactory\');\n    CollectionNodeObjectFactory = $injector.get(\'CollectionNodeObjectFactory\');\n\n    _collectionId0 = \'sample_collection_id0\';\n    _collectionId1 = \'sample_collection_id1\';\n    _expId0 = \'exp_id0\';\n    _expTitle0 = \'Exp 0\';\n    _expId1 = \'exp_id1\';\n    _expTitle1 = \'Exp 1\';\n    _expId2 = \'exp_id2\';\n    _expTitle2 = \'Exp 2\';\n    _collection0 = _createCollection(_collectionId0, \'a title\');\n    _collection0.addCollectionNode(\n      CollectionNodeObjectFactory.createFromExplorationId(_expId0));\n  }));\n\n  afterEach(function() {\n    // Reset localStorage to ensure state is not shared between the tests.\n    window.localStorage.clear();\n  });\n\n  var _createCollection = function(collectionId, title) {\n    var collectionBackendObject = {\n      id: collectionId,\n      title: title,\n      objective: \'an objective\',\n      category: \'a category\',\n      version: \'1\',\n      nodes: []\n    };\n    return CollectionObjectFactory.create(collectionBackendObject);\n  };\n\n  var _createCollectionNode = function(expId, expTitle) {\n    var collectionNodeBackendObject = {\n      exploration_id: expId,\n      exploration_summary: {\n        title: expTitle,\n        category: \'exp category\',\n        objective: \'exp objective\'\n      }\n    };\n    return CollectionNodeObjectFactory.create(collectionNodeBackendObject);\n  };\n\n\n  // TODO(bhenning): Find a way to de-duplicate & share this with\n  // CollectionLinearizerServiceSpec.\n  // The linear order of explorations is: exp_id0 -> exp_id1 -> exp_id2\n  var _createLinearCollection = function(collectionId) {\n    var collection = _createCollection(collectionId, \'Collection title\');\n\n    var collectionNode0 = _createCollectionNode(_expId0, _expTitle0);\n    var collectionNode1 = _createCollectionNode(_expId1, _expTitle1);\n    var collectionNode2 = _createCollectionNode(_expId2, _expTitle2);\n\n    collection.addCollectionNode(collectionNode0);\n    collection.addCollectionNode(collectionNode1);\n    collection.addCollectionNode(collectionNode2);\n    return collection;\n  };\n\n  describe(\'hasCompletedSomeExploration\', function() {\n    it(\'should initially not have any stored progress\', function() {\n      var hasProgress = (\n        GuestCollectionProgressService.hasCompletedSomeExploration(\n          _collectionId0));\n      expect(hasProgress).toBe(false);\n    });\n\n    it(\'should have progress after recording an exploration\', function() {\n      GuestCollectionProgressService.recordExplorationCompletedInCollection(\n        _collectionId0, _expId0);\n      var hasProgress = (\n        GuestCollectionProgressService.hasCompletedSomeExploration(\n          _collectionId0));\n      expect(hasProgress).toBe(true);\n    });\n\n    it(\'should not have progress after exp completed for another collection\',\n      function() {\n        GuestCollectionProgressService.recordExplorationCompletedInCollection(\n          _collectionId1, _expId0);\n        var hasProgress = (\n          GuestCollectionProgressService.hasCompletedSomeExploration(\n            _collectionId0));\n        expect(hasProgress).toBe(false);\n      }\n    );\n  });\n\n  describe(\'getCompletedExplorationIds\', function() {\n    it(\'should initially provide no completed exploration ids\', function() {\n      var completedIds = (\n        GuestCollectionProgressService.getCompletedExplorationIds(\n          _collection0));\n      expect(completedIds).toEqual([]);\n    });\n\n    it(\'should provide completed exploration ID after completion\', function() {\n      GuestCollectionProgressService.recordExplorationCompletedInCollection(\n        _collectionId0, _expId0);\n      var completedIds = (\n        GuestCollectionProgressService.getCompletedExplorationIds(\n          _collection0));\n      expect(completedIds).toEqual([_expId0]);\n    });\n\n    it(\'should not provide completed ID for exp not in collection\', function() {\n      GuestCollectionProgressService.recordExplorationCompletedInCollection(\n        _collectionId0, _expId1);\n      var completedIds = (\n        GuestCollectionProgressService.getCompletedExplorationIds(\n          _collection0));\n      expect(completedIds).toEqual([]);\n    });\n\n    it(\'should provide multiple completed exploration IDs\', function() {\n      var collection = _createLinearCollection(_collectionId1);\n      GuestCollectionProgressService.recordExplorationCompletedInCollection(\n        _collectionId1, _expId0);\n      GuestCollectionProgressService.recordExplorationCompletedInCollection(\n        _collectionId1, _expId2);\n      var completedIds = (\n        GuestCollectionProgressService.getCompletedExplorationIds(collection));\n      expect(completedIds).toEqual([_expId0, _expId2]);\n    });\n  });\n\n  describe(\'getNextExplorationId\', function() {\n    it(\'should provide the first exploration ID with no progress\', function() {\n      var collection = _createLinearCollection(_collectionId1);\n      var nextExplorationId = (\n        GuestCollectionProgressService.getNextExplorationId(collection, []));\n      expect(nextExplorationId).toEqual(_expId0);\n    });\n\n    it(\'should provide the third exp ID with first two exps done\', function() {\n      var collection = _createLinearCollection(_collectionId1);\n      var nextExplorationId = (\n        GuestCollectionProgressService.getNextExplorationId(\n          collection, [_expId0, _expId1]));\n\n      // First two explorations are completed, so return the third.\n      expect(nextExplorationId).toEqual(_expId2);\n    });\n\n    it(\'should return null for fully completed collection\', function() {\n      var collection = _createLinearCollection(_collectionId1);\n      var nextExplorationId = (\n        GuestCollectionProgressService.getNextExplorationId(\n          collection, [_expId0, _expId1, _expId2]));\n\n      // There are no explorations left to play.\n      expect(nextExplorationId).toEqual(null);\n    });\n  });\n});'

blocks = {}
debug_info = ''
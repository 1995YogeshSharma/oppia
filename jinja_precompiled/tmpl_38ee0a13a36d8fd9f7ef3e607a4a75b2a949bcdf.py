from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/EditableStoryBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for EditableStoryBackendApiService.\n */\n\ndescribe(\'Editable story backend API service\', function() {\n  var EditableStoryBackendApiService = null;\n  var sampleDataResults = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n  var UndoRedoService = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    EditableStoryBackendApiService = $injector.get(\n      \'EditableStoryBackendApiService\');\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n\n    // Sample story object returnable from the backend\n    sampleDataResults = {\n      story: {\n        id: \'storyId\',\n        title: \'Story title\',\n        description: \'Story description\',\n        notes: \'Notes\',\n        version: 1,\n        story_contents: {\n          initial_node_id: \'node_1\',\n          nodes: [{\n            id: \'node_1\',\n            prerequisite_skill_ids: [],\n            acquired_skill_ids: [],\n            destination_node_ids: [],\n            outline: \'Outline\',\n            exploration_id: null,\n            outline_is_finalized: false\n          }],\n          next_node_id: \'node_3\'\n        },\n        language_code: \'en\'\n      }\n    };\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully fetch an existing story from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\n        \'GET\', \'/story_editor_handler/data/topicId/storyId\').respond(\n        sampleDataResults);\n      EditableStoryBackendApiService.fetchStory(\'topicId\', \'storyId\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(sampleDataResults.story);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should successfully delete a story from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\n        \'DELETE\', \'/story_editor_handler/data/topicId/storyId\').respond(200);\n      EditableStoryBackendApiService.deleteStory(\'topicId\', \'storyId\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalled();\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\n        \'GET\', \'/story_editor_handler/data/topicId/2\').respond(\n        500, \'Error loading story 2.\');\n      EditableStoryBackendApiService.fetchStory(\'topicId\', \'2\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\'Error loading story 2.\');\n    }\n  );\n\n  it(\'should update a story after fetching it from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a story the first time should fetch it from the backend.\n      $httpBackend.expect(\n        \'GET\', \'/story_editor_handler/data/topicId/storyId\').respond(\n        sampleDataResults);\n\n      EditableStoryBackendApiService.fetchStory(\'topicId\', \'storyId\').then(\n        function(data) {\n          story = data;\n        });\n      $httpBackend.flush();\n\n      story.title = \'New Title\';\n      story.version = \'2\';\n      var storyWrapper = {\n        story: story\n      };\n\n      $httpBackend.expect(\n        \'PUT\', \'/story_editor_handler/data/topicId/storyId\').respond(\n        storyWrapper);\n\n      // Send a request to update story\n      EditableStoryBackendApiService.updateStory(\n        \'topicId\', story.id, story.version, \'Title is updated\', []\n      ).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(story);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the story to update doesn\\\'t exist\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a story the first time should fetch it from the backend.\n      $httpBackend.expect(\n        \'PUT\', \'/story_editor_handler/data/topicId/storyId_1\').respond(\n        404, \'Story with given id doesn\\\'t exist.\');\n\n      EditableStoryBackendApiService.updateStory(\n        \'topicId\', \'storyId_1\', \'1\', \'Update an invalid Story.\', []\n      ).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\n        \'Story with given id doesn\\\'t exist.\');\n    }\n  );\n});'

blocks = {}
debug_info = ''
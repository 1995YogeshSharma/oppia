from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/suggestion/SuggestionThreadObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of suggestion\n   thread domain objects.\n */\n\noppia.factory(\'SuggestionThreadObjectFactory\', [\n  \'SuggestionObjectFactory\', \'QuestionSuggestionObjectFactory\',\n  function(SuggestionObjectFactory, QuestionSuggestionObjectFactory) {\n    var SuggestionThread = function(\n        status, subject, summary, originalAuthorName, lastUpdated, messageCount,\n        threadId, suggestion) {\n      this.status = status;\n      this.subject = subject;\n      this.summary = summary;\n      this.originalAuthorName = originalAuthorName;\n      this.lastUpdated = lastUpdated;\n      this.messageCount = messageCount;\n      this.threadId = threadId;\n      this.suggestion = suggestion;\n      this.messages = [];\n    };\n\n    SuggestionThread.createFromBackendDicts = function(\n        suggestionThreadBackendDict, suggestionBackendDict) {\n      var suggestion;\n      if (suggestionBackendDict.suggestion_type === \'add_question\') {\n        suggestion = QuestionSuggestionObjectFactory.createFromBackendDict(\n          suggestionBackendDict);\n      } else if (suggestionBackendDict.suggestion_type ===\n          \'edit_exploration_state_content\') {\n        suggestion = SuggestionObjectFactory.createFromBackendDict(\n          suggestionBackendDict);\n      }\n      return new SuggestionThread(\n        suggestionThreadBackendDict.status, suggestionThreadBackendDict.subject,\n        suggestionThreadBackendDict.summary,\n        suggestionThreadBackendDict.original_author_username,\n        suggestionThreadBackendDict.last_updated,\n        suggestionThreadBackendDict.message_count,\n        suggestionThreadBackendDict.thread_id, suggestion);\n    };\n\n    SuggestionThread.prototype.setMessages = function(messages) {\n      this.messages = messages;\n    };\n\n    SuggestionThread.prototype.isSuggestionHandled = function() {\n      return this.suggestion.status !== \'review\';\n    };\n\n    SuggestionThread.prototype.getSuggestionStateName = function() {\n      return this.suggestion.stateName;\n    };\n\n    SuggestionThread.prototype.getSuggestionStatus = function() {\n      return this.suggestion.status;\n    };\n\n    SuggestionThread.prototype.getReplacementHtmlFromSuggestion = function() {\n      return this.suggestion.newValue.html;\n    };\n\n    SuggestionThread.prototype.isSuggestionThread = function() {\n      return true;\n    };\n\n    SuggestionThread.prototype.getSuggestion = function() {\n      return this.suggestion;\n    };\n\n    return SuggestionThread;\n  }\n]);'

blocks = {}
debug_info = ''
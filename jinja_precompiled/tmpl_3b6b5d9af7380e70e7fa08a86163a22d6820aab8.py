from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/StoryUpdateServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for Story update service.\n */\n\ndescribe(\'Story update service\', function() {\n  var StoryUpdateService = null;\n  var StoryObjectFactory = null;\n  var UndoRedoService = null;\n  var _sampleStory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    StoryUpdateService = $injector.get(\'StoryUpdateService\');\n    StoryObjectFactory = $injector.get(\'StoryObjectFactory\');\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n\n    var sampleStoryBackendObject = {\n      id: \'sample_story_id\',\n      title: \'Story title\',\n      description: \'Story description\',\n      notes: \'Story notes\',\n      version: 1,\n      story_contents: {\n        initial_node_id: \'node_2\',\n        nodes: [\n          {\n            id: \'node_1\',\n            prerequisite_skill_ids: [\'skill_1\'],\n            acquired_skill_ids: [\'skill_2\'],\n            destination_node_ids: [],\n            outline: \'Outline\',\n            exploration_id: null,\n            outline_is_finalized: false\n          }, {\n            id: \'node_2\',\n            prerequisite_skill_ids: [\'skill_3\'],\n            acquired_skill_ids: [\'skill_4\'],\n            destination_node_ids: [\'node_1\'],\n            outline: \'Outline 2\',\n            exploration_id: \'exp_1\',\n            outline_is_finalized: true\n          }],\n        next_node_id: \'node_3\'\n      },\n      language_code: \'en\'\n    };\n    _sampleStory = StoryObjectFactory.createFromBackendDict(\n      sampleStoryBackendObject);\n  }));\n\n  it(\'should add/remove a prerequisite skill id to/from a node in the story\',\n    function() {\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getPrerequisiteSkillIds()\n      ).toEqual([\'skill_1\']);\n      StoryUpdateService.addPrerequisiteSkillIdToNode(\n        _sampleStory, \'node_1\', \'skill_3\');\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getPrerequisiteSkillIds()\n      ).toEqual([\'skill_1\', \'skill_3\']);\n\n      UndoRedoService.undoChange(_sampleStory);\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getPrerequisiteSkillIds()\n      ).toEqual([\'skill_1\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for adding a prerequisite \' +\n    \'skill id to a node\',\n  function() {\n    StoryUpdateService.addPrerequisiteSkillIdToNode(\n      _sampleStory, \'node_1\', \'skill_3\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_story_node_property\',\n      property_name: \'prerequisite_skill_ids\',\n      new_value: [\'skill_1\', \'skill_3\'],\n      old_value: [\'skill_1\'],\n      node_id: \'node_1\'\n    }]);\n  });\n\n  it(\'should add/remove an acquired skill id to/from a node in the story\',\n    function() {\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getAcquiredSkillIds()\n      ).toEqual([\'skill_2\']);\n      StoryUpdateService.addAcquiredSkillIdToNode(\n        _sampleStory, \'node_1\', \'skill_4\');\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getAcquiredSkillIds()\n      ).toEqual([\'skill_2\', \'skill_4\']);\n\n      UndoRedoService.undoChange(_sampleStory);\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getAcquiredSkillIds()\n      ).toEqual([\'skill_2\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for adding an acquired \' +\n    \'skill id to a node\',\n  function() {\n    StoryUpdateService.addAcquiredSkillIdToNode(\n      _sampleStory, \'node_1\', \'skill_4\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_story_node_property\',\n      property_name: \'acquired_skill_ids\',\n      new_value: [\'skill_2\', \'skill_4\'],\n      old_value: [\'skill_2\'],\n      node_id: \'node_1\'\n    }]);\n  });\n\n  it(\'should add/remove a destination node id to/from a node in the story\',\n    function() {\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getDestinationNodeIds()\n      ).toEqual([]);\n      StoryUpdateService.addDestinationNodeIdToNode(\n        _sampleStory, \'node_1\', \'node_2\');\n\n      // Adding an invalid destination node id should throw an error.\n      expect(function() {\n        StoryUpdateService.addDestinationNodeIdToNode(\n          _sampleStory, \'node_1\', \'node_5\');\n      }).toThrow();\n\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getDestinationNodeIds()\n      ).toEqual([\'node_2\']);\n\n      UndoRedoService.undoChange(_sampleStory);\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getDestinationNodeIds()\n      ).toEqual([]);\n    }\n  );\n\n  it(\'should create a proper backend change dict for adding a destination \' +\n    \'node id to a node\',\n  function() {\n    StoryUpdateService.addDestinationNodeIdToNode(\n      _sampleStory, \'node_1\', \'node_2\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_story_node_property\',\n      property_name: \'destination_node_ids\',\n      new_value: [\'node_2\'],\n      old_value: [],\n      node_id: \'node_1\'\n    }]);\n  });\n\n  it(\'should remove/add a prerequisite skill id from/to a node in the story\',\n    function() {\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getPrerequisiteSkillIds()\n      ).toEqual([\'skill_1\']);\n      StoryUpdateService.removePrerequisiteSkillIdFromNode(\n        _sampleStory, \'node_1\', \'skill_1\');\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getPrerequisiteSkillIds()\n      ).toEqual([]);\n\n      UndoRedoService.undoChange(_sampleStory);\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getPrerequisiteSkillIds()\n      ).toEqual([\'skill_1\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for removing a prerequisite \' +\n    \'skill id from a node\',\n  function() {\n    StoryUpdateService.removePrerequisiteSkillIdFromNode(\n      _sampleStory, \'node_1\', \'skill_1\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_story_node_property\',\n      property_name: \'prerequisite_skill_ids\',\n      new_value: [],\n      old_value: [\'skill_1\'],\n      node_id: \'node_1\'\n    }]);\n  });\n\n  it(\'should remove/add an acquired skill id from/to a node in the story\',\n    function() {\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getAcquiredSkillIds()\n      ).toEqual([\'skill_2\']);\n      StoryUpdateService.removeAcquiredSkillIdFromNode(\n        _sampleStory, \'node_1\', \'skill_2\');\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getAcquiredSkillIds()\n      ).toEqual([]);\n\n      UndoRedoService.undoChange(_sampleStory);\n      expect(\n        _sampleStory.getStoryContents().getNodes()[0].getAcquiredSkillIds()\n      ).toEqual([\'skill_2\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for removing an acquired \' +\n    \'skill id from a node\',\n  function() {\n    StoryUpdateService.removeAcquiredSkillIdFromNode(\n      _sampleStory, \'node_1\', \'skill_2\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_story_node_property\',\n      property_name: \'acquired_skill_ids\',\n      new_value: [],\n      old_value: [\'skill_2\'],\n      node_id: \'node_1\'\n    }]);\n  });\n\n  it(\'should remove/add a destination node id from/to a node in the story\',\n    function() {\n      expect(\n        _sampleStory.getStoryContents().getNodes()[1].getDestinationNodeIds()\n      ).toEqual([\'node_1\']);\n      StoryUpdateService.removeDestinationNodeIdFromNode(\n        _sampleStory, \'node_2\', \'node_1\');\n\n      expect(\n        _sampleStory.getStoryContents().getNodes()[1].getDestinationNodeIds()\n      ).toEqual([]);\n\n      UndoRedoService.undoChange(_sampleStory);\n      expect(\n        _sampleStory.getStoryContents().getNodes()[1].getDestinationNodeIds()\n      ).toEqual([\'node_1\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for removing a destination \' +\n    \'node id from a node\',\n  function() {\n    StoryUpdateService.removeDestinationNodeIdFromNode(\n      _sampleStory, \'node_2\', \'node_1\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_story_node_property\',\n      property_name: \'destination_node_ids\',\n      new_value: [],\n      old_value: [\'node_1\'],\n      node_id: \'node_2\'\n    }]);\n  });\n\n  it(\'should add/remove a story node\', function() {\n    expect(_sampleStory.getStoryContents().getNodes().length).toEqual(2);\n    StoryUpdateService.addStoryNode(_sampleStory);\n    expect(_sampleStory.getStoryContents().getNodes().length).toEqual(3);\n    expect(_sampleStory.getStoryContents().getNextNodeId()).toEqual(\'node_4\');\n    expect(\n      _sampleStory.getStoryContents().getNodes()[2].getId()).toEqual(\'node_3\');\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(_sampleStory.getStoryContents().getNodes().length).toEqual(2);\n  });\n\n  it(\'should create a proper backend change dict for adding a story node\',\n    function() {\n      StoryUpdateService.addStoryNode(_sampleStory);\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'add_story_node\',\n        node_id: \'node_3\'\n      }]);\n    }\n  );\n\n  it(\'should remove/add a story node\', function() {\n    expect(_sampleStory.getStoryContents().getNodes().length).toEqual(2);\n    expect(\n      _sampleStory.getStoryContents().getNodes()[1].getDestinationNodeIds()\n    ).toEqual([\'node_1\']);\n    StoryUpdateService.deleteStoryNode(_sampleStory, \'node_1\');\n    // Initial node should not be deleted.\n    expect(function() {\n      StoryUpdateService.deleteStoryNode(_sampleStory, \'node_2\');\n    }).toThrow();\n    expect(_sampleStory.getStoryContents().getNodes().length).toEqual(1);\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getId()).toEqual(\'node_2\');\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getDestinationNodeIds()\n    ).toEqual([]);\n\n    expect(function() {\n      UndoRedoService.undoChange(_sampleStory);\n    }).toThrow();\n  });\n\n  it(\'should create a proper backend change dict for removing a story node\',\n    function() {\n      StoryUpdateService.deleteStoryNode(_sampleStory, \'node_1\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'delete_story_node\',\n        node_id: \'node_1\'\n      }]);\n    }\n  );\n\n  it(\'should finalize a story node outline\', function() {\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getOutlineStatus()\n    ).toBe(false);\n    StoryUpdateService.finalizeStoryNodeOutline(_sampleStory, \'node_1\');\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getOutlineStatus()\n    ).toBe(true);\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getOutlineStatus()\n    ).toBe(false);\n  });\n\n  it(\'should create a proper backend change dict for finalizing a node outline\',\n    function() {\n      StoryUpdateService.finalizeStoryNodeOutline(_sampleStory, \'node_1\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_story_node_outline_status\',\n        new_value: true,\n        old_value: false,\n        node_id: \'node_1\'\n      }]);\n    }\n  );\n\n  it(\'should unfinalize a story node outline\', function() {\n    expect(\n      _sampleStory.getStoryContents().getNodes()[1].getOutlineStatus()\n    ).toBe(true);\n    StoryUpdateService.unfinalizeStoryNodeOutline(_sampleStory, \'node_2\');\n    expect(\n      _sampleStory.getStoryContents().getNodes()[1].getOutlineStatus()\n    ).toBe(false);\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(\n      _sampleStory.getStoryContents().getNodes()[1].getOutlineStatus()\n    ).toBe(true);\n  });\n\n  it(\'should create a proper backend change dict for unfinalizing a node \' +\n    \'outline\', function() {\n    StoryUpdateService.unfinalizeStoryNodeOutline(_sampleStory, \'node_2\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_story_node_outline_status\',\n      new_value: false,\n      old_value: true,\n      node_id: \'node_2\'\n    }]);\n  });\n\n  it(\'should set a story node outline\', function() {\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getOutline()\n    ).toBe(\'Outline\');\n    StoryUpdateService.setStoryNodeOutline(\n      _sampleStory, \'node_1\', \'new outline\');\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getOutline()\n    ).toBe(\'new outline\');\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getOutline()\n    ).toBe(\'Outline\');\n  });\n\n  it(\'should create a proper backend change dict for setting a node outline\',\n    function() {\n      StoryUpdateService.setStoryNodeOutline(\n        _sampleStory, \'node_1\', \'new outline\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_story_node_property\',\n        property_name: \'outline\',\n        new_value: \'new outline\',\n        old_value: \'Outline\',\n        node_id: \'node_1\'\n      }]);\n    }\n  );\n\n  it(\'should set the exploration id of a story node\', function() {\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getExplorationId()\n    ).toBe(null);\n    StoryUpdateService.setStoryNodeExplorationId(\n      _sampleStory, \'node_1\', \'exp_2\');\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getExplorationId()\n    ).toBe(\'exp_2\');\n\n    // Adding an already existing exploration in the story should throw an\n    // error.\n    expect(function() {\n      StoryUpdateService.setStoryNodeExplorationId(\n        _sampleStory, \'node_1\', \'exp_1\');\n    }).toThrow();\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(\n      _sampleStory.getStoryContents().getNodes()[0].getExplorationId()\n    ).toBe(null);\n  });\n\n  it(\'should create a proper backend change dict for setting the exploration \' +\n    \'id of a node\', function() {\n    StoryUpdateService.setStoryNodeExplorationId(\n      _sampleStory, \'node_1\', \'exp_2\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_story_node_property\',\n      property_name: \'exploration_id\',\n      new_value: \'exp_2\',\n      old_value: null,\n      node_id: \'node_1\'\n    }]);\n  });\n\n  it(\'should set/unset the initial node of the story\', function() {\n    expect(\n      _sampleStory.getStoryContents().getInitialNodeId()).toEqual(\'node_2\');\n    StoryUpdateService.setInitialNodeId(_sampleStory, \'node_1\');\n    expect(\n      _sampleStory.getStoryContents().getInitialNodeId()).toEqual(\'node_1\');\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(\n      _sampleStory.getStoryContents().getInitialNodeId()).toEqual(\'node_2\');\n  });\n\n  it(\'should create a proper backend change dict for setting initial node\',\n    function() {\n      StoryUpdateService.setInitialNodeId(_sampleStory, \'node_1\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_story_contents_property\',\n        property_name: \'initial_node_id\',\n        new_value: \'node_1\',\n        old_value: \'node_2\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a story\\\'s title\', function() {\n    expect(_sampleStory.getTitle()).toEqual(\'Story title\');\n    StoryUpdateService.setStoryTitle(_sampleStory, \'new title\');\n    expect(_sampleStory.getTitle()).toEqual(\'new title\');\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(_sampleStory.getTitle()).toEqual(\'Story title\');\n  });\n\n  it(\'should create a proper backend change dict for changing title\',\n    function() {\n      StoryUpdateService.setStoryTitle(_sampleStory, \'new title\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_story_property\',\n        property_name: \'title\',\n        new_value: \'new title\',\n        old_value: \'Story title\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a story\\\'s description\', function() {\n    expect(_sampleStory.getDescription()).toEqual(\'Story description\');\n    StoryUpdateService.setStoryDescription(_sampleStory, \'new description\');\n    expect(_sampleStory.getDescription()).toEqual(\'new description\');\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(_sampleStory.getDescription()).toEqual(\'Story description\');\n  });\n\n  it(\'should create a proper backend change dict for changing descriptions\',\n    function() {\n      StoryUpdateService.setStoryDescription(_sampleStory, \'new description\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_story_property\',\n        property_name: \'description\',\n        new_value: \'new description\',\n        old_value: \'Story description\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a story\\\'s notes\', function() {\n    expect(_sampleStory.getNotes()).toEqual(\'Story notes\');\n    StoryUpdateService.setStoryNotes(_sampleStory, \'new notes\');\n    expect(_sampleStory.getNotes()).toEqual(\'new notes\');\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(_sampleStory.getNotes()).toEqual(\'Story notes\');\n  });\n\n  it(\'should create a proper backend change dict for changing notes\',\n    function() {\n      StoryUpdateService.setStoryNotes(_sampleStory, \'new notes\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_story_property\',\n        property_name: \'notes\',\n        new_value: \'new notes\',\n        old_value: \'Story notes\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a story\\\'s language code\', function() {\n    expect(_sampleStory.getLanguageCode()).toEqual(\'en\');\n    StoryUpdateService.setStoryLanguageCode(_sampleStory, \'fi\');\n    expect(_sampleStory.getLanguageCode()).toEqual(\'fi\');\n\n    UndoRedoService.undoChange(_sampleStory);\n    expect(_sampleStory.getLanguageCode()).toEqual(\'en\');\n  });\n\n  it(\'should create a proper backend change dict for changing language codes\',\n    function() {\n      StoryUpdateService.setStoryLanguageCode(_sampleStory, \'fi\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_story_property\',\n        property_name: \'language_code\',\n        new_value: \'fi\',\n        old_value: \'en\'\n      }]);\n    }\n  );\n});'

blocks = {}
debug_info = ''
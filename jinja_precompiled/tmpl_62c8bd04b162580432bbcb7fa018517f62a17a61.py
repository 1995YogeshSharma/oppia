from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/contextual/UrlServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the BackgroundMaskService.\n */\n\ndescribe(\'Url Service\', function() {\n  var UrlService = null;\n  var sampleHash = \'sampleHash\';\n  var pathname = \'sample.com/embed\';\n  var mockLocation = {\n    href: \'http://\' + pathname,\n    pathname: pathname,\n    hash: sampleHash,\n    search: \'\'\n  };\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(inject(function($injector) {\n    UrlService = $injector.get(\'UrlService\');\n    spyOn(UrlService, \'getCurrentLocation\').and.returnValue(mockLocation);\n  }));\n\n  it(\'should return correct query value list for each query field\', function() {\n    expect(UrlService.getQueryFieldValuesAsList(\'field1\')).toEqual([]);\n\n    mockLocation.search = \'?field1=value1&\' +\n      \'field2=value2&field1=value3&field1=value4&field2=value5&\' +\n      \'field1=value6&field1=value%3F%3D%20%266\';\n    var expectedList1 = [\'value1\', \'value3\', \'value4\', \'value6\', \'value?= &6\'];\n    var expectedList2 = [\'value2\', \'value5\'];\n    expect(\n      UrlService.getQueryFieldValuesAsList(\'field1\')).toEqual(expectedList1);\n    expect(\n      UrlService.getQueryFieldValuesAsList(\'field2\')).toEqual(expectedList2);\n  });\n\n  it(\'should correctly decode special characters in query value in url\',\n    function() {\n      var expectedObject = {\n        field1: \'?value=1\',\n        field2: \'?value&1\'\n      };\n      mockLocation.search = \'?field1=%3Fvalue%3D1&field2=%3Fvalue%261\';\n      expect(UrlService.getUrlParams()).toEqual(expectedObject);\n    });\n\n  it(\'should correctly encode and add query field and value to url\',\n    function() {\n      var queryValue = \'&value=1?\';\n      var queryField = \'field 1\';\n      var baseUrl = \'/sample\';\n      var expectedUrl1 = baseUrl + \'?field%201=%26value%3D1%3F\';\n      expect(\n        UrlService.addField(baseUrl, queryField, queryValue)).toBe(\n        expectedUrl1);\n\n      baseUrl = \'/sample?field=value\';\n      var expectedUrl2 = baseUrl + \'&field%201=%26value%3D1%3F\';\n      expect(\n        UrlService.addField(baseUrl, queryField, queryValue)).toBe(\n        expectedUrl2);\n    });\n\n  it(\'should correctly return true if embed present in pathname\', function() {\n    expect(UrlService.isIframed()).toBe(true);\n  });\n\n  it(\'should correctly return false if embed not in pathname\', function() {\n    mockLocation.pathname = \'/sample.com\';\n    expect(UrlService.isIframed()).toBe(false);\n  });\n\n  it(\'should correctly return hash value of window.location\', function() {\n    expect(UrlService.getHash()).toBe(sampleHash);\n  });\n});'

blocks = {}
debug_info = ''
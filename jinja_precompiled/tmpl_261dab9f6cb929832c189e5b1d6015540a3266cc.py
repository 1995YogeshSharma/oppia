from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'expressions/ExpressionEvaluatorServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ndescribe(\'Expression evaluator service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  var ees = null;\n  var eps = null;\n  var ests = null;\n  var isString = null;\n  beforeEach(inject(function($injector) {\n    ees = $injector.get(\'ExpressionEvaluatorService\');\n    eps = $injector.get(\'ExpressionParserService\');\n    ests = $injector.get(\'ExpressionSyntaxTreeService\');\n    isString = $injector.get(\'UtilsService\').isString;\n  }));\n\n  var ENVS = [\n    {\n      numZero: 0,\n      boolTrue: true,\n      strXYZ: \'XYZ\',\n      num100_001: 100.001,\n      boolFalse: false,\n      strNull: \'\'\n    }\n  ];\n\n  it(\'should get params used in expressions\', function() {\n    [\n      [\'numZero\', [\'numZero\']],\n      [\'b + a\', [\'a\', \'b\']],\n      [\'a + b + a\', [\'a\', \'b\']],\n      [\'+10\', []],\n      [\'2   + 10\', []],\n      [\'num100_001   + numZero\', [\'num100_001\', \'numZero\']],\n      [\'20 - num100_001\', [\'num100_001\']],\n      [\'0x100 - 256\', []],\n      [\'!strNull\', [\'strNull\']],\n      [\'1 - 2 * 3\', []],\n      [\'num100_001 / 0.1\', [\'num100_001\']],\n      [\'floor((numZero + num100_001)/2)\', [\'num100_001\', \'numZero\']],\n      [\'23 % 5\', []],\n      [\'1 <= numZero || 1 >= numZero\', [\'numZero\']],\n      [\'100 < num100_001 && 1 > num100_001\', [\'num100_001\']],\n      [\'boolTrue == boolFalse\', [\'boolFalse\', \'boolTrue\']],\n      [\'strNull != strXYZ\', [\'strNull\', \'strXYZ\']],\n      [\'if boolFalse then boolTrue else numZero\', [\n        \'boolFalse\', \'boolTrue\', \'numZero\']],\n      [\'num100_001 / 0\', [\'num100_001\']],\n      [\'abs(-3)\', []],\n      [\'pow(num100_001, numZero)\', [\'num100_001\', \'numZero\']],\n      [\'log(9, 3)\', []],\n      [\'numZero + numOne\', [\'numOne\', \'numZero\']]\n    ].forEach(function(test) {\n      var expression = test[0];\n      var expectedParams = test[1];\n\n      var parsed = (\n        isString(expression) ? eps.parse(expression) : expression);\n      var parsedJson = JSON.stringify(parsed);\n      var failed = false;\n\n      var recordFailure = function(params, exception) {\n        console.error(\'input           : \' + expression);\n        console.error(\'parsed          : \' + parsedJson);\n        console.error(\'expected        : \' + JSON.stringify(expectedParams));\n        if (params !== undefined) {\n          console.error(\'evaluated       : \' + params);\n        } else {\n          console.error(\'exception       : \' + exception);\n        }\n        failed = true;\n      };\n\n      try {\n        var params = ests.getParamsUsedInExpression(expression);\n        if (!angular.equals(params, expectedParams)) {\n          recordFailure(params, undefined);\n        }\n      } catch (e) {\n        recordFailure(undefined, e);\n      }\n      expect(failed).toBe(false);\n    });\n  });\n\n  it(\'should evaluate to correct values\', function() {\n    [\n      [\'numZero\', 0],\n      [\'+10\', 10],\n      [\'2   + 10\', 12],\n      [\'num100_001   + numZero\', 100.001],\n      [\'20 - num100_001\', -80.001],\n      [\'0x100 - 256\', 0],\n      [\'!strNull\', true],\n      [\'1 - 2 * 3\', -5],\n      [\'num100_001 / 0.1\', 1000.01],\n      [\'floor((numZero + num100_001)/2)\', 50],\n      [\'23 % 5\', 3],\n      [\'1 <= numZero || 1 >= numZero\', true],\n      [\'100 < num100_001 && 1 > num100_001\', false],\n      [\'boolTrue == boolFalse\', false],\n      [\'strNull != strXYZ\', true],\n      [\'if boolFalse then boolTrue else numZero\', 0],\n      [\'num100_001 / 0\', Infinity],\n      [\'abs(-3)\', 3],\n      [\'pow(num100_001, numZero)\', 1],\n      [\'log(9, 3)\', 2],\n      [\'numZero + numOne\', ests.ExprUndefinedVarError],\n      [[\'+\', 10, 20, 30], ests.ExprWrongNumArgsError],\n      [[\'==\', true], ests.ExprWrongNumArgsError],\n      [[\'+\', \'abc\', 1], ests.ExprWrongArgTypeError]\n    ].forEach(function(test) {\n      var expression = test[0];\n      var expected = test[1];\n\n      // \'expected\' should be either a JavaScript primitive value that would be\n      // the result of evaluation \'expression\', or an exception that is\n      // expected to be thrown.\n      // \'expression\' is either a string (in which case parsed) or an array\n      // (representing a parse tree).\n      var parsed = (\n        isString(expression) ? eps.parse(expression) : expression);\n      var parsedJson = JSON.stringify(parsed);\n      var failed = false;\n\n      var recordFailure = function(result, exception) {\n        console.error(\'input     : \' + expression);\n        console.error(\'parsed    : \' + parsedJson);\n        if (result !== undefined) {\n          console.error(\'evaluated : \' + result);\n          console.error(\'expected  : \' + expected);\n        }\n        if (exception !== undefined) {\n          console.error(\'exception : \' + exception);\n          console.error(\'expected  : (exception)\');\n        }\n        failed = true;\n      };\n\n      try {\n        var evaled = ests.applyFunctionToParseTree(parsed, ENVS, ees.evaluate);\n        if (expected instanceof Error || evaled !== expected) {\n          recordFailure(evaled, undefined);\n        }\n      } catch (e) {\n        if (!(e instanceof expected)) {\n          // Wrong or unexpected exception.\n          recordFailure(undefined, e);\n        }\n      }\n      expect(failed).toBe(false);\n\n      if (typeof expression !== \'string\') {\n        return;\n      }\n\n      failed = false;\n      try {\n        evaled = ees.evaluateExpression(expression, ENVS);\n        if (expected instanceof Error || evaled !== expected) {\n          recordFailure(evaled, undefined);\n        }\n      } catch (e) {\n        if (!(e instanceof expected)) {\n          // Wrong or unexpected exception.\n          recordFailure(undefined, e);\n        }\n      }\n      expect(failed).toBe(false);\n    });\n  });\n});'

blocks = {}
debug_info = ''
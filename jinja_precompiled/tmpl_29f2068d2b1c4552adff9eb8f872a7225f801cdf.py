from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/InputResponsePairDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for an input/response pair in the learner view.\n */\n\noppia.directive(\'inputResponsePair\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        data: \'=\',\n        oppiaAvatarImageUrl: \'&\',\n        profilePicture: \'&\',\n        getInputResponsePairId: \'&inputResponsePairId\',\n        isLastPair: \'&\',\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_player/\' +\n        \'input_response_pair_directive.html\'),\n      controller: [\n        \'$scope\', \'ExplorationPlayerService\', \'PlayerTranscriptService\',\n        \'ExplorationHtmlFormatterService\', \'INTERACTION_SPECS\',\n        \'PlayerPositionService\', \'COMPONENT_NAME_FEEDBACK\',\n        \'AudioTranslationManagerService\', \'AudioPlayerService\',\n        \'AutogeneratedAudioPlayerService\', \'AUDIO_HIGHLIGHT_CSS_CLASS\',\n        function(\n            $scope, ExplorationPlayerService, PlayerTranscriptService,\n            ExplorationHtmlFormatterService, INTERACTION_SPECS,\n            PlayerPositionService, COMPONENT_NAME_FEEDBACK,\n            AudioTranslationManagerService, AudioPlayerService,\n            AutogeneratedAudioPlayerService, AUDIO_HIGHLIGHT_CSS_CLASS) {\n          $scope.isCurrentCardAtEndOfTranscript = function() {\n            return PlayerTranscriptService.isLastCard(\n              PlayerPositionService.getActiveCardIndex());\n          };\n\n          $scope.getAnswerHtml = function() {\n            var interaction = ExplorationPlayerService.getInteraction(\n              PlayerPositionService.getCurrentStateName());\n            if ($scope.data) {\n              return ExplorationHtmlFormatterService.getAnswerHtml(\n                $scope.data.learnerInput, interaction.id,\n                interaction.customizationArgs);\n            }\n          };\n\n          // Returns a HTML string representing a short summary of the answer\n          // , or null if the answer does not have to be summarized.\n          $scope.getShortAnswerHtml = function() {\n            var interaction = ExplorationPlayerService.getInteraction(\n              PlayerPositionService.getCurrentStateName());\n            var shortAnswerHtml = \'\';\n            if ($scope.data && interaction.id &&\n                INTERACTION_SPECS[interaction.id].needs_summary) {\n              shortAnswerHtml = (\n                ExplorationHtmlFormatterService.getShortAnswerHtml(\n                  $scope.data.learnerInput, interaction.id,\n                  interaction.customizationArgs));\n            }\n            return shortAnswerHtml;\n          };\n\n          $scope.getFeedbackAudioHighlightClass = function() {\n            if (!$scope.isLastPair) {\n              return \'\';\n            }\n            if (AudioTranslationManagerService\n              .getCurrentComponentName() ===\n              COMPONENT_NAME_FEEDBACK &&\n              (AudioPlayerService.isPlaying() ||\n              AutogeneratedAudioPlayerService.isPlaying())) {\n              return AUDIO_HIGHLIGHT_CSS_CLASS;\n            }\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
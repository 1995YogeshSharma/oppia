from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/email_dashboard/EmailDashboardDataService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Services for oppia email dashboard page.\n */\n\noppia.factory(\'EmailDashboardDataService\', [\n  \'$http\', \'$q\', function($http, $q) {\n    var QUERY_DATA_URL = \'/emaildashboarddatahandler\';\n    var QUERY_STATUS_CHECK_URL = \'/querystatuscheck\';\n    // No. of query results to display on a single page.\n    var QUERIES_PER_PAGE = 10;\n    // Store latest cursor value for fetching next query page.\n    var latestCursor = null;\n    // Array containing all fetched queries.\n    var queries = [];\n    // Index of currently-shown page of query results.\n    var currentPageIndex = -1;\n\n    var fetchQueriesPage = function(pageSize, cursor) {\n      return $http.get(QUERY_DATA_URL, {\n        params: {\n          num_queries_to_fetch: pageSize,\n          cursor: cursor\n        }\n      }).then(function(response) {\n        return response.data;\n      });\n    };\n\n    return {\n      getQueries: function() {\n        return queries;\n      },\n\n      getCurrentPageIndex: function() {\n        return currentPageIndex;\n      },\n\n      getLatestCursor: function() {\n        return latestCursor;\n      },\n\n      submitQuery: function(data) {\n        var startQueryIndex = currentPageIndex * QUERIES_PER_PAGE;\n        var endQueryIndex = (currentPageIndex + 1) * QUERIES_PER_PAGE;\n\n        return $http.post(QUERY_DATA_URL, {\n          data: data\n        }).then(function(response) {\n          var data = response.data;\n          var newQueries = [data.query];\n          queries = newQueries.concat(queries);\n          return queries.slice(startQueryIndex, endQueryIndex);\n        });\n      },\n\n      getNextQueries: function() {\n        var startQueryIndex = (currentPageIndex + 1) * QUERIES_PER_PAGE;\n        var endQueryIndex = (currentPageIndex + 2) * QUERIES_PER_PAGE;\n\n        if (queries.length >= endQueryIndex ||\n            (latestCursor === null && currentPageIndex !== -1)) {\n          currentPageIndex = currentPageIndex + 1;\n          return $q(function(resolver) {\n            resolver(queries.slice(startQueryIndex, endQueryIndex));\n          });\n        } else {\n          currentPageIndex = currentPageIndex + 1;\n          return fetchQueriesPage(QUERIES_PER_PAGE, latestCursor)\n            .then(function(data) {\n              queries = queries.concat(data.recent_queries);\n              latestCursor = data.cursor;\n              return queries.slice(startQueryIndex, endQueryIndex);\n            });\n        }\n      },\n\n      getPreviousQueries: function() {\n        var startQueryIndex = (currentPageIndex - 1) * QUERIES_PER_PAGE;\n        var endQueryIndex = currentPageIndex * QUERIES_PER_PAGE;\n        currentPageIndex = currentPageIndex - 1;\n        return queries.slice(startQueryIndex, endQueryIndex);\n      },\n\n      isNextPageAvailable: function() {\n        var nextQueryIndex = (currentPageIndex + 1) * QUERIES_PER_PAGE;\n        return (queries.length > nextQueryIndex) || Boolean(latestCursor);\n      },\n\n      isPreviousPageAvailable: function() {\n        return (currentPageIndex > 0);\n      },\n\n      fetchQuery: function(queryId) {\n        return $http.get(QUERY_STATUS_CHECK_URL, {\n          params: {\n            query_id: queryId\n          }\n        }).then(function(response) {\n          var data = response.data;\n          queries.forEach(function(query, index, queries) {\n            if (query.id === queryId) {\n              queries[index] = data.query;\n            }\n          });\n          return data.query;\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
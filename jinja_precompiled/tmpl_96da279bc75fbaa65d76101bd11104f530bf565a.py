from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/TopicUpdateServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for Topic update service.\n */\n\ndescribe(\'Topic update service\', function() {\n  var TopicUpdateService = null;\n  var TopicObjectFactory = null;\n  var SubtopicObjectFactory = null;\n  var SkillSummaryObjectFactory = null;\n  var SubtopicPageObjectFactory = null;\n  var UndoRedoService = null;\n  var _sampleTopic = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    TopicUpdateService = $injector.get(\'TopicUpdateService\');\n    TopicObjectFactory = $injector.get(\'TopicObjectFactory\');\n    SubtopicObjectFactory = $injector.get(\'SubtopicObjectFactory\');\n    SubtopicPageObjectFactory = $injector.get(\'SubtopicPageObjectFactory\');\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n    SkillSummaryObjectFactory = $injector.get(\'SkillSummaryObjectFactory\');\n\n    var sampleTopicBackendObject = {\n      topicDict: {\n        id: \'sample_topic_id\',\n        name: \'Topic name\',\n        description: \'Topic description\',\n        version: 1,\n        uncategorized_skill_ids: [\'skill_1\'],\n        canonical_story_ids: [\'story_1\'],\n        additional_story_ids: [\'story_2\'],\n        subtopics: [{\n          id: 1,\n          title: \'Title\',\n          skill_ids: [\'skill_2\']\n        }],\n        next_subtopic_id: 2,\n        language_code: \'en\'\n      },\n      skillIdToDescriptionDict: {\n        skill_1: \'Description 1\',\n        skill_2: \'Description 2\'\n      }\n    };\n    var sampleSubtopicPageObject = {\n      id: \'topic_id-1\',\n      topic_id: \'topic_id\',\n      html_data: \'<p>Data</p>\',\n      language_code: \'en\'\n    };\n    _firstSkillSummary = SkillSummaryObjectFactory.create(\n      \'skill_1\', \'Description 1\');\n    _secondSkillSummary = SkillSummaryObjectFactory.create(\n      \'skill_2\', \'Description 2\');\n    _thirdSkillSummary = SkillSummaryObjectFactory.create(\n      \'skill_3\', \'Description 3\');\n\n    _sampleSubtopicPage = SubtopicPageObjectFactory.createFromBackendDict(\n      sampleSubtopicPageObject);\n    _sampleTopic = TopicObjectFactory.create(\n      sampleTopicBackendObject.topicDict,\n      sampleTopicBackendObject.skillIdToDescriptionDict);\n  }));\n\n  it(\'should add/remove an additional story id to/from a topic\',\n    function() {\n      expect(_sampleTopic.getAdditionalStoryIds()).toEqual([\'story_2\']);\n      TopicUpdateService.addAdditionalStoryId(_sampleTopic, \'story_3\');\n      expect(_sampleTopic.getAdditionalStoryIds()).toEqual([\n        \'story_2\', \'story_3\'\n      ]);\n\n      UndoRedoService.undoChange(_sampleTopic);\n      expect(_sampleTopic.getAdditionalStoryIds()).toEqual([\'story_2\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for adding an additional \' +\n    \'story id\',\n  function() {\n    TopicUpdateService.addAdditionalStoryId(_sampleTopic, \'story_3\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_topic_property\',\n      property_name: \'additional_story_ids\',\n      new_value: [\'story_2\', \'story_3\'],\n      old_value: [\'story_2\'],\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should not create a backend change dict for adding an additional \' +\n    \'story id when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.addAdditionalStoryId(_sampleTopic, \'story_2\');\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should remove/add an additional story id from/to a topic\',\n    function() {\n      expect(_sampleTopic.getAdditionalStoryIds()).toEqual([\'story_2\']);\n      TopicUpdateService.removeAdditionalStoryId(_sampleTopic, \'story_2\');\n      expect(_sampleTopic.getAdditionalStoryIds()).toEqual([]);\n\n      UndoRedoService.undoChange(_sampleTopic);\n      expect(_sampleTopic.getAdditionalStoryIds()).toEqual([\'story_2\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for removing an additional \' +\n    \'story id\',\n  function() {\n    TopicUpdateService.removeAdditionalStoryId(_sampleTopic, \'story_2\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_topic_property\',\n      property_name: \'additional_story_ids\',\n      new_value: [],\n      old_value: [\'story_2\'],\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should not create a backend change dict for removing an additional \' +\n    \'story id when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.removeAdditionalStoryId(_sampleTopic, \'story_5\');\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should add/remove a canonical story id to/from a topic\',\n    function() {\n      expect(_sampleTopic.getCanonicalStoryIds()).toEqual([\'story_1\']);\n      TopicUpdateService.addCanonicalStoryId(_sampleTopic, \'story_3\');\n      expect(_sampleTopic.getCanonicalStoryIds()).toEqual([\n        \'story_1\', \'story_3\'\n      ]);\n\n      UndoRedoService.undoChange(_sampleTopic);\n      expect(_sampleTopic.getCanonicalStoryIds()).toEqual([\'story_1\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for adding a canonical \' +\n    \'story id\',\n  function() {\n    TopicUpdateService.addCanonicalStoryId(_sampleTopic, \'story_3\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_topic_property\',\n      property_name: \'canonical_story_ids\',\n      new_value: [\'story_1\', \'story_3\'],\n      old_value: [\'story_1\'],\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should not create a backend change dict for adding a canonical \' +\n    \'story id when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.addCanonicalStoryId(_sampleTopic, \'story_1\');\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should remove/add a canonical story id from/to a topic\',\n    function() {\n      expect(_sampleTopic.getCanonicalStoryIds()).toEqual([\'story_1\']);\n      TopicUpdateService.removeCanonicalStoryId(_sampleTopic, \'story_1\');\n      expect(_sampleTopic.getCanonicalStoryIds()).toEqual([]);\n\n      UndoRedoService.undoChange(_sampleTopic);\n      expect(_sampleTopic.getCanonicalStoryIds()).toEqual([\'story_1\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for removing a canonical \' +\n    \'story id\',\n  function() {\n    TopicUpdateService.removeCanonicalStoryId(_sampleTopic, \'story_1\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_topic_property\',\n      property_name: \'canonical_story_ids\',\n      new_value: [],\n      old_value: [\'story_1\'],\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should not create a backend change dict for removing a canonical \' +\n    \'story id when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.removeCanonicalStoryId(_sampleTopic, \'story_10\');\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should add/remove an uncategorized skill id to/from a topic\',\n    function() {\n      expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n        _firstSkillSummary\n      ]);\n      TopicUpdateService.addUncategorizedSkill(\n        _sampleTopic, _thirdSkillSummary);\n      expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n        _firstSkillSummary, _thirdSkillSummary\n      ]);\n\n      UndoRedoService.undoChange(_sampleTopic);\n      expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n        _firstSkillSummary\n      ]);\n    }\n  );\n\n  it(\'should create a proper backend change dict for adding an uncategorized \' +\n    \'skill id\',\n  function() {\n    TopicUpdateService.addUncategorizedSkill(\n      _sampleTopic, _thirdSkillSummary);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'add_uncategorized_skill_id\',\n      new_uncategorized_skill_id: \'skill_3\',\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should not create a backend change dict for adding an uncategorized \' +\n    \'skill id when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.addUncategorizedSkill(\n        _sampleTopic, _firstSkillSummary);\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should remove/add an uncategorized skill id from/to a topic\',\n    function() {\n      expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n        _firstSkillSummary\n      ]);\n      TopicUpdateService.removeUncategorizedSkill(\n        _sampleTopic, _firstSkillSummary\n      );\n      expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([]);\n\n      UndoRedoService.undoChange(_sampleTopic);\n      expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n        _firstSkillSummary\n      ]);\n    }\n  );\n\n  it(\'should create a proper backend change dict for removing an \' +\n    \'uncategorized skill id\',\n  function() {\n    TopicUpdateService.removeUncategorizedSkill(\n      _sampleTopic, _firstSkillSummary);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'remove_uncategorized_skill_id\',\n      uncategorized_skill_id: \'skill_1\',\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should not create a backend change dict for removing an uncategorized \' +\n    \'skill id when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.removeUncategorizedSkill(_sampleTopic, \'skill_10\');\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should set/unset changes to a topic\\\'s name\', function() {\n    expect(_sampleTopic.getName()).toEqual(\'Topic name\');\n    TopicUpdateService.setTopicName(_sampleTopic, \'new name\');\n    expect(_sampleTopic.getName()).toEqual(\'new name\');\n\n    UndoRedoService.undoChange(_sampleTopic);\n    expect(_sampleTopic.getName()).toEqual(\'Topic name\');\n  });\n\n  it(\'should create a proper backend change dict for changing names\',\n    function() {\n      TopicUpdateService.setTopicName(_sampleTopic, \'new name\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_topic_property\',\n        property_name: \'name\',\n        new_value: \'new name\',\n        old_value: \'Topic name\',\n        change_affects_subtopic_page: false\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a topic\\\'s description\', function() {\n    expect(_sampleTopic.getDescription()).toEqual(\'Topic description\');\n    TopicUpdateService.setTopicDescription(_sampleTopic, \'new description\');\n    expect(_sampleTopic.getDescription()).toEqual(\'new description\');\n\n    UndoRedoService.undoChange(_sampleTopic);\n    expect(_sampleTopic.getDescription()).toEqual(\'Topic description\');\n  });\n\n  it(\'should create a proper backend change dict for changing descriptions\',\n    function() {\n      TopicUpdateService.setTopicDescription(_sampleTopic, \'new description\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_topic_property\',\n        property_name: \'description\',\n        new_value: \'new description\',\n        old_value: \'Topic description\',\n        change_affects_subtopic_page: false\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a subtopic\\\'s title\', function() {\n    expect(_sampleTopic.getSubtopics()[0].getTitle()).toEqual(\'Title\');\n    TopicUpdateService.setSubtopicTitle(_sampleTopic, 1, \'new title\');\n    expect(_sampleTopic.getSubtopics()[0].getTitle()).toEqual(\'new title\');\n\n    UndoRedoService.undoChange(_sampleTopic);\n    expect(_sampleTopic.getSubtopics()[0].getTitle()).toEqual(\'Title\');\n  });\n\n  it(\'should create a proper backend change dict for changing subtopic title\',\n    function() {\n      TopicUpdateService.setSubtopicTitle(_sampleTopic, 1, \'new title\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_subtopic_property\',\n        subtopic_id: 1,\n        property_name: \'title\',\n        new_value: \'new title\',\n        old_value: \'Title\',\n        change_affects_subtopic_page: false\n      }]);\n    }\n  );\n\n  it(\'should not create a backend change dict for changing subtopic title \' +\n    \'when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.setSubtopicTitle(_sampleTopic, 10, \'title2\');\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should add/remove a subtopic\', function() {\n    expect(_sampleTopic.getSubtopics().length).toEqual(1);\n    TopicUpdateService.addSubtopic(_sampleTopic, \'Title2\');\n    expect(_sampleTopic.getSubtopics().length).toEqual(2);\n    expect(_sampleTopic.getNextSubtopicId()).toEqual(3);\n    expect(_sampleTopic.getSubtopics()[1].getTitle()).toEqual(\'Title2\');\n    expect(_sampleTopic.getSubtopics()[1].getId()).toEqual(2);\n\n    UndoRedoService.undoChange(_sampleTopic);\n    expect(_sampleTopic.getSubtopics().length).toEqual(1);\n  });\n\n  it(\'should create a proper backend change dict for adding a subtopic\',\n    function() {\n      TopicUpdateService.addSubtopic(_sampleTopic, \'Title2\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'add_subtopic\',\n        subtopic_id: 2,\n        title: \'Title2\',\n        change_affects_subtopic_page: false\n      }]);\n    }\n  );\n\n  it(\'should remove/add a subtopic\', function() {\n    expect(_sampleTopic.getSubtopics().length).toEqual(1);\n    TopicUpdateService.deleteSubtopic(_sampleTopic, 1);\n    expect(_sampleTopic.getSubtopics()).toEqual([]);\n    expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n      _firstSkillSummary, _secondSkillSummary\n    ]);\n\n    expect(function() {\n      UndoRedoService.undoChange(_sampleTopic);\n    }).toThrow();\n  });\n\n  it(\'should properly remove/add a newly created subtopic\', function() {\n    TopicUpdateService.addSubtopic(_sampleTopic, \'Title2\');\n    TopicUpdateService.addSubtopic(_sampleTopic, \'Title3\');\n    expect(_sampleTopic.getSubtopics()[1].getId()).toEqual(2);\n    expect(_sampleTopic.getSubtopics()[2].getId()).toEqual(3);\n    expect(_sampleTopic.getNextSubtopicId()).toEqual(4);\n\n    TopicUpdateService.deleteSubtopic(_sampleTopic, 2);\n    expect(_sampleTopic.getSubtopics().length).toEqual(2);\n    expect(_sampleTopic.getSubtopics()[1].getTitle()).toEqual(\'Title3\');\n    expect(_sampleTopic.getSubtopics()[1].getId()).toEqual(2);\n    expect(_sampleTopic.getNextSubtopicId()).toEqual(3);\n\n    expect(UndoRedoService.getChangeCount()).toEqual(1);\n  });\n\n  it(\'should create a proper backend change dict for deleting a subtopic\',\n    function() {\n      TopicUpdateService.deleteSubtopic(_sampleTopic, 1);\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'delete_subtopic\',\n        subtopic_id: 1,\n        change_affects_subtopic_page: false\n      }]);\n    }\n  );\n\n  it(\'should not create a backend change dict for deleting a subtopic \' +\n    \'when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.deleteSubtopic(_sampleTopic, 10);\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should move a skill id to a subtopic\', function() {\n    expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n      _firstSkillSummary\n    ]);\n    expect(_sampleTopic.getSubtopics()[0].getSkillSummaries()).toEqual([\n      _secondSkillSummary\n    ]);\n    TopicUpdateService.moveSkillToSubtopic(\n      _sampleTopic, null, 1, _firstSkillSummary);\n    expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([]);\n    expect(_sampleTopic.getSubtopics()[0].getSkillSummaries()).toEqual([\n      _secondSkillSummary, _firstSkillSummary\n    ]);\n\n    UndoRedoService.undoChange(_sampleTopic);\n    expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n      _firstSkillSummary\n    ]);\n    expect(_sampleTopic.getSubtopics()[0].getSkillSummaries()).toEqual([\n      _secondSkillSummary\n    ]);\n  });\n\n  it(\'should correctly create changelists when moving a skill to a newly \' +\n    \'created subtopic that has since been deleted\', function() {\n    TopicUpdateService.addSubtopic(_sampleTopic, \'Title 2\');\n    TopicUpdateService.moveSkillToSubtopic(\n      _sampleTopic, null, 2, _firstSkillSummary\n    );\n    TopicUpdateService.removeSkillFromSubtopic(\n      _sampleTopic, 2, _firstSkillSummary\n    );\n    TopicUpdateService.deleteSubtopic(_sampleTopic, 2);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n\n    TopicUpdateService.addSubtopic(_sampleTopic, \'Title 2\');\n    TopicUpdateService.moveSkillToSubtopic(\n      _sampleTopic, 1, 2, _secondSkillSummary\n    );\n    TopicUpdateService.moveSkillToSubtopic(\n      _sampleTopic, 2, 1, _secondSkillSummary\n    );\n    TopicUpdateService.deleteSubtopic(_sampleTopic, 2);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'remove_skill_id_from_subtopic\',\n      skill_id: \'skill_2\',\n      subtopic_id: 1,\n      change_affects_subtopic_page: false\n    }, {\n      cmd: \'move_skill_id_to_subtopic\',\n      skill_id: \'skill_2\',\n      new_subtopic_id: 1,\n      old_subtopic_id: null,\n      change_affects_subtopic_page: false\n    }]);\n    UndoRedoService.clearChanges();\n\n    TopicUpdateService.addSubtopic(_sampleTopic, \'Title 2\');\n    TopicUpdateService.moveSkillToSubtopic(\n      _sampleTopic, null, 2, _firstSkillSummary\n    );\n    TopicUpdateService.moveSkillToSubtopic(\n      _sampleTopic, 1, 2, _secondSkillSummary\n    );\n    TopicUpdateService.deleteSubtopic(_sampleTopic, 2);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'remove_skill_id_from_subtopic\',\n      skill_id: \'skill_2\',\n      subtopic_id: 1,\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should create properly decrement subtopic ids of later subtopics when \' +\n    \'a newly created subtopic is deleted\', function() {\n    TopicUpdateService.addSubtopic(_sampleTopic, \'Title 2\');\n    TopicUpdateService.addSubtopic(_sampleTopic, \'Title 3\');\n    TopicUpdateService.moveSkillToSubtopic(\n      _sampleTopic, 1, 3, _secondSkillSummary\n    );\n    TopicUpdateService.deleteSubtopic(_sampleTopic, 2);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'add_subtopic\',\n      title: \'Title 3\',\n      change_affects_subtopic_page: false,\n      subtopic_id: 2\n    }, {\n      cmd: \'move_skill_id_to_subtopic\',\n      old_subtopic_id: 1,\n      new_subtopic_id: 2,\n      skill_id: \'skill_2\',\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should create a proper backend change dict for moving a skill id to a \' +\n    \'subtopic\',\n  function() {\n    TopicUpdateService.moveSkillToSubtopic(\n      _sampleTopic, null, 1, _firstSkillSummary);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'move_skill_id_to_subtopic\',\n      old_subtopic_id: null,\n      new_subtopic_id: 1,\n      skill_id: \'skill_1\',\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should not create a backend change dict for moving a skill id to a\' +\n    \'subtopic when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.moveSkillToSubtopic(\n        _sampleTopic, null, 1, _secondSkillSummary);\n    }).toThrow();\n    expect(function() {\n      TopicUpdateService.moveSkillToSubtopic(\n        _sampleTopic, 1, 2, _secondSkillSummary);\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should remove a skill id from a subtopic\', function() {\n    expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n      _firstSkillSummary\n    ]);\n    expect(_sampleTopic.getSubtopics()[0].getSkillSummaries()).toEqual([\n      _secondSkillSummary\n    ]);\n    TopicUpdateService.removeSkillFromSubtopic(\n      _sampleTopic, 1, _secondSkillSummary);\n    expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n      _firstSkillSummary, _secondSkillSummary\n    ]);\n    expect(_sampleTopic.getSubtopics()[0].getSkillSummaries()).toEqual([]);\n\n    UndoRedoService.undoChange(_sampleTopic);\n    expect(_sampleTopic.getUncategorizedSkillSummaries()).toEqual([\n      _firstSkillSummary\n    ]);\n    expect(_sampleTopic.getSubtopics()[0].getSkillSummaries()).toEqual([\n      _secondSkillSummary\n    ]);\n  });\n\n  it(\'should create a proper backend change dict for removing a skill id \' +\n    \'from a subtopic\',\n  function() {\n    TopicUpdateService.removeSkillFromSubtopic(\n      _sampleTopic, 1, _secondSkillSummary);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'remove_skill_id_from_subtopic\',\n      subtopic_id: 1,\n      skill_id: \'skill_2\',\n      change_affects_subtopic_page: false\n    }]);\n  });\n\n  it(\'should not create a backend change dict for removing a skill id from a\' +\n    \'subtopic when an error is encountered\',\n  function() {\n    expect(function() {\n      TopicUpdateService.removeSkillFromSubtopic(\n        _sampleTopic, 1, _firstSkillSummary);\n    }).toThrow();\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n  });\n\n  it(\'should set/unset changes to a topic\\\'s language code\', function() {\n    expect(_sampleTopic.getLanguageCode()).toEqual(\'en\');\n    TopicUpdateService.setTopicLanguageCode(_sampleTopic, \'fi\');\n    expect(_sampleTopic.getLanguageCode()).toEqual(\'fi\');\n\n    UndoRedoService.undoChange(_sampleTopic);\n    expect(_sampleTopic.getLanguageCode()).toEqual(\'en\');\n  });\n\n  it(\'should create a proper backend change dict for changing language codes\',\n    function() {\n      TopicUpdateService.setTopicLanguageCode(_sampleTopic, \'fi\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_topic_property\',\n        property_name: \'language_code\',\n        new_value: \'fi\',\n        old_value: \'en\',\n        change_affects_subtopic_page: false\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a subtopic page\\\'s html data\', function() {\n    expect(_sampleSubtopicPage.getHtmlData()).toEqual(\'<p>Data</p>\');\n    TopicUpdateService.setSubtopicPageHtmlData(\n      _sampleSubtopicPage, 1, \'<p>New Data</p>\');\n    expect(_sampleSubtopicPage.getHtmlData()).toEqual(\'<p>New Data</p>\');\n\n    UndoRedoService.undoChange(_sampleSubtopicPage);\n    expect(_sampleSubtopicPage.getHtmlData()).toEqual(\'<p>Data</p>\');\n  });\n\n  it(\'should create a proper backend change dict for changing html data\',\n    function() {\n      TopicUpdateService.setSubtopicPageHtmlData(\n        _sampleSubtopicPage, 1, \'<p>New Data</p>\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'update_subtopic_page_property\',\n        property_name: \'html_data\',\n        subtopic_id: 1,\n        new_value: \'<p>New Data</p>\',\n        old_value: \'<p>Data</p>\',\n        change_affects_subtopic_page: true\n      }]);\n    }\n  );\n});'

blocks = {}
debug_info = ''
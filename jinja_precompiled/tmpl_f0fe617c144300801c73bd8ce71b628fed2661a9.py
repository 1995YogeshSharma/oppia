from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/summary/ExplorationSummaryBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to retrieve information about exploration summaries\n * from the backend.\n */\n\noppia.factory(\'ExplorationSummaryBackendApiService\', [\n  \'$http\', \'$q\', \'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE\',\n  \'ValidatorsService\', \'AlertsService\',\n  function(\n      $http, $q, EXPLORATION_SUMMARY_DATA_URL_TEMPLATE,\n      ValidatorsService, AlertsService) {\n    var _fetchExpSummaries = function(\n        explorationIds, includePrivateExplorations, successCallback,\n        errorCallback) {\n      if (!explorationIds.every(ValidatorsService.isValidExplorationId)) {\n        AlertsService.addWarning(\'Please enter a valid exploration ID.\');\n\n        var returnValue = [];\n        for (var i = 0; i < explorationIds.length; i++) {\n          returnValue.push(null);\n        }\n        return $q.resolve(returnValue);\n      }\n\n      var explorationSummaryDataUrl = EXPLORATION_SUMMARY_DATA_URL_TEMPLATE;\n\n      $http.get(explorationSummaryDataUrl, {\n        params: {\n          stringified_exp_ids: JSON.stringify(explorationIds),\n          include_private_explorations: JSON.stringify(\n            includePrivateExplorations)\n        }\n      }).then(function(response) {\n        var summaries = angular.copy(response.data.summaries);\n        if (successCallback) {\n          successCallback(summaries);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    return {\n      /**\n       * Fetches a list of public exploration summaries and private\n       * exploration summaries for which the current user has access from the\n       * backend for each exploration ID provided. The provided list of\n       * exploration summaries are in the same order as input exploration IDs\n       * list, though some may be missing (if the exploration doesn\'t exist or\n       * or the user does not have access to it).\n       */\n      loadPublicAndPrivateExplorationSummaries: function(explorationIds) {\n        return $q(function(resolve, reject) {\n          _fetchExpSummaries(explorationIds, true, resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
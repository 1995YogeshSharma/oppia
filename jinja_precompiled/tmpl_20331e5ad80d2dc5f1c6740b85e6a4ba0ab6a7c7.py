from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/AnswerGroupEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the answer group editor.\n */\n\noppia.directive(\'answerGroupEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        isEditable: \'=\',\n        displayFeedback: \'=\',\n        getOnSaveAnswerGroupDestFn: \'&onSaveAnswerGroupDest\',\n        getOnSaveAnswerGroupFeedbackFn: \'&onSaveAnswerGroupFeedback\',\n        getOnSaveAnswerGroupRulesFn: \'&onSaveAnswerGroupRules\',\n        getOnSaveAnswerGroupCorrectnessLabelFn: (\n          \'&onSaveAnswerGroupCorrectnessLabel\'),\n        outcome: \'=\',\n        suppressWarnings: \'&\',\n        rules: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/answer_group_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'stateInteractionIdService\', \'ResponsesService\',\n        \'EditorStateService\', \'AlertsService\', \'INTERACTION_SPECS\',\n        \'RuleObjectFactory\',\n        function(\n            $scope, stateInteractionIdService, ResponsesService,\n            EditorStateService, AlertsService, INTERACTION_SPECS,\n            RuleObjectFactory) {\n          $scope.rulesMemento = null;\n          $scope.activeRuleIndex = ResponsesService.getActiveRuleIndex();\n          $scope.editAnswerGroupForm = {};\n\n          $scope.getAnswerChoices = function() {\n            return ResponsesService.getAnswerChoices();\n          };\n          $scope.answerChoices = $scope.getAnswerChoices();\n\n          // Updates answer choices when the interaction requires it -- e.g.,\n          // the rules for multiple choice need to refer to the multiple choice\n          // interaction\'s customization arguments.\n          // TODO(sll): Remove the need for this watcher, or make it less\n          // ad hoc.\n          $scope.$on(\'updateAnswerChoices\', function() {\n            $scope.answerChoices = $scope.getAnswerChoices();\n          });\n\n          $scope.getCurrentInteractionId = function() {\n            return stateInteractionIdService.savedMemento;\n          };\n\n          $scope.$on(\'externalSave\', function() {\n            if ($scope.isRuleEditorOpen()) {\n              $scope.saveRules();\n            }\n          });\n\n          var getDefaultInputValue = function(varType) {\n            // TODO(bhenning): Typed objects in the backend should be required\n            // to provide a default value specific for their type.\n            switch (varType) {\n              default:\n              case \'Null\':\n                return null;\n              case \'Boolean\':\n                return false;\n              case \'Real\':\n              case \'Int\':\n              case \'NonnegativeInt\':\n                return 0;\n              case \'CodeString\':\n              case \'UnicodeString\':\n              case \'NormalizedString\':\n              case \'MathLatexString\':\n              case \'Html\':\n              case \'SanitizedUrl\':\n              case \'Filepath\':\n              case \'LogicErrorCategory\':\n                return \'\';\n              case \'CodeEvaluation\':\n                return {\n                  code: getDefaultInputValue(\'UnicodeString\'),\n                  error: getDefaultInputValue(\'UnicodeString\'),\n                  evaluation: getDefaultInputValue(\'UnicodeString\'),\n                  output: getDefaultInputValue(\'UnicodeString\')\n                };\n              case \'CoordTwoDim\':\n                return [\n                  getDefaultInputValue(\'Real\'),\n                  getDefaultInputValue(\'Real\')];\n              case \'ListOfUnicodeString\':\n              case \'SetOfUnicodeString\':\n              case \'SetOfHtmlString\':\n                return [];\n              case \'MusicPhrase\':\n                return [];\n              case \'CheckedProof\':\n                return {\n                  assumptions_string: getDefaultInputValue(\'UnicodeString\'),\n                  correct: getDefaultInputValue(\'Boolean\'),\n                  proof_string: getDefaultInputValue(\'UnicodeString\'),\n                  target_string: getDefaultInputValue(\'UnicodeString\')\n                };\n              case \'LogicQuestion\':\n                return {\n                  arguments: [],\n                  dummies: [],\n                  top_kind_name: getDefaultInputValue(\'UnicodeString\'),\n                  top_operator_name: getDefaultInputValue(\'UnicodeString\')\n                };\n              case \'Graph\':\n                return {\n                  edges: [],\n                  isDirected: getDefaultInputValue(\'Boolean\'),\n                  isLabeled: getDefaultInputValue(\'Boolean\'),\n                  isWeighted: getDefaultInputValue(\'Boolean\'),\n                  vertices: []\n                };\n              case \'NormalizedRectangle2D\':\n                return [\n                  [getDefaultInputValue(\'Real\'), getDefaultInputValue(\'Real\')],\n                  [getDefaultInputValue(\'Real\'), getDefaultInputValue(\'Real\')]];\n              case \'ImageRegion\':\n                return {\n                  area: getDefaultInputValue(\'NormalizedRectangle2D\'),\n                  regionType: getDefaultInputValue(\'UnicodeString\')\n                };\n              case \'ImageWithRegions\':\n                return {\n                  imagePath: getDefaultInputValue(\'Filepath\'),\n                  labeledRegions: []\n                };\n              case \'ClickOnImage\':\n                return {\n                  clickPosition: [\n                    getDefaultInputValue(\'Real\'), getDefaultInputValue(\'Real\')],\n                  clickedRegions: []\n                };\n            }\n          };\n\n          $scope.addNewRule = function() {\n            // Build an initial blank set of inputs for the initial rule.\n            var interactionId = $scope.getCurrentInteractionId();\n            var ruleDescriptions = (\n              INTERACTION_SPECS[interactionId].rule_descriptions);\n            var ruleTypes = Object.keys(ruleDescriptions);\n            if (ruleTypes.length === 0) {\n              // This should never happen. An interaction must have at least\n              // one rule, as verified in a backend test suite:\n              //   extensions.interactions.base_test.InteractionUnitTests.\n              return;\n            }\n            var ruleType = ruleTypes[0];\n            var description = ruleDescriptions[ruleType];\n\n            var PATTERN = /\\{\\{\\s*(\\w+)\\s*(\\|\\s*\\w+\\s*)?\\}\\}/;\n            var inputs = {};\n            while (description.match(PATTERN)) {\n              var varName = description.match(PATTERN)[1];\n              var varType = description.match(PATTERN)[2];\n              if (varType) {\n                varType = varType.substring(1);\n              }\n\n              inputs[varName] = getDefaultInputValue(varType);\n              description = description.replace(PATTERN, \' \');\n            }\n\n            // Save the state of the rules before adding a new one (in case the\n            // user cancels the addition).\n            $scope.rulesMemento = angular.copy($scope.rules);\n\n            // TODO(bhenning): Should use functionality in ruleEditor.js, but\n            // move it to ResponsesService in StateResponses.js to properly\n            // form a new rule.\n            $scope.rules.push(RuleObjectFactory.createNew(ruleType, inputs));\n            $scope.changeActiveRuleIndex($scope.rules.length - 1);\n          };\n\n          $scope.deleteRule = function(index) {\n            $scope.rules.splice(index, 1);\n            $scope.saveRules();\n\n            if ($scope.rules.length === 0) {\n              AlertsService.addWarning(\n                \'All answer groups must have at least one rule.\');\n            }\n          };\n\n          $scope.cancelActiveRuleEdit = function() {\n            $scope.rules.splice(0, $scope.rules.length);\n            for (var i = 0; i < $scope.rulesMemento.length; i++) {\n              $scope.rules.push($scope.rulesMemento[i]);\n            }\n            $scope.saveRules();\n          };\n\n          $scope.saveRules = function() {\n            $scope.changeActiveRuleIndex(-1);\n            $scope.rulesMemento = null;\n            $scope.getOnSaveAnswerGroupRulesFn()($scope.rules);\n          };\n\n          $scope.changeActiveRuleIndex = function(newIndex) {\n            ResponsesService.changeActiveRuleIndex(newIndex);\n            $scope.activeRuleIndex = ResponsesService.getActiveRuleIndex();\n          };\n\n          $scope.openRuleEditor = function(index) {\n            if (!$scope.isEditable) {\n              // The rule editor may not be opened in a read-only editor view.\n              return;\n            }\n            $scope.rulesMemento = angular.copy($scope.rules);\n            $scope.changeActiveRuleIndex(index);\n          };\n\n          $scope.isRuleEditorOpen = function() {\n            return $scope.activeRuleIndex !== -1;\n          };\n\n          $scope.$on(\'onInteractionIdChanged\', function() {\n            if ($scope.isRuleEditorOpen()) {\n              $scope.saveRules();\n            }\n            $scope.$broadcast(\'updateAnswerGroupInteractionId\');\n            $scope.answerChoices = $scope.getAnswerChoices();\n          });\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
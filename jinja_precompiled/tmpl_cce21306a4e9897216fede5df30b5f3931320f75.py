from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'expressions/ExpressionParserServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ndescribe(\'Expression parser service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  var eps = null;\n  beforeEach(inject(function($injector) {\n    eps = $injector.get(\'ExpressionParserService\');\n  }));\n\n  it(\'should parse to a correct tree\', function() {\n    [\n      [10, \'10\'],\n      [32, \'0x20\'],\n      [10.1, \'10.1\'],\n      [0.001, \'1e-3\'],\n      [0.35, \'.35\'],\n      [\'abc\', \'"abc"\'],\n      [\'a\\\'b\\\'c\', \'"a\\\'b\\\'c"\'],\n      [null, \'null\'],\n      [true, \'true\'],\n      [false, \'false\'],\n\n      [[\'#\', \'abc\'],\n        \'abc\'],\n      [[\'#\', \'\u3042\u3044\u3046\u3048\u304a\'],\n        \'\u3042\u3044\u3046\u3048\u304a\'],\n      [[\'abc\'],\n        \'abc()\'],\n      [[\'abc\', 1],\n        \'abc(1)\'],\n      [[\'abc\', 1, 2],\n        \'abc(1, 2)\'],\n      [[[[\'abc\', 1, 2]], 3],\n        \'abc(1, 2)()(3)\'],\n\n      [[\'+\', 10],\n        \'+10\'],\n      [[\'-\', [\'#\', \'abc\']],\n        \'-abc\'],\n      [[\'-\', 0.35], \'-.35\'],\n\n      [[\'+\', 1, 2], \'1     +    2\'],\n      // There is a double width space after \'+\'.\n      [[\'+\', 1, 2], \'\\t1 +\u30002 \'],\n\n      [[\'*\', [\'/\', 3, 4], 5],\n        \'3 / 4 * 5\'],\n      [[\'-\', [\'+\', 2, [\'*\', [\'/\', 3, 4], 5]], 6],\n        \'2 + 3 / 4 * 5 - 6\'],\n\n      [[\'||\', [\'&&\', [\'<\', 2, 3], [\'==\', 4, 6]], true],\n        \'2 < 3 && 4 == 6 || true\'],\n\n      // Expected to produce parser error.\n      [undefined, \'a1a-\'],\n      [undefined, \'0.3.4\'],\n      [undefined, \'abc()(\'],\n      [undefined, \'()\'],\n      [undefined, \'*100\']\n    ].forEach(function(test) {\n      // \'expected\' should be either a JavaScript primitive value that would be\n      //   the result of evaluating \'expression\', or undefined (which means\n      //   that the parser is expected to fail).\n      // \'expression\' is the expression string to be parsed.\n      var expected = test[0];\n      var expression = test[1];\n\n      var failed = false;\n      try {\n        var parsed = eps.parse(expression);\n        parsedJson = JSON.stringify(parsed);\n        var expectedJson = JSON.stringify(expected);\n        if (expected === undefined || parsedJson !== expectedJson) {\n          console.error(\'input    : \' + expression);\n          console.error(\'parsed   : \' + parsedJson);\n          console.error(\'expected : \' + expectedJson);\n          failed = true;\n        }\n      } catch (e) {\n        if (expected !== undefined || !(e instanceof eps.SyntaxError)) {\n          // Wrong or unexpected exception.\n          console.error(\'input     : \' + expression);\n          console.error(\'exception : \' + e);\n          console.error(\'expected  : \' + expected);\n          failed = true;\n        }\n      }\n      expect(failed).toBe(false);\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/StatesObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of State\n * domain objects given a list of backend state dictionaries.\n */\n\noppia.factory(\'StatesObjectFactory\', [\n  \'StateObjectFactory\', \'INTERACTION_SPECS\',\n  function(StateObjectFactory, INTERACTION_SPECS) {\n    var States = function(states) {\n      this._states = states;\n    };\n    States.prototype.getState = function(stateName) {\n      return angular.copy(this._states[stateName]);\n    };\n\n    // TODO(tjiang11): Remove getStateObjects() and replace calls\n    // with an object to represent data to be manipulated inside\n    // ExplorationDiffService.\n\n    States.prototype.getStateObjects = function() {\n      return angular.copy(this._states);\n    };\n    States.prototype.addState = function(newStateName) {\n      this._states[newStateName] = getNewStateTemplate(newStateName);\n    };\n    States.prototype.setState = function(stateName, stateData) {\n      this._states[stateName] = angular.copy(stateData);\n    };\n    States.prototype.hasState = function(stateName) {\n      return this._states.hasOwnProperty(stateName);\n    };\n    States.prototype.deleteState = function(deleteStateName) {\n      delete this._states[deleteStateName];\n      for (var otherStateName in this._states) {\n        var interaction = this._states[otherStateName].interaction;\n        var groups = interaction.answerGroups;\n        for (var i = 0; i < groups.length; i++) {\n          if (groups[i].outcome.dest === deleteStateName) {\n            groups[i].outcome.dest = otherStateName;\n          }\n        }\n        if (interaction.defaultOutcome) {\n          if (interaction.defaultOutcome.dest === deleteStateName) {\n            interaction.defaultOutcome.dest = otherStateName;\n          }\n        }\n      }\n    };\n    States.prototype.renameState = function(oldStateName, newStateName) {\n      this._states[newStateName] = angular.copy(this._states[oldStateName]);\n      delete this._states[oldStateName];\n\n      for (var otherStateName in this._states) {\n        var interaction = this._states[otherStateName].interaction;\n        var groups = interaction.answerGroups;\n        for (var i = 0; i < groups.length; i++) {\n          if (groups[i].outcome.dest === oldStateName) {\n            groups[i].outcome.dest = newStateName;\n          }\n        }\n        if (interaction.defaultOutcome) {\n          if (interaction.defaultOutcome.dest === oldStateName) {\n            interaction.defaultOutcome.dest = newStateName;\n          }\n        }\n      }\n    };\n    States.prototype.getStateNames = function() {\n      return Object.keys(this._states);\n    };\n    States.prototype.getFinalStateNames = function() {\n      var finalStateNames = [];\n      for (var stateName in this._states) {\n        var interaction = this._states[stateName].interaction;\n        if (interaction.id && INTERACTION_SPECS[interaction.id].is_terminal) {\n          finalStateNames.push(stateName);\n        }\n      }\n      return finalStateNames;\n    };\n\n    States.prototype.getAllAudioLanguageCodes = function() {\n      var allAudioLanguageCodes = [];\n      for (var stateName in this._states) {\n        var state = this._states[stateName];\n\n        var audioTranslationsForStateContent =\n          state.content.getBindableAudioTranslations();\n        for (var languageCode in audioTranslationsForStateContent) {\n          if (allAudioLanguageCodes.indexOf(languageCode) === -1) {\n            allAudioLanguageCodes.push(languageCode);\n          }\n        }\n\n        state.interaction.answerGroups.forEach(function(answerGroup) {\n          var audioTranslationsForAnswerGroup =\n            answerGroup.outcome.feedback.getBindableAudioTranslations();\n          for (var languageCode in audioTranslationsForAnswerGroup) {\n            if (allAudioLanguageCodes.indexOf(languageCode) === -1) {\n              allAudioLanguageCodes.push(languageCode);\n            }\n          }\n        });\n\n        if (state.interaction.defaultOutcome !== null) {\n          var audioTranslationsForDefaultOutcome =\n            state.interaction.defaultOutcome.feedback\n              .getBindableAudioTranslations();\n          for (var languageCode in audioTranslationsForDefaultOutcome) {\n            if (allAudioLanguageCodes.indexOf(languageCode) === -1) {\n              allAudioLanguageCodes.push(languageCode);\n            }\n          }\n        }\n\n        state.interaction.hints.forEach(function(hint) {\n          var audioTranslationsForHint =\n            hint.hintContent.getBindableAudioTranslations();\n          for (var languageCode in audioTranslationsForHint) {\n            if (allAudioLanguageCodes.indexOf(languageCode) === -1) {\n              allAudioLanguageCodes.push(languageCode);\n            }\n          }\n        });\n\n        if (state.interaction.solution !== null) {\n          var audioTranslationsForSolution =\n            state.interaction.solution.explanation\n              .getBindableAudioTranslations();\n          for (var languageCode in audioTranslationsForSolution) {\n            if (allAudioLanguageCodes.indexOf(languageCode) === -1) {\n              allAudioLanguageCodes.push(languageCode);\n            }\n          }\n        }\n      }\n      return allAudioLanguageCodes;\n    };\n\n    States.prototype.getAllAudioTranslations = function(languageCode) {\n      var allAudioTranslations = {};\n      for (var stateName in this._states) {\n        var state = this._states[stateName];\n        allAudioTranslations[stateName] = [];\n\n        var audioTranslationsForStateContent =\n          state.content.getBindableAudioTranslations();\n        if (audioTranslationsForStateContent.hasOwnProperty(languageCode)) {\n          allAudioTranslations[stateName].push(\n            audioTranslationsForStateContent[languageCode]);\n        }\n\n        state.interaction.answerGroups.forEach(function(answerGroup) {\n          var audioTranslationsForAnswerGroup =\n            answerGroup.outcome.feedback.getBindableAudioTranslations();\n          if (audioTranslationsForAnswerGroup.hasOwnProperty(languageCode)) {\n            allAudioTranslations[stateName].push(\n              audioTranslationsForAnswerGroup[languageCode]);\n          }\n        });\n\n        if (state.interaction.defaultOutcome !== null) {\n          var audioTranslationsForDefaultOutcome =\n            state.interaction.defaultOutcome.feedback\n              .getBindableAudioTranslations();\n          if (audioTranslationsForDefaultOutcome.hasOwnProperty(languageCode)) {\n            allAudioTranslations[stateName].push(\n              audioTranslationsForDefaultOutcome[languageCode]);\n          }\n        }\n\n        state.interaction.hints.forEach(function(hint) {\n          var audioTranslationsForHint =\n            hint.hintContent.getBindableAudioTranslations();\n          if (audioTranslationsForHint.hasOwnProperty(languageCode)) {\n            allAudioTranslations[stateName].push(\n              audioTranslationsForHint[languageCode]);\n          }\n        });\n\n        if (state.interaction.solution !== null) {\n          var audioTranslationsForSolution =\n            state.interaction.solution.explanation\n              .getBindableAudioTranslations();\n          if (audioTranslationsForSolution.hasOwnProperty(languageCode)) {\n            allAudioTranslations[stateName].push(\n              audioTranslationsForSolution[languageCode]);\n          }\n        }\n      }\n      return allAudioTranslations;\n    };\n\n    States.createFromBackendDict = function(statesBackendDict) {\n      var stateObjectsDict = {};\n      for (var stateName in statesBackendDict) {\n        stateObjectsDict[stateName] = StateObjectFactory.createFromBackendDict(\n          stateName, statesBackendDict[stateName]);\n      }\n      return new States(stateObjectsDict);\n    };\n\n    var getNewStateTemplate = function(newStateName) {\n      var newStateTemplate = angular.copy(GLOBALS.NEW_STATE_TEMPLATE);\n      var newState = StateObjectFactory.createFromBackendDict(newStateName, {\n        classifier_model_id: newStateTemplate.classifier_model_id,\n        content: newStateTemplate.content,\n        interaction: newStateTemplate.interaction,\n        param_changes: newStateTemplate.param_changes\n      });\n      newState.interaction.defaultOutcome.dest = newStateName;\n      return newState;\n    };\n\n    return States;\n  }\n]);'

blocks = {}
debug_info = ''
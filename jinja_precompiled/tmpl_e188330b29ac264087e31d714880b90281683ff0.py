from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/EditorServices.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Standalone services for the exploration editor page.\n */\n\noppia.factory(\'statePropertyService\', [\n  \'$log\', \'ChangeListService\', \'AlertsService\', \'ExplorationStatesService\',\n  function($log, ChangeListService, AlertsService, ExplorationStatesService) {\n    // Public base API for data services corresponding to state properties\n    // (interaction id, content, etc.)\n    // WARNING: This should be initialized only in the context of the state\n    // editor, and every time the state is loaded, so that proper behavior is\n    // maintained if e.g. the state is renamed.\n    // TODO(sll): Remove this service and its descendants, in favour of using\n    // ExplorationStatesService directly.\n    return {\n      init: function(stateName, value) {\n        if (this.setterMethodKey === null) {\n          throw \'State property setter method key cannot be null.\';\n        }\n\n        // The name of the state.\n        this.stateName = stateName;\n        // The current value of the property (which may not have been saved to\n        // the frontend yet). In general, this will be bound directly to the UI.\n        this.displayed = angular.copy(value);\n        // The previous (saved-in-the-frontend) value of the property. Here,\n        // \'saved\' means that this is the latest value of the property as\n        // determined by the frontend change list.\n        this.savedMemento = angular.copy(value);\n      },\n      // Returns whether the current value has changed from the memento.\n      hasChanged: function() {\n        return !angular.equals(this.savedMemento, this.displayed);\n      },\n      // The name of the setter method in ExplorationStatesService for this\n      // property. THIS MUST BE SPECIFIED BY SUBCLASSES.\n      setterMethodKey: null,\n      // Transforms the given value into a normalized form. THIS CAN BE\n      // OVERRIDDEN BY SUBCLASSES. The default behavior is to do nothing.\n      _normalize: function(value) {\n        return value;\n      },\n      // Validates the given value and returns a boolean stating whether it\n      // is valid or not. THIS CAN BE OVERRIDDEN BY SUBCLASSES. The default\n      // behavior is to always return true.\n      _isValid: function(value) {\n        return true;\n      },\n      // Creates a new entry in the change list, and updates the memento to the\n      // displayed value.\n      saveDisplayedValue: function() {\n        if (this.setterMethodKey === null) {\n          throw \'State property setter method key cannot be null.\';\n        }\n\n        this.displayed = this._normalize(this.displayed);\n        if (!this._isValid(this.displayed) || !this.hasChanged()) {\n          this.restoreFromMemento();\n          return;\n        }\n\n        if (angular.equals(this.displayed, this.savedMemento)) {\n          return;\n        }\n\n        AlertsService.clearWarnings();\n\n        var setterFunc = ExplorationStatesService[this.setterMethodKey];\n        setterFunc(this.stateName, angular.copy(this.displayed));\n        this.savedMemento = angular.copy(this.displayed);\n      },\n      // Reverts the displayed value to the saved memento.\n      restoreFromMemento: function() {\n        this.displayed = angular.copy(this.savedMemento);\n      }\n    };\n  }\n]);\n\n// A data service that stores the current state content.\n// TODO(sll): Add validation.\noppia.factory(\'stateContentService\', [\n  \'statePropertyService\', function(statePropertyService) {\n    var child = Object.create(statePropertyService);\n    child.setterMethodKey = \'saveStateContent\';\n    return child;\n  }\n]);\n\n// A data service that stores the current list of state parameter changes.\n// TODO(sll): Add validation.\noppia.factory(\'stateParamChangesService\', [\n  \'statePropertyService\', function(statePropertyService) {\n    var child = Object.create(statePropertyService);\n    child.setterMethodKey = \'saveStateParamChanges\';\n    return child;\n  }\n]);\n\n// A data service that stores the current interaction id.\n// TODO(sll): Add validation.\noppia.factory(\'stateInteractionIdService\', [\n  \'statePropertyService\', function(statePropertyService) {\n    var child = Object.create(statePropertyService);\n    child.setterMethodKey = \'saveInteractionId\';\n    return child;\n  }\n]);\n\n// A data service that stores the current state customization args for the\n// interaction. This is a dict mapping customization arg names to dicts of the\n// form {value: customization_arg_value}.\n// TODO(sll): Add validation.\noppia.factory(\'stateCustomizationArgsService\', [\n  \'statePropertyService\', function(statePropertyService) {\n    var child = Object.create(statePropertyService);\n    child.setterMethodKey = \'saveInteractionCustomizationArgs\';\n    return child;\n  }\n]);\n\n// A data service that stores the current interaction hints.\noppia.factory(\'stateHintsService\', [\n  \'statePropertyService\', function(statePropertyService) {\n    var child = Object.create(statePropertyService);\n    child.setterMethodKey = \'saveHints\';\n    return child;\n  }\n]);\n\n// A data service that stores the current interaction solution.\noppia.factory(\'stateSolutionService\', [\n  \'statePropertyService\', function(statePropertyService) {\n    var child = Object.create(statePropertyService);\n    child.setterMethodKey = \'saveSolution\';\n    return child;\n  }\n]);\n\noppia.constant(\'WARNING_TYPES\', {\n  // These must be fixed before the exploration can be saved.\n  CRITICAL: \'critical\',\n  // These must be fixed before publishing an exploration to the public\n  // library.\n  ERROR: \'error\'\n});\n\noppia.constant(\'STATE_ERROR_MESSAGES\', {\n  ADD_INTERACTION: \'Please add an interaction to this card.\',\n  STATE_UNREACHABLE: \'This card is unreachable.\',\n  UNABLE_TO_END_EXPLORATION: (\n    \'There\\\'s no way to complete the exploration starting from this card.\'),\n  INCORRECT_SOLUTION: (\n    \'The current solution does not lead to another card.\')\n});'

blocks = {}
debug_info = ''
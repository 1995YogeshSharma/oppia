from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/ExplorationHtmlFormatterServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for services for explorations which may be shared\n * by both the learner and editor views\n */\n\ndescribe(\'Exploration Html Formatter Service\', function() {\n  beforeEach(module(\'oppia\'));\n  var ehfs = null;\n\n  beforeEach(module(function($provide) {\n    $provide.constant(\'INTERACTION_SPECS\', {\n      sampleId: {\n        show_generic_submit_button: true\n      },\n    });\n  }));\n\n  beforeEach(inject(function($injector) {\n    ehfs = $injector.get(\'ExplorationHtmlFormatterService\');\n  }));\n\n  it(\'should correctly set interaction HTML when it is in editor mode\',\n    function() {\n      var interactionId = \'sampleId\';\n      var expectedHtmlTag = \'<oppia-interactive-sample-id \' +\n        \'on-submit="submitAnswer(answer, rulesService);" \' +\n        \'last-answer="lastAnswer" \' +\n        \'set-answer-validity="setInteractionAnswerValidity(answerValidity)"\' +\n        \'></oppia-interactive-sample-id>\';\n      expect(ehfs.getInteractionHtml(interactionId, null, true, null))\n        .toBe(expectedHtmlTag);\n    });\n\n  it(\'should correctly set interaction HTML when it is in player mode\',\n    function() {\n      var interactionId = \'sampleId\';\n      var focusLabel = \'sampleLabel\';\n      var expectedHtmlTag = \'<oppia-interactive-sample-id \' +\n        \'on-submit="submitAnswer(answer, rulesService);" \' +\n        \'last-answer="null" label-for-focus-target="\' + focusLabel + \'" \' +\n        \'set-answer-validity="setInteractionAnswerValidity(answerValidity)">\' +\n        \'</oppia-interactive-sample-id>\';\n      expect(ehfs.getInteractionHtml(interactionId, null, false, focusLabel)\n      ).toBe(expectedHtmlTag);\n    });\n\n  it(\'should set answer HTML correctly\', function() {\n    var interactionId = \'sampleId\';\n    var answer = \'sampleAnswer\';\n    var interactionCustomizationArgs = {};\n    interactionCustomizationArgs.choices = {\n      value: \'sampleChoice\'\n    };\n    var expectedHtmlTag = \'<oppia-response-sample-id \' +\n      \'answer="&amp;quot;\' + answer + \'&amp;quot;" \' +\n      \'choices="&amp;quot;\' + interactionCustomizationArgs.choices.value +\n      \'&amp;quot;"></oppia-response-sample-id>\';\n    expect(ehfs.getAnswerHtml(answer, interactionId,\n      interactionCustomizationArgs)\n    ).toBe(expectedHtmlTag);\n  });\n\n  it(\'should set short answer HTML correctly\', function() {\n    var interactionId = \'sampleId\';\n    var answer = \'sampleAnswer\';\n    var interactionCustomizationArgs = {};\n    interactionCustomizationArgs.choices = {\n      value: \'sampleChoice\'\n    };\n    var expectedHtmlTag = \'<oppia-short-response-sample-id \' +\n      \'answer="&amp;quot;\' + answer + \'&amp;quot;" \' +\n      \'choices="&amp;quot;\' + interactionCustomizationArgs.choices.value +\n      \'&amp;quot;"></oppia-short-response-sample-id>\';\n    expect(ehfs.getShortAnswerHtml(answer, interactionId,\n      interactionCustomizationArgs)\n    ).toBe(expectedHtmlTag);\n  });\n});'

blocks = {}
debug_info = ''
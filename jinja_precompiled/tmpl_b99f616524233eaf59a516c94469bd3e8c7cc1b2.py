from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/CollectionRightsBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to change the rights of collections in the backend.\n */\n\noppia.factory(\'CollectionRightsBackendApiService\', [\n  \'$http\', \'$log\', \'$q\', \'COLLECTION_RIGHTS_URL_TEMPLATE\',\n  \'UrlInterpolationService\',\n  function($http, $log, $q, COLLECTION_RIGHTS_URL_TEMPLATE,\n      UrlInterpolationService) {\n    // Maps previously loaded collection rights to their IDs.\n    var collectionRightsCache = {};\n\n    var _fetchCollectionRights = function(collectionId, successCallback,\n        errorCallback) {\n      var collectionRightsUrl = UrlInterpolationService.interpolateUrl(\n        COLLECTION_RIGHTS_URL_TEMPLATE, {\n          collection_id: collectionId\n        });\n\n      $http.get(collectionRightsUrl).then(function(response) {\n        if (successCallback) {\n          successCallback(response.data);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _setCollectionStatus = function(\n        collectionId, collectionVersion, isPublic, successCallback,\n        errorCallback) {\n      var collectionPublishUrl = UrlInterpolationService.interpolateUrl(\n        \'/collection_editor_handler/publish/<collection_id>\', {\n          collection_id: collectionId\n        });\n      var collectionUnpublishUrl = UrlInterpolationService.interpolateUrl(\n        \'/collection_editor_handler/unpublish/<collection_id>\', {\n          collection_id: collectionId\n        });\n\n      var putParams = {\n        version: collectionVersion\n      };\n      var requestUrl = (\n        isPublic ? collectionPublishUrl : collectionUnpublishUrl);\n\n      $http.put(requestUrl, putParams).then(function(response) {\n        collectionRightsCache[collectionId] = response.data;\n        if (successCallback) {\n          successCallback(response.data);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _isCached = function(collectionId) {\n      return collectionRightsCache.hasOwnProperty(collectionId);\n    };\n\n    return {\n      /**\n       * Gets a collection\'s rights, given its ID.\n       */\n      fetchCollectionRights: function(collectionId) {\n        return $q(function(resolve, reject) {\n          _fetchCollectionRights(collectionId, resolve, reject);\n        });\n      },\n\n      /**\n       * Behaves exactly as fetchCollectionRights (including callback\n       * behavior and returning a promise object), except this function will\n       * attempt to see whether the given collection rights has been\n       * cached. If it has not yet been cached, it will fetch the collection\n       * rights from the backend. If it successfully retrieves the collection\n       * rights from the backend, it will store it in the cache to avoid\n       * requests from the backend in further function calls.\n       */\n      loadCollectionRights: function(collectionId) {\n        return $q(function(resolve, reject) {\n          if (_isCached(collectionId)) {\n            if (resolve) {\n              resolve(collectionRightsCache[collectionId]);\n            }\n          } else {\n            _fetchCollectionRights(collectionId, function(collectionRights) {\n              // Save the fetched collection rights to avoid future fetches.\n              collectionRightsCache[collectionId] = collectionRights;\n              if (resolve) {\n                resolve(collectionRightsCache[collectionId]);\n              }\n            }, reject);\n          }\n        });\n      },\n\n      /**\n       * Returns whether the given collection rights is stored within the\n       * local data cache or if it needs to be retrieved from the backend\n       * upon a laod.\n       */\n      isCached: function(collectionId) {\n        return _isCached(collectionId);\n      },\n\n      /**\n       * Replaces the current collection rights in the cache given by the\n       * specified collection ID with a new collection rights object.\n       */\n      cacheCollectionRights: function(collectionId, collectionRights) {\n        collectionRightsCache[collectionId] = angular.copy(collectionRights);\n      },\n\n      /**\n       * Updates a collection\'s rights to be have public learner access, given\n       * its ID and version.\n       */\n      setCollectionPublic: function(collectionId, collectionVersion) {\n        return $q(function(resolve, reject) {\n          _setCollectionStatus(\n            collectionId, collectionVersion, true, resolve, reject);\n        });\n      },\n\n      /**\n       * Updates a collection\'s rights to be have private learner access,\n       * given its ID and version.\n       */\n      setCollectionPrivate: function(collectionId, collectionVersion) {\n        return $q(function(resolve, reject) {\n          _setCollectionStatus(\n            collectionId, collectionVersion, false, resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
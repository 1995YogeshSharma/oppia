from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/ComputeGraphService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for computing a graphical representation of an\n * exploration.\n */\n\noppia.factory(\'ComputeGraphService\', [\n  \'INTERACTION_SPECS\', function(INTERACTION_SPECS) {\n    var _computeGraphData = function(initStateId, states) {\n      var nodes = {};\n      var links = [];\n      var finalStateIds = states.getFinalStateNames();\n\n      states.getStateNames().forEach(function(stateName) {\n        var interaction = states.getState(stateName).interaction;\n        nodes[stateName] = stateName;\n        if (interaction.id) {\n          var groups = interaction.answerGroups;\n          for (var h = 0; h < groups.length; h++) {\n            links.push({\n              source: stateName,\n              target: groups[h].outcome.dest,\n            });\n          }\n\n          if (interaction.defaultOutcome) {\n            links.push({\n              source: stateName,\n              target: interaction.defaultOutcome.dest,\n            });\n          }\n        }\n      });\n\n      return {\n        finalStateIds: finalStateIds,\n        initStateId: initStateId,\n        links: links,\n        nodes: nodes\n      };\n    };\n\n    var _computeBfsTraversalOfStates = function(\n        initStateId, states, sourceStateName) {\n      var stateGraph = _computeGraphData(initStateId, states);\n      var stateNamesInBfsOrder = [];\n      var queue = [];\n      var seen = {};\n      seen[sourceStateName] = true;\n      queue.push(sourceStateName);\n      while (queue.length > 0) {\n        var currStateName = queue.shift();\n        stateNamesInBfsOrder.push(currStateName);\n        for (var e = 0; e < stateGraph.links.length; e++) {\n          var edge = stateGraph.links[e];\n          var dest = edge.target;\n          if (edge.source === currStateName && !seen.hasOwnProperty(dest)) {\n            seen[dest] = true;\n            queue.push(dest);\n          }\n        }\n      }\n      return stateNamesInBfsOrder;\n    };\n\n    return {\n      compute: function(initStateId, states) {\n        return _computeGraphData(initStateId, states);\n      },\n      computeBfsTraversalOfStates: function(\n          initStateId, states, sourceStateName) {\n        return _computeBfsTraversalOfStates(\n          initStateId, states, sourceStateName);\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
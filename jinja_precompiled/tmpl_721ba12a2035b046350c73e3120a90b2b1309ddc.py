from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/AudioTranslationManagerService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to manage what audio translations are currently\n * being played or paused.\n */\n\noppia.factory(\'AudioTranslationManagerService\', [\n  function() {\n    // Audio translations for the main content of a card at the top.\n    var _contentAudioTranslations = null;\n    var _contentHtmlForAutogeneratedAudio = null;\n\n    // Audio translations for everything other than the main content, such as\n    // those for feedback, hints, and solutions.\n    var _secondaryAudioTranslations = null;\n    var _secondaryHtmlForAutogeneratedAudio = null;\n\n    var _currentPrimaryComponentName = null;\n    var _currentSecondaryComponentName = null;\n\n    return {\n      setContentAudioTranslations: function(\n          audioTranslations, html, componentName) {\n        _contentAudioTranslations = audioTranslations;\n        _contentHtmlForAutogeneratedAudio = html;\n        _currentPrimaryComponentName = componentName;\n      },\n      setSecondaryAudioTranslations: function(\n          audioTranslations, html, componentName) {\n        _secondaryAudioTranslations = audioTranslations;\n        _secondaryHtmlForAutogeneratedAudio = html;\n        _currentSecondaryComponentName = componentName;\n      },\n      clearSecondaryAudioTranslations: function() {\n        _secondaryAudioTranslations = null;\n        _secondaryHtmlForAutogeneratedAudio = null;\n        _currentSecondaryComponentName = null;\n      },\n      getCurrentAudioTranslations: function() {\n        if (_secondaryAudioTranslations !== null) {\n          return _secondaryAudioTranslations;\n        }\n        return _contentAudioTranslations;\n      },\n      getCurrentHtmlForAutogeneratedAudio: function() {\n        if (_secondaryHtmlForAutogeneratedAudio !== null) {\n          return _secondaryHtmlForAutogeneratedAudio;\n        }\n        return _contentHtmlForAutogeneratedAudio;\n      },\n      getCurrentComponentName: function() {\n        if (_currentSecondaryComponentName !== null) {\n          return _currentSecondaryComponentName;\n        }\n        return _currentPrimaryComponentName;\n      }\n    };\n  }]\n);'

blocks = {}
debug_info = ''
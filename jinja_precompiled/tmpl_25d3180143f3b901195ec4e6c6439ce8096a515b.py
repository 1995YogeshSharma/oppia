from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/StateContentEditorDirectiveSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the state content editor directive.\n */\n\ndescribe(\'State content editor directive\', function() {\n  var outerScope, ctrlScope, shof, cls, scs, es, ess;\n\n  var _getContent = function(contentString) {\n    return shof.createFromBackendDict({\n      html: contentString,\n      audio_translations: {}\n    });\n  };\n\n  beforeEach(module(\'directiveTemplates\'));\n  beforeEach(function() {\n    module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS);\n\n    mockExplorationData = {\n      explorationId: 0,\n      autosaveChangeList: function() {}\n    };\n    module(function($provide) {\n      $provide.value(\'ExplorationDataService\', [mockExplorationData][0]);\n    });\n  });\n\n  beforeEach(inject(function($compile, $injector, $rootScope, $templateCache) {\n    shof = $injector.get(\'SubtitledHtmlObjectFactory\');\n    cls = $injector.get(\'ChangeListService\');\n    scs = $injector.get(\'stateContentService\');\n    es = $injector.get(\'EditabilityService\');\n    ess = $injector.get(\'ExplorationStatesService\');\n\n    scs.init(\'Third State\', _getContent(\'This is some content.\'));\n    es.markEditable();\n    ess.init({\n      \'First State\': {\n        content: {\n          html: \'First State Content\',\n          audio_translations: {}\n        },\n        interaction: {\n          id: \'TextInput\',\n          answer_groups: [{\n            rule_specs: [],\n            outcome: {\n              dest: \'unused\',\n              feedback: [],\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            },\n          }],\n          default_outcome: {\n            dest: \'default\',\n            feedback: [],\n            labelled_as_correct: false,\n            param_changes: [],\n            refresher_exploration_id: null\n          },\n          hints: []\n        },\n        param_changes: []\n      },\n      \'Second State\': {\n        content: {\n          html: \'Second State Content\',\n          audio_translations: {}\n        },\n        interaction: {\n          id: \'TextInput\',\n          answer_groups: [{\n            rule_specs: [],\n            outcome: {\n              dest: \'unused\',\n              feedback: [],\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            }\n          }],\n          default_outcome: {\n            dest: \'default\',\n            feedback: [],\n            labelled_as_correct: false,\n            param_changes: [],\n            refresher_exploration_id: null\n          },\n          hints: []\n        },\n        param_changes: []\n      },\n      \'Third State\': {\n        content: {\n          html: \'This is some content.\',\n          audio_translations: {}\n        },\n        interaction: {\n          id: \'TextInput\',\n          answer_groups: [{\n            rule_specs: [],\n            outcome: {\n              dest: \'unused\',\n              feedback: [],\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            }\n          }],\n          default_outcome: {\n            dest: \'default\',\n            feedback: [],\n            labelled_as_correct: false,\n            param_changes: [],\n            refresher_exploration_id: null\n          },\n          hints: []\n        },\n        param_changes: [{\n          name: \'comparison\',\n          generator_id: \'Copier\',\n          customization_args: {\n            value: \'something clever\',\n            parse_with_jinja: false\n          }\n        }]\n      }\n    });\n\n    var templateHtml = $templateCache.get(\n      \'/pages/exploration_editor/editor_tab/\' +\n      \'state_content_editor_directive.html\');\n    $compile(templateHtml, $rootScope);\n    $rootScope.$digest();\n\n    outerScope = $rootScope.$new();\n    outerScope.onSaveContentFn = jasmine.createSpy(\'onSaveContentFn\');\n    var elem = angular.element(\n      \'<state-content-editor on-save-content-fn="onSaveContentFn">\' +\n      \'</state-content-editor>\');\n    var compiledElem = $compile(elem)(outerScope);\n    outerScope.$digest();\n    ctrlScope = compiledElem[0].getControllerScope();\n  }));\n\n  it(\'should start with the content editor not being open\', function() {\n    expect(ctrlScope.contentEditorIsOpen).toBe(false);\n  });\n\n  it(\'should correctly handle no-op edits\', function() {\n    expect(ctrlScope.contentEditorIsOpen).toBe(false);\n    expect(scs.savedMemento).toEqual(_getContent(\'This is some content.\'));\n    ctrlScope.openStateContentEditor();\n    expect(ctrlScope.contentEditorIsOpen).toBe(true);\n    scs.displayed = _getContent(\'This is some content.\');\n    ctrlScope.onSaveContentButtonClicked();\n\n    expect(ctrlScope.contentEditorIsOpen).toBe(false);\n    expect(cls.getChangeList()).toEqual([]);\n  });\n\n  it(\'should check that content edits are saved correctly\', function() {\n    expect(cls.getChangeList()).toEqual([]);\n\n    ctrlScope.openStateContentEditor();\n    scs.displayed = _getContent(\'babababa\');\n    ctrlScope.onSaveContentButtonClicked();\n    expect(cls.getChangeList().length).toBe(1);\n    expect(cls.getChangeList()[0].new_value.html).toEqual(\'babababa\');\n    expect(cls.getChangeList()[0].old_value.html).toEqual(\n      \'This is some content.\');\n\n    ctrlScope.openStateContentEditor();\n    scs.displayed = _getContent(\n      \'And now for something completely different.\');\n    ctrlScope.onSaveContentButtonClicked();\n    expect(cls.getChangeList().length).toBe(2);\n    expect(cls.getChangeList()[1].new_value.html)\n      .toEqual(\'And now for something completely different.\');\n    expect(cls.getChangeList()[1].old_value.html).toEqual(\'babababa\');\n  });\n\n  it(\'should not save changes to content when edit is cancelled\', function() {\n    var contentBeforeEdit = angular.copy(scs.savedMemento);\n\n    scs.displayed = _getContent(\'Test Content\');\n    ctrlScope.cancelEdit();\n    expect(ctrlScope.contentEditorIsOpen).toBe(false);\n    expect(scs.savedMemento).toEqual(contentBeforeEdit);\n    expect(scs.displayed).toEqual(contentBeforeEdit);\n  });\n\n  it(\'should call the callback function on-save\', function() {\n    ctrlScope.onSaveContentButtonClicked();\n    expect(outerScope.onSaveContentFn).toHaveBeenCalled();\n  });\n});'

blocks = {}
debug_info = ''
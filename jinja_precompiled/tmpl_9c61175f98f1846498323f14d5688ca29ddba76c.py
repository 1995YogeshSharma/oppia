from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/ConceptCardObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n* @fileoverview Unit tests for ConceptCardObjectFactory.\n*/\n\ndescribe(\'Concept card object factory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'ConceptCardObjectFactory\', function() {\n    var ConceptCardObjectFactory;\n    var conceptCardDict = {\n      explanation: \'test explanation\',\n      worked_examples: [\'worked example 1\', \'worked example 2\']\n    };\n    beforeEach(inject(function($injector) {\n      ConceptCardObjectFactory = $injector.get(\'ConceptCardObjectFactory\');\n    }));\n\n    it(\'should create a new concept card from a backend dictionary\',\n      function() {\n        var conceptCard =\n          ConceptCardObjectFactory.createFromBackendDict(conceptCardDict);\n        expect(conceptCard.getExplanation()).toEqual(\'test explanation\');\n        expect(conceptCard.getWorkedExamples()).toEqual(\n          [\'worked example 1\', \'worked example 2\']);\n      });\n\n    it(\'should convert to a backend dictionary\', function() {\n      var conceptCard =\n        ConceptCardObjectFactory.createFromBackendDict(conceptCardDict);\n      expect(conceptCard.toBackendDict()).toEqual(conceptCardDict);\n    });\n\n    it(\'should create an interstitial concept card\', function() {\n      var conceptCard =\n        ConceptCardObjectFactory.createInterstitialConceptCard();\n      expect(conceptCard.getExplanation()).toEqual(\n        \'Loading review material\');\n      expect(conceptCard.getWorkedExamples()).toEqual([]);\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/AudioTranslationManagerServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the audio translation manager service.\n */\n\ndescribe(\'Audio translation manager service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  var atms;\n  var testAudioTranslations;\n  var testAudioTranslations2;\n  beforeEach(inject(function($injector) {\n    atms = $injector.get(\'AudioTranslationManagerService\');\n    atof = $injector.get(\'AudioTranslationObjectFactory\');\n\n    testAudioTranslations = {\n      en: atof.createFromBackendDict({\n        filename: \'audio-en.mp3\',\n        file_size_bytes: 0.5,\n        needs_update: false\n      }),\n      es: atof.createFromBackendDict({\n        filename: \'audio-es.mp3\',\n        file_size_bytes: 0.5,\n        needs_update: false\n      })\n    };\n\n    testAudioTranslations2 = {\n      zh: atof.createFromBackendDict({\n        filename: \'audio-zh.mp3\',\n        file_size_bytes: 0.5,\n        needs_update: false\n      }),\n      \'hi-en\': atof.createFromBackendDict({\n        filename: \'audio-hi-en.mp3\',\n        file_size_bytes: 0.5,\n        needs_update: false\n      })\n    };\n  }));\n\n  it(\'should properly set primary and secondary audio translations\',\n    function() {\n      atms.setContentAudioTranslations(testAudioTranslations);\n      expect(atms.getCurrentAudioTranslations()).toEqual({\n        en: atof.createFromBackendDict({\n          filename: \'audio-en.mp3\',\n          file_size_bytes: 0.5,\n          needs_update: false\n        }),\n        es: atof.createFromBackendDict({\n          filename: \'audio-es.mp3\',\n          file_size_bytes: 0.5,\n          needs_update: false\n        })\n      });\n      atms.setSecondaryAudioTranslations(testAudioTranslations2);\n      expect(atms.getCurrentAudioTranslations()).toEqual({\n        zh: atof.createFromBackendDict({\n          filename: \'audio-zh.mp3\',\n          file_size_bytes: 0.5,\n          needs_update: false\n        }),\n        \'hi-en\': atof.createFromBackendDict({\n          filename: \'audio-hi-en.mp3\',\n          file_size_bytes: 0.5,\n          needs_update: false\n        })\n      });\n      atms.clearSecondaryAudioTranslations();\n      expect(atms.getCurrentAudioTranslations()).toEqual({\n        en: atof.createFromBackendDict({\n          filename: \'audio-en.mp3\',\n          file_size_bytes: 0.5,\n          needs_update: false\n        }),\n        es: atof.createFromBackendDict({\n          filename: \'audio-es.mp3\',\n          file_size_bytes: 0.5,\n          needs_update: false\n        })\n      });\n    });\n});'

blocks = {}
debug_info = ''
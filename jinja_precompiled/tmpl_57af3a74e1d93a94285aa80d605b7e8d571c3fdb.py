from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/forms/Select2DropdownDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the select2 autocomplete component.\n */\n\noppia.directive(\'select2Dropdown\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    // Directive for incorporating select2 dropdowns.\n    return {\n      restrict: \'E\',\n      scope: {\n        // Whether to allow multiple choices. In order to do so, the value of\n        // this attribute must be the exact string \'true\'.\n        allowMultipleChoices: \'@\',\n        choices: \'=\',\n        // An additional CSS class to add to the select2 dropdown. May be\n        // undefined.\n        dropdownCssClass: \'@\',\n        // A function that formats a new selection. May be undefined.\n        formatNewSelection: \'=\',\n        // The message shown when an invalid search term is entered. May be\n        // undefined, in which case this defaults to \'No matches found\'.\n        invalidSearchTermMessage: \'@\',\n        item: \'=\',\n        // The regex used to validate newly-entered choices that do not\n        // already exist. If it is undefined then all new choices are rejected.\n        newChoiceRegex: \'@\',\n        onSelectionChange: \'&\',\n        placeholder: \'@\',\n        width: \'@\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/forms/select2_dropdown_directive.html\'),\n      controller: [\'$scope\', \'$element\', function($scope, $element) {\n        $scope.newChoiceValidator = new RegExp($scope.newChoiceRegex);\n\n        var select2Options = {\n          allowClear: false,\n          data: $scope.choices,\n          multiple: $scope.allowMultipleChoices === \'true\',\n          tags: $scope.newChoiceRegex !== undefined,\n          placeholder: $scope.placeholder,\n          width: $scope.width || \'250px\',\n          createTag: function(params) {\n            return params.term.match($scope.newChoiceValidator) ? {\n              id: params.term,\n              text: params.term\n            } : null;\n          },\n          templateResult: function(queryResult) {\n            var doesChoiceMatchText = function(choice) {\n              return choice.id === queryResult.text;\n            };\n\n            if ($scope.choices && $scope.choices.some(doesChoiceMatchText)) {\n              return queryResult.text;\n            } else {\n              if ($scope.formatNewSelection) {\n                return $scope.formatNewSelection(queryResult.text);\n              } else {\n                return queryResult.text;\n              }\n            }\n          },\n          language: {\n            noResults: function() {\n              if ($scope.invalidSearchTermMessage) {\n                return $scope.invalidSearchTermMessage;\n              } else {\n                return \'No matches found\';\n              }\n            }\n          }\n        };\n\n        if ($scope.dropdownCssClass) {\n          select2Options.dropdownCssClass = $scope.dropdownCssClass;\n        }\n\n        var select2Node = $element[0].firstChild;\n\n        // Initialize the dropdown.\n        $(select2Node).select2(select2Options);\n        $(select2Node).val($scope.item).trigger(\'change\');\n\n        // Update $scope.item when the selection changes.\n        $(select2Node).on(\'change\', function() {\n          $scope.item = $(select2Node).val();\n          $scope.$apply();\n          $scope.onSelectionChange();\n        });\n\n        // Respond to external changes in $scope.item\n        $scope.$watch(\'item\', function(newValue) {\n          $(select2Node).val(newValue);\n        });\n      }]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/ExplorationPlayerStateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A service that maintains a record of the state of the player,\n *  like engine service.\n */\n\noppia.factory(\'ExplorationPlayerStateService\', [\n  \'$log\', \'$q\', \'ExplorationEngineService\', \'PretestEngineService\',\n  \'ContextService\', \'UrlService\', \'StateClassifierMappingService\',\n  \'StatsReportingService\', \'PlaythroughService\',\n  \'PlayerCorrectnessFeedbackEnabledService\', \'PlayerTranscriptService\',\n  \'EditableExplorationBackendApiService\',\n  \'ReadOnlyExplorationBackendApiService\', \'PretestQuestionBackendApiService\',\n  \'NumberAttemptsService\',\n  function(\n      $log, $q, ExplorationEngineService, PretestEngineService,\n      ContextService, UrlService, StateClassifierMappingService,\n      StatsReportingService, PlaythroughService,\n      PlayerCorrectnessFeedbackEnabledService, PlayerTranscriptService,\n      EditableExplorationBackendApiService,\n      ReadOnlyExplorationBackendApiService, PretestQuestionBackendApiService,\n      NumberAttemptsService) {\n    var _currentEngineService = null;\n    var _inPretestMode = false;\n    var _editorPreviewMode = ContextService.isInExplorationEditorPage();\n    var _explorationId = ContextService.getExplorationId();\n    var _version = GLOBALS.explorationVersion;\n    var _storyId = UrlService.getStoryIdInPlayer();\n\n    var _initializeExplorationServices = function(\n        returnDict, arePretestsAvailable, callback) {\n      StateClassifierMappingService.init(\n        returnDict.state_classifier_mapping);\n      StatsReportingService.initSession(\n        _explorationId, returnDict.exploration.title,\n        _version, returnDict.session_id, GLOBALS.collectionId);\n      PlaythroughService.initSession(\n        _explorationId, _version, returnDict.record_playthrough_probability,\n        returnDict.whitelisted_exploration_ids_for_playthroughs);\n      PlayerCorrectnessFeedbackEnabledService.init(\n        returnDict.correctness_feedback_enabled);\n      ExplorationEngineService.init(\n        returnDict.exploration, returnDict.version,\n        returnDict.preferred_audio_language_code,\n        returnDict.auto_tts_enabled,\n        arePretestsAvailable ?\n        function() {} : callback);\n    };\n\n    var _initializePretestServices = function(pretestQuestionDicts, callback) {\n      PlayerCorrectnessFeedbackEnabledService.init(true);\n      PretestEngineService.init(pretestQuestionDicts, callback);\n    };\n\n    var _setExplorationMode = function() {\n      _inPretestMode = false;\n      _currentEngineService = ExplorationEngineService;\n    };\n\n    var _setPretestMode = function() {\n      _inPretestMode = true;\n      _currentEngineService = PretestEngineService;\n    };\n\n    return {\n      getCurrentEngineService: function() {\n        return _currentEngineService;\n      },\n      isInPretestMode: function() {\n        return _inPretestMode;\n      },\n      getPretestQuestionCount: function() {\n        return PretestEngineService.getPretestQuestionCount();\n      },\n      moveToExploration: function(callback) {\n        _setExplorationMode();\n        ExplorationEngineService.moveToExploration(callback);\n      },\n      doesInteractionSupportHints: function() {\n        return _currentEngineService.doesInteractionSupportHints();\n      },\n      getCurrentStateName: function() {\n        return _currentEngineService.getCurrentStateName();\n      },\n      getCurrentInteraction: function() {\n        return _currentEngineService.getCurrentInteraction();\n      },\n      getNextInteraction: function() {\n        return _currentEngineService.getNextInteraction();\n      },\n      getCurrentInteractionHtml: function(nextFocusLabel) {\n        return _currentEngineService.getCurrentInteractionHtml(nextFocusLabel);\n      },\n      getNextInteractionHtml: function(nextFocusLabel) {\n        return _currentEngineService.getNextInteractionHtml(nextFocusLabel);\n      },\n      getLanguageCode: function() {\n        return _currentEngineService.getLanguageCode();\n      },\n      getCurrentInteractionInstructions: function() {\n        return _currentEngineService.getCurrentInteractionInstructions();\n      },\n      getNextInteractionInstructions: function() {\n        return _currentEngineService.getNextInteractionInstructions();\n      },\n      isInteractionInline: function() {\n        return _currentEngineService.isInteractionInline();\n      },\n      isNextInteractionInline: function() {\n        return _currentEngineService.isNextInteractionInline();\n      },\n      isContentAudioTranslationAvailable: function() {\n        return _currentEngineService.isContentAudioTranslationAvailable();\n      },\n      isCurrentStateTerminal: function() {\n        return _currentEngineService.isCurrentStateTerminal();\n      },\n      isStateShowingConceptCard: function() {\n        return _currentEngineService.isStateShowingConceptCard();\n      },\n      getContentIdsToAudioTranslations: function() {\n        return _currentEngineService.getContentIdsToAudioTranslations();\n      },\n      recordNewCardAdded: function() {\n        return _currentEngineService.recordNewCardAdded();\n      },\n      getStateContentAudioTranslations: function() {\n        return _currentEngineService.getStateContentAudioTranslations();\n      },\n      getHints: function() {\n        return _currentEngineService.getHints();\n      },\n      getSolution: function() {\n        return _currentEngineService.getSolution();\n      },\n      initializePlayer: function(callback) {\n        PlayerTranscriptService.init();\n        if (_editorPreviewMode) {\n          _setExplorationMode();\n          EditableExplorationBackendApiService.fetchApplyDraftExploration(\n            _explorationId).then(function(returnDict) {\n            ExplorationEngineService.init(\n              returnDict, null, null, null, callback);\n            PlayerCorrectnessFeedbackEnabledService.init(\n              returnDict.correctness_feedback_enabled);\n            NumberAttemptsService.reset();\n          });\n        } else {\n          if (_version) {\n            $q.all([\n              ReadOnlyExplorationBackendApiService.loadExploration(\n                _explorationId, _version),\n              PretestQuestionBackendApiService.fetchPretestQuestions(\n                _explorationId, _storyId\n              )]).then(function(returnValues) {\n              if (returnValues[1].length > 0) {\n                _setPretestMode();\n                _initializeExplorationServices(\n                  returnValues[0], true, callback);\n                _initializePretestServices(returnValues[1], callback);\n              } else {\n                _setExplorationMode();\n                _initializeExplorationServices(\n                  returnValues[0], false, callback);\n              }\n            });\n          } else {\n            $q.all([\n              ReadOnlyExplorationBackendApiService.loadLatestExploration(\n                _explorationId),\n              PretestQuestionBackendApiService.fetchPretestQuestions(\n                _explorationId, _storyId\n              )]).then(function(returnValues) {\n              if (returnValues[1].length > 0) {\n                _setPretestMode();\n                _initializeExplorationServices(\n                  returnValues[0], true, callback);\n                _initializePretestServices(returnValues[1], callback);\n              } else {\n                _setExplorationMode();\n                _initializeExplorationServices(\n                  returnValues[0], false, callback);\n              }\n            });\n          }\n        }\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
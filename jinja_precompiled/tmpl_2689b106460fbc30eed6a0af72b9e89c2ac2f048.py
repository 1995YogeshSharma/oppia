from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/HintAndSolutionButtonsDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for hint and solution buttons.\n */\n\noppia.directive(\'hintAndSolutionButtons\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {},\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/hint_and_solution_buttons_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'HintsAndSolutionManagerService\',\n        \'PlayerTranscriptService\', \'ExplorationPlayerStateService\',\n        \'HintAndSolutionModalService\', \'DeviceInfoService\', \'ContextService\',\n        \'PlayerPositionService\', \'EVENT_ACTIVE_CARD_CHANGED\',\n        \'EVENT_NEW_CARD_OPENED\', \'INTERACTION_SPECS\', \'StatsReportingService\',\n        function(\n            $scope, $rootScope, HintsAndSolutionManagerService,\n            PlayerTranscriptService, ExplorationPlayerStateService,\n            HintAndSolutionModalService, DeviceInfoService, ContextService,\n            PlayerPositionService, EVENT_ACTIVE_CARD_CHANGED,\n            EVENT_NEW_CARD_OPENED, INTERACTION_SPECS, StatsReportingService) {\n          $scope.hintIndexes = [];\n          var _editorPreviewMode = ContextService.isInExplorationEditorPage();\n          // Represents the index of the currently viewed hint.\n          $scope.activeHintIndex = null;\n          $scope.solutionModalIsActive = false;\n          $scope.currentlyOnLatestCard = true;\n          $scope.isHintConsumed = HintsAndSolutionManagerService.isHintConsumed;\n          $scope.isSolutionConsumed = (\n            HintsAndSolutionManagerService.isSolutionConsumed);\n\n          var resetLocalHintsArray = function() {\n            $scope.hintIndexes = [];\n            var numHints = HintsAndSolutionManagerService.getNumHints();\n            for (var index = 0; index < numHints; index++) {\n              $scope.hintIndexes.push(index);\n            }\n          };\n\n          $scope.isHintButtonVisible = function(index) {\n            return (\n              HintsAndSolutionManagerService.isHintViewable(index) &&\n              ExplorationPlayerStateService.doesInteractionSupportHints());\n          };\n\n          $scope.isSolutionButtonVisible = function() {\n            return HintsAndSolutionManagerService.isSolutionViewable();\n          };\n\n          $scope.displayHintModal = function(index) {\n            $scope.activeHintIndex = index;\n            var promise = (\n              HintAndSolutionModalService.displayHintModal(index));\n            promise.result.then(null, function() {\n              $scope.activeHintIndex = null;\n            });\n          };\n\n          $scope.onClickSolutionButton = function() {\n            $scope.solutionModalIsActive = true;\n            if (HintsAndSolutionManagerService.isSolutionConsumed()) {\n              $scope.displaySolutionModal();\n            } else {\n              var interstitialModalPromise = (\n                HintAndSolutionModalService.displaySolutionInterstitialModal());\n              interstitialModalPromise.result.then(function() {\n                $scope.displaySolutionModal();\n              }, function() {\n                $scope.solutionModalIsActive = false;\n              });\n            }\n          };\n\n          $scope.displaySolutionModal = function() {\n            $scope.solutionModalIsActive = true;\n            var inPretestMode = ExplorationPlayerStateService.isInPretestMode();\n            if (!_editorPreviewMode && !inPretestMode) {\n              StatsReportingService.recordSolutionHit(\n                ExplorationPlayerStateService.getCurrentStateName());\n            }\n            var promise = HintAndSolutionModalService.displaySolutionModal();\n            promise.result.then(null, function() {\n              $scope.solutionModalIsActive = false;\n            });\n          };\n\n          $scope.$on(EVENT_NEW_CARD_OPENED, function(evt) {\n            HintsAndSolutionManagerService.reset(\n              ExplorationPlayerStateService.getHints(),\n              ExplorationPlayerStateService.getSolution()\n            );\n            resetLocalHintsArray();\n          });\n\n          $scope.isTooltipVisible = function() {\n            return HintsAndSolutionManagerService.isHintTooltipOpen();\n          };\n\n          $scope.$on(EVENT_ACTIVE_CARD_CHANGED, function(evt) {\n            var activeCardIndex = PlayerPositionService.getActiveCardIndex();\n            $scope.currentlyOnLatestCard = PlayerTranscriptService.isLastCard(\n              activeCardIndex);\n            if ($scope.currentlyOnLatestCard) {\n              resetLocalHintsArray();\n            }\n          });\n          resetLocalHintsArray();\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
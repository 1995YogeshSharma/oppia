from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/PieChartDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for pie chart visualization.\n */\n\noppia.directive(\'pieChart\', [function() {\n  return {\n    restrict: \'E\',\n    scope: {\n      // A read-only array representing the table of chart data.\n      data: \'&\',\n      // A read-only object containing several chart options. This object\n      // should have the following keys: pieHole, pieSliceTextStyleColor,\n      // chartAreaWidth, colors, height, legendPosition, width.\n      options: \'&\'\n    },\n    controller: [\'$scope\', \'$element\', function($scope, $element) {\n      if (!$.isArray($scope.data())) {\n        return;\n      }\n      var options = $scope.options();\n      var chart = null;\n\n      var redrawChart = function() {\n        if (!chart) {\n          chart = new google.visualization.PieChart($element[0]);\n        }\n        chart.draw(google.visualization.arrayToDataTable($scope.data()), {\n          title: options.title,\n          pieHole: options.pieHole,\n          pieSliceTextStyle: {\n            color: options.pieSliceTextStyleColor,\n          },\n          pieSliceBorderColor: options.pieSliceBorderColor,\n          pieSliceText: \'none\',\n          chartArea: {\n            left: options.left,\n            width: options.chartAreaWidth\n          },\n          colors: options.colors,\n          height: options.height,\n          legend: {\n            position: options.legendPosition || \'none\'\n          },\n          width: options.width\n        });\n      };\n\n      $scope.$watch(\'data()\', redrawChart);\n      $(window).resize(redrawChart);\n    }]\n  };\n}]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/state_card/StateCardObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of State\n * card domain objects used in the exploration player.\n */\n\noppia.factory(\'StateCardObjectFactory\', [function() {\n  var StateCard = function(\n      stateName, currentParams, contentHtml, interactionHtml, interaction,\n      leadsToConceptCard, destStateName, inputResponsePairs) {\n    this._stateName = stateName;\n    this._currentParams = currentParams;\n    this._contentHtml = contentHtml;\n    this._interactionHtml = interactionHtml;\n    this._leadsToConceptCard = leadsToConceptCard;\n    this._destStateName = destStateName;\n    this._inputResponsePairs = inputResponsePairs;\n    this._interaction = interaction;\n  };\n\n  StateCard.prototype.getDestStateName = function() {\n    return this._destStateName;\n  };\n\n  StateCard.prototype.getStateName = function() {\n    return this._stateName;\n  };\n\n  StateCard.prototype.getInteraction = function() {\n    return this._interaction;\n  };\n\n  StateCard.prototype.getCurrentParams = function() {\n    return this._currentParams;\n  };\n\n  StateCard.prototype.getContentHtml = function() {\n    return this._contentHtml;\n  };\n\n  StateCard.prototype.getInteractionHtml = function() {\n    return this._interactionHtml;\n  };\n\n  StateCard.prototype.getOppiaResponse = function(index) {\n    return this._inputResponsePairs[index].oppiaResponse;\n  };\n\n  StateCard.prototype.getLeadsToConceptCard = function() {\n    return this._leadsToConceptCard;\n  };\n\n  StateCard.prototype.getInputResponsePairs = function() {\n    return this._inputResponsePairs;\n  };\n\n  StateCard.prototype.getLastInputResponsePair = function() {\n    if (this._inputResponsePairs.length === 0) {\n      return null;\n    }\n    return this._inputResponsePairs[this._inputResponsePairs.length - 1];\n  };\n\n  StateCard.prototype.getLastOppiaResponse = function() {\n    if (this.getLastInputResponsePair() === null) {\n      return null;\n    }\n    return this.getLastInputResponsePair().oppiaResponse;\n  };\n\n  StateCard.prototype.addInputResponsePair = function(inputResponsePair) {\n    this._inputResponsePairs.push(angular.copy(inputResponsePair));\n  };\n\n  StateCard.prototype.setDestStateName = function(destStateName) {\n    this._destStateName = destStateName;\n  };\n\n  StateCard.prototype.setOppiaResponse = function(index, response) {\n    this._inputResponsePairs[index].oppiaResponse = response;\n  };\n\n  StateCard.prototype.setLastOppiaResponse = function(response) {\n    this.setOppiaResponse(this._inputResponsePairs.length - 1, response);\n  };\n\n  StateCard.prototype.setInteractionHtml = function(interactionHtml) {\n    this._interactionHtml = interactionHtml;\n  };\n\n  StateCard.prototype.setLeadsToConceptCard = function(leadsToConceptCard) {\n    this._leadsToConceptCard = leadsToConceptCard;\n  };\n\n  /**\n   * @param {string} stateName - The state name for the current card.\n   * @param {object} params - The set of parameters for the learner associated\n   *        with a card.\n   * @param {string} contentHtml - The HTML string for the content displayed on\n   *        the content card.\n   * @param {string} interactionHtml - The HTML that calls the interaction\n   *        directive for the current card.\n   * @param {Interaction} interaction - An interaction object that stores all\n   *        the properties of the card\'s interaction.\n   * @param {bool} leadsToConceptCard - Whether the current card leads to a\n   *        concept card in the exploration.\n   */\n  StateCard.createNewCard = function(\n      stateName, params, contentHtml, interactionHtml, interaction,\n      leadsToConceptCard) {\n    return new StateCard(\n      stateName, params, contentHtml, interactionHtml, interaction,\n      leadsToConceptCard, null, []);\n  };\n\n  return StateCard;\n}]);'

blocks = {}
debug_info = ''
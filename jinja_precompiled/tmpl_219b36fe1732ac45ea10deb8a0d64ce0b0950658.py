from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/SkillUpdateServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n* @fileoverview Unit tests for SkillUpdateService.\n*/\n\ndescribe(\'Skill update service\', function() {\n  var SkillUpdateService,\n    SkillObjectFactory,\n    MisconceptionObjectFactory,\n    UndoRedoService;\n  var skillDict;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    SkillUpdateService = $injector.get(\'SkillUpdateService\');\n    SkillObjectFactory = $injector.get(\'SkillObjectFactory\');\n    MisconceptionObjectFactory = $injector.get(\'MisconceptionObjectFactory\');\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n\n    var misconceptionDict1 = {\n      id: \'2\',\n      name: \'test name\',\n      notes: \'test notes\',\n      feedback: \'test feedback\'\n    };\n\n    var misconceptionDict2 = {\n      id: \'4\',\n      name: \'test name\',\n      notes: \'test notes\',\n      feedback: \'test feedback\'\n    };\n\n    var skillContentsDict = {\n      explanation: \'test explanation\',\n      worked_examples: [\'test worked example 1\', \'test worked example 2\']\n    };\n\n    skillDict = {\n      id: \'1\',\n      description: \'test description\',\n      misconceptions: [misconceptionDict1, misconceptionDict2],\n      skill_contents: skillContentsDict,\n      language_code: \'en\',\n      version: 3\n    };\n  }));\n\n  it(\'should set/unset the skill description\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.setSkillDescription(skill, \'new description\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_skill_property\',\n      property_name: \'description\',\n      old_value: \'test description\',\n      new_value: \'new description\'\n    }]);\n    expect(skill.getDescription()).toEqual(\'new description\');\n    UndoRedoService.undoChange(skill);\n    expect(skill.getDescription()).toEqual(\'test description\');\n  });\n\n  it(\'should set/unset the concept card explanation\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.setConceptCardExplanation(\n      skill, \'new explanation\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_skill_contents_property\',\n      property_name: \'explanation\',\n      old_value: \'test explanation\',\n      new_value: \'new explanation\'\n    }]);\n    expect(skill.getConceptCard().getExplanation()).toEqual(\'new explanation\');\n    UndoRedoService.undoChange(skill);\n    expect(skill.getConceptCard().getExplanation()).toEqual(\'test explanation\');\n  });\n\n  it(\'should add a misconception\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    var aNewMisconceptionDict = {\n      id: \'7\',\n      name: \'test name 3\',\n      notes: \'test notes 3\',\n      feedback: \'test feedback 3\'\n    };\n    var aNewMisconception =\n      MisconceptionObjectFactory.createFromBackendDict(aNewMisconceptionDict);\n    SkillUpdateService.addMisconception(skill, aNewMisconception);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'add_skill_misconception\',\n      new_misconception_dict: aNewMisconceptionDict\n    }]);\n    expect(skill.getMisconceptions().length).toEqual(3);\n    UndoRedoService.undoChange(skill);\n    expect(skill.getMisconceptions().length).toEqual(2);\n  });\n\n  it(\'should delete a misconception\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.deleteMisconception(skill, \'2\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'delete_skill_misconception\',\n      id: \'2\'\n    }]);\n    expect(skill.getMisconceptions().length).toEqual(1);\n    UndoRedoService.undoChange(skill);\n    expect(skill.getMisconceptions().length).toEqual(2);\n  });\n\n  it(\'should update the name of a misconception\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.updateMisconceptionName(\n      skill, \'2\', skill.findMisconceptionById(\'2\').getName(), \'new name\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_skill_misconceptions_property\',\n      property_name: \'name\',\n      old_value: \'test name\',\n      new_value: \'new name\',\n      id: \'2\'\n    }]);\n    expect(skill.findMisconceptionById(\'2\').getName()).toEqual(\'new name\');\n    UndoRedoService.undoChange(skill);\n    expect(skill.findMisconceptionById(\'2\').getName()).toEqual(\'test name\');\n  });\n\n  it(\'should update the notes of a misconception\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.updateMisconceptionNotes(\n      skill, \'2\', skill.findMisconceptionById(\'2\').getNotes(), \'new notes\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_skill_misconceptions_property\',\n      property_name: \'notes\',\n      old_value: \'test notes\',\n      new_value: \'new notes\',\n      id: \'2\'\n    }]);\n    expect(skill.findMisconceptionById(\'2\').getNotes()).toEqual(\'new notes\');\n    UndoRedoService.undoChange(skill);\n    expect(skill.findMisconceptionById(\'2\').getNotes()).toEqual(\'test notes\');\n  });\n\n  it(\'should update the feedback of a misconception\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.updateMisconceptionFeedback(\n      skill,\n      \'2\',\n      skill.findMisconceptionById(\'2\').getFeedback(),\n      \'new feedback\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_skill_misconceptions_property\',\n      property_name: \'feedback\',\n      old_value: \'test feedback\',\n      new_value: \'new feedback\',\n      id: \'2\'\n    }]);\n    expect(skill.findMisconceptionById(\'2\').getFeedback())\n      .toEqual(\'new feedback\');\n    UndoRedoService.undoChange(skill);\n    expect(skill.findMisconceptionById(\'2\').getFeedback())\n      .toEqual(\'test feedback\');\n  });\n\n  it(\'should add a worked example\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.addWorkedExample(skill, \'a new worked example\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_skill_contents_property\',\n      property_name: \'worked_examples\',\n      old_value: [\n        \'test worked example 1\',\n        \'test worked example 2\'],\n      new_value: [\n        \'test worked example 1\',\n        \'test worked example 2\',\n        \'a new worked example\']\n    }]);\n    expect(skill.getConceptCard().getWorkedExamples()).toEqual([\n      \'test worked example 1\',\n      \'test worked example 2\',\n      \'a new worked example\']);\n    UndoRedoService.undoChange(skill);\n    expect(skill.getConceptCard().getWorkedExamples()).toEqual([\n      \'test worked example 1\',\n      \'test worked example 2\']);\n  });\n\n  it(\'shoud delete a worked example\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.deleteWorkedExample(skill, 0);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_skill_contents_property\',\n      property_name: \'worked_examples\',\n      old_value: [\n        \'test worked example 1\',\n        \'test worked example 2\'],\n      new_value: [\n        \'test worked example 2\']\n    }]);\n    expect(skill.getConceptCard().getWorkedExamples()).toEqual([\n      \'test worked example 2\']);\n    UndoRedoService.undoChange(skill);\n    expect(skill.getConceptCard().getWorkedExamples()).toEqual([\n      \'test worked example 1\',\n      \'test worked example 2\']);\n  });\n\n  it(\'should update a worked example\', function() {\n    var skill = SkillObjectFactory.createFromBackendDict(skillDict);\n    SkillUpdateService.updateWorkedExample(skill, 0, \'new content\');\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n      cmd: \'update_skill_contents_property\',\n      property_name: \'worked_examples\',\n      old_value: [\n        \'test worked example 1\',\n        \'test worked example 2\'],\n      new_value: [\n        \'new content\',\n        \'test worked example 2\']\n    }]);\n    expect(skill.getConceptCard().getWorkedExamples()).toEqual([\n      \'new content\',\n      \'test worked example 2\']);\n    UndoRedoService.undoChange(skill);\n    expect(skill.getConceptCard().getWorkedExamples()).toEqual([\n      \'test worked example 1\',\n      \'test worked example 2\']);\n  });\n});'

blocks = {}
debug_info = ''
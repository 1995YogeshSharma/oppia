from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/history_tab/HistoryTab.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the exploration history tab.\n */\n\noppia.controller(\'HistoryTab\', [\n  \'$scope\', \'$http\', \'$rootScope\', \'$log\',\n  \'$uibModal\', \'ExplorationDataService\',\n  \'VersionTreeService\', \'CompareVersionsService\',\n  \'DateTimeFormatService\', \'UrlInterpolationService\',\n  function(\n      $scope, $http, $rootScope, $log,\n      $uibModal, ExplorationDataService,\n      VersionTreeService, CompareVersionsService,\n      DateTimeFormatService, UrlInterpolationService) {\n    $scope.explorationId = ExplorationDataService.explorationId;\n    $scope.explorationAllSnapshotsUrl =\n        \'/createhandler/snapshots/\' + $scope.explorationId;\n\n    /* Variable definitions:\n     *\n     * explorationSnapshots is a list of all snapshots for the exploration in\n     * ascending order.\n     *\n     * explorationVersionMetadata is an object whose keys are version numbers\n     * and whose values are objects containing data of that revision (that is\n     * to be displayed) with the keys \'committerId\', \'createdOn\',\n     * \'commitMessage\', and \'versionNumber\'. It contains a maximum of 30\n     * versions.\n     *\n     * versionCheckboxArray is an array of the version numbers of the revisions\n     * to be displayed on the page, in the order they are displayed in.\n     *\n     * nodesData is an object whose keys are nodeIds (assigned in version\n     * comparison), and whose values are an object containing \'newestStateName\',\n     * \'originalStateName\' and \'stateProperty\'.\n     */\n    $scope.explorationVersionMetadata = null;\n    $scope.versionCheckboxArray = [];\n    var explorationSnapshots = null;\n    var versionTreeParents = null;\n    var nodesData = null;\n    var currentPage = 0;\n    $scope.displayedCurrentPageNumber = currentPage + 1;\n    $scope.versionNumbersToDisplay = [];\n    $scope.VERSIONS_PER_PAGE = 30;\n\n    $scope.$on(\'refreshVersionHistory\', function(evt, data) {\n      // Uncheck all checkboxes when page is refreshed\n      angular.forEach($scope.versionCheckboxArray, function(versionCheckbox) {\n        versionCheckbox.selected = false;\n      });\n      if (data.forceRefresh || $scope.explorationVersionMetadata === null) {\n        $scope.refreshVersionHistory();\n      }\n    });\n\n    // Compares the two selected versions and displays the comparison results.\n    $scope.compareSelectedVersions = function() {\n      if ($scope.selectedVersionsArray.length === 2) {\n        $scope.changeCompareVersion();\n        $scope.hideHistoryGraph = false;\n        $scope.compareVersionsButtonIsHidden = true;\n      }\n    };\n    // Changes the checkbox selection and provides an appropriate user prompt.\n    $scope.changeSelectedVersions = function(evt, versionNumber) {\n      var checkbox = evt.target;\n      var selectedVersionsArrayPos = $scope.selectedVersionsArray.indexOf(\n        versionNumber);\n      if (checkbox.checked && selectedVersionsArrayPos === -1) {\n        $scope.selectedVersionsArray.push(versionNumber);\n      }\n      if (!checkbox.checked && selectedVersionsArrayPos !== -1) {\n        $scope.selectedVersionsArray.splice(selectedVersionsArrayPos, 1);\n      }\n\n      if ($scope.selectedVersionsArray.length === 2) {\n        // Disable version count prompt if two checkboxes are selected.\n        $scope.versionCountPrompt = \'\';\n      } else if (!$scope.comparisonsAreDisabled) {\n        $scope.hideHistoryGraph = true;\n        $scope.compareVersionsButtonIsHidden = false;\n\n        if ($scope.selectedVersionsArray.length === 0) {\n          $scope.versionCountPrompt = \'Please select any two.\';\n        } else if ($scope.selectedVersionsArray.length === 1) {\n          $scope.versionCountPrompt = \'Please select one more.\';\n        }\n      }\n    };\n\n    // Refreshes the displayed version history log.\n    $scope.refreshVersionHistory = function() {\n      $rootScope.loadingMessage = \'Loading\';\n      ExplorationDataService.getData().then(function(data) {\n        var currentVersion = data.version;\n        /**\n         * $scope.compareVersionMetadata is an object with keys\n         * \'earlierVersion\' and \'laterVersion\' whose values are the metadata\n         * of the compared versions, containing \'committerId\', \'createdOn\',\n         * \'commitMessage\', and \'versionNumber\'.\n         */\n        $scope.compareVersions = {};\n        $scope.compareVersionMetadata = {};\n\n        // Contains the IDs of the versions selected for comparison. Should\n        // contain a maximum of two elements.\n        $scope.selectedVersionsArray = [];\n\n        $scope.hideHistoryGraph = true;\n\n        // Disable all comparisons if there are less than two revisions in\n        // total.\n        $scope.comparisonsAreDisabled = (currentVersion < 2);\n\n        $scope.compareVersionsButtonIsHidden = $scope.comparisonsAreDisabled;\n\n        $scope.versionCountPrompt = \'Please select any 2.\';\n\n        $http.get($scope.explorationAllSnapshotsUrl).then(function(response) {\n          explorationSnapshots = response.data.snapshots;\n          VersionTreeService.init(explorationSnapshots);\n\n          // Re-populate versionCheckboxArray and explorationVersionMetadata\n          // when history is refreshed.\n          $scope.versionCheckboxArray = [];\n          $scope.explorationVersionMetadata = {};\n          var lowestVersionIndex = 0;\n          for (var i = currentVersion - 1; i >= lowestVersionIndex; i--) {\n            var versionNumber = explorationSnapshots[i].version_number;\n            $scope.explorationVersionMetadata[versionNumber] = {\n              committerId: explorationSnapshots[i].committer_id,\n              createdOnStr: (\n                DateTimeFormatService.getLocaleAbbreviatedDatetimeString(\n                  explorationSnapshots[i].created_on_ms)),\n              commitMessage: explorationSnapshots[i].commit_message,\n              versionNumber: explorationSnapshots[i].version_number\n            };\n            $scope.versionCheckboxArray.push({\n              vnum: explorationSnapshots[i].version_number,\n              selected: false\n            });\n          }\n          $rootScope.loadingMessage = \'\';\n          $scope.computeVersionsToDisplay();\n        });\n      });\n    };\n\n    var getVersionHeader = function(versionMetadata) {\n      return (\n        \'Revision #\' + versionMetadata.versionNumber +\n        \' by \' + versionMetadata.committerId +\n        \' (\' + versionMetadata.createdOnStr +\n        \')\' + (\n          versionMetadata.commitMessage ?\n            \': \' + versionMetadata.commitMessage : \'\'));\n    };\n\n    // Function to set compared version metadata, download YAML and generate\n    // diff graph and legend when selection is changed\n    $scope.changeCompareVersion = function() {\n      $scope.diffData = null;\n\n      var earlierComparedVersion = Math.min(\n        $scope.selectedVersionsArray[0], $scope.selectedVersionsArray[1]);\n      var laterComparedVersion = Math.max(\n        $scope.selectedVersionsArray[0], $scope.selectedVersionsArray[1]);\n\n      $scope.compareVersionMetadata.earlierVersion =\n        $scope.explorationVersionMetadata[earlierComparedVersion];\n      $scope.compareVersionMetadata.laterVersion =\n        $scope.explorationVersionMetadata[laterComparedVersion];\n\n      CompareVersionsService.getDiffGraphData(earlierComparedVersion,\n        laterComparedVersion).then(\n        function(response) {\n          $log.info(\'Retrieved version comparison data\');\n          $log.info(response);\n\n          $scope.diffData = response;\n          $scope.earlierVersionHeader = getVersionHeader(\n            $scope.compareVersionMetadata.earlierVersion);\n          $scope.laterVersionHeader = getVersionHeader(\n            $scope.compareVersionMetadata.laterVersion);\n        }\n      );\n    };\n\n    // Check if valid versions were selected\n    $scope.areCompareVersionsSelected = function() {\n      return (\n        $scope.compareVersions && $scope.selectedVersionsArray.length === 2);\n    };\n\n    // Check if other checkboxes should be disabled once two are selected.\n    $scope.isCheckboxDisabled = function(versionNumber) {\n      if ($scope.selectedVersionsArray.length === 2) {\n        return ($scope.selectedVersionsArray.indexOf(versionNumber) === -1);\n      }\n      return false;\n    };\n\n    // Downloads the zip file for an exploration.\n    $scope.downloadExplorationWithVersion = function(versionNumber) {\n      // Note that this opens (and then immediately closes) a new tab. If we do\n      // this in the same tab, the beforeunload handler is triggered.\n      window.open(\n        $scope.explorationDownloadUrl + \'?v=\' + versionNumber,\n        \'&output_format=zip\');\n    };\n\n    $scope.showRevertExplorationModal = function(version) {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/history_tab/\' +\n          \'revert_exploration_modal_directive.html\'),\n        backdrop: true,\n        resolve: {\n          version: function() {\n            return version;\n          }\n        },\n        controller: [\n          \'$scope\', \'$uibModalInstance\', \'version\', \'ExplorationDataService\',\n          function($scope, $uibModalInstance, version, ExplorationDataService) {\n            $scope.version = version;\n\n            $scope.getExplorationUrl = function(version) {\n              return (\n                \'/explore/\' + ExplorationDataService.explorationId +\n                \'?v=\' + version);\n            };\n\n            $scope.revert = function() {\n              $uibModalInstance.close(version);\n            };\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n          }\n        ]\n      }).result.then(function(version) {\n        $http.post($scope.revertExplorationUrl, {\n          current_version: ExplorationDataService.data.version,\n          revert_to_version: version\n        }).then(function() {\n          location.reload();\n        });\n      });\n    };\n\n    $scope.computeVersionsToDisplay = function() {\n      currentPage = $scope.displayedCurrentPageNumber - 1;\n      var begin = (currentPage * $scope.VERSIONS_PER_PAGE);\n      var end = Math.min(\n        begin + $scope.VERSIONS_PER_PAGE, $scope.versionCheckboxArray.length);\n      $scope.versionNumbersToDisplay = [];\n      for (var i = begin; i < end; i++) {\n        $scope.versionNumbersToDisplay.push(\n          $scope.versionCheckboxArray[i].vnum);\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
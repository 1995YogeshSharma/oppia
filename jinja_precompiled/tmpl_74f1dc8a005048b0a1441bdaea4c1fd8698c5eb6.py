from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/SolutionVerificationServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for Solution Verification Service.\n */\n\ndescribe(\'Solution Verification Service\', function() {\n  beforeEach(function() {\n    module(\'oppia\');\n    // Set a global value for INTERACTION_SPECS that will be used by all the\n    // descendant dependencies.\n    module(function($provide) {\n      $provide.constant(\'INTERACTION_SPECS\', {\n        TextInput: {\n          display_mode: \'inline\',\n          is_terminal: false\n        },\n        TerminalInteraction: {\n          display_mode: \'inline\',\n          is_terminal: true\n        }\n      });\n    });\n  });\n\n  var ess, siis, scas, idc, sof, svs, IS, mockFunctions;\n  var rootScope;\n  var mockExplorationData;\n  var successCallbackSpy, errorCallbackSpy;\n\n  beforeEach(function() {\n    mockExplorationData = {\n      explorationId: 0,\n      autosaveChangeList: function() {}\n    };\n    module(function($provide) {\n      $provide.value(\'ExplorationDataService\', [mockExplorationData][0]);\n    });\n    spyOn(mockExplorationData, \'autosaveChangeList\');\n  });\n\n  beforeEach(inject(function($injector) {\n    ess = $injector.get(\'ExplorationStatesService\');\n    siis = $injector.get(\'stateInteractionIdService\');\n    scas = $injector.get(\'stateCustomizationArgsService\');\n    idc = $injector.get(\'InteractionDetailsCacheService\');\n    sof = $injector.get(\'SolutionObjectFactory\');\n    svs = $injector.get(\'SolutionVerificationService\');\n    IS = $injector.get(\'INTERACTION_SPECS\');\n    rootScope = $injector.get(\'$rootScope\');\n\n    ess.init({\n      \'First State\': {\n        content: {\n          html: \'First State Content\',\n          audio_translations: {}\n        },\n        interaction: {\n          id: \'TextInput\',\n          answer_groups: [{\n            outcome: {\n              dest: \'End State\',\n              feedback: {\n                html: \'\',\n                audio_translations: {}\n              },\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            },\n            rule_specs: [{\n              inputs: {x: \'abc\'},\n              rule_type: \'Contains\'\n            }]\n          }],\n          default_outcome: {\n            dest: \'First State\',\n            feedback: {\n              html: \'\',\n              audio_translations: {}\n            },\n            labelled_as_correct: false,\n            param_changes: [],\n            refresher_exploration_id: null\n          },\n          hints: [{\n            hint_content: \'one\'\n          }, {\n            hint_content: \'two\'\n          }]\n        },\n        param_changes: []\n      },\n      \'End State\': {\n        content: {\n          html: \'\',\n          audio_translations: {}\n        },\n        interaction: {\n          id: \'TextInput\',\n          answer_groups: [{\n            rule_specs: [],\n            outcome: {\n              dest: \'default\',\n              feedback: {\n                html: \'\',\n                audio_translations: {}\n              },\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            }\n          }],\n          default_outcome: {\n            dest: \'default\',\n            feedback: {\n              html: \'\',\n              audio_translations: {}\n            },\n            param_changes: []\n          },\n          hints: []\n        },\n        param_changes: []\n      }\n    });\n  }));\n\n  describe(\'Success case\', function() {\n    it(\'should verify a correct solution\', function() {\n      var state = ess.getState(\'First State\');\n      siis.init(\n        \'First State\', state.interaction.id, state.interaction, \'widget_id\');\n      scas.init(\n        \'First State\', state.interaction.customizationArgs,\n        state.interaction, \'widget_customization_args\');\n\n      siis.savedMemento = \'TextInput\';\n      ess.saveSolution(\'First State\', sof.createNew(false, \'abc\', \'nothing\'));\n\n      expect(\n        svs.verifySolution(0, state,\n          ess.getState(\'First State\').interaction.solution.correctAnswer)\n      ).toBe(true);\n    });\n  });\n\n  describe(\'Failure case\', function() {\n    it(\'should verify an incorrect solution\', function() {\n      var state = ess.getState(\'First State\');\n      siis.init(\n        \'First State\', state.interaction.id, state.interaction, \'widget_id\');\n      scas.init(\n        \'First State\', state.interaction.customizationArgs,\n        state.interaction, \'widget_customization_args\');\n\n      siis.savedMemento = \'TextInput\';\n      ess.saveSolution(\'First State\', sof.createNew(false, \'xyz\', \'nothing\'));\n\n      expect(\n        svs.verifySolution(0, state,\n          ess.getState(\'First State\').interaction.solution.correctAnswer)\n      ).toBe(false);\n    });\n  });\n});'

blocks = {}
debug_info = ''
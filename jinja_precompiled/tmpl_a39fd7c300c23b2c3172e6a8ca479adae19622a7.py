from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/OutcomeObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview unit tests for outcome object factory.\n */\n\ndescribe(\'Outcome object factory\', function() {\n  var oof;\n  beforeEach(module(\'oppia\'));\n  beforeEach(inject(function($injector) {\n    oof = $injector.get(\'OutcomeObjectFactory\');\n  }));\n\n  it(\n    \'should correctly determine if an outcome is confusing given a \' +\n    \'source state\',\n    function() {\n      var currentState = \'A\';\n      var testOutcome1 = oof.createNew(\'B\', \'feedback_1\', \'feedback\', []);\n      var testOutcome2 = oof.createNew(\'B\', \'feedback_2\', \'\', []);\n      var testOutcome3 = oof.createNew(\'A\', \'feedback_3\', \'feedback\', []);\n      var testOutcome4 = oof.createNew(\'A\', \'feedback_4\', \'\', []);\n      var testOutcome5 = oof.createNew(\'A\', \'feedback_5\', \'   \', []);\n      expect(testOutcome1.isConfusing(currentState)).toBe(false);\n      expect(testOutcome2.isConfusing(currentState)).toBe(false);\n      expect(testOutcome3.isConfusing(currentState)).toBe(false);\n      expect(testOutcome4.isConfusing(currentState)).toBe(true);\n      expect(testOutcome5.isConfusing(currentState)).toBe(true);\n    }\n  );\n\n  it(\'should correctly output whether an outcome has nonempty feedback\',\n    function() {\n      var testOutcome1 = oof.createNew(\'A\', \'feedback_1\', \'feedback\', []);\n      var testOutcome2 = oof.createNew(\'A\', \'feedback_2\', \'\', []);\n      var testOutcome3 = oof.createNew(\'A\', \'feedback_3\', \'   \', []);\n      expect(testOutcome1.hasNonemptyFeedback()).toBe(true);\n      expect(testOutcome2.hasNonemptyFeedback()).toBe(false);\n      expect(testOutcome3.hasNonemptyFeedback()).toBe(false);\n    }\n  );\n});'

blocks = {}
debug_info = ''
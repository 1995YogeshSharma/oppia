from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/SolutionObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of Solution\n * domain objects.\n */\n\noppia.factory(\'SolutionObjectFactory\', [\n  \'$filter\', \'HtmlEscaperService\', \'ExplorationHtmlFormatterService\',\n  \'SubtitledHtmlObjectFactory\', \'FractionObjectFactory\',\n  function($filter, HtmlEscaperService, ExplorationHtmlFormatterService,\n      SubtitledHtmlObjectFactory, FractionObjectFactory) {\n    var Solution = function(answerIsExclusive, correctAnswer, explanation) {\n      this.answerIsExclusive = answerIsExclusive;\n      this.correctAnswer = correctAnswer;\n      this.explanation = explanation;\n    };\n\n    Solution.prototype.toBackendDict = function() {\n      return {\n        answer_is_exclusive: this.answerIsExclusive,\n        correct_answer: this.correctAnswer,\n        explanation: this.explanation.toBackendDict()\n      };\n    };\n\n    Solution.createFromBackendDict = function(solutionBackendDict) {\n      return new Solution(\n        solutionBackendDict.answer_is_exclusive,\n        solutionBackendDict.correct_answer,\n        SubtitledHtmlObjectFactory.createFromBackendDict(\n          solutionBackendDict.explanation));\n    };\n\n    Solution.createNew = function(\n        answerIsExclusive, correctAnswer, explanationHtml) {\n      return new Solution(\n        answerIsExclusive,\n        correctAnswer,\n        SubtitledHtmlObjectFactory.createDefault(explanationHtml));\n    };\n\n    Solution.prototype.getSummary = function(interactionId) {\n      var solutionType = (\n        this.answerIsExclusive ? \'The only\' : \'One\');\n      var correctAnswer = null;\n      if (interactionId === \'GraphInput\') {\n        correctAnswer = \'[Graph]\';\n      } else if (interactionId === \'MathExpressionInput\') {\n        correctAnswer = this.correctAnswer.latex;\n      } else if (interactionId === \'CodeRepl\' ||\n        interactionId === \'PencilCodeEditor\') {\n        correctAnswer = this.correctAnswer.code;\n      } else if (interactionId === \'MusicNotesInput\') {\n        correctAnswer = \'[Music Notes]\';\n      } else if (interactionId === \'LogicProof\') {\n        correctAnswer = this.correctAnswer.correct;\n      } else if (interactionId === \'FractionInput\') {\n        correctAnswer = FractionObjectFactory.fromDict(\n          this.correctAnswer).toString();\n      } else {\n        correctAnswer = (\n          HtmlEscaperService.objToEscapedJson(this.correctAnswer));\n      }\n      var explanation = (\n        $filter(\'convertToPlainText\')(this.explanation.getHtml()));\n      return (\n        solutionType + \' solution is "\' + correctAnswer +\n        \'". \' + explanation + \'.\');\n    };\n\n    Solution.prototype.setCorrectAnswer = function(correctAnswer) {\n      this.correctAnswer = correctAnswer;\n    };\n\n    Solution.prototype.setExplanation = function(explanation) {\n      this.explanation = explanation;\n    };\n\n    Solution.prototype.getOppiaShortAnswerResponseHtml = function(interaction) {\n      return {\n        prefix: (this.answerIsExclusive ? \'The only\' : \'One\'),\n        answer: ExplorationHtmlFormatterService.getShortAnswerHtml(\n          this.correctAnswer, interaction.id, interaction.customizationArgs)};\n    };\n\n    Solution.prototype.getOppiaSolutionExplanationResponseHtml =\n      function() {\n        return this.explanation.getHtml();\n      };\n\n    return Solution;\n  }]);'

blocks = {}
debug_info = ''
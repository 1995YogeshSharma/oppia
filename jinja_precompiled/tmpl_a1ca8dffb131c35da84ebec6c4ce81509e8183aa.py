from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/StoryNodeObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating instances of frontend\n * story node domain objects.\n */\n\noppia.factory(\'StoryNodeObjectFactory\', [\'NODE_ID_PREFIX\',\n  function(NODE_ID_PREFIX) {\n    var StoryNode = function(\n        id, destinationNodeIds, prerequisiteSkillIds, acquiredSkillIds, outline,\n        outlineIsFinalized, explorationId) {\n      this._id = id;\n      this._destinationNodeIds = destinationNodeIds;\n      this._prerequisiteSkillIds = prerequisiteSkillIds;\n      this._acquiredSkillIds = acquiredSkillIds;\n      this._outline = outline;\n      this._outlineIsFinalized = outlineIsFinalized;\n      this._explorationId = explorationId;\n    };\n\n    var _checkValidNodeId = function(nodeId) {\n      if (typeof nodeId !== \'string\') {\n        return false;\n      }\n      var nodeIdPattern = new RegExp(NODE_ID_PREFIX + \'[0-9]+\', \'g\');\n      if (!nodeId.match(nodeIdPattern)) {\n        return false;\n      }\n      return true;\n    };\n\n    // Instance methods\n\n    StoryNode.prototype.getId = function() {\n      return this._id;\n    };\n\n    StoryNode.prototype.getExplorationId = function() {\n      return this._explorationId;\n    };\n\n    StoryNode.prototype.setExplorationId = function(explorationId) {\n      this._explorationId = explorationId;\n    };\n\n    StoryNode.prototype.getOutline = function() {\n      return this._outline;\n    };\n\n    StoryNode.prototype.setOutline = function(outline) {\n      this._outline = outline;\n    };\n\n    StoryNode.prototype.getOutlineStatus = function() {\n      return this._outlineIsFinalized;\n    };\n\n    StoryNode.prototype.markOutlineAsFinalized = function() {\n      this._outlineIsFinalized = true;\n    };\n\n    StoryNode.prototype.markOutlineAsNotFinalized = function() {\n      this._outlineIsFinalized = false;\n    };\n\n    StoryNode.prototype.validate = function() {\n      var issues = [];\n\n      if (!_checkValidNodeId(this._id)) {\n        throw Error(\'The node id \' + this._id + \' is invalid.\');\n      }\n      var prerequisiteSkillIds = this._prerequisiteSkillIds;\n      var acquiredSkillIds = this._acquiredSkillIds;\n      var destinationNodeIds = this._destinationNodeIds;\n\n      for (var i = 0; i < prerequisiteSkillIds.length; i++) {\n        var skillId = prerequisiteSkillIds[i];\n        if (prerequisiteSkillIds.indexOf(skillId) <\n          prerequisiteSkillIds.lastIndexOf(skillId)) {\n          issues.push(\n            \'The prerequisite skill with id \' + skillId + \' is duplicated in\' +\n            \' node with id \' + this._id);\n        }\n      }\n      for (var i = 0; i < acquiredSkillIds.length; i++) {\n        var skillId = acquiredSkillIds[i];\n        if (acquiredSkillIds.indexOf(skillId) <\n          acquiredSkillIds.lastIndexOf(skillId)) {\n          issues.push(\n            \'The acquired skill with id \' + skillId + \' is duplicated in\' +\n            \' node with id \' + this._id);\n        }\n      }\n      for (var i = 0; i < prerequisiteSkillIds.length; i++) {\n        if (acquiredSkillIds.indexOf(prerequisiteSkillIds[i]) !== -1) {\n          issues.push(\n            \'The skill with id \' + prerequisiteSkillIds[i] + \' is common \' +\n            \'to both the acquired and prerequisite skill id list in node with\' +\n            \' id \' + this._id);\n        }\n      }\n      for (var i = 0; i < destinationNodeIds.length; i++) {\n        if (!_checkValidNodeId(destinationNodeIds[i])) {\n          throw Error(\n            \'The destination node id \' + destinationNodeIds[i] + \' is \' +\n            \'invalid in node with id \' + this._id);\n        }\n      }\n\n      var currentNodeId = this._id;\n      if (\n        destinationNodeIds.some(function(nodeId) {\n          return nodeId === currentNodeId;\n        })) {\n        issues.push(\n          \'The destination node id of node with id \' + this._id +\n          \' points to itself.\');\n      }\n      for (var i = 0; i < destinationNodeIds.length; i++) {\n        var nodeId = destinationNodeIds[i];\n        if (destinationNodeIds.indexOf(nodeId) <\n          destinationNodeIds.lastIndexOf(nodeId)) {\n          issues.push(\n            \'The destination node with id \' + nodeId + \' is duplicated in\' +\n            \' node with id \' + this._id);\n        }\n      }\n      return issues;\n    };\n\n    StoryNode.prototype.getDestinationNodeIds = function() {\n      return this._destinationNodeIds.slice();\n    };\n\n    StoryNode.prototype.addDestinationNodeId = function(destinationNodeid) {\n      if (this._destinationNodeIds.indexOf(destinationNodeid) !== -1) {\n        throw Error(\'The given node is already a destination node.\');\n      }\n      this._destinationNodeIds.push(destinationNodeid);\n    };\n\n    StoryNode.prototype.removeDestinationNodeId = function(destinationNodeid) {\n      var index = this._destinationNodeIds.indexOf(destinationNodeid);\n      if (index === -1) {\n        throw Error(\'The given node is not a destination node.\');\n      }\n      this._destinationNodeIds.splice(index, 1);\n    };\n\n    StoryNode.prototype.getAcquiredSkillIds = function() {\n      return this._acquiredSkillIds.slice();\n    };\n\n    StoryNode.prototype.addAcquiredSkillId = function(acquiredSkillid) {\n      if (this._acquiredSkillIds.indexOf(acquiredSkillid) !== -1) {\n        throw Error(\'The given skill is already an acquired skill.\');\n      }\n      this._acquiredSkillIds.push(acquiredSkillid);\n    };\n\n    StoryNode.prototype.removeAcquiredSkillId = function(skillId) {\n      var index = this._acquiredSkillIds.indexOf(skillId);\n      if (index === -1) {\n        throw Error(\'The given skill is not an acquired skill.\');\n      }\n      this._acquiredSkillIds.splice(index, 1);\n    };\n\n    StoryNode.prototype.getPrerequisiteSkillIds = function() {\n      return this._prerequisiteSkillIds.slice();\n    };\n\n    StoryNode.prototype.addPrerequisiteSkillId = function(skillId) {\n      if (this._prerequisiteSkillIds.indexOf(skillId) !== -1) {\n        throw Error(\'The given skill id is already a prerequisite skill.\');\n      }\n      this._prerequisiteSkillIds.push(skillId);\n    };\n\n    StoryNode.prototype.removePrerequisiteSkillId = function(skillId) {\n      var index = this._prerequisiteSkillIds.indexOf(skillId);\n      if (index === -1) {\n        throw Error(\'The given skill id is not a prerequisite skill.\');\n      }\n      this._prerequisiteSkillIds.splice(index, 1);\n    };\n    // Static class methods. Note that "this" is not available in static\n    // contexts. This function takes a JSON object which represents a backend\n    // story python dict.\n    StoryNode.createFromBackendDict = function(storyNodeBackendObject) {\n      return new StoryNode(\n        storyNodeBackendObject.id, storyNodeBackendObject.destination_node_ids,\n        storyNodeBackendObject.prerequisite_skill_ids,\n        storyNodeBackendObject.acquired_skill_ids,\n        storyNodeBackendObject.outline,\n        storyNodeBackendObject.outline_is_finalized,\n        storyNodeBackendObject.exploration_id\n      );\n    };\n\n    StoryNode.createFromId = function(nodeId) {\n      return new StoryNode(nodeId, [], [], [], \'\', false, null);\n    };\n    return StoryNode;\n  }\n]);'

blocks = {}
debug_info = ''
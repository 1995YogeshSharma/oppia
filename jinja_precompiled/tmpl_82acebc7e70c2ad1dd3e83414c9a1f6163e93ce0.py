from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/TopicRightsBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to change the rights of topic in the backend.\n */\n\noppia.factory(\'TopicRightsBackendApiService\', [\n  \'$http\', \'$log\', \'$q\', \'UrlInterpolationService\',\n  \'TOPIC_MANAGER_RIGHTS_URL_TEMPLATE\', \'TOPIC_RIGHTS_URL_TEMPLATE\',\n  function($http, $log, $q, UrlInterpolationService,\n      TOPIC_MANAGER_RIGHTS_URL_TEMPLATE, TOPIC_RIGHTS_URL_TEMPLATE) {\n    // Maps previously loaded topic rights to their IDs.\n    var topicRightsCache = {};\n\n    var _fetchTopicRights = function(topicId, successCallback,\n        errorCallback) {\n      var topicRightsUrl = UrlInterpolationService.interpolateUrl(\n        TOPIC_RIGHTS_URL_TEMPLATE, {\n          topic_id: topicId\n        });\n\n      $http.get(topicRightsUrl).then(function(response) {\n        if (successCallback) {\n          successCallback(response.data);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _setTopicStatus = function(\n        topicId, publishStatus, successCallback, errorCallback) {\n      var changeTopicStatusUrl = UrlInterpolationService.interpolateUrl(\n        \'/rightshandler/change_topic_status/<topic_id>\', {\n          topic_id: topicId\n        });\n\n      var putParams = {\n        publish_status: publishStatus\n      };\n\n      $http.put(changeTopicStatusUrl, putParams).then(function(response) {\n        topicRightsCache[topicId] = response.data;\n        if (successCallback) {\n          successCallback(response.data);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _isCached = function(topicId) {\n      return topicRightsCache.hasOwnProperty(topicId);\n    };\n\n    return {\n      /**\n       * Gets a topic\'s rights, given its ID.\n       */\n      fetchTopicRights: function(topicId) {\n        return $q(function(resolve, reject) {\n          _fetchTopicRights(topicId, resolve, reject);\n        });\n      },\n\n      /**\n       * Behaves exactly as fetchTopicRights (including callback\n       * behavior and returning a promise object), except this function will\n       * attempt to see whether the given topic rights has been\n       * cached. If it has not yet been cached, it will fetch the topic\n       * rights from the backend. If it successfully retrieves the topic\n       * rights from the backend, it will store it in the cache to avoid\n       * requests from the backend in further function calls.\n       */\n      loadTopicRights: function(topicId) {\n        return $q(function(resolve, reject) {\n          if (_isCached(topicId)) {\n            if (resolve) {\n              resolve(topicRightsCache[topicId]);\n            }\n          } else {\n            _fetchTopicRights(topicId, function(topicRights) {\n              // Save the fetched topic rights to avoid future fetches.\n              topicRightsCache[topicId] = topicRights;\n              if (resolve) {\n                resolve(topicRightsCache[topicId]);\n              }\n            }, reject);\n          }\n        });\n      },\n\n      /**\n       * Returns whether the given topic rights is stored within the\n       * local data cache or if it needs to be retrieved from the backend\n       * upon a laod.\n       */\n      isCached: function(topicId) {\n        return _isCached(topicId);\n      },\n\n      /**\n       * Replaces the current topic rights in the cache given by the\n       * specified topic ID with a new topic rights object.\n       */\n      cacheTopicRights: function(topicId, topicRights) {\n        topicRightsCache[topicId] = angular.copy(topicRights);\n      },\n\n      /**\n       * Publishes a topic.\n       */\n      publishTopic: function(topicId) {\n        return $q(function(resolve, reject) {\n          _setTopicStatus(topicId, true, resolve, reject);\n        });\n      },\n\n      /**\n       * Unpublishes a topic.\n       */\n      unpublishTopic: function(topicId) {\n        return $q(function(resolve, reject) {\n          _setTopicStatus(topicId, false, resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
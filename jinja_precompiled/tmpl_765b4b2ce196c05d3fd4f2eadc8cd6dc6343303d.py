from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/ParamChangesEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the parameter changes editor (which is shown in\n * both the exploration settings tab and the state editor page).\n */\n\noppia.directive(\'paramChangesEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        paramChangesService: \'=\',\n        postSaveHook: \'=\',\n        isCurrentlyInSettingsTab: \'&currentlyInSettingsTab\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/\' +\n        \'param_changes_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'EditabilityService\', \'StateEditorService\',\n        \'ExplorationParamSpecsService\', \'AlertsService\',\n        \'ParamChangeObjectFactory\', \'ExplorationStatesService\',\n        function(\n            $scope, $rootScope, EditabilityService, StateEditorService,\n            ExplorationParamSpecsService, AlertsService,\n            ParamChangeObjectFactory, ExplorationStatesService) {\n          $scope.EditabilityService = EditabilityService;\n          $scope.isParamChangesEditorOpen = false;\n          $scope.warningText = \'\';\n          $scope.PREAMBLE_TEXT = {\n            Copier: \'to\',\n            RandomSelector: \'to one of\'\n          };\n\n          var INVALID_PARAMETER_NAMES = GLOBALS.INVALID_PARAMETER_NAMES;\n\n          $scope.$on(\'externalSave\', function() {\n            if ($scope.isParamChangesEditorOpen) {\n              $scope.saveParamChanges();\n            }\n          });\n\n          var generateParamNameChoices = function() {\n            return ExplorationParamSpecsService.displayed.getParamNames().sort()\n              .map(function(paramName) {\n                return {\n                  id: paramName,\n                  text: paramName\n                };\n              });\n          };\n\n          // This is a local variable that is used by the select2 dropdowns for\n          // choosing parameter names. It may not accurately reflect the content\n          // of ExplorationParamSpecsService, since it\'s possible that temporary\n          // parameter names may be added and then deleted within the course\n          // of a single "parameter changes" edit.\n          $scope.paramNameChoices = [];\n\n          $scope.addParamChange = function() {\n            var newParamName = (\n              $scope.paramNameChoices.length > 0 ?\n                $scope.paramNameChoices[0].id : \'x\');\n            var newParamChange = ParamChangeObjectFactory.createDefault(\n              newParamName);\n            // Add the new param name to $scope.paramNameChoices, if necessary,\n            // so that it shows up in the dropdown.\n            if (ExplorationParamSpecsService.displayed.addParamIfNew(\n              newParamChange.name)) {\n              $scope.paramNameChoices = generateParamNameChoices();\n            }\n            $scope.paramChangesService.displayed.push(newParamChange);\n          };\n\n          $scope.openParamChangesEditor = function() {\n            if (!EditabilityService.isEditable()) {\n              return;\n            }\n\n            $scope.isParamChangesEditorOpen = true;\n            $scope.paramNameChoices = generateParamNameChoices();\n\n            if ($scope.paramChangesService.displayed.length === 0) {\n              $scope.addParamChange();\n            }\n          };\n\n          $scope.onChangeGeneratorType = function(paramChange) {\n            paramChange.resetCustomizationArgs();\n          };\n\n          $scope.HUMAN_READABLE_ARGS_RENDERERS = {\n            Copier: function(customizationArgs) {\n              return \'to \' + customizationArgs.value;\n            },\n            RandomSelector: function(customizationArgs) {\n              var result = \'to one of [\';\n              for (\n                var i = 0; i < customizationArgs.list_of_values.length; i++) {\n                if (i !== 0) {\n                  result += \', \';\n                }\n                result += String(customizationArgs.list_of_values[i]);\n              }\n              result += \'] at random\';\n              return result;\n            }\n          };\n\n          $scope.areDisplayedParamChangesValid = function() {\n            paramChanges = $scope.paramChangesService.displayed;\n\n            for (var i = 0; i < paramChanges.length; i++) {\n              var paramName = paramChanges[i].name;\n              if (paramName === \'\') {\n                $scope.warningText = \'Please pick a non-empty parameter name.\';\n                return false;\n              }\n\n              if (INVALID_PARAMETER_NAMES.indexOf(paramName) !== -1) {\n                $scope.warningText = (\n                  \'The parameter name \\\'\' + paramName + \'\\\' is reserved.\');\n                return false;\n              }\n\n              var ALPHA_CHARS_REGEX = /^[A-Za-z]+$/;\n              if (!ALPHA_CHARS_REGEX.test(paramName)) {\n                $scope.warningText = (\n                  \'Parameter names should use only alphabetic characters.\');\n                return false;\n              }\n\n              var generatorId = paramChanges[i].generatorId;\n              var customizationArgs = paramChanges[i].customizationArgs;\n\n              if (!$scope.PREAMBLE_TEXT.hasOwnProperty(generatorId)) {\n                $scope.warningText =\n                 \'Each parameter should have a generator id.\';\n                return false;\n              }\n\n              if (generatorId === \'RandomSelector\' &&\n                  customizationArgs.list_of_values.length === 0) {\n                $scope.warningText = (\n                  \'Each parameter should have at least one possible value.\');\n                return false;\n              }\n            }\n\n            $scope.warningText = \'\';\n            return true;\n          };\n\n          $scope.saveParamChanges = function() {\n            // Validate displayed value.\n            if (!$scope.areDisplayedParamChangesValid()) {\n              AlertsService.addWarning(\'Invalid parameter changes.\');\n              return;\n            }\n\n            $scope.isParamChangesEditorOpen = false;\n\n            // Update paramSpecs manually with newly-added param names.\n            ExplorationParamSpecsService.restoreFromMemento();\n            $scope.paramChangesService.displayed.forEach(function(paramChange) {\n              ExplorationParamSpecsService.displayed.addParamIfNew(\n                paramChange.name);\n            });\n\n            ExplorationParamSpecsService.saveDisplayedValue();\n            $scope.paramChangesService.saveDisplayedValue();\n            if (!$scope.isCurrentlyInSettingsTab()) {\n              ExplorationStatesService.saveStateParamChanges(\n                $scope.paramChangesService.stateName,\n                angular.copy($scope.paramChangesService.displayed));\n            }\n            if ($scope.postSaveHook) {\n              $scope.postSaveHook();\n            }\n          };\n\n          $scope.deleteParamChange = function(index) {\n            if (index < 0 ||\n                index >= $scope.paramChangesService.displayed.length) {\n              AlertsService.addWarning(\n                \'Cannot delete parameter change at position \' + index +\n                \': index out of range\');\n            }\n\n            // This ensures that any new parameter names that have been added\n            // before the deletion are added to the list of possible names in\n            // the select2 dropdowns. Otherwise, after the deletion, the\n            // dropdowns may turn blank.\n            $scope.paramChangesService.displayed.forEach(function(paramChange) {\n              ExplorationParamSpecsService.displayed.addParamIfNew(\n                paramChange.name);\n            });\n            $scope.paramNameChoices = generateParamNameChoices();\n\n            $scope.paramChangesService.displayed.splice(index, 1);\n          };\n\n          $scope.PARAM_CHANGE_LIST_SORTABLE_OPTIONS = {\n            axis: \'y\',\n            containment: \'.oppia-param-change-draggable-area\',\n            cursor: \'move\',\n            handle: \'.oppia-param-change-sort-handle\',\n            items: \'.oppia-param-editor-row\',\n            tolerance: \'pointer\',\n            start: function(e, ui) {\n              $scope.$apply();\n              ui.placeholder.height(ui.item.height());\n            },\n            stop: function() {\n              // This ensures that any new parameter names that have been added\n              // before the swap are added to the list of possible names in the\n              // select2 dropdowns. Otherwise, after the swap, the dropdowns may\n              // turn blank.\n              $scope.paramChangesService.displayed.forEach(\n                function(paramChange) {\n                  ExplorationParamSpecsService.displayed.addParamIfNew(\n                    paramChange.name);\n                }\n              );\n              $scope.paramNameChoices = generateParamNameChoices();\n              $scope.$apply();\n            }\n          };\n\n          $scope.cancelEdit = function() {\n            $scope.paramChangesService.restoreFromMemento();\n            $scope.isParamChangesEditorOpen = false;\n          };\n\n          $scope.dragDotsImgUrl = UrlInterpolationService.getStaticImageUrl(\n            \'/general/drag_dots.png\');\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
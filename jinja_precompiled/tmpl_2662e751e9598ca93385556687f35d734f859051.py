from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/ContextService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for returning information about a page\'s\n * context.\n */\n\noppia.constant(\'PAGE_CONTEXT\', {\n  EXPLORATION_EDITOR: \'editor\',\n  EXPLORATION_PLAYER: \'learner\',\n  QUESTION_EDITOR: \'question_editor\',\n  OTHER: \'other\'\n});\n\noppia.constant(\'EXPLORATION_EDITOR_TAB_CONTEXT\', {\n  EDITOR: \'editor\',\n  PREVIEW: \'preview\'\n});\n\noppia.factory(\'ContextService\', [\n  \'UrlService\', \'PAGE_CONTEXT\', \'EXPLORATION_EDITOR_TAB_CONTEXT\',\n  function(UrlService, PAGE_CONTEXT, EXPLORATION_EDITOR_TAB_CONTEXT) {\n    var pageContext = null;\n    var explorationId = null;\n    var questionId = null;\n    var editorContext = null;\n\n    return {\n      init: function(editorName) {\n        editorContext = editorName;\n      },\n      // Following method helps to know the whether the context of editor is\n      // question editor or exploration editor. The variable editorContext is\n      // set from the init function that is called upon initialization in the\n      // respective editors.\n      getEditorContext: function() {\n        return editorContext;\n      },\n      // Returns a string representing the current tab of the editor (either\n      // \'editor\' or \'preview\'), or null if the current tab is neither of these,\n      // or the current page is not the editor.\n      getEditorTabContext: function() {\n        var hash = UrlService.getHash();\n        if (hash.indexOf(\'#/gui\') === 0) {\n          return EXPLORATION_EDITOR_TAB_CONTEXT.EDITOR;\n        } else if (hash.indexOf(\'#/preview\') === 0) {\n          return EXPLORATION_EDITOR_TAB_CONTEXT.PREVIEW;\n        } else {\n          return null;\n        }\n      },\n      // Returns a string representing the context of the current page.\n      // This is PAGE_CONTEXT.EXPLORATION_EDITOR or\n      // PAGE_CONTEXT.EXPLORATION_PLAYER or PAGE_CONTEXT.QUESTION_EDITOR.\n      // If the current page is not one in either EXPLORATION_EDITOR or\n      // EXPLORATION_PLAYER or QUESTION_EDITOR then return PAGE_CONTEXT.OTHER\n      getPageContext: function() {\n        if (pageContext) {\n          return pageContext;\n        } else {\n          var pathnameArray = UrlService.getPathname().split(\'/\');\n          for (var i = 0; i < pathnameArray.length; i++) {\n            if (pathnameArray[i] === \'explore\' ||\n                (pathnameArray[i] === \'embed\' &&\n                 pathnameArray[i + 1] === \'exploration\')) {\n              pageContext = PAGE_CONTEXT.EXPLORATION_PLAYER;\n              return PAGE_CONTEXT.EXPLORATION_PLAYER;\n            } else if (pathnameArray[i] === \'create\') {\n              pageContext = PAGE_CONTEXT.EXPLORATION_EDITOR;\n              return PAGE_CONTEXT.EXPLORATION_EDITOR;\n            } else if (pathnameArray[i] === \'question_editor\') {\n              pageContext = PAGE_CONTEXT.QUESTION_EDITOR;\n              return PAGE_CONTEXT.QUESTION_EDITOR;\n            }\n          }\n\n          return PAGE_CONTEXT.OTHER;\n        }\n      },\n\n      isInExplorationContext: function() {\n        return (this.getPageContext() === PAGE_CONTEXT.EXPLORATION_EDITOR ||\n          this.getPageContext() === PAGE_CONTEXT.EXPLORATION_PLAYER);\n      },\n\n      isInQuestionContext: function() {\n        return (this.getPageContext() === PAGE_CONTEXT.QUESTION_EDITOR);\n      },\n\n      // Returns a string representing the explorationId (obtained from the\n      // URL).\n      getExplorationId: function() {\n        if (explorationId) {\n          return explorationId;\n        } else {\n          // The pathname should be one of /explore/{exploration_id} or\n          // /create/{exploration_id} or /embed/exploration/{exploration_id}.\n          var pathnameArray = UrlService.getPathname().split(\'/\');\n          for (var i = 0; i < pathnameArray.length; i++) {\n            if (pathnameArray[i] === \'explore\' ||\n                pathnameArray[i] === \'create\') {\n              explorationId = pathnameArray[i + 1];\n              return pathnameArray[i + 1];\n            }\n            if (pathnameArray[i] === \'embed\') {\n              explorationId = pathnameArray[i + 2];\n              return explorationId;\n            }\n          }\n\n          throw Error(\n            \'ERROR: ContextService should not be used outside the \' +\n            \'context of an exploration or a question.\');\n        }\n      },\n\n      // Returns a string representing the questionId (obtained from the\n      // URL).\n      getQuestionId: function() {\n        if (questionId) {\n          return questionId;\n        } else {\n          // The pathname should /question_editor/{question_id}.\n          var pathnameArray = UrlService.getPathname().split(\'/\');\n          for (var i = 0; i < pathnameArray.length; i++) {\n            if (pathnameArray[i] === \'question_editor\') {\n              questionId = pathnameArray[i + 1];\n              return pathnameArray[i + 1];\n            }\n          }\n\n          throw Error(\n            \'ERROR: ContextService should not be used outside the \' +\n            \'context of an exploration or a question.\');\n        }\n      },\n\n      // Following method helps to know whether exploration editor is\n      // in main editing mode or preview mode.\n      isInExplorationEditorMode: function() {\n        return (this.getPageContext() === PAGE_CONTEXT.EXPLORATION_EDITOR &&\n            this.getEditorTabContext() === (\n              EXPLORATION_EDITOR_TAB_CONTEXT.EDITOR));\n      },\n\n      isInExplorationEditorPage: function() {\n        return this.getPageContext() === PAGE_CONTEXT.EXPLORATION_EDITOR;\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
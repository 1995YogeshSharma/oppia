from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/creator_dashboard/CreatorDashboardBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for CreatorDashboardBackendApiService.\n */\n\ndescribe(\'Creator Dashboard backend API service\', function() {\n  var CreatorDashboardBackendApiService = null;\n  var $httpBackend = null;\n  var SAMPLE_EXP_ID = \'hyuy4GUlvTqJ\';\n\n  var sampleDataResults = {\n    explorations_list: [{\n      id: SAMPLE_EXP_ID,\n      title: \'Sample Title\',\n      activity_type: \'exploration\',\n      category: \'Computing\',\n      objective: \'Sample objective\',\n      language_code: \'en\',\n      created_on_msec: 1466178691847.67,\n      last_updated_msec: 1466178759209.839,\n      status: \'public\',\n      rating: {\n        5: 0,\n        4: 1,\n        3: 0,\n        2: 0,\n        1: 0\n      },\n      community_owned: false,\n      tags: \'\',\n      thumbnail_icon_url: \'/subjects/Computing.svg\',\n      thumbnail_bg_color: \'#bb8b2f\',\n      num_views: 2,\n      num_open_threads: 0,\n      num_total_threads: 0\n    }],\n    collections_list: [],\n    dashboard_stats: {\n      total_plays: 10,\n      num_ratings: 1,\n      average_ratings: 4.0,\n      total_open_feedback: 5\n    },\n    last_week_stats: {\n      total_plays: 2,\n      average_ratings: 3.5,\n      num_ratings: 3,\n      total_open_feedback: 1\n    }\n  };\n\n  var CREATOR_DASHBOARD_DATA_URL = \'/creatordashboardhandler/data\';\n  var ERROR_STATUS_CODE = 500;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    CreatorDashboardBackendApiService = $injector.get(\n      \'CreatorDashboardBackendApiService\');\n    UrlInterpolationService = $injector.get(\'UrlInterpolationService\');\n    $httpBackend = $injector.get(\'$httpBackend\');\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully fetch an creator dashboard data from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', CREATOR_DASHBOARD_DATA_URL).respond(\n        sampleDataResults);\n      CreatorDashboardBackendApiService.fetchDashboardData().then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalled();\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use rejection handler if dashboard data backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', CREATOR_DASHBOARD_DATA_URL).respond(\n        ERROR_STATUS_CODE, \'Error loading dashboard data.\');\n      CreatorDashboardBackendApiService.fetchDashboardData().then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalled();\n    }\n  );\n});'

blocks = {}
debug_info = ''
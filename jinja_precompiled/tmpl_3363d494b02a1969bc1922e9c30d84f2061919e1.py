from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/SearchServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests that average ratings are being computed correctly.\n */\n\ndescribe(\'Search service\', function() {\n  var SearchService;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(inject(function($injector) {\n    SearchService = $injector.get(\'SearchService\');\n  }));\n\n  it(\'should find two categories and two languages if given in url search\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent = \'?q=test&category=("Architecture"%20OR%20\' +\n                         \'"Mathematics")&language_code=("en"%20OR%20"ar")\';\n      expect(SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent,\n        results)).toBe(\'test\');\n      expect(results.languageCodes.selections).toEqual({\n        ar: true,\n        en: true\n      });\n      expect(results.categories.selections).toEqual({\n        Architecture: true,\n        Mathematics: true\n      });\n    });\n\n  it(\'should find one category and two languages if given in url search\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent = \'?q=test&category=("Mathematics")&\' +\n                         \'language_code=("en"%20OR%20"ar")\';\n      expect(SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent,\n        results)).toBe(\'test\');\n      expect(results.languageCodes.selections).toEqual({\n        ar: true,\n        en: true\n      });\n      expect(results.categories.selections).toEqual({\n        Mathematics: true\n      });\n    }\n  );\n\n  it(\'should find one category and one language if given in url search\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent =\n        \'?q=test&category=("Mathematics")&language_code=("en")\';\n      expect(SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent,\n        results)).toBe(\'test\');\n      expect(results.languageCodes.selections).toEqual({\n        en: true\n      });\n      expect(results.categories.selections).toEqual({\n        Mathematics: true\n      });\n    }\n  );\n\n  it(\'should find no categories and one language if given in url search\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent = \'?q=test&language_code=("en")\';\n      expect(SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent,\n        results)).toBe(\'test\');\n      expect(results.languageCodes.selections).toEqual({\n        en: true\n      });\n      expect(results.categories.selections).toEqual({});\n    }\n  );\n\n  it(\'should find as many keywords as provided in search query\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent = \'?q=protractor%20test&language_code=("en")\';\n      expect(SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent,\n        results)).toBe(\'protractor test\');\n      expect(results.languageCodes.selections).toEqual({\n        en: true\n      });\n      expect(results.categories.selections).toEqual({});\n    }\n  );\n\n  it(\'should not find languages nor categories when ampersand is escaped\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent = \'?q=protractor%20test%26category=("Mathematics")\' +\n                         \'%26language_code=("en"%20OR%20"ar")\';\n      expect(SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent,\n        results)).toBe(\'protractor test&category=("Mathematics")\' +\n                       \'&language_code=("en" OR "ar")\');\n      expect(results.languageCodes.selections).toEqual({});\n      expect(results.categories.selections).toEqual({});\n    }\n  );\n\n  it(\'should only find empty string when ampersand is not escaped anywhere\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent = \'?q=protractor&test&category=("Mathematics")\' +\n                         \'&language_code=("en"%20OR%20"ar")\';\n      expect(function() {\n        SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent, results);\n      }).toThrow(new Error(\n        \'Invalid search query url: protractor&test&category=("Mathematics")\' +\n        \'&language_code=("en"%20OR%20"ar")\'));\n    }\n  );\n\n  it(\'should error when category selection url component is malformed\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent = \'?q=protractor%20test&category=(("Mathematics")\' +\n                         \'&language_code=("en"%20OR%20"ar")\';\n      expect(function() {\n        SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent, results);\n      }).toThrow(new Error(\'Invalid search query url fragment for \' +\n                           \'categories: category=(("Mathematics")\'));\n      expect(results.languageCodes.selections).toEqual({});\n      expect(results.categories.selections).toEqual({});\n\n      var urlComponent = \'?q=protractor%20test&category=("Mathematics"\' +\n                         \'&language_code=("en"%20OR%20"ar")\';\n      expect(function() {\n        SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent, results);\n      }).toThrow(new Error(\'Invalid search query url fragment for \' +\n                           \'categories: category=("Mathematics"\'));\n      expect(results.languageCodes.selections).toEqual({});\n      expect(results.categories.selections).toEqual({});\n    }\n  );\n\n  it(\'should error when language selection url component is malformed\',\n    function() {\n      var results = {\n        categories: {\n          description: \'\',\n          itemsName: \'categories\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        },\n        languageCodes: {\n          description: \'\',\n          itemsName: \'languages\',\n          masterList: [],\n          numSelections: 0,\n          selections: {},\n          summary: \'\'\n        }\n      };\n      var urlComponent = \'?q=protractor%20test&category=("Mathematics")\' +\n                         \'&language_code="en" OR "ar")\';\n      expect(function() {\n        SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent, results);\n      }).toThrow(new Error(\'Invalid search query url fragment for \' +\n                           \'languageCodes: language_code="en" OR "ar")\'));\n      expect(results.languageCodes.selections).toEqual({});\n      expect(results.categories.selections).toEqual({\n        Mathematics: true\n      });\n\n      var urlComponent = \'?q=protractor%20test&category=("Mathematics")\' +\n                         \'&language_code="en" OR "ar"\';\n      expect(function() {\n        SearchService.updateSearchFieldsBasedOnUrlQuery(urlComponent, results);\n      }).toThrow(new Error(\'Invalid search query url fragment for \' +\n                           \'languageCodes: language_code="en" OR "ar"\'));\n      expect(results.languageCodes.selections).toEqual({});\n      expect(results.categories.selections).toEqual({\n        Mathematics: true\n      });\n    }\n  );\n});'

blocks = {}
debug_info = ''
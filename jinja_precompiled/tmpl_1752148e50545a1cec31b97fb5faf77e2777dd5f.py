from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/admin/roles_tab/RolesTabDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the Roles tab in the admin panel.\n */\n\noppia.directive(\'adminRolesTab\', [\n  \'$http\', \'ADMIN_ROLE_HANDLER_URL\', \'AdminTaskManagerService\',\n  \'UrlInterpolationService\',\n  function(\n      $http, ADMIN_ROLE_HANDLER_URL, AdminTaskManagerService,\n      UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        setStatusMessage: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/admin/roles_tab/roles_tab_directive.html\'),\n      controller: [\'$scope\', function($scope) {\n        $scope.UPDATABLE_ROLES = GLOBALS.UPDATABLE_ROLES;\n        $scope.VIEWABLE_ROLES = GLOBALS.VIEWABLE_ROLES;\n        $scope.graphData = GLOBALS.ROLE_GRAPH_DATA;\n        $scope.resultRolesVisible = false;\n        $scope.result = {};\n        $scope.setStatusMessage(\'\');\n        $scope.viewFormValues = {};\n        $scope.updateFormValues = {};\n        $scope.viewFormValues.method = \'role\';\n\n        $scope.graphDataLoaded = false;\n        // Calculating initStateId and finalStateIds for graphData\n        // Since role graph is acyclic, node with no incoming edge\n        // is initState and nodes with no outgoing edge are finalStates.\n        var hasIncomingEdge = [];\n        var hasOutgoingEdge = [];\n        for (var i = 0; i < $scope.graphData.links.length; i++) {\n          hasIncomingEdge.push($scope.graphData.links[i].target);\n          hasOutgoingEdge.push($scope.graphData.links[i].source);\n        }\n        var finalStateIds = [];\n        for (var role in $scope.graphData.nodes) {\n          if ($scope.graphData.nodes.hasOwnProperty(role)) {\n            if (hasIncomingEdge.indexOf(role) === -1) {\n              $scope.graphData.initStateId = role;\n            }\n            if (hasOutgoingEdge.indexOf(role) === -1) {\n              finalStateIds.push(role);\n            }\n          }\n        }\n        $scope.graphData.finalStateIds = finalStateIds;\n        $scope.graphDataLoaded = true;\n\n        $scope.submitRoleViewForm = function(values) {\n          if (AdminTaskManagerService.isTaskRunning()) {\n            return;\n          }\n\n          $scope.setStatusMessage(\'Processing query...\');\n\n          AdminTaskManagerService.startTask();\n          $scope.result = {};\n          $http.get(ADMIN_ROLE_HANDLER_URL, {\n            params: {\n              method: values.method,\n              role: values.role,\n              username: values.username\n            }\n          }).then(function(response) {\n            $scope.result = response.data;\n            if (Object.keys($scope.result).length === 0) {\n              $scope.resultRolesVisible = false;\n              $scope.setStatusMessage(\'No results.\');\n            } else {\n              $scope.resultRolesVisible = true;\n              $scope.setStatusMessage(\'Success.\');\n            }\n            $scope.viewFormValues.username = \'\';\n            $scope.viewFormValues.role = \'\';\n          }, function(errorResponse) {\n            $scope.setStatusMessage(\n              \'Server error: \' + errorResponse.data.error);\n          });\n          AdminTaskManagerService.finishTask();\n        };\n\n        $scope.submitUpdateRoleForm = function(values) {\n          if (AdminTaskManagerService.isTaskRunning()) {\n            return;\n          }\n\n          $scope.setStatusMessage(\'Updating User Role\');\n          AdminTaskManagerService.startTask();\n          $http.post(ADMIN_ROLE_HANDLER_URL, {\n            role: values.newRole,\n            username: values.username\n          }).then(function() {\n            $scope.setStatusMessage(\n              \'Role of \' + values.username +\n              \' successfully updated to \' + values.newRole);\n            $scope.updateFormValues.username = \'\';\n            $scope.updateFormValues.newRole = \'\';\n          }, function(errorResponse) {\n            $scope.setStatusMessage(\n              \'Server error: \' + errorResponse.data.error);\n          });\n          AdminTaskManagerService.finishTask();\n        };\n      }]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
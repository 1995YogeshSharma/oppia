from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/CodeNormalizerService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for code normalization. Used by the code REPL\n * and pencil code interactions.\n */\n\noppia.factory(\'CodeNormalizerService\', [function() {\n  var removeLeadingWhitespace = function(str) {\n    return str.replace(/^\\s+/g, \'\');\n  };\n  var removeTrailingWhitespace = function(str) {\n    return str.replace(/\\s+$/g, \'\');\n  };\n  var removeIntermediateWhitespace = function(str) {\n    return str.replace(/\\s+/g, \' \');\n  };\n  return {\n    getNormalizedCode: function(codeString) {\n      /*\n       * Normalizes a code string (which is assumed not to contain tab\n       * characters). In particular:\n       *\n       * - Strips out lines that start with \'#\' (comments), possibly preceded by\n       *     whitespace.\n       * - Trims trailing whitespace on each line, and normalizes multiple\n       *     whitespace characters within a single line into one space\n       *     character.\n       * - Removes blank newlines.\n       * - Make the indentation level four spaces.\n       */\n      // TODO(sll): Augment this function to strip out comments that occur at\n      // the end of a line. However, be careful with lines where \'#\' is\n      // contained in quotes or the character is escaped.\n      var FOUR_SPACES = \'    \';\n      // Maps the number of spaces at the beginning of a line to an int\n      // specifying the desired indentation level.\n      var numSpacesToDesiredIndentLevel = {\n        0: 0\n      };\n\n      var codeLines = removeTrailingWhitespace(codeString).split(\'\\n\');\n      var normalizedCodeLines = [];\n      codeLines.forEach(function(line) {\n        if (removeLeadingWhitespace(line).indexOf(\'#\') === 0) {\n          return;\n        }\n        line = removeTrailingWhitespace(line);\n        if (!line) {\n          return;\n        }\n\n        var numSpaces = line.length - removeLeadingWhitespace(line).length;\n\n        var existingNumSpaces = Object.keys(numSpacesToDesiredIndentLevel);\n        var maxNumSpaces = Math.max.apply(null, existingNumSpaces);\n        if (numSpaces > maxNumSpaces) {\n          // Add a new indentation level\n          numSpacesToDesiredIndentLevel[numSpaces] = existingNumSpaces.length;\n        }\n\n        // This is set when the indentation level of the current line does not\n        // start a new scope, and also does not match any previous indentation\n        // level. This case is actually invalid, but for now, we take the\n        // largest indentation level that is less than this one.\n        // TODO(sll): Bad indentation should result in an error nearer the\n        // source.\n        var isShortfallLine =\n          !numSpacesToDesiredIndentLevel.hasOwnProperty(numSpaces) &&\n          numSpaces < maxNumSpaces;\n\n        // Clear all existing indentation levels to the right of this one.\n        for (var indentLength in numSpacesToDesiredIndentLevel) {\n          if (Number(indentLength) > numSpaces) {\n            delete numSpacesToDesiredIndentLevel[indentLength];\n          }\n        }\n\n        if (isShortfallLine) {\n          existingNumSpaces = Object.keys(numSpacesToDesiredIndentLevel);\n          numSpaces = Math.max.apply(null, existingNumSpaces);\n        }\n\n        var normalizedLine = \'\';\n        for (var i = 0; i < numSpacesToDesiredIndentLevel[numSpaces]; i++) {\n          normalizedLine += FOUR_SPACES;\n        }\n        normalizedLine += removeIntermediateWhitespace(\n          removeLeadingWhitespace(line));\n        normalizedCodeLines.push(normalizedLine);\n      });\n      return normalizedCodeLines.join(\'\\n\');\n    }\n  };\n}]);'

blocks = {}
debug_info = ''
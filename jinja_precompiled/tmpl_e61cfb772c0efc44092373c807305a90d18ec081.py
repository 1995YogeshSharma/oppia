from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/feedback_message/FeedbackMessageSummaryObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for FeedbackMessageSummaryObjectFactory.\n */\n\ndescribe(\'Feedback message object factory\', function() {\n  var FeedbackMessageSummaryObjectFactory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    FeedbackMessageSummaryObjectFactory = $injector.get(\n      \'FeedbackMessageSummaryObjectFactory\');\n  }));\n\n  it(\'should create a new message\', function() {\n    var feedbackMessageSummary = (\n      FeedbackMessageSummaryObjectFactory.createNewMessage(\n        0, \'Sample message\', \'Test user\', \'profile_picture_url\'));\n\n    expect(feedbackMessageSummary.messageId).toEqual(0);\n    expect(feedbackMessageSummary.text).toEqual(\'Sample message\');\n    expect(feedbackMessageSummary.authorUsername).toEqual(\'Test user\');\n    expect(feedbackMessageSummary.authorPictureDataUrl).toEqual(\n      \'profile_picture_url\');\n  });\n\n  it(\'should fetch the feedback message domain object from the backend \' +\n     \'summary dict\', function() {\n    var messageSummary = {\n      messageId: 0,\n      text: \'Sample text\',\n      updatedStatus: null,\n      author_username: \'User 1\',\n      author_picture_data_url: \'sample_picture_url_1\',\n      created_on: 1000\n    };\n\n    var feedbackMessageSummary = (\n      FeedbackMessageSummaryObjectFactory.createFromBackendDict(\n        messageSummary));\n\n    expect(feedbackMessageSummary.text).toEqual(\'Sample text\');\n    expect(feedbackMessageSummary.authorUsername).toEqual(\'User 1\');\n    expect(feedbackMessageSummary.authorPictureDataUrl).toEqual(\n      \'sample_picture_url_1\');\n  });\n});'

blocks = {}
debug_info = ''
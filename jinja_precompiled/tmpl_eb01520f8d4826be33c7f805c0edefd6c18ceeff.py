from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/EditableSkillBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to send changes to a skill to the backend.\n */\n\noppia.constant(\n  \'EDITABLE_SKILL_DATA_URL_TEMPLATE\',\n  \'/skill_editor_handler/data/<skill_id>\');\n\noppia.factory(\'EditableSkillBackendApiService\', [\n  \'$http\', \'$q\', \'EDITABLE_SKILL_DATA_URL_TEMPLATE\', \'UrlInterpolationService\',\n  function(\n      $http, $q, EDITABLE_SKILL_DATA_URL_TEMPLATE, UrlInterpolationService) {\n    var _fetchSkill = function(skillId, successCallback, errorCallback) {\n      var skillDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_SKILL_DATA_URL_TEMPLATE, {\n          skill_id: skillId\n        });\n\n      $http.get(skillDataUrl).then(function(response) {\n        var skill = angular.copy(response.data.skill);\n        if (successCallback) {\n          successCallback(skill);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _updateSkill = function(\n        skillId, skillVersion, commitMessage, changeList,\n        successCallback, errorCallback) {\n      var editableSkillDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_SKILL_DATA_URL_TEMPLATE, {\n          skill_id: skillId\n        });\n\n      var putData = {\n        version: skillVersion,\n        commit_message: commitMessage,\n        change_dicts: changeList\n      };\n\n      $http.put(editableSkillDataUrl, putData).then(function(response) {\n        // The returned data is an updated skill dict.\n        var skill = angular.copy(response.data.skill);\n        if (successCallback) {\n          successCallback(skill);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    return {\n      fetchSkill: function(skillId) {\n        return $q(function(resolve, reject) {\n          _fetchSkill(skillId, resolve, reject);\n        });\n      },\n      updateSkill: function(\n          skillId, skillVersion, commitMessage, changeList) {\n        return $q(function(resolve, reject) {\n          _updateSkill(\n            skillId, skillVersion, commitMessage, changeList,\n            resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
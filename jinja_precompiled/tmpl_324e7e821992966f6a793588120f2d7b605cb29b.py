from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/StateInteractionSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the controller of \'State Interactions\'.\n */\n\ndescribe(\'State Interaction controller\', function() {\n  describe(\'StateInteraction\', function() {\n    beforeEach(function() {\n      module(\'oppia\');\n      // Set a global value for INTERACTION_SPECS that will be used by all the\n      // descendant dependencies.\n      module(function($provide) {\n        $provide.constant(\'INTERACTION_SPECS\', {\n          TextInput: {\n            display_mode: \'inline\',\n            is_terminal: false\n          },\n          TerminalInteraction: {\n            display_mode: \'inline\',\n            is_terminal: true\n          }\n        });\n      });\n    });\n\n    var scope, ecs, cls, ess, siis, scas, idc, IS;\n    var $httpBackend;\n    var mockExplorationData;\n\n    beforeEach(function() {\n      mockExplorationData = {\n        explorationId: 0,\n        autosaveChangeList: function() {}\n      };\n      module(function($provide) {\n        $provide.value(\'ExplorationDataService\', [mockExplorationData][0]);\n      });\n      spyOn(mockExplorationData, \'autosaveChangeList\');\n    });\n\n    beforeEach(inject(function($controller, $injector, $rootScope) {\n      scope = $rootScope.$new();\n      ecs = $injector.get(\'EditorStateService\');\n      cls = $injector.get(\'ChangeListService\');\n      ess = $injector.get(\'ExplorationStatesService\');\n      siis = $injector.get(\'stateInteractionIdService\');\n      scas = $injector.get(\'stateCustomizationArgsService\');\n      idc = $injector.get(\'InteractionDetailsCacheService\');\n      IS = $injector.get(\'INTERACTION_SPECS\');\n      $httpBackend = $injector.get(\'$httpBackend\');\n      scope.stateInteractionIdService = siis;\n      scope.stateCustomizationArgsService = scas;\n      scope.InteractionDetailsCacheService = idc;\n\n      ess.init({\n        \'First State\': {\n          content: {\n            html: \'First State Content\',\n            audio_translations: {}\n          },\n          interaction: {\n            id: \'TextInput\',\n            answer_groups: [{\n              rule_specs: [],\n              outcome: {\n                dest: \'default\',\n                feedback: {\n                  html: \'\',\n                  audio_translations: {}\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null\n              },\n            }],\n            default_outcome: {\n              dest: \'default\',\n              feedback: {\n                html: \'\',\n                audio_translations: {}\n              },\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            },\n            hints: []\n          },\n          param_changes: []\n        },\n        \'End State\': {\n          content: {\n            html: \'\',\n            audio_translations: {}\n          },\n          interaction: {\n            id: \'TextInput\',\n            answer_groups: [{\n              rule_specs: [],\n              outcome: {\n                dest: \'default\',\n                feedback: {\n                  html: \'\',\n                  audio_translations: {}\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null\n              }\n            }],\n            default_outcome: {\n              dest: \'default\',\n              feedback: {\n                html: \'\',\n                audio_translations: {}\n              },\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            },\n            hints: []\n          },\n          param_changes: []\n        }\n      });\n\n      var stateEditorCtrl = $controller(\'StateEditor\', {\n        $scope: scope,\n        EditorStateService: ecs,\n        ChangeListService: cls,\n        ExplorationStatesService: ess,\n        EditabilityService: {\n          isEditable: function() {\n            return true;\n          }\n        },\n        INTERACTION_SPECS: IS\n      });\n\n      var interactionCtrl = $controller(\'StateInteraction\', {\n        $scope: scope,\n        EditorStateService: ecs,\n        ChangeListService: cls,\n        ExplorationStatesService: ess,\n        EditabilityService: {\n          isEditable: function() {\n            return true;\n          }\n        },\n        stateInteractionIdService: siis,\n        stateCustomizationArgsService: scas,\n        InteractionDetailsCacheService: idc,\n        INTERACTION_SPECS: IS\n      });\n    }));\n\n    it(\'should keep non-empty content when setting a terminal interaction\',\n      function() {\n        ecs.setActiveStateName(\'First State\');\n        scope.initStateEditor();\n\n        var state = ess.getState(\'First State\');\n        siis.init(\n          \'First State\', state.interaction.id, state.interaction, \'widget_id\');\n        scas.init(\n          \'First State\', state.interaction.customizationArgs,\n          state.interaction, \'widget_customization_args\');\n\n        siis.displayed = \'TerminalInteraction\';\n        scope.onCustomizationModalSavePostHook();\n\n        expect(ess.getState(\'First State\').content.getHtml()).toEqual(\n          \'First State Content\');\n        expect(ess.getState(\'First State\').interaction.id).toEqual(\n          \'TerminalInteraction\');\n      }\n    );\n\n    it(\'should change to default text when adding a terminal interaction\',\n      function() {\n        ecs.setActiveStateName(\'End State\');\n        scope.initStateEditor();\n\n        var state = ess.getState(\'End State\');\n        siis.init(\n          \'End State\', state.interaction.id, state.interaction, \'widget_id\');\n        scas.init(\n          \'End State\', state.interaction.customizationArgs,\n          state.interaction, \'widget_customization_args\');\n\n        siis.displayed = \'TerminalInteraction\';\n        scope.onCustomizationModalSavePostHook();\n\n        expect(state.content.getHtml()).toEqual(\'\');\n        expect(ess.getState(\'End State\').content.getHtml()).toEqual(\n          \'Congratulations, you have finished!\');\n        expect(ess.getState(\'End State\').interaction.id).toEqual(\n          \'TerminalInteraction\');\n      }\n    );\n\n    it(\'should not default text when adding a non-terminal interaction\',\n      function() {\n        ecs.setActiveStateName(\'End State\');\n        scope.initStateEditor();\n\n        var state = ess.getState(\'End State\');\n        siis.init(\n          \'End State\', state.interaction.id, state.interaction, \'widget_id\');\n        scas.init(\n          \'End State\', state.interaction.customizationArgs,\n          state.interaction, \'widget_customization_args\');\n\n        siis.displayed = \'TextInput\';\n        scope.onCustomizationModalSavePostHook();\n\n        expect(state.content.getHtml()).toEqual(\'\');\n        expect(ess.getState(\'End State\').content.getHtml()).toEqual(\'\');\n        expect(ess.getState(\'End State\').interaction.id).toEqual(\'TextInput\');\n      }\n    );\n  });\n});'

blocks = {}
debug_info = ''
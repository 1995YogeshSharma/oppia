from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/admin/roles_tab/RoleGraphDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for displaying Role graph.\n */\n\noppia.directive(\'roleGraph\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        // An object with these keys:\n        //  - \'nodes\': An object whose keys are node ids and whose values are\n        //             node labels\n        //  - \'links\': A list of objects with keys:\n        //            \'source\': id of source node\n        //            \'target\': id of target node\n        //  - \'initStateId\': The initial state id\n        //  - \'finalStateIds\': The list of ids corresponding to terminal states\n        graphData: \'=\',\n        // A boolean value to signify whether graphData is completely loaded.\n        graphDataLoaded: \'@\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/admin/roles_tab/role_graph_directive.html\'),\n      controller: [\n        \'$scope\', \'$element\', \'$timeout\', \'$filter\', \'StateGraphLayoutService\',\n        \'MAX_NODES_PER_ROW\', \'MAX_NODE_LABEL_LENGTH\',\n        function(\n            $scope, $element, $timeout, $filter, StateGraphLayoutService,\n            MAX_NODES_PER_ROW, MAX_NODE_LABEL_LENGTH) {\n          var getElementDimensions = function() {\n            return {\n              h: $element.height(),\n              w: $element.width()\n            };\n          };\n\n          $scope.getGraphHeightInPixels = function() {\n            return Math.max($scope.GRAPH_HEIGHT, 300);\n          };\n\n          $scope.drawGraph = function(\n              nodes, originalLinks, initStateId, finalStateIds) {\n            $scope.finalStateIds = finalStateIds;\n            var links = angular.copy(originalLinks);\n\n            var nodeData = StateGraphLayoutService.computeLayout(\n              nodes, links, initStateId, angular.copy(finalStateIds));\n\n            $scope.GRAPH_WIDTH = StateGraphLayoutService.getGraphWidth(\n              MAX_NODES_PER_ROW, MAX_NODE_LABEL_LENGTH);\n            $scope.GRAPH_HEIGHT = StateGraphLayoutService.getGraphHeight(\n              nodeData);\n\n            nodeData = StateGraphLayoutService.modifyPositionValues(\n              nodeData, $scope.GRAPH_WIDTH, $scope.GRAPH_HEIGHT);\n\n            $scope.augmentedLinks = StateGraphLayoutService.getAugmentedLinks(\n              nodeData, links);\n\n            $scope.getNodeTitle = function(node) {\n              return node.label;\n            };\n\n            $scope.getTruncatedLabel = function(nodeLabel) {\n              return $filter(\'truncate\')(nodeLabel, MAX_NODE_LABEL_LENGTH);\n            };\n\n            // creating list of nodes to display.\n            $scope.nodeList = [];\n            for (var nodeId in nodeData) {\n              $scope.nodeList.push(nodeData[nodeId]);\n            }\n          };\n\n          if ($scope.graphDataLoaded) {\n            $scope.drawGraph(\n              $scope.graphData.nodes, $scope.graphData.links,\n              $scope.graphData.initStateId, $scope.graphData.finalStateIds\n            );\n          }\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
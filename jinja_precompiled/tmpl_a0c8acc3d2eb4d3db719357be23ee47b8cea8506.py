from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/forms/ImageUploaderDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for uploading images.\n */\n\noppia.directive(\'imageUploader\', [\n  \'IdGenerationService\', \'UrlInterpolationService\',\n  function(IdGenerationService, UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        height: \'@\',\n        onFileChanged: \'=\',\n        errorMessage: \'@\',\n        width: \'@\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/forms/image_uploader_directive.html\'),\n      link: function(scope, elt) {\n        var onDragEnd = function(e) {\n          e.preventDefault();\n          $(\'.image-uploader-drop-area\').removeClass(\n            \'image-uploader-is-active\');\n        };\n\n        var validateUploadedFile = function(file, filename) {\n          if (!file || !file.size || !file.type.match(\'image.*\')) {\n            return \'This file is not recognized as an image.\';\n          }\n\n          if (!file.type.match(\'image.jpeg\') &&\n              !file.type.match(\'image.gif\') &&\n              !file.type.match(\'image.jpg\') &&\n              !file.type.match(\'image.png\')) {\n            return \'This image format is not supported.\';\n          }\n\n          if ((file.type.match(/jp(e?)g$/) && !file.name.match(/\\.jp(e?)g$/)) ||\n              (file.type.match(/gif$/) && !file.name.match(/\\.gif$/)) ||\n              (file.type.match(/png$/) && !file.name.match(/\\.png$/))) {\n            return \'This image format does not match the filename extension.\';\n          }\n\n          var ONE_MB_IN_BYTES = 1048576;\n          if (file.size > ONE_MB_IN_BYTES) {\n            var currentSize = (file.size / ONE_MB_IN_BYTES).toFixed(1) + \' MB\';\n            return \'The maximum allowed file size is 1 MB\' +\n                   \' (\' + currentSize + \' given).\';\n          }\n\n          return null;\n        };\n\n        $(elt).bind(\'drop\', function(e) {\n          onDragEnd(e);\n          var file = e.originalEvent.dataTransfer.files[0];\n          scope.errorMessage = validateUploadedFile(file, file.name);\n          if (!scope.errorMessage) {\n            // Only fire this event if validations pass.\n            scope.onFileChanged(file, file.name);\n          }\n          scope.$apply();\n        });\n\n        $(elt).bind(\'dragover\', function(e) {\n          e.preventDefault();\n          $(\'.image-uploader-drop-area\').addClass(\'image-uploader-is-active\');\n        });\n\n        $(elt).bind(\'dragleave\', onDragEnd);\n\n        // If the user accidentally drops an image outside of the image-uploader\n        // we want to prevent the browser from applying normal drag-and-drop\n        // logic, which is to load the image in the browser tab.\n        $(window).bind(\'dragover\', function(e) {\n          e.preventDefault();\n        });\n\n        $(window).bind(\'drop\', function(e) {\n          e.preventDefault();\n        });\n\n        // We generate a random class name to distinguish this input from\n        // others in the DOM.\n        scope.fileInputClassName = (\n          \'image-uploader-file-input\' + IdGenerationService.generateNewId());\n        angular.element(document).on(\n          \'change\', \'.\' + scope.fileInputClassName, function(evt) {\n            var file = evt.currentTarget.files[0];\n            var filename = evt.target.value.split(/(\\\\|\\/)/g).pop();\n            scope.errorMessage = validateUploadedFile(file, filename);\n            if (!scope.errorMessage) {\n              // Only fire this event if validations pass.\n              scope.onFileChanged(file, filename);\n            }\n            scope.$apply();\n          }\n        );\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
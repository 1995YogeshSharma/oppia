from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/StateStatistics.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the unresolved answers section of the\n *   state editor.\n */\n\noppia.controller(\'StateStatistics\', [\n  \'$rootScope\', \'$scope\', \'$uibModal\', \'ExplorationDataService\',\n  \'EditorStateService\', \'ExplorationStatesService\', \'TrainingDataService\',\n  \'stateCustomizationArgsService\', \'ExplorationHtmlFormatterService\',\n  \'TrainingModalService\', \'INTERACTION_SPECS\',\n  function(\n      $rootScope, $scope, $uibModal, ExplorationDataService, EditorStateService,\n      ExplorationStatesService, TrainingDataService,\n      stateCustomizationArgsService, ExplorationHtmlFormatterService,\n      TrainingModalService, INTERACTION_SPECS) {\n    $scope.isInteractionTrainable = false;\n    $scope.SHOW_TRAINABLE_UNRESOLVED_ANSWERS =\n      GLOBALS.SHOW_TRAINABLE_UNRESOLVED_ANSWERS;\n\n    $scope.initStateStatistics = function(data) {\n      $scope.isInteractionTrainable = (\n        data.interaction.id &&\n        INTERACTION_SPECS[data.interaction.id].is_trainable);\n\n      $scope.trainingDataButtonContentsList = [];\n\n      $rootScope.$on(\'updatedTrainingData\', function() {\n        $scope.trainingDataButtonContentsList = [];\n\n        var trainingDataAnswers = TrainingDataService.getTrainingDataAnswers();\n        var trainingDataFrequencies = (\n          TrainingDataService.getTrainingDataFrequencies());\n        for (var i = 0; i < trainingDataAnswers.length; i++) {\n          var answerHtml = (\n            ExplorationHtmlFormatterService.getShortAnswerHtml(\n              trainingDataAnswers[i], data.interaction.id,\n              stateCustomizationArgsService.savedMemento));\n          $scope.trainingDataButtonContentsList.push({\n            answerHtml: answerHtml,\n            frequency: trainingDataFrequencies[i]\n          });\n        }\n      });\n    };\n\n    $scope.$on(\'refreshStateEditor\', function() {\n      $scope.stateName = EditorStateService.getActiveStateName();\n      var stateData = ExplorationStatesService.getState($scope.stateName);\n      $scope.initStateStatistics(stateData);\n    });\n\n    $scope.openTrainUnresolvedAnswerModal = function(trainingDataIndex) {\n      return TrainingModalService.openTrainUnresolvedAnswerModal(\n        TrainingDataService.getTrainingDataAnswers()[trainingDataIndex], true);\n    };\n  }\n]);'

blocks = {}
debug_info = ''
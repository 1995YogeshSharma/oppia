from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ReadOnlyExplorationBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to retrieve read only information\n * about explorations from the backend.\n */\n\noppia.factory(\'ReadOnlyExplorationBackendApiService\', [\n  \'$http\', \'$q\', \'EXPLORATION_DATA_URL_TEMPLATE\',\n  \'EXPLORATION_VERSION_DATA_URL_TEMPLATE\', \'UrlInterpolationService\',\n  function($http, $q, EXPLORATION_DATA_URL_TEMPLATE,\n      EXPLORATION_VERSION_DATA_URL_TEMPLATE, UrlInterpolationService) {\n    // Maps previously loaded explorations to their IDs.\n    var _explorationCache = [];\n\n    var _fetchExploration = function(\n        explorationId, version, successCallback, errorCallback) {\n      var explorationDataUrl = _getExplorationUrl(explorationId, version);\n\n      $http.get(explorationDataUrl).then(function(response) {\n        var exploration = angular.copy(response.data);\n        if (successCallback) {\n          successCallback(exploration);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _isCached = function(explorationId) {\n      return _explorationCache.hasOwnProperty(explorationId);\n    };\n\n    var _getExplorationUrl = function(explorationId, version) {\n      if (version) {\n        return UrlInterpolationService.interpolateUrl(\n          EXPLORATION_VERSION_DATA_URL_TEMPLATE, {\n            exploration_id: explorationId,\n            version: String(version)\n          });\n      }\n      return UrlInterpolationService.interpolateUrl(\n        EXPLORATION_DATA_URL_TEMPLATE, {\n          exploration_id: explorationId\n        }\n      );\n    };\n\n    return {\n      /**\n       * Retrieves an exploration from the backend given an exploration ID\n       * and version number (or none). This returns a promise object that\n       * allows success and rejection callbacks to be registered. If the\n       * exploration is successfully loaded and a success callback function\n       * is provided to the promise object, the success callback is called\n       * with the exploration passed in as a parameter. If something goes\n       * wrong while trying to fetch the exploration, the rejection callback\n       * is called instead, if present. The rejection callback function is\n       * passed any data returned by the backend in the case of an error.\n       */\n      fetchExploration: function(explorationId, version) {\n        return $q(function(resolve, reject) {\n          _fetchExploration(explorationId, version, resolve, reject);\n        });\n      },\n\n      /**\n       * Behaves in the exact same way as fetchExploration (including\n       * callback behavior and returning a promise object),\n       * except this function will attempt to see whether the latest version\n       * of the given exploration has already been loaded. If it has not yet\n       * been loaded, it will fetch the exploration from the backend. If it\n       * successfully retrieves the exploration from the backend, this method\n       * will store the exploration in the cache to avoid requests from the\n       * backend in further function calls.\n       */\n      loadLatestExploration: function(explorationId) {\n        return $q(function(resolve, reject) {\n          if (_isCached(explorationId)) {\n            if (resolve) {\n              resolve(angular.copy(_explorationCache[explorationId]));\n            }\n          } else {\n            _fetchExploration(explorationId, null, function(exploration) {\n              // Save the fetched exploration to avoid future fetches.\n              _explorationCache[explorationId] = exploration;\n              if (resolve) {\n                resolve(angular.copy(exploration));\n              }\n            }, reject);\n          }\n        });\n      },\n\n      /**\n       * Retrieves an exploration from the backend given an exploration ID\n       * and version number. This method does not interact with any cache\n       * and using this method will not overwrite or touch the state of the\n       * cache. All previous data in the cache will still be retained after\n       * this call.\n       */\n      loadExploration: function(explorationId, version) {\n        return $q(function(resolve, reject) {\n          _fetchExploration(explorationId, version, function(exploration) {\n            if (resolve) {\n              resolve(angular.copy(exploration));\n            }\n          }, reject);\n        });\n      },\n\n      /**\n       * Returns whether the given exploration is stored within the local\n       * data cache or if it needs to be retrieved from the backend upon a\n       * load.\n       */\n      isCached: function(explorationId) {\n        return _isCached(explorationId);\n      },\n\n      /**\n       * Replaces the current exploration in the cache given by the specified\n       * exploration ID with a new exploration object.\n       */\n      cacheExploration: function(explorationId, exploration) {\n        _explorationCache[explorationId] = angular.copy(exploration);\n      },\n\n      /**\n       * Clears the local exploration data cache, forcing all future loads to\n       * re-request the previously loaded explorations from the backend.\n       */\n      clearExplorationCache: function() {\n        _explorationCache = [];\n      },\n\n      /**\n       * Deletes a specific exploration from the local cache\n       */\n      deleteExplorationFromCache: function(explorationId) {\n        if (_isCached(explorationId)) {\n          delete _explorationCache[explorationId];\n        }\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
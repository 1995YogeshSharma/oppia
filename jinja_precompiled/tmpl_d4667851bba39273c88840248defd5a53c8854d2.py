from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/InteractionDetailsCacheServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for Interaction Details Cache Service.\n */\n\ndescribe(\'Interaction Details Cache Service\', function() {\n  describe(\'InteractionDetailsCache\', function() {\n    beforeEach(function() {\n      module(\'oppia\');\n    });\n\n    var interactionCustomizationArgs = {\n      choices: {\n        value: \'SampleChoice\'\n      }\n    };\n\n    var interaction = {\n      customization: interactionCustomizationArgs\n    };\n\n    var scope = null, idcs = null;\n    beforeEach(inject(function($injector, $rootScope) {\n      scope = $rootScope.$new();\n      idcs = $injector.get(\'InteractionDetailsCacheService\');\n    }));\n\n    it(\'should add interaction in the cache\', function() {\n      idcs.set(\'InteractionId\', interactionCustomizationArgs);\n      expect(idcs.contains(\'InteractionId\')).toBe(true);\n    });\n\n    it(\'should return null if interaction isnt present in cache\', function() {\n      expect(idcs.get(\'NonPresentInteractionId\')).toEqual(null);\n    });\n\n    it(\'should get interaction details from the cache\', function() {\n      idcs.set(\'InteractionId\', interactionCustomizationArgs);\n      expect(idcs.get(\'InteractionId\')).toEqual(interaction);\n    });\n\n    it(\'should successfully check if interaction is in cache\', function() {\n      idcs.set(\'InteractionId\', interactionCustomizationArgs);\n      expect(idcs.contains(\'InteractionId\')).toBe(true);\n      expect(idcs.contains(\'NonPresentInteractionId\')).toBe(false);\n      expect(idcs.contains(\'\')).toBe(false);\n      expect(idcs.contains(1)).toBe(false);\n    });\n\n    it(\'should remove the interaction from the cache\', function() {\n      idcs.set(\'InteractionId\', interactionCustomizationArgs);\n      expect(idcs.contains(\'InteractionId\')).toBe(true);\n      idcs.removeDetails(\'InteractionId\');\n      expect(idcs.contains(\'InteractionId\')).toBe(false);\n    });\n\n    it(\'should reset the cache\', function() {\n      idcs.set(\'InteractionId\', interactionCustomizationArgs);\n      expect(idcs.contains(\'InteractionId\')).toBe(true);\n      idcs.reset();\n      expect(idcs.contains(\'InteractionId\')).toBe(false);\n    });\n  });\n});'

blocks = {}
debug_info = ''
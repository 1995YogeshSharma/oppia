from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/EditableExplorationBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to send changes to a exploration to the backend.\n */\n\noppia.factory(\'EditableExplorationBackendApiService\', [\n  \'$http\', \'$q\', \'EXPLORATION_DATA_URL_TEMPLATE\',\n  \'EDITABLE_EXPLORATION_DATA_URL_TEMPLATE\',\n  \'EDITABLE_EXPLORATION_DATA_DRAFT_URL_TEMPLATE\',\n  \'TRANSLATE_EXPLORATION_DATA_URL_TEMPLATE\',\n  \'UrlInterpolationService\',\n  \'ReadOnlyExplorationBackendApiService\',\n  function($http, $q, EXPLORATION_DATA_URL_TEMPLATE,\n      EDITABLE_EXPLORATION_DATA_URL_TEMPLATE,\n      EDITABLE_EXPLORATION_DATA_DRAFT_URL_TEMPLATE,\n      TRANSLATE_EXPLORATION_DATA_URL_TEMPLATE,\n      UrlInterpolationService,\n      ReadOnlyExplorationBackendApiService) {\n    var _fetchExploration = function(\n        explorationId, applyDraft, successCallback, errorCallback) {\n      var editableExplorationDataUrl = _getExplorationUrl(\n        explorationId, applyDraft);\n\n      $http.get(editableExplorationDataUrl).then(function(response) {\n        var exploration = angular.copy(response.data);\n        if (successCallback) {\n          successCallback(exploration);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _updateExploration = function(\n        explorationId, explorationVersion, commitMessage, changeList,\n        successCallback, errorCallback) {\n      var editableExplorationDataUrl = _getExplorationUrl(\n        explorationId, null);\n\n      var putData = {\n        version: explorationVersion,\n        commit_message: commitMessage,\n        change_list: changeList\n      };\n      $http.put(editableExplorationDataUrl, putData).then(function(response) {\n        // The returned data is an updated exploration dict.\n        var exploration = angular.copy(response.data);\n\n        // Delete from the ReadOnlyExplorationBackendApiService\'s cache\n        // As the two versions of the data (learner and editor) now differ\n        ReadOnlyExplorationBackendApiService.deleteExplorationFromCache(\n          explorationId, exploration);\n\n        if (successCallback) {\n          successCallback(exploration);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _deleteExploration = function(\n        explorationId, successCallback, errorCallback) {\n      var editableExplorationDataUrl = _getExplorationUrl(explorationId, null);\n\n      $http[\'delete\'](editableExplorationDataUrl).then(function() {\n        // Delete item from the ReadOnlyExplorationBackendApiService\'s cache\n        ReadOnlyExplorationBackendApiService.deleteExplorationFromCache(\n          explorationId);\n        if (successCallback) {\n          successCallback({});\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _getExplorationUrl = function(explorationId, applyDraft) {\n      if (applyDraft) {\n        return UrlInterpolationService.interpolateUrl(\n          EDITABLE_EXPLORATION_DATA_DRAFT_URL_TEMPLATE, {\n            exploration_id: explorationId,\n            apply_draft: JSON.stringify(applyDraft)\n          });\n      }\n      if (!GLOBALS.can_edit && GLOBALS.can_translate) {\n        return UrlInterpolationService.interpolateUrl(\n          TRANSLATE_EXPLORATION_DATA_URL_TEMPLATE, {\n            exploration_id: explorationId\n          });\n      }\n\n      return UrlInterpolationService.interpolateUrl(\n        EDITABLE_EXPLORATION_DATA_URL_TEMPLATE, {\n          exploration_id: explorationId\n        });\n    };\n\n    return {\n      fetchExploration: function(explorationId) {\n        return $q(function(resolve, reject) {\n          _fetchExploration(explorationId, null, resolve, reject);\n        });\n      },\n\n      fetchApplyDraftExploration: function(explorationId) {\n        return $q(function(resolve, reject) {\n          _fetchExploration(explorationId, true, resolve, reject);\n        });\n      },\n\n      /**\n       * Updates an exploration in the backend with the provided exploration\n       * ID. The changes only apply to the exploration of the given version\n       * and the request to update the exploration will fail if the provided\n       * exploration version is older than the current version stored in the\n       * backend. Both the changes and the message to associate with those\n       * changes are used to commit a change to the exploration.\n       * The new exploration is passed to the success callback,\n       * if one is provided to the returned promise object. Errors are passed\n       * to the error callback, if one is provided. Please note, once this is\n       * called the cached exploration in ReadOnlyExplorationBackendApiService\n       * will be deleted. This is due to the differences in the back-end\n       * editor object and the back-end player object. As it stands now,\n       * we are unable to cache any Exploration object obtained from the\n       * editor beackend.\n       */\n      updateExploration: function(\n          explorationId, explorationVersion, commitMessage, changeList) {\n        return $q(function(resolve, reject) {\n          _updateExploration(\n            explorationId, explorationVersion, commitMessage, changeList,\n            resolve, reject);\n        });\n      },\n\n      /**\n       * Deletes an exploration in the backend with the provided exploration\n       * ID. If successful, the exploration will also be deleted from the\n       * ReadOnlyExplorationBackendApiService cache as well.\n       * Errors are passed to the error callback, if one is provided.\n       */\n      deleteExploration: function(explorationId) {\n        return $q(function(resolve, reject) {\n          _deleteExploration(\n            explorationId, resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
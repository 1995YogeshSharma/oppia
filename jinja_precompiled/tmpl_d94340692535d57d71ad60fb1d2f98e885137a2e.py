from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/collection_editor/CollectionEditorNavbarDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the navbar of the collection editor.\n */\n\noppia.directive(\'collectionEditorNavbar\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/collection_editor/collection_editor_navbar_directive.html\'),\n      controller: [\n        \'$scope\', \'$uibModal\', \'AlertsService\', \'RouterService\',\n        \'UndoRedoService\', \'CollectionEditorStateService\',\n        \'CollectionValidationService\',\n        \'CollectionRightsBackendApiService\',\n        \'EditableCollectionBackendApiService\',\n        \'EVENT_COLLECTION_INITIALIZED\', \'EVENT_COLLECTION_REINITIALIZED\',\n        \'EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED\',\n        function(\n            $scope, $uibModal, AlertsService, RouterService, UndoRedoService,\n            CollectionEditorStateService, CollectionValidationService,\n            CollectionRightsBackendApiService,\n            EditableCollectionBackendApiService,\n            EVENT_COLLECTION_INITIALIZED, EVENT_COLLECTION_REINITIALIZED,\n            EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED) {\n          $scope.collectionId = GLOBALS.collectionId;\n          $scope.collection = CollectionEditorStateService.getCollection();\n          $scope.collectionRights = (\n            CollectionEditorStateService.getCollectionRights());\n\n          $scope.isLoadingCollection = (\n            CollectionEditorStateService.isLoadingCollection);\n          $scope.validationIssues = [];\n          $scope.isSaveInProgress = (\n            CollectionEditorStateService.isSavingCollection);\n\n          $scope.getTabStatuses = RouterService.getTabStatuses;\n          $scope.selectMainTab = RouterService.navigateToMainTab;\n          $scope.selectPreviewTab = RouterService.navigateToPreviewTab;\n          $scope.selectSettingsTab = RouterService.navigateToSettingsTab;\n          $scope.selectStatsTab = RouterService.navigateToStatsTab;\n          $scope.selectHistoryTab = RouterService.navigateToHistoryTab;\n\n          var _validateCollection = function() {\n            if ($scope.collectionRights.isPrivate()) {\n              $scope.validationIssues = (\n                CollectionValidationService\n                  .findValidationIssuesForPrivateCollection(\n                    $scope.collection));\n            } else {\n              $scope.validationIssues = (\n                CollectionValidationService\n                  .findValidationIssuesForPublicCollection(\n                    $scope.collection));\n            }\n          };\n\n          var _publishCollection = function() {\n            // TODO(bhenning): This also needs a confirmation of destructive\n            // action since it is not reversible.\n            CollectionRightsBackendApiService.setCollectionPublic(\n              $scope.collectionId, $scope.collection.getVersion()).then(\n              function() {\n                $scope.collectionRights.setPublic();\n                CollectionEditorStateService.setCollectionRights(\n                  $scope.collectionRights);\n              });\n          };\n\n          $scope.$on(\n            EVENT_COLLECTION_INITIALIZED, _validateCollection);\n          $scope.$on(EVENT_COLLECTION_REINITIALIZED, _validateCollection);\n          $scope.$on(\n            EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED, _validateCollection);\n\n          $scope.getWarningsCount = function() {\n            return $scope.validationIssues.length;\n          };\n\n          $scope.getChangeListCount = function() {\n            return UndoRedoService.getChangeCount();\n          };\n\n          $scope.isCollectionSaveable = function() {\n            return (\n              $scope.getChangeListCount() > 0 &&\n              $scope.validationIssues.length === 0);\n          };\n\n          $scope.isCollectionPublishable = function() {\n            return (\n              $scope.collectionRights.isPrivate() &&\n              $scope.getChangeListCount() === 0 &&\n              $scope.validationIssues.length === 0);\n          };\n\n          $scope.saveChanges = function() {\n            var isPrivate = $scope.collectionRights.isPrivate();\n            var modalInstance = $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/collection_editor/\' +\n                \'collection_editor_save_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\',\n                function($scope, $uibModalInstance) {\n                  $scope.isCollectionPrivate = isPrivate;\n\n                  $scope.save = function(commitMessage) {\n                    $uibModalInstance.close(commitMessage);\n                  };\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                  };\n                }\n              ]\n            });\n\n            modalInstance.result.then(function(commitMessage) {\n              CollectionEditorStateService.saveCollection(commitMessage);\n            });\n          };\n\n          $scope.publishCollection = function() {\n            var additionalMetadataNeeded = (\n              !$scope.collection.getTitle() ||\n              !$scope.collection.getObjective() ||\n              !$scope.collection.getCategory());\n\n            if (additionalMetadataNeeded) {\n              $uibModal.open({\n                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                  \'/pages/collection_editor/\' +\n                  \'collection_editor_pre_publish_modal_directive.html\'),\n                backdrop: true,\n                controller: [\n                  \'$scope\', \'$uibModalInstance\', \'CollectionEditorStateService\',\n                  \'CollectionUpdateService\', \'ALL_CATEGORIES\',\n                  function(\n                      $scope, $uibModalInstance, CollectionEditorStatesService,\n                      CollectionUpdateService, ALL_CATEGORIES) {\n                    var collection = (\n                      CollectionEditorStateService.getCollection());\n\n                    $scope.requireTitleToBeSpecified = !collection.getTitle();\n                    $scope.requireObjectiveToBeSpecified = (\n                      !collection.getObjective());\n                    $scope.requireCategoryToBeSpecified = (\n                      !collection.getCategory());\n\n                    $scope.newTitle = collection.getTitle();\n                    $scope.newObjective = collection.getObjective();\n                    $scope.newCategory = collection.getCategory();\n\n                    $scope.CATEGORY_LIST_FOR_SELECT2 = [];\n                    for (var i = 0; i < ALL_CATEGORIES.length; i++) {\n                      $scope.CATEGORY_LIST_FOR_SELECT2.push({\n                        id: ALL_CATEGORIES[i],\n                        text: ALL_CATEGORIES[i]\n                      });\n                    }\n\n                    $scope.isSavingAllowed = function() {\n                      return Boolean(\n                        $scope.newTitle && $scope.newObjective &&\n                        $scope.newCategory);\n                    };\n\n                    $scope.save = function() {\n                      if (!$scope.newTitle) {\n                        AlertsService.addWarning(\'Please specify a title\');\n                        return;\n                      }\n                      if (!$scope.newObjective) {\n                        AlertsService.addWarning(\'Please specify an objective\');\n                        return;\n                      }\n                      if (!$scope.newCategory) {\n                        AlertsService.addWarning(\'Please specify a category\');\n                        return;\n                      }\n\n                      // Record any fields that have changed.\n                      var metadataList = [];\n                      if ($scope.newTitle !== collection.getTitle()) {\n                        metadataList.push(\'title\');\n                        CollectionUpdateService.setCollectionTitle(\n                          collection, $scope.newTitle);\n                      }\n                      if ($scope.newObjective !== collection.getObjective()) {\n                        metadataList.push(\'objective\');\n                        CollectionUpdateService.setCollectionObjective(\n                          collection, $scope.newObjective);\n                      }\n                      if ($scope.newCategory !== collection.getCategory()) {\n                        metadataList.push(\'category\');\n                        CollectionUpdateService.setCollectionCategory(\n                          collection, $scope.newCategory);\n                      }\n\n                      $uibModalInstance.close(metadataList);\n                    };\n\n                    $scope.cancel = function() {\n                      $uibModalInstance.dismiss(\'cancel\');\n                    };\n                  }\n                ]\n              }).result.then(function(metadataList) {\n                var commitMessage = (\n                  \'Add metadata: \' + metadataList.join(\', \') + \'.\');\n                CollectionEditorStateService.saveCollection(\n                  commitMessage, _publishCollection);\n              });\n            } else {\n              _publishCollection();\n            }\n          };\n\n          // Unpublish the collection. Will only show up if the collection is\n          // public and the user has access to the collection.\n          $scope.unpublishCollection = function() {\n            CollectionRightsBackendApiService.setCollectionPrivate(\n              $scope.collectionId, $scope.collection.getVersion()).then(\n              function() {\n                $scope.collectionRights.setPrivate();\n                CollectionEditorStateService.setCollectionRights(\n                  $scope.collectionRights);\n              }, function() {\n                AlertsService.addWarning(\n                  \'There was an error when unpublishing the collection.\');\n              });\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ExplorationObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the Exploration object factory.\n */\n\ndescribe(\'Exploration object factory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'ExplorationObjectFactory\', function() {\n    var scope, eof, atof, explorationDict, exploration;\n    beforeEach(inject(function($injector, $rootScope) {\n      scope = $rootScope.$new();\n      eof = $injector.get(\'ExplorationObjectFactory\');\n      sof = $injector.get(\'StateObjectFactory\');\n      atof = $injector.get(\'AudioTranslationObjectFactory\');\n\n      var statesDict = {\n        \'first state\': {\n          content: {\n            html: \'content\',\n            audio_translations: {\n              en: {\n                filename: \'myfile1.mp3\',\n                file_size_bytes: 210000,\n                needs_update: false\n              },\n              \'hi-en\': {\n                filename: \'myfile3.mp3\',\n                file_size_bytes: 430000,\n                needs_update: false\n              }\n            }\n          },\n          interaction: {\n            answer_groups: [],\n            confirmed_unclassified_answers: [],\n            customization_args: {},\n            default_outcome: {\n              dest: \'new state\',\n              feedback: [],\n              param_changes: []\n            },\n            hints: [],\n            id: \'TextInput\'\n          },\n          hints: [],\n          param_changes: []\n        },\n        \'second state\': {\n          content: {\n            html: \'more content\',\n            audio_translations: {\n              \'hi-en\': {\n                filename: \'myfile2.mp3\',\n                file_size_bytes: 120000,\n                needs_update: false\n              }\n            }\n          },\n          interaction: {\n            answer_groups: [],\n            confirmed_unclassified_answers: [],\n            customization_args: {},\n            default_outcome: {\n              dest: \'new state\',\n              feedback: [],\n              param_changes: []\n            },\n            hints: [],\n            id: \'TextInput\'\n          },\n          hints: [],\n          param_changes: []\n        }\n      };\n\n      explorationDict = {\n        id: 1,\n        title: \'My Title\',\n        category: \'Art\',\n        objective: \'Your objective\',\n        tags: [],\n        blurb: \'\',\n        author_notes: \'\',\n        states_schema_version: 15,\n        init_state_name: \'Introduction\',\n        states: statesDict,\n        param_specs: {},\n        param_changes: [],\n        version: 1\n      };\n\n      exploration = eof.createFromBackendDict(explorationDict);\n      exploration.setInitialStateName(\'first state\');\n    }));\n\n    it(\'should get all language codes of an exploration\', function() {\n      expect(exploration.getAllAudioLanguageCodes())\n        .toEqual([\'en\', \'hi-en\']);\n    });\n\n    it(\'should correctly get the content html\', function() {\n      expect(exploration.getUninterpolatedContentHtml(\'first state\'))\n        .toEqual(\'content\');\n    });\n\n    it(\'should correctly get audio translations from an exploration\',\n      function() {\n        expect(exploration.getAllAudioTranslations(\'hi-en\')).toEqual({\n          \'first state\': [atof.createFromBackendDict({\n            filename: \'myfile3.mp3\',\n            file_size_bytes: 430000,\n            needs_update: false\n          })],\n          \'second state\': [atof.createFromBackendDict({\n            filename: \'myfile2.mp3\',\n            file_size_bytes: 120000,\n            needs_update: false\n          })]\n        });\n        expect(exploration.getAllAudioTranslations(\'en\')).toEqual({\n          \'first state\': [atof.createFromBackendDict({\n            filename: \'myfile1.mp3\',\n            file_size_bytes: 210000,\n            needs_update: false\n          })],\n          \'second state\': []\n        });\n      });\n  });\n});'

blocks = {}
debug_info = ''
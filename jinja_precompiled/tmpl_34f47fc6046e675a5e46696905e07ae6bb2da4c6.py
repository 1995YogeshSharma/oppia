from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ParamSpecsObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the Param Specs object factory.\n */\n\ndescribe(\'ParamSpecs\', function() {\n  var ParamSpecsObjectFactory = null;\n  var ParamSpecObjectFactory = null;\n  var emptyParamSpecs = null;\n  var paramName = \'x\';\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(inject(function($injector) {\n    ParamSpecsObjectFactory = $injector.get(\'ParamSpecsObjectFactory\');\n    ParamSpecObjectFactory = $injector.get(\'ParamSpecObjectFactory\');\n    emptyParamSpecs = ParamSpecsObjectFactory.createFromBackendDict({});\n  }));\n\n  it(\'should be undefined for missing param names\', function() {\n    expect(emptyParamSpecs.getParamDict()[paramName]).not.toBeDefined();\n  });\n\n  it(\'should add param when missing\', function() {\n    var paramSpec = ParamSpecObjectFactory.createDefault();\n\n    expect(emptyParamSpecs.addParamIfNew(paramName, paramSpec)).toBe(true);\n    // No longer empty.\n    expect(emptyParamSpecs.getParamDict()[paramName]).toBe(paramSpec);\n  });\n\n  it(\'should not overwrite existing params\', function() {\n    var oldParamSpec = ParamSpecObjectFactory.createDefault();\n    expect(emptyParamSpecs.addParamIfNew(paramName, oldParamSpec)).toBe(true);\n    // No longer empty.\n    expect(emptyParamSpecs.getParamDict()[paramName]).toBe(oldParamSpec);\n\n    var newParamSpec = ParamSpecObjectFactory.createDefault();\n    expect(emptyParamSpecs.addParamIfNew(paramName, newParamSpec)).toBe(false);\n    expect(emptyParamSpecs.getParamDict()[paramName]).not.toBe(newParamSpec);\n    expect(emptyParamSpecs.getParamDict()[paramName]).toBe(oldParamSpec);\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/forms/AudioFileUploaderDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive that enables the user to upload audio files.\n */\n\noppia.directive(\'audioFileUploader\', [\n  \'UrlInterpolationService\', \'IdGenerationService\',\n  function(UrlInterpolationService, IdGenerationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        droppedFile: \'=\',\n        onFileChanged: \'=\',\n        onFileCleared: \'=\',\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/forms/audio_file_uploader_directive.html\'),\n      link: function(scope, elt) {\n        var ALLOWED_AUDIO_FILE_TYPES = [\'audio/mp3\', \'audio/mpeg\'];\n\n\n        var validateUploadedFile = function(file) {\n          if (!file) {\n            return \'No audio file was uploaded.\';\n          }\n\n          if (!file.size || !file.type.match(\'audio.*\')) {\n            return \'This file is not recognized as an audio file.\';\n          }\n\n          if (ALLOWED_AUDIO_FILE_TYPES.indexOf(file.type) === -1) {\n            return \'Only the MP3 audio format is currently supported.\';\n          }\n\n          if (!file.name) {\n            return \'Filename must not be empty.\';\n          }\n\n          if (!file.name.match(/\\.mp3$/)) {\n            return \'This audio format does not match the filename extension.\';\n          }\n\n          return null;\n        };\n\n        // We generate a random class name to distinguish this input from\n        // others in the DOM.\n        scope.inputFieldClassName = (\n          \'audio-file-uploader-input\' + IdGenerationService.generateNewId());\n        scope.inputFieldFormId = (\n          \'audio-file-uploader-form\' + IdGenerationService.generateNewId());\n        angular.element(document).on(\n          \'change\', \'.\' + scope.inputFieldClassName, function(evt) {\n            var file = evt.currentTarget.files[0];\n            if (!file) {\n              scope.onFileCleared();\n              return;\n            }\n\n            scope.errorMessage = validateUploadedFile(file);\n            if (!scope.errorMessage) {\n              // Only fire this event if validations pass.\n              scope.onFileChanged(file);\n            } else {\n              document.getElementById(scope.inputFieldFormId).reset();\n              scope.onFileCleared();\n            }\n            scope.$apply();\n          }\n        );\n        if (scope.droppedFile) {\n          if (scope.droppedFile.length === 1) {\n            angular.element(document).ready(function() {\n              $(\'.\' + scope.inputFieldClassName)[0].files = scope.droppedFile;\n            });\n          } else {\n            scope.errorMessage = \'Please drop one file at a time.\';\n          }\n        }\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
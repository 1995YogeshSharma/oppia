from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/HintEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the hint editor.\n */\n\noppia.directive(\'hintEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        hint: \'=\',\n        getIndexPlusOne: \'&indexPlusOne\',\n        getOnSaveFn: \'&onSave\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/hint_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$uibModal\', \'EditabilityService\', \'stateHintsService\',\n        \'COMPONENT_NAME_HINT\',\n        function($scope, $uibModal, EditabilityService, stateHintsService,\n            COMPONENT_NAME_HINT) {\n          $scope.isEditable = EditabilityService.isEditable();\n          $scope.stateHintsService = stateHintsService;\n          $scope.editHintForm = {};\n          $scope.hintEditorIsOpen = false;\n\n          $scope.COMPONENT_NAME_HINT = COMPONENT_NAME_HINT;\n\n          $scope.HINT_FORM_SCHEMA = {\n            type: \'html\',\n            ui_config: {}\n          };\n\n          $scope.hintMemento = null;\n\n          $scope.openHintEditor = function() {\n            if ($scope.isEditable) {\n              $scope.hintMemento = angular.copy($scope.hint);\n              $scope.hintEditorIsOpen = true;\n            }\n          };\n\n          $scope.saveThisHint = function() {\n            $scope.hintEditorIsOpen = false;\n            var contentHasChanged = (\n              $scope.hintMemento.hintContent.getHtml() !==\n              $scope.hint.hintContent.getHtml());\n            $scope.hintMemento = null;\n            if ($scope.hint.hintContent.hasUnflaggedAudioTranslations() &&\n              contentHasChanged) {\n              openMarkAllAudioAsNeedingUpdateModal();\n            }\n            $scope.getOnSaveFn()();\n          };\n\n          $scope.cancelThisHintEdit = function() {\n            $scope.hint = angular.copy($scope.hintMemento);\n            $scope.hintMemento = null;\n            $scope.hintEditorIsOpen = false;\n          };\n\n          $scope.onAudioTranslationsStartEditAction = function() {\n            // Close the content editor and save all existing changes to the\n            // HTML.\n            if ($scope.hintEditorIsOpen) {\n              $scope.saveThisHint();\n            }\n          };\n\n          $scope.onAudioTranslationsEdited = function() {\n            $scope.getOnSaveFn()();\n          };\n\n          $scope.$on(\'externalSave\', function() {\n            if ($scope.hintEditorIsOpen &&\n                $scope.editHintForm.$valid) {\n              $scope.saveThisHint();\n            }\n          });\n\n          var openMarkAllAudioAsNeedingUpdateModal = function() {\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/components/forms/\' +\n                \'mark_all_audio_as_needing_update_modal_directive.html\'),\n              backdrop: true,\n              resolve: {},\n              controller: \'MarkAllAudioAsNeedingUpdateController\'\n            }).result.then(function() {\n              $scope.hint.hintContent.markAllAudioAsNeedingUpdate();\n              stateHintsService.displayed[$scope.getIndexPlusOne() - 1]\n                .hintContent = angular.copy($scope.hint.hintContent);\n              $scope.getOnSaveFn()();\n            });\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/RteHelperService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A helper service for the Rich text editor(RTE).\n */\n\noppia.constant(\'RTE_COMPONENT_SPECS\', richTextComponents);\n\noppia.factory(\'RteHelperService\', [\n  \'$filter\', \'$log\', \'$uibModal\', \'$interpolate\', \'$document\',\n  \'ContextService\', \'RTE_COMPONENT_SPECS\', \'HtmlEscaperService\',\n  \'UrlInterpolationService\', \'FocusManagerService\',\n  function(\n      $filter, $log, $uibModal, $interpolate, $document,\n      ContextService, RTE_COMPONENT_SPECS, HtmlEscaperService,\n      UrlInterpolationService, FocusManagerService) {\n    var _RICH_TEXT_COMPONENTS = [];\n\n    Object.keys(RTE_COMPONENT_SPECS).sort().forEach(function(componentId) {\n      _RICH_TEXT_COMPONENTS.push({\n        backendId: RTE_COMPONENT_SPECS[componentId].backend_id,\n        customizationArgSpecs: angular.copy(\n          RTE_COMPONENT_SPECS[componentId].customization_arg_specs),\n        id: RTE_COMPONENT_SPECS[componentId].frontend_id,\n        iconDataUrl: RTE_COMPONENT_SPECS[componentId].icon_data_url,\n        isComplex: RTE_COMPONENT_SPECS[componentId].is_complex,\n        isBlockElement: RTE_COMPONENT_SPECS[componentId].is_block_element,\n        requiresFs: RTE_COMPONENT_SPECS[componentId].requires_fs,\n        tooltip: RTE_COMPONENT_SPECS[componentId].tooltip\n      });\n    });\n\n    var _createCustomizationArgDictFromAttrs = function(attrs) {\n      var customizationArgsDict = {};\n      for (var i = 0; i < attrs.length; i++) {\n        var attr = attrs[i];\n        if (attr.name === \'class\' || attr.name === \'src\' ||\n          attr.name === \'_moz_resizing\') {\n          continue;\n        }\n        var separatorLocation = attr.name.indexOf(\'-with-value\');\n        if (separatorLocation === -1) {\n          $log.error(\'RTE Error: invalid customization attribute \' + attr.name);\n          continue;\n        }\n        var argName = attr.name.substring(0, separatorLocation);\n        customizationArgsDict[argName] = HtmlEscaperService.escapedJsonToObj(\n          attr.value);\n      }\n      return customizationArgsDict;\n    };\n\n    return {\n      createCustomizationArgDictFromAttrs: function(attrs) {\n        return _createCustomizationArgDictFromAttrs(attrs);\n      },\n      getRichTextComponents: function() {\n        return angular.copy(_RICH_TEXT_COMPONENTS);\n      },\n      isInlineComponent: function(richTextComponent) {\n        var inlineComponents = [\'link\', \'math\'];\n        return inlineComponents.indexOf(richTextComponent) !== -1;\n      },\n      // The refocusFn arg is a function that restores focus to the text editor\n      // after exiting the modal, and moves the cursor back to where it was\n      // before the modal was opened.\n      _openCustomizationModal: function(\n          customizationArgSpecs, attrsCustomizationArgsDict, onSubmitCallback,\n          onDismissCallback, refocusFn) {\n        $document[0].execCommand(\'enableObjectResizing\', false, false);\n        var modalDialog = $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/components/forms/customize_rte_component_modal_directive.html\'),\n          backdrop: \'static\',\n          resolve: {},\n          controller: [\n            \'$scope\', \'$uibModalInstance\', \'$timeout\',\n            function($scope, $uibModalInstance, $timeout) {\n              $scope.customizationArgSpecs = customizationArgSpecs;\n\n              // Without this code, the focus will remain in the background RTE\n              // even after the modal loads. This switches the focus to a\n              // temporary field in the modal which is then removed from the\n              // DOM.\n              // TODO(sll): Make this switch to the first input field in the\n              // modal instead.\n              $scope.modalIsLoading = true;\n              FocusManagerService.setFocus(\'tmpFocusPoint\');\n              $timeout(function() {\n                $scope.modalIsLoading = false;\n              });\n\n              $scope.tmpCustomizationArgs = [];\n              for (var i = 0; i < customizationArgSpecs.length; i++) {\n                var caName = customizationArgSpecs[i].name;\n                $scope.tmpCustomizationArgs.push({\n                  name: caName,\n                  value: (\n                    attrsCustomizationArgsDict.hasOwnProperty(caName) ?\n                      angular.copy(attrsCustomizationArgsDict[caName]) :\n                      customizationArgSpecs[i].default_value)\n                });\n              }\n\n              $scope.cancel = function() {\n                $uibModalInstance.dismiss(\'cancel\');\n              };\n\n              $scope.save = function() {\n                $scope.$broadcast(\'externalSave\');\n\n                var customizationArgsDict = {};\n                for (var i = 0; i < $scope.tmpCustomizationArgs.length; i++) {\n                  var caName = $scope.tmpCustomizationArgs[i].name;\n                  customizationArgsDict[caName] = (\n                    $scope.tmpCustomizationArgs[i].value);\n                }\n\n                $uibModalInstance.close(customizationArgsDict);\n              };\n            }\n          ]\n        });\n\n        modalDialog.result.then(onSubmitCallback, onDismissCallback);\n        // \'finally\' is a JS keyword. If it is just used in its ".finally" form,\n        // the minification process throws an error.\n        modalDialog.result[\'finally\'](refocusFn);\n      }\n\n    };\n  }\n]);'

blocks = {}
debug_info = ''
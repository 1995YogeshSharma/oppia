from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/SkillRightsBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for SkillRightsBackendApiService.\n */\n\ndescribe(\'Skill rights backend API service\', function() {\n  var SkillRightsBackendApiService = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    SkillRightsBackendApiService = $injector.get(\n      \'SkillRightsBackendApiService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully set a skill to be public\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    $httpBackend.expect(\n      \'PUT\', \'/skill_editor_handler/publish_skill/0\').respond(200);\n    SkillRightsBackendApiService.setSkillPublic(\'0\', 1).then(\n      successHandler, failHandler);\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalled();\n    expect(failHandler).not.toHaveBeenCalled();\n  });\n\n  it(\'should call the provided fail handler on HTTP failure\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    $httpBackend.expect(\n      \'PUT\', \'/skill_editor_handler/publish_skill/0\').respond(\n      500, \'Error loading skill 0.\');\n    SkillRightsBackendApiService.setSkillPublic(\'0\', 1).then(\n      successHandler, failHandler);\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).not.toHaveBeenCalled();\n    expect(failHandler).toHaveBeenCalled();\n  });\n\n  it(\'should report a cached skill rights after caching it\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    // The skill should not currently be cached.\n    expect(SkillRightsBackendApiService.isCached(\'0\')).toBe(false);\n    // Cache a skill.\n    SkillRightsBackendApiService.cacheSkillRights(\'0\', {\n      skill_id: \'0\',\n      can_edit_skill: true,\n      skill_is_private: true,\n      creator_id: \'a\'\n    });\n\n    // It should now be cached.\n    expect(SkillRightsBackendApiService.isCached(\'0\')).toBe(true);\n\n    // A new skill should not have been fetched from the backend. Also,\n    // the returned skill should match the expected skill object.\n    SkillRightsBackendApiService.loadSkillRights(\'0\').then(\n      successHandler, failHandler);\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalledWith({\n      skill_id: \'0\',\n      can_edit_skill: true,\n      skill_is_private: true,\n      creator_id: \'a\'\n    });\n    expect(failHandler).not.toHaveBeenCalled();\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/ConceptCardBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to retrieve read only information\n * about the concept card of a skill from the backend.\n */\noppia.constant(\n  \'CONCEPT_CARD_DATA_URL_TEMPLATE\', \'/concept_card_handler/<skill_id>\');\n\noppia.factory(\'ConceptCardBackendApiService\', [\n  \'$http\', \'$q\', \'CONCEPT_CARD_DATA_URL_TEMPLATE\', \'UrlInterpolationService\',\n  function($http, $q, CONCEPT_CARD_DATA_URL_TEMPLATE, UrlInterpolationService) {\n    // Maps previously loaded concept cards to their IDs.\n    var _conceptCardCache = [];\n\n    var _fetchConceptCard = function(\n        skillId, successCallback, errorCallback) {\n      var conceptCardDataUrl = UrlInterpolationService.interpolateUrl(\n        CONCEPT_CARD_DATA_URL_TEMPLATE, {\n          skill_id: skillId\n        });\n\n      $http.get(conceptCardDataUrl).then(function(response) {\n        var conceptCard = angular.copy(response.data.concept_card_dict);\n        if (successCallback) {\n          successCallback(conceptCard);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _isCached = function(conceptCardId) {\n      return _conceptCardCache.hasOwnProperty(skillId);\n    };\n\n    return {\n      /**\n       * Retrieves the concept card of a skill from the backend given a skill\n       * ID. This returns a promise object that allows a success and rejection\n       * callbacks to be registered. If the concept card is successfully loaded\n       * and a success callback function is provided to the promise object, the\n       * success callback is called with the concept card passed in as a\n       * parameter. If something goes wrong while trying to fetch the\n       * concept card, the rejection callback is called instead, if present. The\n       * rejection callback function is passed the error that occurred and the\n       * skill ID.\n       */\n      fetchConceptCard: function(skillId) {\n        return $q(function(resolve, reject) {\n          _fetchConceptCard(skillId, resolve, reject);\n        });\n      },\n\n      /**\n       * Behaves in the exact same way as fetchConceptCard (including callback\n       * behavior and returning a promise object), except this function will\n       * attempt to see whether the given concept card has already been loaded.\n       * If it has not yet been loaded, it will fetch the concept card from the\n       * backend. If it successfully retrieves the concept card from the\n       * backend, it will store it in the cache to avoid requests from the\n       * backend in further function calls.\n       */\n      loadConceptCard: function(skillId) {\n        return $q(function(resolve, reject) {\n          if (_isCached(skillId)) {\n            if (resolve) {\n              resolve(angular.copy(_conceptCardCache[skillId]));\n            }\n          } else {\n            _fetchConceptCard(skillId, function(conceptCard) {\n              // Save the fetched conceptCard to avoid future fetches.\n              _conceptCardCache[skillId] = conceptCard;\n              if (resolve) {\n                resolve(angular.copy(conceptCard));\n              }\n            }, reject);\n          }\n        });\n      },\n\n      /**\n       * Returns whether the given concept card is stored within the local data\n       * cache or if it needs to be retrieved from the backend upon a laod.\n       */\n      isCached: function(skillId) {\n        return _isCached(skillId);\n      },\n\n      /**\n       * Replaces the current concept card in the cache given by the specified\n       * skill ID with a new concept card object.\n       */\n      cacheConceptCard: function(skillId, conceptCard) {\n        _conceptCardCache[skillId] = angular.copy(conceptCard);\n      },\n\n      /**\n       * Clears the local concept card data cache, forcing all future loads to\n       * re-request the previously loaded concept cards from the backend.\n       */\n      clearConceptCardCache: function() {\n        _conceptCardCache = [];\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
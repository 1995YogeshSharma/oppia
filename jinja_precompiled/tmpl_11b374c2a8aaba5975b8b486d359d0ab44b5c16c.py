from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/settings_tab/SettingsTab.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the exploration settings tab.\n */\n\noppia.controller(\'SettingsTab\', [\n  \'$scope\', \'$http\', \'$window\', \'$uibModal\',\n  \'$rootScope\', \'ExplorationDataService\',\n  \'ExplorationTitleService\', \'ExplorationCategoryService\',\n  \'ExplorationObjectiveService\', \'ExplorationLanguageCodeService\',\n  \'ExplorationTagsService\', \'ExplorationRightsService\',\n  \'ExplorationInitStateNameService\', \'ExplorationParamSpecsService\',\n  \'ChangeListService\', \'AlertsService\', \'ExplorationStatesService\',\n  \'ExplorationParamChangesService\', \'ExplorationWarningsService\',\n  \'ExplorationAdvancedFeaturesService\', \'ALL_CATEGORIES\',\n  \'EXPLORATION_TITLE_INPUT_FOCUS_LABEL\', \'UserEmailPreferencesService\',\n  \'EditableExplorationBackendApiService\', \'UrlInterpolationService\',\n  \'ExplorationAutomaticTextToSpeechService\',\n  \'ExplorationCorrectnessFeedbackService\',\n  function(\n      $scope, $http, $window, $uibModal,\n      $rootScope, ExplorationDataService,\n      ExplorationTitleService, ExplorationCategoryService,\n      ExplorationObjectiveService, ExplorationLanguageCodeService,\n      ExplorationTagsService, ExplorationRightsService,\n      ExplorationInitStateNameService, ExplorationParamSpecsService,\n      ChangeListService, AlertsService, ExplorationStatesService,\n      ExplorationParamChangesService, ExplorationWarningsService,\n      ExplorationAdvancedFeaturesService, ALL_CATEGORIES,\n      EXPLORATION_TITLE_INPUT_FOCUS_LABEL, UserEmailPreferencesService,\n      EditableExplorationBackendApiService, UrlInterpolationService,\n      ExplorationAutomaticTextToSpeechService,\n      ExplorationCorrectnessFeedbackService) {\n    $scope.EXPLORATION_TITLE_INPUT_FOCUS_LABEL = (\n      EXPLORATION_TITLE_INPUT_FOCUS_LABEL);\n\n    $scope.CATEGORY_LIST_FOR_SELECT2 = [];\n    for (var i = 0; i < ALL_CATEGORIES.length; i++) {\n      $scope.CATEGORY_LIST_FOR_SELECT2.push({\n        id: ALL_CATEGORIES[i],\n        text: ALL_CATEGORIES[i]\n      });\n    }\n\n    $scope.isRolesFormOpen = false;\n\n    $scope.TAG_REGEX = GLOBALS.TAG_REGEX;\n    $scope.canDelete = GLOBALS.canDelete;\n    $scope.canModifyRoles = GLOBALS.canModifyRoles;\n    $scope.canReleaseOwnership = GLOBALS.canReleaseOwnership;\n    $scope.canUnpublish = GLOBALS.canUnpublish;\n\n    var CREATOR_DASHBOARD_PAGE_URL = \'/creator_dashboard\';\n    var EXPLORE_PAGE_PREFIX = \'/explore/\';\n\n    $scope.getExplorePageUrl = function() {\n      return (\n        window.location.protocol + \'//\' + window.location.host +\n        EXPLORE_PAGE_PREFIX + $scope.explorationId);\n    };\n\n    $scope.initSettingsTab = function() {\n      $scope.explorationTitleService = ExplorationTitleService;\n      $scope.explorationCategoryService = ExplorationCategoryService;\n      $scope.explorationObjectiveService = ExplorationObjectiveService;\n      $scope.explorationLanguageCodeService = ExplorationLanguageCodeService;\n      $scope.explorationTagsService = ExplorationTagsService;\n      $scope.ExplorationRightsService = ExplorationRightsService;\n      $scope.explorationInitStateNameService = ExplorationInitStateNameService;\n      $scope.explorationParamSpecsService = ExplorationParamSpecsService;\n      $scope.explorationParamChangesService = ExplorationParamChangesService;\n      $scope.UserEmailPreferencesService = UserEmailPreferencesService;\n\n      ExplorationDataService.getData().then(function() {\n        $scope.refreshSettingsTab();\n        $scope.hasPageLoaded = true;\n      });\n    };\n\n    $scope.refreshSettingsTab = function() {\n      // Ensure that ExplorationStatesService has been initialized before\n      // getting the state names from it. (Otherwise, navigating to the\n      // settings tab directly (by entering a URL that ends with /settings)\n      // results in a console error.\n      if (ExplorationStatesService.isInitialized()) {\n        var categoryIsInSelect2 = $scope.CATEGORY_LIST_FOR_SELECT2.some(\n          function(categoryItem) {\n            return categoryItem.id === ExplorationCategoryService.savedMemento;\n          }\n        );\n\n        // If the current category is not in the dropdown, add it\n        // as the first option.\n        if (!categoryIsInSelect2 &&\n            ExplorationCategoryService.savedMemento) {\n          $scope.CATEGORY_LIST_FOR_SELECT2.unshift({\n            id: ExplorationCategoryService.savedMemento,\n            text: ExplorationCategoryService.savedMemento\n          });\n        }\n\n        $scope.stateNames = ExplorationStatesService.getStateNames();\n      }\n    };\n\n    $scope.$on(\'refreshSettingsTab\', $scope.refreshSettingsTab);\n\n    $scope.initSettingsTab();\n\n    $scope.ROLES = [{\n      name: \'Manager (can edit permissions)\',\n      value: \'owner\'\n    }, {\n      name: \'Collaborator (can make changes)\',\n      value: \'editor\'\n    }, {\n      name: \'Translator (can do audio translations)\',\n      value: \'translator\'\n    }, {\n      name: \'Playtester (can give feedback)\',\n      value: \'viewer\'\n    }];\n\n    $scope.saveExplorationTitle = function() {\n      ExplorationTitleService.saveDisplayedValue();\n    };\n\n    $scope.saveExplorationCategory = function() {\n      ExplorationCategoryService.saveDisplayedValue();\n    };\n\n    $scope.saveExplorationObjective = function() {\n      ExplorationObjectiveService.saveDisplayedValue();\n    };\n\n    $scope.saveExplorationLanguageCode = function() {\n      ExplorationLanguageCodeService.saveDisplayedValue();\n    };\n\n    $scope.saveExplorationTags = function() {\n      ExplorationTagsService.saveDisplayedValue();\n    };\n\n    $scope.saveExplorationInitStateName = function() {\n      var newInitStateName = ExplorationInitStateNameService.displayed;\n\n      if (!ExplorationStatesService.getState(newInitStateName)) {\n        AlertsService.addWarning(\n          \'Invalid initial state name: \' + newInitStateName);\n        ExplorationInitStateNameService.restoreFromMemento();\n        return;\n      }\n\n      ExplorationInitStateNameService.saveDisplayedValue();\n\n      $rootScope.$broadcast(\'refreshGraph\');\n    };\n\n    $scope.postSaveParamChangesHook = function() {\n      ExplorationWarningsService.updateWarnings();\n    };\n\n    /** ******************************************\n    * Methods for enabling advanced features.\n    ********************************************/\n    $scope.areParametersEnabled = (\n      ExplorationAdvancedFeaturesService.areParametersEnabled);\n    $scope.enableParameters = (\n      ExplorationAdvancedFeaturesService.enableParameters);\n\n    $scope.isAutomaticTextToSpeechEnabled = (\n      ExplorationAutomaticTextToSpeechService.isAutomaticTextToSpeechEnabled);\n    $scope.toggleAutomaticTextToSpeech = (\n      ExplorationAutomaticTextToSpeechService.toggleAutomaticTextToSpeech);\n\n    $scope.isCorrectnessFeedbackEnabled = (\n      ExplorationCorrectnessFeedbackService.isEnabled);\n    $scope.toggleCorrectnessFeedback = (\n      ExplorationCorrectnessFeedbackService.toggleCorrectnessFeedback);\n\n    /** ******************************************\n    * Methods for rights management.\n    ********************************************/\n    $scope.openEditRolesForm = function() {\n      $scope.isRolesFormOpen = true;\n      $scope.newMemberUsername = \'\';\n      $scope.newMemberRole = $scope.ROLES[0];\n    };\n\n    $scope.closeEditRolesForm = function() {\n      $scope.newMemberUsername = \'\';\n      $scope.newMemberRole = $scope.ROLES[0];\n      $scope.closeRolesForm();\n    };\n\n    $scope.editRole = function(newMemberUsername, newMemberRole) {\n      $scope.closeRolesForm();\n      ExplorationRightsService.saveRoleChanges(\n        newMemberUsername, newMemberRole);\n    };\n\n    $scope.toggleViewabilityIfPrivate = function() {\n      ExplorationRightsService.setViewability(\n        !ExplorationRightsService.viewableIfPrivate());\n    };\n\n    /** ******************************************\n    * Methods for notifications muting.\n    ********************************************/\n\n    $scope.muteFeedbackNotifications = function() {\n      UserEmailPreferencesService.setFeedbackNotificationPreferences(true);\n    };\n    $scope.muteSuggestionNotifications = function() {\n      UserEmailPreferencesService.setSuggestionNotificationPreferences(true);\n    };\n\n    $scope.unmuteFeedbackNotifications = function() {\n      UserEmailPreferencesService.setFeedbackNotificationPreferences(false);\n    };\n    $scope.unmuteSuggestionNotifications = function() {\n      UserEmailPreferencesService.setSuggestionNotificationPreferences(false);\n    };\n\n    /** ******************************************\n    * Methods relating to control buttons.\n    ********************************************/\n    $scope.previewSummaryTile = function() {\n      AlertsService.clearWarnings();\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/settings_tab/\' +\n          \'preview_summary_tile_modal_directive.html\'),\n        backdrop: true,\n        controller: [\n          \'$scope\', \'$uibModalInstance\', function($scope, $uibModalInstance) {\n            $scope.getExplorationTitle = function() {\n              return ExplorationTitleService.displayed;\n            };\n            $scope.getExplorationObjective = function() {\n              return ExplorationObjectiveService.displayed;\n            };\n            $scope.getExplorationCategory = function() {\n              return ExplorationCategoryService.displayed;\n            };\n            $scope.getThumbnailIconUrl = function() {\n              var category = ExplorationCategoryService.displayed;\n              if (constants.ALL_CATEGORIES.indexOf(category) === -1) {\n                category = constants.DEFAULT_CATEGORY_ICON;\n              }\n              return \'/subjects/\' + category + \'.svg\';\n            };\n            $scope.getThumbnailBgColor = function() {\n              var category = ExplorationCategoryService.displayed;\n              if (!constants.CATEGORIES_TO_COLORS.hasOwnProperty(category)) {\n                var color = constants.DEFAULT_COLOR;\n              } else {\n                var color = constants.CATEGORIES_TO_COLORS[category];\n              }\n              return color;\n            };\n\n            $scope.close = function() {\n              $uibModalInstance.dismiss();\n              AlertsService.clearWarnings();\n            };\n          }\n        ]\n      });\n    };\n\n    $scope.showTransferExplorationOwnershipModal = function() {\n      AlertsService.clearWarnings();\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/settings_tab/\' +\n          \'transfer_exploration_ownership_modal_directive.html\'),\n        backdrop: true,\n        controller: [\n          \'$scope\', \'$uibModalInstance\', function($scope, $uibModalInstance) {\n            $scope.transfer = $uibModalInstance.close;\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n              AlertsService.clearWarnings();\n            };\n          }\n        ]\n      }).result.then(function() {\n        ExplorationRightsService.makeCommunityOwned();\n      });\n    };\n\n    $scope.deleteExploration = function() {\n      AlertsService.clearWarnings();\n\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/settings_tab/\' +\n          \'delete_exploration_modal_directive.html\'),\n        backdrop: true,\n        controller: [\n          \'$scope\', \'$uibModalInstance\', function($scope, $uibModalInstance) {\n            $scope.reallyDelete = $uibModalInstance.close;\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n              AlertsService.clearWarnings();\n            };\n          }\n        ]\n      }).result.then(function() {\n        EditableExplorationBackendApiService.deleteExploration(\n          $scope.explorationId).then(function() {\n          $window.location = CREATOR_DASHBOARD_PAGE_URL;\n        });\n      });\n    };\n\n    $scope.unpublishExplorationAsModerator = function() {\n      AlertsService.clearWarnings();\n\n      var moderatorEmailDraftUrl = \'/moderatorhandler/email_draft\';\n\n      $http.get(moderatorEmailDraftUrl).then(function(response) {\n        // If the draft email body is empty, email functionality will not be\n        // exposed to the mdoerator.\n        var draftEmailBody = response.data.draft_email_body;\n\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_editor/settings_tab/\' +\n            \'moderator_unpublish_exploration_modal_directive.html\'),\n          backdrop: true,\n          resolve: {\n            draftEmailBody: function() {\n              return draftEmailBody;\n            }\n          },\n          controller: [\n            \'$scope\', \'$uibModalInstance\', \'draftEmailBody\',\n            function($scope, $uibModalInstance, draftEmailBody) {\n              $scope.willEmailBeSent = Boolean(draftEmailBody);\n              $scope.emailBody = draftEmailBody;\n\n              if ($scope.willEmailBeSent) {\n                $scope.EMAIL_BODY_SCHEMA = {\n                  type: \'unicode\',\n                  ui_config: {\n                    rows: 20\n                  }\n                };\n              }\n\n              $scope.reallyTakeAction = function() {\n                $uibModalInstance.close({\n                  emailBody: $scope.emailBody\n                });\n              };\n\n              $scope.cancel = function() {\n                $uibModalInstance.dismiss(\'cancel\');\n                AlertsService.clearWarnings();\n              };\n            }\n          ]\n        }).result.then(function(result) {\n          ExplorationRightsService.saveModeratorChangeToBackend(\n            result.emailBody);\n        });\n      });\n    };\n\n    $scope.isExplorationLockedForEditing = function() {\n      return ChangeListService.isExplorationLockedForEditing();\n    };\n\n    $scope.closeRolesForm = function() {\n      $scope.isRolesFormOpen = false;\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/EditableTopicBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for EditableTopicBackendApiService.\n */\n\ndescribe(\'Editable topic backend API service\', function() {\n  var EditableTopicBackendApiService = null;\n  var sampleDataResults = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n  var UndoRedoService = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    EditableTopicBackendApiService = $injector.get(\n      \'EditableTopicBackendApiService\');\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n\n    // Sample topic object returnable from the backend\n    sampleDataResults = {\n      topic_dict: {\n        id: \'0\',\n        name: \'Topic Name\',\n        description: \'Topic Description\',\n        version: \'1\',\n        canonical_story_ids: [\'story_id_1\'],\n        additional_story_ids: [\'story_id_2\'],\n        uncategorized_skill_ids: [\'skill_id_1\'],\n        subtopics: [],\n        language_code: \'en\'\n      },\n      skill_id_to_description_dict: {\n        skill_id_1: \'Description 1\'\n      },\n      subtopic_page: {\n        id: \'topicId-1\',\n        topicId: \'topicId\',\n        html_data: \'<p>Data</p>\',\n        language_code: \'en\'\n      }\n    };\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully fetch an existing topic from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/topic_editor_handler/data/0\').respond(\n        sampleDataResults);\n      EditableTopicBackendApiService.fetchTopic(\'0\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith({\n        topicDict: sampleDataResults.topic_dict,\n        skillIdToDescriptionDict: sampleDataResults.skill_id_to_description_dict\n      });\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should successfully fetch an existing subtopic page from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\n        \'GET\', \'/subtopic_page_editor_handler/data/topicId/1\').respond(\n        sampleDataResults);\n      EditableTopicBackendApiService.fetchSubtopicPage(\'topicId\', 1).then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(\n        sampleDataResults.subtopic_page);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/topic_editor_handler/data/1\').respond(\n        500, \'Error loading topic 1.\');\n      EditableTopicBackendApiService.fetchTopic(\'1\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\'Error loading topic 1.\');\n    }\n  );\n\n  it(\'should update a topic after fetching it from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a topic the first time should fetch it from the backend.\n      $httpBackend.expect(\'GET\', \'/topic_editor_handler/data/0\').respond(\n        sampleDataResults);\n\n      EditableTopicBackendApiService.fetchTopic(\'0\').then(\n        function(data) {\n          topic = data.topicDict;\n        });\n      $httpBackend.flush();\n\n      topic.name = \'New Name\';\n      topic.version = \'2\';\n      var topicWrapper = {\n        topic_dict: topic,\n        skill_id_to_description_dict: {\n          skill_id_1: \'Description 1\'\n        }\n      };\n\n      $httpBackend.expect(\'PUT\', \'/topic_editor_handler/data/0\').respond(\n        topicWrapper);\n\n      // Send a request to update topic\n      EditableTopicBackendApiService.updateTopic(\n        topic.id, topic.version, \'Name is updated\', []\n      ).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith({\n        topicDict: topic,\n        skillIdToDescriptionDict: sampleDataResults.skill_id_to_description_dict\n      });\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the topic to update doesn\\\'t exist\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a topic the first time should fetch it from the backend.\n      $httpBackend.expect(\'PUT\', \'/topic_editor_handler/data/1\').respond(\n        404, \'Topic with given id doesn\\\'t exist.\');\n\n      EditableTopicBackendApiService.updateTopic(\n        \'1\', \'1\', \'Update an invalid topic.\', []\n      ).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\n        \'Topic with given id doesn\\\'t exist.\');\n    }\n  );\n});'

blocks = {}
debug_info = ''
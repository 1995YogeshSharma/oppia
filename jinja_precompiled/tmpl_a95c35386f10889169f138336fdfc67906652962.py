from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/ExtractImageFilenamesFromStateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to extract image filenames in a State.\n */\n\noppia.factory(\'ExtractImageFilenamesFromStateService\', [\n  \'HtmlEscaperService\', function(HtmlEscaperService) {\n    var INTERACTION_TYPE_MULTIPLE_CHOICE = \'MultipleChoiceInput\';\n    var INTERACTION_TYPE_ITEM_SELECTION = \'ItemSelectionInput\';\n    var INTERACTION_TYPE_IMAGE_CLICK_INPUT = \'ImageClickInput\';\n    var INTERACTION_TYPE_DRAG_AND_DROP_SORT = \'DragAndDropSortInput\';\n\n    var filenamesInState = [];\n\n    /**\n     * Gets the html from the state\'s content.\n     * @param {object} state - The state from which the html of the content\n     *                         should be returned.\n     */\n    var _getStateContentHtml = function(state) {\n      return state.content.getHtml();\n    };\n\n    /**\n     * Gets the html from the outcome of the answer groups and the default\n     * outcome of the state.\n     * @param {object} state - The state from which the html of the outcomes of\n     *                         the answer groups should be returned.\n     */\n    var _getOutcomesHtml = function(state) {\n      var outcomesHtml = \'\';\n      state.interaction.answerGroups.forEach(function(answerGroup) {\n        var answerGroupHtml = answerGroup.outcome.feedback.getHtml();\n        outcomesHtml = outcomesHtml.concat(answerGroupHtml);\n      });\n      if (state.interaction.defaultOutcome !== null) {\n        outcomesHtml = outcomesHtml.concat(\n          state.interaction.defaultOutcome.feedback.getHtml());\n      }\n      return outcomesHtml;\n    };\n\n    /**\n     * Gets the html from the hints in the state.\n     * @param {object} state - The state whose hints\' html should be returned.\n     */\n    var _getHintsHtml = function(state) {\n      var hintsHtml = \'\';\n      state.interaction.hints.forEach(function(hint) {\n        var hintHtml = hint.hintContent.getHtml();\n        hintsHtml = hintsHtml.concat(hintHtml);\n      });\n      return hintsHtml;\n    };\n\n    /**\n     * Gets the html from the solution in the state.\n     * @param {object} state - The state whose solution\'s html should be\n     *                         returned.\n     */\n    var _getSolutionHtml = function(state) {\n      return state.interaction.solution.explanation.getHtml();\n    };\n\n    /**\n     * Gets all the html in a state.\n     * @param {object} state - The state whose html is to be fetched.\n     */\n    var _getAllHtmlOfState = function(state) {\n      var _allHtmlInTheState = [];\n      // The order of the extracted image names is same as they appear in a\n      // state. The images should be preloaded in the following order ---\n      // content, customizationArgs of interactions, feedback of outcomes ()\n      // including feedback of default outcome if any), hints, solution if any.\n\n      _allHtmlInTheState.push(_getStateContentHtml(state));\n\n      if (state.interaction.id === INTERACTION_TYPE_MULTIPLE_CHOICE ||\n          state.interaction.id === INTERACTION_TYPE_ITEM_SELECTION ||\n          state.interaction.id === INTERACTION_TYPE_DRAG_AND_DROP_SORT) {\n        var customizationArgsHtml = \'\';\n        state.interaction.customizationArgs.choices.value.forEach(\n          function(value) {\n            customizationArgsHtml = customizationArgsHtml.concat(value);\n          });\n        _allHtmlInTheState.push(customizationArgsHtml);\n      }\n\n      _allHtmlInTheState.push(_getOutcomesHtml(state));\n\n      _allHtmlInTheState.push(_getHintsHtml(state));\n\n      if (state.interaction.solution !== null) {\n        _allHtmlInTheState.push(_getSolutionHtml(state));\n      }\n      return _allHtmlInTheState;\n    };\n\n    /**\n     * Extracts the filepath object from the filepath-value attribute of the\n     * oppia-noninteractive-image tags in the strHtml(given string).\n     * @param {string} strHtml - The string from which the object of\n     *                           filepath should be extracted.\n     */\n    var _extractFilepathValueFromOppiaNonInteractiveImageTag = function(\n        strHtml) {\n      var filenames = [];\n      var dummyElement = document.createElement(\'div\');\n      dummyElement.innerHTML = (\n        HtmlEscaperService.escapedStrToUnescapedStr(strHtml));\n\n      var imageTagList = dummyElement.getElementsByTagName(\n        \'oppia-noninteractive-image\');\n      for (i = 0; i < imageTagList.length; i++) {\n        // We have the attribute of filepath in oppia-noninteractive-image tag.\n        // But it actually contains the filename only. We use the variable\n        // filename instead of filepath since in the end we are retrieving the\n        // filenames in the exploration.\n        var filename = JSON.parse(\n          imageTagList[i].getAttribute(\'filepath-with-value\'));\n        filenames.push(filename);\n      }\n      return filenames;\n    };\n\n    /**\n     * Gets the filenames of all the images that are a part of the state.\n     * @param {object} state - The state from which the filenames of the image\n     *                         should be extracted.\n     */\n    var _getImageFilenamesInState = function(state) {\n      var filenamesInState = [];\n      // The Image Click Input interaction has an image whose filename is\n      // directly stored in the customizationArgs.imageAndRegion.value\n      // .imagePath\n      if (state.interaction.id === INTERACTION_TYPE_IMAGE_CLICK_INPUT) {\n        var filename = (\n          state.interaction.customizationArgs.imageAndRegions.value.imagePath);\n        filenamesInState.push(filename);\n      }\n      allHtmlOfState = _getAllHtmlOfState(state);\n      allHtmlOfState.forEach(function(htmlStr) {\n        filenamesInState = filenamesInState.concat(\n          _extractFilepathValueFromOppiaNonInteractiveImageTag(htmlStr));\n      });\n      return filenamesInState;\n    };\n\n    return {\n      getImageFilenamesInState: _getImageFilenamesInState\n    };\n  }]);'

blocks = {}
debug_info = ''
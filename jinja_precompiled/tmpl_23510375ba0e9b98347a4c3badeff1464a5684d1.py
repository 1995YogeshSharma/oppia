from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/IssuesDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for visualizing issues.\n */\n\noppia.directive(\'issuesDirective\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {},\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/statistics_tab/issues_directive.html\'),\n      controller: [\n        \'$scope\', \'IssuesService\',\n        function($scope, IssuesService) {\n          IssuesService.getIssues().then(function(issues) {\n            $scope.issues = issues;\n          });\n\n          $scope.getIssueIndex = function(issue) {\n            return $scope.issues.indexOf(issue);\n          };\n\n          $scope.currentIssueIndex = -1;\n\n          $scope.isIssueOnInitDisplay = function(issue) {\n            return $scope.getIssueIndex(issue) === 0;\n          };\n\n          $scope.createIssueNavId = function(issue) {\n            return $scope.getIssueIndex(issue) + 1;\n          };\n\n          $scope.isIssueDisplayed = function() {\n            return $scope.currentIssueIndex > -1;\n          };\n\n          $scope.makeVisible = function(nextIssueIndex) {\n            if ($scope.isIssueDisplayed()) {\n              document.getElementById(\n                \'issue\' + $scope.currentIssueIndex).style.display = \'none\';\n              document.getElementById(\n                \'issueNav\' + $scope.currentIssueIndex).classList.remove(\n                \'text-white\');\n              document.getElementById(\n                \'issueNav\' + $scope.currentIssueIndex).classList.remove(\n                \'bg-clr\');\n            }\n            document.getElementById(\'issue\' + nextIssueIndex).style.display =\n              \'block\';\n            document.getElementById(\n              \'issueNav\' + nextIssueIndex).classList.add(\'text-white\');\n            document.getElementById(\n              \'issueNav\' + nextIssueIndex).classList.add(\'bg-clr\');\n            $scope.currentIssueIndex = nextIssueIndex;\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/SubtopicPageObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for SubtopicPageObjectFactory.\n */\n\ndescribe(\'Subtopic page object factory\', function() {\n  var SubtopicPageObjectFactory = null;\n  var _sampleSubtopic = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    SubtopicPageObjectFactory = $injector.get(\'SubtopicPageObjectFactory\');\n  }));\n\n  it(\'should be able to create a subtopic page object with given topic and \' +\n    \'subtopic id\', function() {\n    var subtopicPage = SubtopicPageObjectFactory.createDefault(\n      \'topic_id\', 2);\n    expect(subtopicPage.getId()).toBe(\'topic_id-2\');\n    expect(subtopicPage.getTopicId()).toBe(\'topic_id\');\n    expect(subtopicPage.getHtmlData()).toEqual(\'\');\n    expect(subtopicPage.getLanguageCode()).toEqual(\'en\');\n  });\n\n  it(\'should be able to create an interstitial subtopic page object\',\n    function() {\n      var subtopicPage =\n        SubtopicPageObjectFactory.createInterstitialSubtopicPage();\n      expect(subtopicPage.getId()).toEqual(null);\n      expect(subtopicPage.getTopicId()).toEqual(null);\n      expect(subtopicPage.getHtmlData()).toEqual(null);\n      expect(subtopicPage.getLanguageCode()).toBe(\'en\');\n    });\n\n  it(\'should be able to copy from another subtopic page\', function() {\n    var firstSubtopicPage = SubtopicPageObjectFactory.createFromBackendDict({\n      id: \'topic_id-1\',\n      topic_id: \'topic_id\',\n      html_data: \'<p>Data</p>\',\n      language_code: \'en\'\n    });\n\n    var secondSubtopicPage = SubtopicPageObjectFactory.createFromBackendDict({\n      id: \'topic_id2-2\',\n      topic_id: \'topic_id2\',\n      html_data: \'<p>Data2</p>\',\n      language_code: \'en\'\n    });\n\n    expect(firstSubtopicPage).not.toBe(secondSubtopicPage);\n    expect(firstSubtopicPage).not.toEqual(secondSubtopicPage);\n\n    firstSubtopicPage.copyFromSubtopicPage(secondSubtopicPage);\n    expect(firstSubtopicPage).not.toBe(secondSubtopicPage);\n    expect(firstSubtopicPage).toEqual(secondSubtopicPage);\n  });\n});'

blocks = {}
debug_info = ''
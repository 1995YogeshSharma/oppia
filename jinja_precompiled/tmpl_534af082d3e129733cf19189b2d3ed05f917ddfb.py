from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/StateImprovementSuggestionService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for suggestion improvements to a specific state.\n */\n\noppia.factory(\'StateImprovementSuggestionService\', [\n  \'IMPROVE_TYPE_INCOMPLETE\',\n  function(IMPROVE_TYPE_INCOMPLETE) {\n    return {\n      // Returns an array of suggested improvements to states. Each suggestion\n      // is an object with the keys: rank, improveType, and stateName.\n      getStateImprovements: function(explorationStates, allStateStats) {\n        var rankComparator = function(lhs, rhs) {\n          return rhs.rank - lhs.rank;\n        };\n\n        var rankedStates = [];\n        explorationStates.getStateNames().forEach(function(stateName) {\n          if (!allStateStats.hasOwnProperty(stateName)) {\n            return;\n          }\n\n          var stateStats = allStateStats[stateName];\n          var totalEntryCount = stateStats.total_entry_count;\n          var noAnswerSubmittedCount = stateStats.no_submitted_answer_count;\n\n          if (totalEntryCount === 0) {\n            return;\n          }\n\n          var threshold = 0.2 * totalEntryCount;\n          var eligibleFlags = [];\n          var state = explorationStates.getState(stateName);\n          var stateInteraction = state.interaction;\n          if (noAnswerSubmittedCount > threshold) {\n            eligibleFlags.push({\n              rank: noAnswerSubmittedCount,\n              improveType: IMPROVE_TYPE_INCOMPLETE,\n            });\n          }\n          if (eligibleFlags.length > 0) {\n            eligibleFlags.sort(rankComparator);\n            rankedStates.push({\n              rank: eligibleFlags[0].rank,\n              stateName: stateName,\n              type: eligibleFlags[0].improveType,\n            });\n          }\n        });\n\n        // The returned suggestions are sorted decreasingly by their ranks.\n        rankedStates.sort(rankComparator);\n        return rankedStates;\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
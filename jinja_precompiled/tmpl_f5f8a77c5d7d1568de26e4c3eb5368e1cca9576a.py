from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/preview_tab/PreviewTab.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers and services for the exploration preview in the\n * editor page.\n */\n\noppia.controller(\'PreviewTab\', [\n  \'$scope\', \'$uibModal\', \'$q\', \'$timeout\', \'LearnerParamsService\',\n  \'ExplorationDataService\', \'ExplorationAdvancedFeaturesService\',\n  \'ExplorationCategoryService\', \'EditorStateService\',\n  \'ExplorationInitStateNameService\', \'ExplorationParamChangesService\',\n  \'ExplorationParamSpecsService\', \'ExplorationStatesService\',\n  \'ExplorationTitleService\', \'ExplorationPlayerService\',\n  \'ParameterMetadataService\', \'ParamChangeObjectFactory\',\n  \'UrlInterpolationService\',\n  function(\n      $scope, $uibModal, $q, $timeout, LearnerParamsService,\n      ExplorationDataService, ExplorationAdvancedFeaturesService,\n      ExplorationCategoryService, EditorStateService,\n      ExplorationInitStateNameService, ExplorationParamChangesService,\n      ExplorationParamSpecsService, ExplorationStatesService,\n      ExplorationTitleService, ExplorationPlayerService,\n      ParameterMetadataService, ParamChangeObjectFactory,\n      UrlInterpolationService) {\n    $scope.isExplorationPopulated = false;\n    ExplorationDataService.getData().then(function() {\n      var initStateNameForPreview = EditorStateService.getActiveStateName();\n      var manualParamChanges = [];\n\n      // Show a warning message if preview doesn\'t start from the first state\n      if (initStateNameForPreview !==\n          ExplorationInitStateNameService.savedMemento) {\n        $scope.previewWarning =\n          \'Preview started from \\"\' + initStateNameForPreview + \'\\"\';\n      } else {\n        $scope.previewWarning = \'\';\n      }\n\n      // Prompt user to enter any unset parameters, then populate exploration\n      manualParamChanges = $scope.getManualParamChanges(initStateNameForPreview)\n        .then(function(manualParamChanges) {\n          $scope.loadPreviewState(initStateNameForPreview, manualParamChanges);\n        });\n    });\n\n    $scope.getManualParamChanges = function(initStateNameForPreview) {\n      var deferred = $q.defer();\n\n      var unsetParametersInfo = ParameterMetadataService.getUnsetParametersInfo(\n        [initStateNameForPreview]);\n\n      // Construct array to hold required parameter changes\n      var manualParamChanges = [];\n      for (var i = 0; i < unsetParametersInfo.length; i++) {\n        var newParamChange = ParamChangeObjectFactory.createEmpty(\n          unsetParametersInfo[i].paramName);\n        manualParamChanges.push(newParamChange);\n      }\n\n      // Use modal to populate parameter change values\n      if (manualParamChanges.length > 0) {\n        $scope.showSetParamsModal(manualParamChanges, function() {\n          deferred.resolve(manualParamChanges);\n        });\n      } else {\n        deferred.resolve([]);\n      }\n\n      return deferred.promise;\n    };\n\n    $scope.showParameterSummary = function() {\n      return (ExplorationAdvancedFeaturesService.areParametersEnabled() &&\n              !angular.equals({}, $scope.allParams));\n    };\n\n    $scope.showSetParamsModal = function(manualParamChanges, callback) {\n      var modalInstance = $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/preview_tab/\' +\n          \'preview_set_parameters_modal_directive.html\'),\n        backdrop: \'static\',\n        windowClass: \'oppia-preview-set-params-modal\',\n        controller: [\n          \'$scope\', \'$uibModalInstance\', \'RouterService\',\n          function($scope, $uibModalInstance, RouterService) {\n            $scope.manualParamChanges = manualParamChanges;\n            $scope.previewParamModalOk = $uibModalInstance.close;\n            $scope.previewParamModalCancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n              RouterService.navigateToMainTab();\n            };\n          }\n        ]\n      }).result.then(function() {\n        if (callback) {\n          callback();\n        }\n      });\n    };\n\n    $scope.loadPreviewState = function(stateName, manualParamChanges) {\n      ExplorationPlayerService.initSettingsFromEditor(\n        stateName, manualParamChanges);\n      $scope.isExplorationPopulated = true;\n    };\n\n    $scope.resetPreview = function() {\n      $scope.previewWarning = \'\';\n      $scope.isExplorationPopulated = false;\n      initStateNameForPreview = ExplorationInitStateNameService.savedMemento;\n      $timeout(function() {\n        ExplorationPlayerService.init(function(exploration, initHtml,\n            newParams) {\n          $scope.loadPreviewState(initStateNameForPreview, []);\n        });\n      }, 200);\n    };\n\n    // This allows the active state to be kept up-to-date whilst navigating in\n    // preview mode, ensuring that the state does not change when toggling\n    // between editor and preview.\n    $scope.$on(\'updateActiveStateIfInEditor\', function(evt, stateName) {\n      EditorStateService.setActiveStateName(stateName);\n    });\n\n    $scope.allParams = {};\n    $scope.$on(\'playerStateChange\', function() {\n      $scope.allParams = LearnerParamsService.getAllParams();\n    });\n  }\n]);'

blocks = {}
debug_info = ''
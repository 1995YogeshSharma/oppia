from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/AnswerClassificationService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Classification service for answer groups.\n */\n\n// TODO(bhenning): Find a better place for these constants.\n\n// NOTE TO DEVELOPERS: These constants must be the same (in name and value) as\n// the corresponding classification constants defined in core.domain.exp_domain.\noppia.constant(\'EXPLICIT_CLASSIFICATION\', \'explicit\');\noppia.constant(\'TRAINING_DATA_CLASSIFICATION\', \'training_data_match\');\noppia.constant(\'STATISTICAL_CLASSIFICATION\', \'statistical_classifier\');\noppia.constant(\'DEFAULT_OUTCOME_CLASSIFICATION\', \'default_outcome\');\n\noppia.factory(\'AnswerClassificationService\', [\n  \'AlertsService\', \'AnswerClassificationResultObjectFactory\',\n  \'PredictionAlgorithmRegistryService\', \'StateClassifierMappingService\',\n  \'INTERACTION_SPECS\', \'ENABLE_ML_CLASSIFIERS\', \'EXPLICIT_CLASSIFICATION\',\n  \'DEFAULT_OUTCOME_CLASSIFICATION\', \'STATISTICAL_CLASSIFICATION\',\n  \'TRAINING_DATA_CLASSIFICATION\',\n  function(\n      AlertsService, AnswerClassificationResultObjectFactory,\n      PredictionAlgorithmRegistryService, StateClassifierMappingService,\n      INTERACTION_SPECS, ENABLE_ML_CLASSIFIERS, EXPLICIT_CLASSIFICATION,\n      DEFAULT_OUTCOME_CLASSIFICATION, STATISTICAL_CLASSIFICATION,\n      TRAINING_DATA_CLASSIFICATION) {\n    /**\n     * Finds the first answer group with a rule that returns true.\n     *\n     * @param {*} answer - The answer that the user has submitted.\n     * @param {array} answerGroups - The answer groups of the interaction. Each\n     *     answer group contains rule_specs, which is a list of rules.\n     * @param {object} defaultOutcome - The default outcome of the interaction.\n     * @param {function} interactionRulesService The service which contains the\n     *     explicit rules of that interaction.\n     *\n     * @return {object} An AnswerClassificationResult domain object.\n     */\n    var classifyAnswer = function(\n        answer, answerGroups, defaultOutcome, interactionRulesService) {\n      // Find the first group that contains a rule which returns true\n      // TODO(bhenning): Implement training data classification.\n      for (var i = 0; i < answerGroups.length; i++) {\n        for (var j = 0; j < answerGroups[i].rules.length; j++) {\n          var rule = answerGroups[i].rules[j];\n          if (interactionRulesService[rule.type](answer, rule.inputs)) {\n            return AnswerClassificationResultObjectFactory.createNew(\n              answerGroups[i].outcome, i, j, EXPLICIT_CLASSIFICATION);\n          }\n        }\n      }\n\n      // If no rule in any answer group returns true, the default \'group\' is\n      // returned. Throws an error if the default outcome is not defined.\n      if (defaultOutcome) {\n        return AnswerClassificationResultObjectFactory.createNew(\n          defaultOutcome, answerGroups.length, 0, DEFAULT_OUTCOME_CLASSIFICATION\n        );\n      } else {\n        AlertsService.addWarning(\'Something went wrong with the exploration.\');\n      }\n    };\n\n    return {\n      /**\n       * Classifies the answer according to the answer groups. and returns the\n       * corresponding answer classification result.\n       *\n       * @param {string} stateName - The name of the state where the user\n       *   submitted the answer.\n       * @param {object} interactionInOldState - The interaction present in the\n       *   state where the user submitted the answer.\n       * @param {*} answer - The answer that the user has submitted.\n       * @param {function} interactionRulesService - The service which contains\n       *   the explicit rules of that interaction.\n       *\n       * @return {AnswerClassificationResult} The resulting\n       *   AnswerClassificationResult domain object.\n       */\n      getMatchingClassificationResult: function(\n          stateName, interactionInOldState, answer, interactionRulesService) {\n        var answerClassificationResult = null;\n\n        var answerGroups = interactionInOldState.answerGroups;\n        var defaultOutcome = interactionInOldState.defaultOutcome;\n        if (interactionRulesService) {\n          answerClassificationResult = classifyAnswer(\n            answer, answerGroups, defaultOutcome, interactionRulesService);\n        } else {\n          AlertsService.addWarning(\n            \'Something went wrong with the exploration: no \' +\n            \'interactionRulesService was available.\');\n          throw Error(\n            \'No interactionRulesService was available to classify the answer.\');\n        }\n\n        var ruleBasedOutcomeIsDefault = (\n          answerClassificationResult.outcome === defaultOutcome);\n        var interactionIsTrainable = INTERACTION_SPECS[\n          interactionInOldState.id].is_trainable;\n\n        if (ruleBasedOutcomeIsDefault && interactionIsTrainable) {\n          for (var i = 0; i < answerGroups.length; i++) {\n            if (answerGroups[i].trainingData) {\n              for (var j = 0; j < answerGroups[i].trainingData.length; j++) {\n                if (angular.equals(answer, answerGroups[i].trainingData[j])) {\n                  return AnswerClassificationResultObjectFactory.createNew(\n                    answerGroups[i].outcome, i, null,\n                    TRAINING_DATA_CLASSIFICATION);\n                }\n              }\n            }\n          }\n          if (ENABLE_ML_CLASSIFIERS) {\n            var classifier = StateClassifierMappingService.getClassifier(\n              stateName);\n            if (classifier && classifier.classifierData && (\n              classifier.algorithmId && classifier.dataSchemaVersion)) {\n              var predictionService = (\n                PredictionAlgorithmRegistryService.getPredictionService(\n                  classifier.algorithmId, classifier.dataSchemaVersion));\n              // If prediction service exists, we run classifier. We return the\n              // default outcome otherwise.\n              if (predictionService) {\n                var predictedAnswerGroupIndex = predictionService.predict(\n                  classifier.classifierData, answer);\n                answerClassificationResult = (\n                  AnswerClassificationResultObjectFactory.createNew(\n                    answerGroups[predictedAnswerGroupIndex].outcome,\n                    predictedAnswerGroupIndex, null,\n                    STATISTICAL_CLASSIFICATION));\n              }\n            }\n          }\n        }\n\n        return answerClassificationResult;\n      },\n      isClassifiedExplicitlyOrGoesToNewState: function(\n          stateName, state, answer, interactionRulesService) {\n        var result = this.getMatchingClassificationResult(\n          stateName, state.interaction, answer, interactionRulesService);\n        return (\n          result.outcome.dest !== state.name ||\n          result.classificationCategorization !==\n            DEFAULT_OUTCOME_CLASSIFICATION);\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
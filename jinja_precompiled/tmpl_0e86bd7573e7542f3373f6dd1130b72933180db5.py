from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/CollectionValidationServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for CollectionValidationService.\n */\n\ndescribe(\'Collection validation service\', function() {\n  var CollectionValidationService = null;\n  var CollectionObjectFactory = null;\n  var CollectionNodeObjectFactory = null;\n\n  var EXISTS = true;\n  var DOES_NOT_EXIST = false;\n  var PUBLIC_STATUS = true;\n  var PRIVATE_STATUS = false;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    CollectionValidationService = $injector.get(\'CollectionValidationService\');\n    CollectionObjectFactory = $injector.get(\'CollectionObjectFactory\');\n    CollectionNodeObjectFactory = $injector.get(\'CollectionNodeObjectFactory\');\n\n    var sampleCollectionBackendObject = {\n      id: \'sample_collection_id\',\n      title: \'a title\',\n      objective: \'an objective\',\n      category: \'a category\',\n      version: \'1\',\n      nodes: []\n    };\n    _sampleCollection = CollectionObjectFactory.create(\n      sampleCollectionBackendObject);\n    _addCollectionNode(\'exp_id0\', EXISTS, PRIVATE_STATUS);\n  }));\n\n  var _addCollectionNode = function(explorationId, exists, isPublic) {\n    var collectionNode = CollectionNodeObjectFactory.createFromExplorationId(\n      explorationId);\n    if (exists) {\n      collectionNode.setExplorationSummaryObject({\n        status: isPublic ? \'public\' : \'private\'\n      });\n    }\n    return _sampleCollection.addCollectionNode(collectionNode);\n  };\n\n  var _getCollectionNode = function(explorationId) {\n    return _sampleCollection.getCollectionNodeByExplorationId(explorationId);\n  };\n\n  var _findPrivateValidationIssues = function() {\n    return CollectionValidationService.findValidationIssuesForPrivateCollection(\n      _sampleCollection);\n  };\n\n  var _findPublicValidationIssues = function() {\n    return CollectionValidationService.findValidationIssuesForPublicCollection(\n      _sampleCollection);\n  };\n\n  it(\'should not find issues with a collection with one node\', function() {\n    var issues = _findPrivateValidationIssues();\n    expect(issues).toEqual([]);\n  });\n\n  it(\'should expect at least one collection node\', function() {\n    expect(_sampleCollection.deleteCollectionNode(\'exp_id0\')).toBe(true);\n    expect(_sampleCollection.getCollectionNodeCount()).toEqual(0);\n\n    var issues = _findPrivateValidationIssues();\n    expect(issues).toEqual([\n      \'There should be at least 1 exploration in the collection.\']);\n  });\n\n  it(\'should detect nonexistent/inaccessible explorations\', function() {\n    expect(_addCollectionNode(\n      \'exp_id1\', DOES_NOT_EXIST, PRIVATE_STATUS)).toBe(true);\n    var node0 = _getCollectionNode(\'exp_id0\');\n    var node1 = _getCollectionNode(\'exp_id1\');\n\n    var issues = _findPrivateValidationIssues();\n    expect(issues).toEqual([\n      \'The following exploration(s) either do not exist, or you do not have \' +\n      \'edit access to add them to this collection: exp_id1\'\n    ]);\n  });\n\n  it(\'should allow private and public explorations in a private collection\',\n    function() {\n      expect(_addCollectionNode(\'exp_id1\', EXISTS, PRIVATE_STATUS)).toBe(true);\n      expect(_addCollectionNode(\'exp_id2\', EXISTS, PUBLIC_STATUS)).toBe(true);\n      var node0 = _getCollectionNode(\'exp_id0\');\n      var node1 = _getCollectionNode(\'exp_id1\');\n      var node2 = _getCollectionNode(\'exp_id2\');\n\n      var issues = _findPrivateValidationIssues();\n      expect(issues).toEqual([]);\n    }\n  );\n\n  it(\'should not allow private explorations in a public collection\',\n    function() {\n      expect(_addCollectionNode(\'exp_id1\', EXISTS, PUBLIC_STATUS)).toBe(true);\n      var node1 = _getCollectionNode(\'exp_id1\');\n      var node0 = _getCollectionNode(\'exp_id0\');\n\n      var issues = _findPublicValidationIssues();\n      expect(issues).toEqual([\n        \'Private explorations cannot be added to a public collection: exp_id0\'\n      ]);\n\n      expect(_sampleCollection.deleteCollectionNode(\'exp_id0\')).toBe(true);\n      issues = _findPublicValidationIssues();\n      expect(issues).toEqual([]);\n    }\n  );\n\n  it(\'should be able to detect multiple validation issues\', function() {\n    expect(_addCollectionNode(\'exp_id1\', EXISTS, PUBLIC_STATUS)).toBe(true);\n    expect(_addCollectionNode(\'exp_id2\', EXISTS, PRIVATE_STATUS)).toBe(true);\n\n    var node0 = _getCollectionNode(\'exp_id0\');\n    var node1 = _getCollectionNode(\'exp_id1\');\n    var node2 = _getCollectionNode(\'exp_id2\');\n\n    var issues = _findPublicValidationIssues();\n    expect(issues).toEqual([\n      \'Private explorations cannot be added to a public collection: \' +\n      \'exp_id0, exp_id2\'\n    ]);\n  });\n\n  it(\'should return false if the tags are not valid\', function() {\n    expect(CollectionValidationService.isTagValid([\'test\'])).toBe(true);\n    expect(CollectionValidationService.isTagValid([\'test\', \'math\'])).toBe(true);\n\n    expect(CollectionValidationService.isTagValid(\n      [\'test\', \'test\'])).toBe(false);\n    expect(CollectionValidationService.isTagValid(\n      [\'test \'])).toBe(false);\n  });\n});'

blocks = {}
debug_info = ''
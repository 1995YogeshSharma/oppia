from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ExplorationDraftObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating instances of ExplorationDraft\n * domain objects.\n */\n\noppia.factory(\'ExplorationDraftObjectFactory\', [\n  function() {\n    var ExplorationDraft = function(draftChanges, draftChangeListId) {\n      this.draftChanges = draftChanges;\n      this.draftChangeListId = draftChangeListId;\n    };\n\n    /**\n     * Checks whether the draft object has been overwritten by another\n     * draft which has been committed to the back-end. If the supplied draft id\n     * has a different value then a newer changeList must have been committed\n     * to the back-end.\n     * @param {Integer} - currentDraftId. The id of the draft changes whch was\n     *  retrieved from the back-end.\n     * @returns {Boolean} - True iff the currentDraftId is the same as the\n     * draftChangeListId corresponding to this draft.\n     */\n    ExplorationDraft.prototype.isValid = function(currentDraftId) {\n      return (currentDraftId === this.draftChangeListId);\n    };\n\n    ExplorationDraft.prototype.getChanges = function() {\n      return this.draftChanges;\n    };\n\n    ExplorationDraft.createFromLocalStorageDict = function(\n        explorationDraftDict) {\n      return new ExplorationDraft(\n        explorationDraftDict.draftChanges,\n        explorationDraftDict.draftChangeListId);\n    };\n\n    ExplorationDraft.toLocalStorageDict = function(\n        changeList, draftChangeListId) {\n      return {\n        draftChanges: changeList,\n        draftChangeListId: draftChangeListId\n      };\n    };\n\n    return ExplorationDraft;\n  }\n]);'

blocks = {}
debug_info = ''
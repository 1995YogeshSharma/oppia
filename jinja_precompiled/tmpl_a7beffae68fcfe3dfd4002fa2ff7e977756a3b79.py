from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/SkillUpdateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n* @fileoverview Service to handle the updating of a skill.\n*/\n\noppia.constant(\'SKILL_PROPERTY_DESCRIPTION\', \'description\');\noppia.constant(\'SKILL_PROPERTY_LANGUAGE_CODE\', \'language_code\');\noppia.constant(\'SKILL_CONTENTS_PROPERTY_EXPLANATION\', \'explanation\');\noppia.constant(\'SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES\', \'worked_examples\');\noppia.constant(\'SKILL_MISCONCEPTIONS_PROPERTY_NAME\', \'name\');\noppia.constant(\'SKILL_MISCONCEPTIONS_PROPERTY_NOTES\', \'notes\');\noppia.constant(\'SKILL_MISCONCEPTIONS_PROPERTY_FEEDBACK\', \'feedback\');\n\noppia.constant(\'CMD_UPDATE_SKILL_PROPERTY\',\n  \'update_skill_property\');\noppia.constant(\'CMD_UPDATE_SKILL_CONTENTS_PROPERTY\',\n  \'update_skill_contents_property\');\noppia.constant(\'CMD_UPDATE_SKILL_MISCONCEPTIONS_PROPERTY\',\n  \'update_skill_misconceptions_property\');\n\noppia.constant(\'CMD_ADD_SKILL_MISCONCEPTION\',\n  \'add_skill_misconception\');\noppia.constant(\'CMD_DELETE_SKILL_MISCONCEPTION\',\n  \'delete_skill_misconception\');\n\noppia.factory(\'SkillUpdateService\', [\n  \'SkillObjectFactory\', \'ChangeObjectFactory\',\n  \'UndoRedoService\', \'SKILL_PROPERTY_DESCRIPTION\',\n  \'SKILL_PROPERTY_LANGUAGE_CODE\', \'SKILL_CONTENTS_PROPERTY_EXPLANATION\',\n  \'SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES\',\n  \'SKILL_MISCONCEPTIONS_PROPERTY_NAME\',\n  \'SKILL_MISCONCEPTIONS_PROPERTY_NOTES\',\n  \'SKILL_MISCONCEPTIONS_PROPERTY_FEEDBACK\',\n  \'CMD_UPDATE_SKILL_PROPERTY\', \'CMD_UPDATE_SKILL_CONTENTS_PROPERTY\',\n  \'CMD_UPDATE_SKILL_MISCONCEPTIONS_PROPERTY\', \'CMD_ADD_SKILL_MISCONCEPTION\',\n  \'CMD_DELETE_SKILL_MISCONCEPTION\',\n  function(\n      SkillObjectFactory, ChangeObjectFactory,\n      UndoRedoService, SKILL_PROPERTY_DESCRIPTION,\n      SKILL_PROPERTY_LANGUAGE_CODE, SKILL_CONTENTS_PROPERTY_EXPLANATION,\n      SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES,\n      SKILL_MISCONCEPTIONS_PROPERTY_NAME,\n      SKILL_MISCONCEPTIONS_PROPERTY_NOTES,\n      SKILL_MISCONCEPTIONS_PROPERTY_FEEDBACK,\n      CMD_UPDATE_SKILL_PROPERTY, CMD_UPDATE_SKILL_CONTENTS_PROPERTY,\n      CMD_UPDATE_SKILL_MISCONCEPTIONS_PROPERTY, CMD_ADD_SKILL_MISCONCEPTION,\n      CMD_DELETE_SKILL_MISCONCEPTION) {\n    var _applyChange = function(skill, command, params, apply, reverse) {\n      var changeDict = angular.copy(params);\n      changeDict.cmd = command;\n      var changeObj = ChangeObjectFactory.create(changeDict, apply, reverse);\n      UndoRedoService.applyChange(changeObj, skill);\n    };\n\n    var _applyPropertyChange = function(\n        skill, propertyName, newValue, oldValue, apply, reverse) {\n      _applyChange(skill, CMD_UPDATE_SKILL_PROPERTY, {\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue),\n      }, apply, reverse);\n    };\n\n    var _applyMisconceptionPropertyChange = function(\n        skill, misconceptionId, propertyName, newValue, oldValue,\n        apply, reverse) {\n      _applyChange(skill, CMD_UPDATE_SKILL_MISCONCEPTIONS_PROPERTY, {\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue),\n        id: misconceptionId,\n      }, apply, reverse);\n    };\n\n    var _applySkillContentsPropertyChange = function(\n        skill, propertyName, newValue, oldValue, apply, reverse) {\n      _applyChange(skill, CMD_UPDATE_SKILL_CONTENTS_PROPERTY, {\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue),\n      }, apply, reverse);\n    };\n\n    var _getParameterFromChangeDict = function(changeDict, paramName) {\n      return changeDict[paramName];\n    };\n\n    var _getNewPropertyValueFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'new_value\');\n    };\n\n    return {\n      setSkillDescription: function(skill, newDescription) {\n        var oldDescription = angular.copy(skill.getDescription());\n        _applyPropertyChange(\n          skill, SKILL_PROPERTY_DESCRIPTION, newDescription, oldDescription,\n          function(changeDict, skill) {\n            var description = _getNewPropertyValueFromChangeDict(changeDict);\n            skill.setDescription(description);\n          }, function(changeDict, skill) {\n            skill.setDescription(oldDescription);\n          });\n      },\n\n      setConceptCardExplanation: function(skill, newExplanation) {\n        var oldExplanation = skill.getConceptCard().getExplanation();\n        _applySkillContentsPropertyChange(\n          skill, SKILL_CONTENTS_PROPERTY_EXPLANATION,\n          newExplanation, oldExplanation,\n          function(changeDict, skill) {\n            var explanation = _getNewPropertyValueFromChangeDict(changeDict);\n            skill.getConceptCard().setExplanation(explanation);\n          }, function(changeDict, skill) {\n            skill.getConceptCard().setExplanation(oldExplanation);\n          });\n      },\n\n      addWorkedExample: function(skill, newWorkedExample) {\n        var oldWorkedExamples = angular.copy(\n          skill.getConceptCard().getWorkedExamples());\n        var newWorkedExamples = angular.copy(oldWorkedExamples);\n        newWorkedExamples.push(newWorkedExample);\n        _applySkillContentsPropertyChange(\n          skill, SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES,\n          newWorkedExamples, oldWorkedExamples,\n          function(changeDict, skill) {\n            skill.getConceptCard().setWorkedExamples(newWorkedExamples);\n          }, function(changeDict, skill) {\n            skill.getConceptCard().setWorkedExamples(oldWorkedExamples);\n          });\n      },\n\n      deleteWorkedExample: function(skill, index) {\n        var oldWorkedExamples = angular.copy(\n          skill.getConceptCard().getWorkedExamples());\n        var newWorkedExamples = angular.copy(oldWorkedExamples);\n        newWorkedExamples.splice(index, 1);\n        _applySkillContentsPropertyChange(\n          skill, SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES,\n          newWorkedExamples, oldWorkedExamples,\n          function(changeDict, skill) {\n            skill.getConceptCard().setWorkedExamples(newWorkedExamples);\n          }, function(changeDict, skill) {\n            skill.getConceptCard().setWorkedExamples(oldWorkedExamples);\n          });\n      },\n\n      updateWorkedExample: function(\n          skill, workedExampleIndex, newWorkedExample) {\n        var oldWorkedExamples = angular.copy(\n          skill.getConceptCard().getWorkedExamples());\n        var newWorkedExamples = angular.copy(oldWorkedExamples);\n        newWorkedExamples[workedExampleIndex] = newWorkedExample;\n        _applySkillContentsPropertyChange(\n          skill, SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES,\n          newWorkedExamples, oldWorkedExamples,\n          function(changeDict, skill) {\n            var newWorkedExamples =\n              _getNewPropertyValueFromChangeDict(changeDict);\n            skill.getConceptCard().setWorkedExamples(newWorkedExamples);\n          }, function(changeDict, skill) {\n            skill.getConceptCard().setWorkedExamples(oldWorkedExamples);\n          });\n      },\n\n      updateWorkedExamples: function(skill, newWorkedExamples) {\n        var oldWorkedExamples = skill.getConceptCard().getWorkedExamples();\n        _applySkillContentsPropertyChange(\n          skill, SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES,\n          newWorkedExamples, oldWorkedExamples,\n          function(changeDict, skill) {\n            var newWorkedExamples =\n              _getNewPropertyValueFromChangeDict(changeDict);\n            skill.getConceptCard().setWorkedExamples(newWorkedExamples);\n          }, function(changeDict, skill) {\n            skill.getConceptCard().setWorkedExamples(oldWorkedExamples);\n          });\n      },\n\n      addMisconception: function(skill, newMisconception) {\n        var params = {\n          new_misconception_dict: newMisconception.toBackendDict()\n        };\n        var misconceptionId = newMisconception.getId();\n        _applyChange(\n          skill, CMD_ADD_SKILL_MISCONCEPTION, params,\n          function(changeDict, skill) {\n            skill.appendMisconception(newMisconception);\n          }, function(changeDict, skill) {\n            skill.deleteMisconception(misconceptionId);\n          });\n      },\n\n      deleteMisconception: function(skill, misconceptionId) {\n        var params = {\n          id: misconceptionId\n        };\n        var oldMisconception = skill.findMisconceptionById(misconceptionId);\n        _applyChange(\n          skill, CMD_DELETE_SKILL_MISCONCEPTION, params,\n          function(changeDict, skill) {\n            skill.deleteMisconception(misconceptionId);\n          }, function(changeDict, skill) {\n            skill.appendMisconception(oldMisconception);\n          });\n      },\n\n      updateMisconceptionName: function(\n          skill, misconceptionId, oldName, newName) {\n        var misconception = skill.findMisconceptionById(misconceptionId);\n        if (misconception) {\n          _applyMisconceptionPropertyChange(\n            skill, misconceptionId, SKILL_MISCONCEPTIONS_PROPERTY_NAME,\n            newName, oldName,\n            function(changeDict, skill) {\n              misconception.setName(newName);\n            }, function(changeDict, skill) {\n              misconception.setName(oldName);\n            });\n        }\n      },\n\n      updateMisconceptionNotes: function(\n          skill, misconceptionId, oldNotes, newNotes) {\n        var misconception = skill.findMisconceptionById(misconceptionId);\n        if (misconception) {\n          _applyMisconceptionPropertyChange(\n            skill, misconceptionId, SKILL_MISCONCEPTIONS_PROPERTY_NOTES,\n            newNotes, oldNotes,\n            function(changeDict, skill) {\n              misconception.setNotes(newNotes);\n            }, function(changeDict, skill) {\n              misconception.setNotes(oldNotes);\n            });\n        }\n      },\n\n      updateMisconceptionFeedback: function(\n          skill, misconceptionId, oldFeedback, newFeedback) {\n        var misconception = skill.findMisconceptionById(misconceptionId);\n        if (misconception) {\n          _applyMisconceptionPropertyChange(\n            skill, misconceptionId, SKILL_MISCONCEPTIONS_PROPERTY_FEEDBACK,\n            newFeedback, oldFeedback,\n            function(changeDict, skill) {\n              misconception.setFeedback(newFeedback);\n            }, function(changeDict, skill) {\n              misconception.setFeedback(oldFeedback);\n            });\n        }\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
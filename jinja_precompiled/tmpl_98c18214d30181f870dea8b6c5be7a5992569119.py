from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/SkillRightsBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to change the rights of skills in the backend.\n */\n\noppia.factory(\'SkillRightsBackendApiService\', [\n  \'$http\', \'$q\', \'SKILL_RIGHTS_URL_TEMPLATE\',\n  \'SKILL_PUBLISH_URL_TEMPLATE\', \'UrlInterpolationService\',\n  function($http, $q, SKILL_RIGHTS_URL_TEMPLATE,\n      SKILL_PUBLISH_URL_TEMPLATE, UrlInterpolationService) {\n    // Maps previously loaded skill rights to their IDs.\n    var skillRightsCache = {};\n\n    var _fetchSkillRights = function(skillId, successCallback,\n        errorCallback) {\n      var skillRightsUrl = UrlInterpolationService.interpolateUrl(\n        SKILL_RIGHTS_URL_TEMPLATE, {\n          skill_id: skillId\n        });\n\n      $http.get(skillRightsUrl).then(function(response) {\n        var responseData = response.data;\n        if (successCallback) {\n          successCallback({\n            skill_id: responseData.skill_id,\n            creator_id: responseData.creator_id,\n            can_edit_skill_description: responseData.can_edit_skill_description,\n            skill_is_private: responseData.skill_is_private\n          });\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _setSkillPublic = function(\n        skillId, skillVersion, successCallback, errorCallback) {\n      var skillRightsPublishUrl = UrlInterpolationService.interpolateUrl(\n        SKILL_PUBLISH_URL_TEMPLATE, {\n          skill_id: skillId\n        });\n\n      var putParams = {\n        version: skillVersion\n      };\n\n      $http.put(skillRightsPublishUrl, putParams).then(function(response) {\n        skillRightsCache[skillId] = response.data;\n        if (successCallback) {\n          successCallback(response.data);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _isCached = function(skillId) {\n      return skillRightsCache.hasOwnProperty(skillId);\n    };\n\n    return {\n      /**\n       * Gets a skill\'s rights, given its ID.\n       */\n      fetchSkillRights: function(skillId) {\n        return $q(function(resolve, reject) {\n          _fetchSkillRights(skillId, resolve, reject);\n        });\n      },\n\n      /**\n       * Behaves exactly as fetchSkillRights (including callback\n       * behavior and returning a promise object), except this function will\n       * attempt to see whether the given skill rights has been\n       * cached. If it has not yet been cached, it will fetch the skill\n       * rights from the backend. If it successfully retrieves the skill\n       * rights from the backend, it will store it in the cache to avoid\n       * requests from the backend in further function calls.\n       */\n      loadSkillRights: function(skillId) {\n        return $q(function(resolve, reject) {\n          if (_isCached(skillId)) {\n            if (resolve) {\n              resolve(skillRightsCache[skillId]);\n            }\n          } else {\n            _fetchSkillRights(skillId, function(skillRights) {\n              skillRightsCache[skillId] = skillRights;\n              if (resolve) {\n                resolve(skillRightsCache[skillId]);\n              }\n            }, reject);\n          }\n        });\n      },\n\n      /**\n       * Returns whether the given skill rights is stored within the\n       * local data cache or if it needs to be retrieved from the backend\n       * upon a laod.\n       */\n      isCached: function(skillId) {\n        return _isCached(skillId);\n      },\n\n      /**\n       * Replaces the current skill rights in the cache given by the\n       * specified skill ID with a new skill rights object.\n       */\n      cacheSkillRights: function(skillId, skillRights) {\n        skillRightsCache[skillId] = angular.copy(skillRights);\n      },\n\n      /**\n       * Updates a skill\'s rights to have public learner access,\n       * given its ID and version.\n       */\n      setSkillPublic: function(skillId, skillVersion) {\n        return $q(function(resolve, reject) {\n          _setSkillPublic(skillId, skillVersion, resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
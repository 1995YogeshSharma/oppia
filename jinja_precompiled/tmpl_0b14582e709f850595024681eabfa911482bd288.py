from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/CollectionObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for CollectionObjectFactory.\n */\n\ndescribe(\'Collection object factory\', function() {\n  var CollectionObjectFactory = null;\n  var CollectionNodeObjectFactory = null;\n  var _sampleCollection = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    CollectionObjectFactory = $injector.get(\'CollectionObjectFactory\');\n    CollectionNodeObjectFactory = $injector.get(\'CollectionNodeObjectFactory\');\n\n\n    var sampleCollectionBackendObject = {\n      id: \'sample_collection_id\',\n      title: \'a title\',\n      objective: \'an objective\',\n      category: \'a category\',\n      version: \'1\',\n      nodes: [],\n    };\n    _sampleCollection = CollectionObjectFactory.create(\n      sampleCollectionBackendObject);\n  }));\n\n  var _addCollectionNode = function(explorationId) {\n    var collectionNodeBackendObject = {\n      exploration_id: explorationId,\n      exploration: {}\n    };\n    return _sampleCollection.addCollectionNode(\n      CollectionNodeObjectFactory.create(collectionNodeBackendObject));\n  };\n\n  var _getCollectionNode = function(explorationId) {\n    return _sampleCollection.getCollectionNodeByExplorationId(explorationId);\n  };\n\n  it(\'should be able to create an empty collection object\', function() {\n    var collection = CollectionObjectFactory.createEmptyCollection();\n    expect(collection.getId()).toBeUndefined();\n    expect(collection.getTitle()).toBeUndefined();\n    expect(collection.getCategory()).toBeUndefined();\n    expect(collection.getObjective()).toBeUndefined();\n    expect(collection.getLanguageCode()).toBeUndefined();\n    expect(collection.getTags()).toBeUndefined();\n    expect(collection.getVersion()).toBeUndefined();\n    expect(collection.getCollectionNodes()).toEqual([]);\n  });\n\n  it(\'should contain a collection node defined in the backend object\',\n    function() {\n      var collectionNodeBackendObject = {\n        exploration_id: \'exp_id0\',\n        exploration: {}\n      };\n      var collection = CollectionObjectFactory.create({\n        id: \'collection_id\',\n        nodes: [collectionNodeBackendObject]\n      });\n      expect(collection.containsCollectionNode(\'exp_id0\')).toBe(true);\n      expect(collection.getCollectionNodes()).toEqual([\n        CollectionNodeObjectFactory.create(collectionNodeBackendObject)\n      ]);\n    }\n  );\n\n  it(\'should contain added explorations and not contain removed ones\',\n    function() {\n      expect(_sampleCollection.containsCollectionNode(\'exp_id0\')).toBe(false);\n      expect(_sampleCollection.getCollectionNodeCount()).toEqual(0);\n\n      var collectionNodeBackendObject = {\n        exploration_id: \'exp_id0\',\n        exploration: {}\n      };\n      var collectionNode = CollectionNodeObjectFactory.create(\n        collectionNodeBackendObject);\n\n      expect(_sampleCollection.addCollectionNode(collectionNode)).toBe(true);\n      expect(_sampleCollection.containsCollectionNode(\'exp_id0\')).toBe(true);\n      expect(_sampleCollection.getCollectionNodes()).toEqual([\n        CollectionNodeObjectFactory.create(collectionNodeBackendObject)\n      ]);\n      expect(_sampleCollection.getCollectionNodeCount()).toEqual(1);\n\n      expect(_sampleCollection.deleteCollectionNode(\'exp_id0\')).toBe(true);\n      expect(_sampleCollection.containsCollectionNode(\'exp_id0\')).toBe(false);\n      expect(_sampleCollection.getCollectionNodeCount()).toEqual(0);\n    }\n  );\n\n  it(\'should not add duplicate explorations\', function() {\n    var collectionNodeBackendObject = {\n      exploration_id: \'exp_id0\',\n      exploration: {}\n    };\n    var collectionNode = CollectionNodeObjectFactory.create(\n      collectionNodeBackendObject);\n\n    expect(_sampleCollection.addCollectionNode(collectionNode)).toBe(true);\n    expect(_sampleCollection.addCollectionNode(collectionNode)).toBe(false);\n  });\n\n  it(\'should fail to delete nonexistent explorations\', function() {\n    expect(_sampleCollection.deleteCollectionNode(\'fake_exp_id\')).toBe(false);\n  });\n\n  it(\'should be able to clear all nodes from a collection\', function() {\n    expect(_sampleCollection.getCollectionNodeCount()).toEqual(0);\n\n    var collectionNodeBackendObject1 = {\n      exploration_id: \'exp_id0\',\n      exploration: {}\n    };\n    var collectionNodeBackendObject2 = {\n      exploration_id: \'exp_id1\',\n      exploration: {}\n    };\n    var collectionNode1 = CollectionNodeObjectFactory.create(\n      collectionNodeBackendObject1);\n    var collectionNode2 = CollectionNodeObjectFactory.create(\n      collectionNodeBackendObject2);\n\n    _sampleCollection.addCollectionNode(collectionNode1);\n    expect(_sampleCollection.getCollectionNodeCount()).toEqual(1);\n    expect(_sampleCollection.containsCollectionNode(\'exp_id0\')).toBe(true);\n\n    _sampleCollection.clearCollectionNodes();\n    expect(_sampleCollection.getCollectionNodeCount()).toEqual(0);\n    expect(_sampleCollection.containsCollectionNode(\'exp_id0\')).toBe(false);\n    expect(_sampleCollection.getCollectionNodes()).toEqual([]);\n\n    _sampleCollection.addCollectionNode(collectionNode2);\n    expect(_sampleCollection.getCollectionNodeCount()).toEqual(1);\n    expect(_sampleCollection.containsCollectionNode(\'exp_id1\')).toBe(true);\n  });\n\n  it(\'should be able to retrieve a mutable collection node by exploration id\',\n    function() {\n      expect(_getCollectionNode(\'exp_id0\')).toBeUndefined();\n      var collectionNodeBackendObject = {\n        exploration_id: \'exp_id0\',\n        exploration: {}\n      };\n      _sampleCollection.addCollectionNode(\n        CollectionNodeObjectFactory.create(collectionNodeBackendObject));\n\n      var collectionNodeBefore = _getCollectionNode(\'exp_id0\');\n      expect(collectionNodeBefore).toEqual(CollectionNodeObjectFactory.create(\n        collectionNodeBackendObject));\n    }\n  );\n\n  it(\'should return a list of collection nodes in the order they were added\',\n    function() {\n      _addCollectionNode(\'c_exp_id0\');\n      _addCollectionNode(\'a_exp_id1\');\n      _addCollectionNode(\'b_exp_id2\');\n\n      var collectionNodes = _sampleCollection.getCollectionNodes();\n      expect(collectionNodes[0].getExplorationId()).toEqual(\'c_exp_id0\');\n      expect(collectionNodes[1].getExplorationId()).toEqual(\'a_exp_id1\');\n      expect(collectionNodes[2].getExplorationId()).toEqual(\'b_exp_id2\');\n\n      _sampleCollection.deleteCollectionNode(\'a_exp_id1\');\n      collectionNodes = _sampleCollection.getCollectionNodes();\n      expect(collectionNodes[0].getExplorationId()).toEqual(\'c_exp_id0\');\n      expect(collectionNodes[1].getExplorationId()).toEqual(\'b_exp_id2\');\n    }\n  );\n\n  it(\'should ignore changes to the list of returned collection nodes\',\n    function() {\n      _addCollectionNode(\'exp_id0\');\n      _addCollectionNode(\'exp_id1\');\n      expect(_sampleCollection.getCollectionNodeCount()).toEqual(2);\n\n      // Ensure the array itself cannot be mutated and then reflected in the\n      // collection object.\n      var collectionNodes = _sampleCollection.getCollectionNodes();\n      collectionNodes.splice(0, 1);\n\n      expect(\n        _sampleCollection.getCollectionNodes()).not.toEqual(collectionNodes);\n      expect(_sampleCollection.getCollectionNodeCount()).toEqual(2);\n\n      // Ensure contained collection nodes can be mutated and reflected in the\n      // collection object.\n      collectionNodes = _sampleCollection.getBindableCollectionNodes();\n      expect(_sampleCollection.getBindableCollectionNodes()).toEqual(\n        collectionNodes);\n      expect(_getCollectionNode(\'exp_id1\')).toEqual(collectionNodes[1]);\n    }\n  );\n\n  it(\'should accept changes to the bindable list of collection nodes\',\n    function() {\n      _addCollectionNode(\'exp_id0\');\n      _addCollectionNode(\'exp_id1\');\n      expect(_sampleCollection.getCollectionNodeCount()).toEqual(2);\n\n      // The array itself can be mutated.\n      var collectionNodes = _sampleCollection.getBindableCollectionNodes();\n      collectionNodes.splice(0, 1);\n      expect(_sampleCollection.getCollectionNodeCount()).toEqual(1);\n\n      // Collection nodes can be mutated and reflected in the collection object.\n      collectionNodes = _sampleCollection.getBindableCollectionNodes();\n      expect(_sampleCollection.getBindableCollectionNodes()).toEqual(\n        collectionNodes);\n      expect(_getCollectionNode(\'exp_id1\')).toEqual(collectionNodes[1]);\n    }\n  );\n\n  it(\'should return a list of referenced exporation IDs\', function() {\n    _addCollectionNode(\'exp_id0\');\n    _addCollectionNode(\'exp_id1\');\n    _addCollectionNode(\'exp_id2\');\n\n    expect(_sampleCollection.getExplorationIds()).toEqual([\n      \'exp_id0\', \'exp_id1\', \'exp_id2\'\n    ]);\n\n    _sampleCollection.deleteCollectionNode(\'exp_id1\');\n\n    expect(_sampleCollection.getExplorationIds()).toEqual([\n      \'exp_id0\', \'exp_id2\'\n    ]);\n  });\n\n  it(\'should be able to copy from another collection\', function() {\n    var secondCollection = CollectionObjectFactory.create({\n      id: \'col_id0\',\n      title: \'Another title\',\n      objective: \'Another objective\',\n      category: \'Another category\',\n      language_code: \'en\',\n      version: \'15\',\n      nodes: [],\n    });\n    secondCollection.addCollectionNode(CollectionNodeObjectFactory.create({\n      exploration_id: \'exp_id5\',\n      exploration: {}\n    }));\n\n    _addCollectionNode(\'exp_id0\');\n    _addCollectionNode(\'exp_id1\');\n\n    expect(_sampleCollection).not.toBe(secondCollection);\n    expect(_sampleCollection).not.toEqual(secondCollection);\n\n    _sampleCollection.copyFromCollection(secondCollection);\n    expect(_sampleCollection).not.toBe(secondCollection);\n    expect(_sampleCollection).toEqual(secondCollection);\n  });\n});'

blocks = {}
debug_info = ''
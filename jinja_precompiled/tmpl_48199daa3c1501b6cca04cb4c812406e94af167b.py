from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/forms/schema_editors/SchemaBasedListEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for a schema-based editor for lists.\n */\n\noppia.directive(\'schemaBasedListEditor\', [\n  \'SchemaDefaultValueService\',\n  \'NestedDirectivesRecursionTimeoutPreventionService\',\n  \'FocusManagerService\', \'SchemaUndefinedLastElementService\',\n  \'IdGenerationService\', \'UrlInterpolationService\',\n  function(\n      SchemaDefaultValueService,\n      NestedDirectivesRecursionTimeoutPreventionService,\n      FocusManagerService, SchemaUndefinedLastElementService,\n      IdGenerationService, UrlInterpolationService) {\n    return {\n      scope: {\n        localValue: \'=\',\n        isDisabled: \'&\',\n        // Read-only property. The schema definition for each item in the list.\n        itemSchema: \'&\',\n        // The length of the list. If not specified, the list is of arbitrary\n        // length.\n        len: \'=\',\n        // UI configuration. May be undefined.\n        uiConfig: \'&\',\n        validators: \'&\',\n        labelForFocusTarget: \'&\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/forms/schema_editors/\' +\n        \'schema_based_list_editor_directive.html\'),\n      restrict: \'E\',\n      compile: NestedDirectivesRecursionTimeoutPreventionService.compile,\n      controller: [\'$scope\', function($scope) {\n        var baseFocusLabel = (\n          $scope.labelForFocusTarget() ||\n          IdGenerationService.generateNewId() + \'-\');\n        $scope.getFocusLabel = function(index) {\n          // Treat the first item in the list as a special case -- if this list\n          // is contained in another list, and the outer list is opened with a\n          // desire to autofocus on the first input field, we can then focus on\n          // the given $scope.labelForFocusTarget().\n          // NOTE: This will cause problems for lists nested within lists, since\n          // sub-element 0 > 1 will have the same label as sub-element 1 > 0.\n          // But we will assume (for now) that nested lists won\'t be used -- if\n          // they are, this will need to be changed.\n          return (\n            index === 0 ? baseFocusLabel : baseFocusLabel + index.toString());\n        };\n\n        $scope.isAddItemButtonPresent = true;\n        $scope.addElementText = \'Add element\';\n        if ($scope.uiConfig() && $scope.uiConfig().add_element_text) {\n          $scope.addElementText = $scope.uiConfig().add_element_text;\n        }\n\n        // Only hide the \'add item\' button in the case of single-line unicode\n        // input.\n        $scope.isOneLineInput = true;\n        if ($scope.itemSchema().type !== \'unicode\' ||\n            $scope.itemSchema().hasOwnProperty(\'choices\')) {\n          $scope.isOneLineInput = false;\n        } else if ($scope.itemSchema().ui_config) {\n          if ($scope.itemSchema().ui_config.coding_mode) {\n            $scope.isOneLineInput = false;\n          } else if (\n            $scope.itemSchema().ui_config.hasOwnProperty(\'rows\') &&\n            $scope.itemSchema().ui_config.rows > 2) {\n            $scope.isOneLineInput = false;\n          }\n        }\n\n        $scope.minListLength = null;\n        $scope.maxListLength = null;\n        $scope.showDuplicatesWarning = false;\n        if ($scope.validators()) {\n          for (var i = 0; i < $scope.validators().length; i++) {\n            if ($scope.validators()[i].id === \'has_length_at_most\') {\n              $scope.maxListLength = $scope.validators()[i].max_value;\n            } else if ($scope.validators()[i].id === \'has_length_at_least\') {\n              $scope.minListLength = $scope.validators()[i].min_value;\n            } else if ($scope.validators()[i].id === \'is_uniquified\') {\n              $scope.showDuplicatesWarning = true;\n            }\n          }\n        }\n\n        while ($scope.localValue.length < $scope.minListLength) {\n          $scope.localValue.push(\n            SchemaDefaultValueService.getDefaultValue($scope.itemSchema()));\n        }\n\n        $scope.hasDuplicates = function() {\n          var valuesSoFar = {};\n          for (var i = 0; i < $scope.localValue.length; i++) {\n            var value = $scope.localValue[i];\n            if (!valuesSoFar.hasOwnProperty(value)) {\n              valuesSoFar[value] = true;\n            } else {\n              return true;\n            }\n          }\n          return false;\n        };\n\n        if ($scope.len === undefined) {\n          $scope.addElement = function() {\n            if ($scope.isOneLineInput) {\n              $scope.hideAddItemButton();\n            }\n\n            $scope.localValue.push(\n              SchemaDefaultValueService.getDefaultValue($scope.itemSchema()));\n            FocusManagerService.setFocus(\n              $scope.getFocusLabel($scope.localValue.length - 1));\n          };\n\n          var _deleteLastElementIfUndefined = function() {\n            var lastValueIndex = $scope.localValue.length - 1;\n            var valueToConsiderUndefined = (\n              SchemaUndefinedLastElementService.getUndefinedValue(\n                $scope.itemSchema()));\n            if ($scope.localValue[lastValueIndex] ===\n                valueToConsiderUndefined) {\n              $scope.deleteElement(lastValueIndex);\n            }\n          };\n\n          var deleteEmptyElements = function() {\n            for (var i = 0; i < $scope.localValue.length - 1; i++) {\n              if ($scope.localValue[i].length === 0) {\n                $scope.deleteElement(i);\n                i--;\n              }\n            }\n          };\n\n          if ($scope.localValue.length === 1) {\n            if ($scope.localValue[0].length === 0) {\n              $scope.isAddItemButtonPresent = false;\n            }\n          }\n\n          $scope.lastElementOnBlur = function() {\n            _deleteLastElementIfUndefined();\n            $scope.showAddItemButton();\n          };\n\n          $scope.showAddItemButton = function() {\n            deleteEmptyElements();\n            $scope.isAddItemButtonPresent = true;\n          };\n\n          $scope.hideAddItemButton = function() {\n            $scope.isAddItemButtonPresent = false;\n          };\n\n          $scope._onChildFormSubmit = function(evt) {\n            if (!$scope.isAddItemButtonPresent) {\n              /**\n               * If form submission happens on last element of the set (i.e the\n               * add item button is absent) then automatically add the element\n               * to the list.\n               */\n              if (($scope.maxListLength === null ||\n                   $scope.localValue.length < $scope.maxListLength) &&\n                  !!$scope.localValue[$scope.localValue.length - 1]) {\n                $scope.addElement();\n              }\n            } else {\n              /**\n               * If form submission happens on existing element remove focus\n               * from it\n               */\n              document.activeElement.blur();\n            }\n            evt.stopPropagation();\n          };\n\n          $scope.$on(\'submittedSchemaBasedIntForm\', $scope._onChildFormSubmit);\n          $scope.$on(\n            \'submittedSchemaBasedFloatForm\', $scope._onChildFormSubmit);\n          $scope.$on(\n            \'submittedSchemaBasedUnicodeForm\', $scope._onChildFormSubmit);\n\n          $scope.deleteElement = function(index) {\n            // Need to let the RTE know that HtmlContent has been changed.\n            $scope.$broadcast(\'externalHtmlContentChange\');\n            $scope.localValue.splice(index, 1);\n          };\n        } else {\n          if ($scope.len <= 0) {\n            throw \'Invalid length for list editor: \' + $scope.len;\n          }\n          if ($scope.len !== $scope.localValue.length) {\n            throw \'List editor length does not match length of input value: \' +\n              $scope.len + \' \' + $scope.localValue;\n          }\n        }\n      }]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
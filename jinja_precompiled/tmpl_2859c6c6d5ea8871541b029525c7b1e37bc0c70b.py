from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/EditableTopicBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to send changes to a topic to the backend.\n */\noppia.constant(\n  \'TOPIC_EDITOR_STORY_URL_TEMPLATE\', \'/topic_editor_story_handler/<topic_id>\');\n\noppia.constant(\n  \'TOPIC_EDITOR_QUESTION_URL_TEMPLATE\',\n  \'/topic_editor_question_handler/<topic_id>\');\n\noppia.factory(\'EditableTopicBackendApiService\', [\n  \'$http\', \'$q\', \'EDITABLE_TOPIC_DATA_URL_TEMPLATE\',\n  \'SUBTOPIC_PAGE_EDITOR_DATA_URL_TEMPLATE\', \'UrlInterpolationService\',\n  \'TOPIC_EDITOR_STORY_URL_TEMPLATE\', \'TOPIC_EDITOR_QUESTION_URL_TEMPLATE\',\n  function($http, $q, EDITABLE_TOPIC_DATA_URL_TEMPLATE,\n      SUBTOPIC_PAGE_EDITOR_DATA_URL_TEMPLATE, UrlInterpolationService,\n      TOPIC_EDITOR_STORY_URL_TEMPLATE, TOPIC_EDITOR_QUESTION_URL_TEMPLATE) {\n    var _fetchTopic = function(\n        topicId, successCallback, errorCallback) {\n      var topicDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_TOPIC_DATA_URL_TEMPLATE, {\n          topic_id: topicId\n        });\n\n      $http.get(topicDataUrl).then(function(response) {\n        if (successCallback) {\n          // The response is passed as a dict with 2 fields and not as 2\n          // parameters, because the successCallback is called as the resolve\n          // callback function in $q in fetchTopic(), and according to its\n          // documentation (https://docs.angularjs.org/api/ng/service/$q),\n          // resolve or reject can have only a single parameter.\n          successCallback({\n            topicDict: angular.copy(response.data.topic_dict),\n            skillIdToDescriptionDict: angular.copy(\n              response.data.skill_id_to_description_dict)\n          });\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _fetchStories = function(\n        topicId, successCallback, errorCallback) {\n      var storiesDataUrl = UrlInterpolationService.interpolateUrl(\n        TOPIC_EDITOR_STORY_URL_TEMPLATE, {\n          topic_id: topicId\n        });\n\n      $http.get(storiesDataUrl).then(function(response) {\n        var canonicalStorySummaries = angular.copy(\n          response.data.canonical_story_summary_dicts);\n        if (successCallback) {\n          successCallback(canonicalStorySummaries);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _fetchQuestions = function(\n        topicId, successCallback, errorCallback) {\n      var questionsDataUrl = UrlInterpolationService.interpolateUrl(\n        TOPIC_EDITOR_QUESTION_URL_TEMPLATE, {\n          topic_id: topicId\n        });\n\n      $http.get(questionsDataUrl).then(function(response) {\n        var questionSummaries = angular.copy(\n          response.data.question_summary_dicts);\n        if (successCallback) {\n          successCallback(questionSummaries);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _fetchSubtopicPage = function(\n        topicId, subtopicId, successCallback, errorCallback) {\n      var subtopicPageDataUrl = UrlInterpolationService.interpolateUrl(\n        SUBTOPIC_PAGE_EDITOR_DATA_URL_TEMPLATE, {\n          topic_id: topicId,\n          subtopic_id: subtopicId.toString()\n        });\n\n      $http.get(subtopicPageDataUrl).then(function(response) {\n        var topic = angular.copy(response.data.subtopic_page);\n        if (successCallback) {\n          successCallback(topic);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _deleteTopic = function(\n        topicId, successCallback, errorCallback) {\n      var topicDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_TOPIC_DATA_URL_TEMPLATE, {\n          topic_id: topicId\n        });\n      $http[\'delete\'](topicDataUrl).then(function(response) {\n        if (successCallback) {\n          successCallback(response.status);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _updateTopic = function(\n        topicId, topicVersion, commitMessage, changeList,\n        successCallback, errorCallback) {\n      var editableTopicDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_TOPIC_DATA_URL_TEMPLATE, {\n          topic_id: topicId\n        });\n\n      var putData = {\n        version: topicVersion,\n        commit_message: commitMessage,\n        topic_and_subtopic_page_change_dicts: changeList\n      };\n      $http.put(editableTopicDataUrl, putData).then(function(response) {\n        if (successCallback) {\n          // Here also, a dict with 2 fields are passed instead of just 2\n          // parameters, due to the same reason as written for _fetchTopic().\n          successCallback({\n            topicDict: angular.copy(response.data.topic_dict),\n            skillIdToDescriptionDict: angular.copy(\n              response.data.skill_id_to_description_dict)\n          });\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    return {\n      fetchTopic: function(topicId) {\n        return $q(function(resolve, reject) {\n          _fetchTopic(topicId, resolve, reject);\n        });\n      },\n\n      fetchStories: function(topicId) {\n        return $q(function(resolve, reject) {\n          _fetchStories(topicId, resolve, reject);\n        });\n      },\n\n      fetchQuestions: function(topicId) {\n        return $q(function(resolve, reject) {\n          _fetchQuestions(topicId, resolve, reject);\n        });\n      },\n\n      fetchSubtopicPage: function(topicId, subtopicId) {\n        return $q(function(resolve, reject) {\n          _fetchSubtopicPage(topicId, subtopicId, resolve, reject);\n        });\n      },\n\n      /**\n       * Updates a topic in the backend with the provided topic ID.\n       * The changes only apply to the topic of the given version and the\n       * request to update the topic will fail if the provided topic\n       * version is older than the current version stored in the backend. Both\n       * the changes and the message to associate with those changes are used\n       * to commit a change to the topic. The new topic is passed to\n       * the success callback, if one is provided to the returned promise\n       * object. Errors are passed to the error callback, if one is provided.\n       */\n      updateTopic: function(\n          topicId, topicVersion, commitMessage, changeList) {\n        return $q(function(resolve, reject) {\n          _updateTopic(\n            topicId, topicVersion, commitMessage, changeList,\n            resolve, reject);\n        });\n      },\n\n      deleteTopic: function(topicId) {\n        return $q(function(resolve, reject) {\n          _deleteTopic(topicId, resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
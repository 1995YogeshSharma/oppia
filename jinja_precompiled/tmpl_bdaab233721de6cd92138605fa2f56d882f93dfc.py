from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/StateEditor.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the graphical state editor.\n */\n\noppia.controller(\'StateEditor\', [\n  \'$scope\', \'$rootScope\', \'EditorStateService\', \'ExplorationStatesService\',\n  \'INTERACTION_SPECS\', \'ExplorationAdvancedFeaturesService\',\n  \'UrlInterpolationService\', \'stateContentService\',\n  function(\n      $scope, $rootScope, EditorStateService, ExplorationStatesService,\n      INTERACTION_SPECS, ExplorationAdvancedFeaturesService,\n      UrlInterpolationService, stateContentService) {\n    $scope.areParametersEnabled = (\n      ExplorationAdvancedFeaturesService.areParametersEnabled);\n\n    $scope.currentStateIsTerminal = false;\n    $scope.interactionIdIsSet = false;\n    $scope.interactionIsShown = false;\n\n    $scope.oppiaBlackImgUrl = UrlInterpolationService.getStaticImageUrl(\n      \'/avatar/oppia_avatar_100px.svg\');\n\n    $scope.$on(\'refreshStateEditor\', function() {\n      $scope.initStateEditor();\n    });\n\n    $scope.$on(\'onInteractionIdChanged\', function(evt, newInteractionId) {\n      $scope.interactionIdIsSet = Boolean(newInteractionId);\n      $scope.currentInteractionCanHaveSolution = Boolean(\n        $scope.interactionIdIsSet &&\n        INTERACTION_SPECS[newInteractionId].can_have_solution);\n      $scope.currentStateIsTerminal = Boolean(\n        $scope.interactionIdIsSet && INTERACTION_SPECS[\n          newInteractionId].is_terminal);\n    });\n\n    $scope.initStateEditor = function() {\n      var stateName = EditorStateService.getActiveStateName();\n      var stateData = ExplorationStatesService.getState(stateName);\n      if (stateName && stateData) {\n        stateContentService.init(\n          EditorStateService.getActiveStateName(), stateData.content);\n\n        $rootScope.$broadcast(\'stateEditorInitialized\', stateData);\n        var interactionId = ExplorationStatesService.getInteractionIdMemento(\n          stateName);\n        $scope.interactionIdIsSet = Boolean(interactionId);\n        $scope.currentInteractionCanHaveSolution = Boolean(\n          $scope.interactionIdIsSet &&\n          INTERACTION_SPECS[interactionId].can_have_solution);\n        $scope.currentStateIsTerminal = Boolean(\n          $scope.interactionIdIsSet &&\n          INTERACTION_SPECS[interactionId].is_terminal);\n\n        var content = ExplorationStatesService.getStateContentMemento(\n          stateName);\n        if (content.getHtml() || stateData.interaction.id) {\n          $scope.interactionIsShown = true;\n        }\n\n        $rootScope.loadingMessage = \'\';\n      }\n    };\n\n    $scope.showInteraction = function() {\n      // Show the interaction when the text content is saved, even if no\n      // content is entered.\n      $scope.interactionIsShown = true;\n    };\n  }\n]);\n\noppia.directive(\'trainingPanel\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        answer: \'=\',\n        answerFeedback: \'=\',\n        answerOutcomeDest: \'=\',\n        // The classification input is an object with two keys:\n        //   -answerGroupIndex: This refers to which answer group the answer\n        //      being trained has been classified to (for displaying feedback\n        //      to the creator). If answerGroupIndex is equal to the number of\n        //      answer groups, then it represents the default outcome feedback.\n        //      This index is changed by the panel when the creator specifies\n        //      which feedback should be associated with the answer.\n        //   -newOutcome: This refers to an outcome structure (containing a\n        //      list of feedback and a destination state name) which is\n        //      non-null if, and only if, the creator has specified that a new\n        //      response should be created for the trained answer.\n        classification: \'=\',\n        onFinishTraining: \'&\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/editor_tab/\' +\n        \'training_answer_modal_directive.html\'),\n      controller: [\n        \'$scope\', \'ExplorationHtmlFormatterService\',\n        \'EditorStateService\', \'ExplorationStatesService\',\n        \'TrainingDataService\', \'ResponsesService\', \'stateInteractionIdService\',\n        \'stateCustomizationArgsService\', \'AnswerGroupObjectFactory\',\n        \'OutcomeObjectFactory\',\n        function($scope, ExplorationHtmlFormatterService,\n            EditorStateService, ExplorationStatesService,\n            TrainingDataService, ResponsesService, stateInteractionIdService,\n            stateCustomizationArgsService, AnswerGroupObjectFactory,\n            OutcomeObjectFactory) {\n          $scope.changingAnswerGroupIndex = false;\n          $scope.addingNewResponse = false;\n\n          var _stateName = EditorStateService.getActiveStateName();\n          var _state = ExplorationStatesService.getState(_stateName);\n          $scope.allOutcomes = TrainingDataService.getAllPotentialOutcomes(\n            _state);\n\n          var _updateAnswerTemplate = function() {\n            $scope.answerTemplate = (\n              ExplorationHtmlFormatterService.getAnswerHtml(\n                $scope.answer, stateInteractionIdService.savedMemento,\n                stateCustomizationArgsService.savedMemento));\n          };\n\n          $scope.$watch(\'answer\', _updateAnswerTemplate);\n          _updateAnswerTemplate();\n\n          $scope.getCurrentStateName = function() {\n            return EditorStateService.getActiveStateName();\n          };\n\n          $scope.beginChangingAnswerGroupIndex = function() {\n            $scope.changingAnswerGroupIndex = true;\n          };\n\n          $scope.beginAddingNewResponse = function() {\n            $scope.classification.newOutcome = OutcomeObjectFactory.createNew(\n              EditorStateService.getActiveStateName(), \'\', []);\n            $scope.addingNewResponse = true;\n          };\n\n          $scope.confirmAnswerGroupIndex = function(index) {\n            $scope.classification.answerGroupIndex = index;\n\n            if (index === ResponsesService.getAnswerGroupCount()) {\n              TrainingDataService.trainDefaultResponse($scope.answer);\n            } else {\n              TrainingDataService.trainAnswerGroup(index, $scope.answer);\n            }\n\n            $scope.onFinishTraining();\n          };\n          $scope.confirmNewFeedback = function() {\n            if ($scope.classification.newOutcome) {\n              // Create a new answer group with the given feedback.\n              var answerGroups = ResponsesService.getAnswerGroups();\n              answerGroups.push(AnswerGroupObjectFactory.createNew(\n                [], angular.copy($scope.classification.newOutcome), []));\n              ResponsesService.save(\n                answerGroups, ResponsesService.getDefaultOutcome());\n\n              // Train the group with the answer.\n              var index = ResponsesService.getAnswerGroupCount() - 1;\n              TrainingDataService.trainAnswerGroup(index, $scope.answer);\n            }\n\n            $scope.onFinishTraining();\n          };\n        }\n      ]\n    };\n  }]\n);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/DateTimeFormatService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n* @fileoverview Service for converting dates in milliseconds\n* since the Epoch to human-readable dates.\n*/\n\noppia.factory(\'DateTimeFormatService\', [\'$filter\', function($filter) {\n  return {\n    // Returns just the time if the local datetime representation has the\n    // same date as the current date. Otherwise, returns just the date if the\n    // local datetime representation has the same year as the current date.\n    // Otherwise, returns the full date (with the year abbreviated).\n    getLocaleAbbreviatedDatetimeString: function(millisSinceEpoch) {\n      var date = new Date(millisSinceEpoch);\n      if (date.toLocaleDateString() === new Date().toLocaleDateString()) {\n        return date.toLocaleTimeString([], {\n          hour: \'numeric\',\n          minute: \'numeric\',\n          hour12: true\n        });\n      } else if (date.getFullYear() === new Date().getFullYear()) {\n        return $filter(\'date\')(date, \'MMM d\');\n      } else {\n        return $filter(\'date\')(date, \'shortDate\');\n      }\n    },\n    // Returns just the date.\n    getLocaleDateString: function(millisSinceEpoch) {\n      var date = new Date(millisSinceEpoch);\n      return date.toLocaleDateString();\n    },\n    // Returns whether the date is at most one week before the current date.\n    isRecent: function(millisSinceEpoch) {\n      var ONE_WEEK_IN_MILLIS = 7 * 24 * 60 * 60 * 1000;\n      return new Date().getTime() - millisSinceEpoch < ONE_WEEK_IN_MILLIS;\n    }\n  };\n}]);'

blocks = {}
debug_info = ''
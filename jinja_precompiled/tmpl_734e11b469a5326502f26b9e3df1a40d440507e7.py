from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/collection_editor/CollectionEditorStateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to maintain the state of a single collection shared\n * throughout the collection editor. This service provides functionality for\n * retrieving the collection, saving it, and listening for changes.\n */\n\noppia.constant(\'EVENT_COLLECTION_INITIALIZED\', \'collectionInitialized\');\noppia.constant(\'EVENT_COLLECTION_REINITIALIZED\', \'collectionReinitialized\');\n\noppia.factory(\'CollectionEditorStateService\', [\n  \'$rootScope\', \'AlertsService\', \'CollectionObjectFactory\',\n  \'CollectionRightsBackendApiService\', \'CollectionRightsObjectFactory\',\n  \'UndoRedoService\', \'EditableCollectionBackendApiService\',\n  \'EVENT_COLLECTION_INITIALIZED\', \'EVENT_COLLECTION_REINITIALIZED\',\n  function(\n      $rootScope, AlertsService, CollectionObjectFactory,\n      CollectionRightsBackendApiService, CollectionRightsObjectFactory,\n      UndoRedoService, EditableCollectionBackendApiService,\n      EVENT_COLLECTION_INITIALIZED, EVENT_COLLECTION_REINITIALIZED) {\n    var _collection = CollectionObjectFactory.createEmptyCollection();\n    var _collectionRights = (\n      CollectionRightsObjectFactory.createEmptyCollectionRights());\n    var _collectionIsInitialized = false;\n    var _collectionIsLoading = false;\n    var _collectionIsBeingSaved = false;\n\n    var _setCollection = function(collection) {\n      _collection.copyFromCollection(collection);\n      if (_collectionIsInitialized) {\n        $rootScope.$broadcast(EVENT_COLLECTION_REINITIALIZED);\n      } else {\n        $rootScope.$broadcast(EVENT_COLLECTION_INITIALIZED);\n        _collectionIsInitialized = true;\n      }\n    };\n    var _updateCollection = function(newBackendCollectionObject) {\n      _setCollection(CollectionObjectFactory.create(\n        newBackendCollectionObject));\n    };\n    var _setCollectionRights = function(collectionRights) {\n      _collectionRights.copyFromCollectionRights(collectionRights);\n    };\n    var _updateCollectionRights = function(newBackendCollectionRightsObject) {\n      _setCollectionRights(CollectionRightsObjectFactory.create(\n        newBackendCollectionRightsObject));\n    };\n\n    return {\n      /**\n       * Loads, or reloads, the collection stored by this service given a\n       * specified collection ID. See setCollection() for more information on\n       * additional behavior of this function.\n       */\n      loadCollection: function(collectionId) {\n        _collectionIsLoading = true;\n        EditableCollectionBackendApiService.fetchCollection(\n          collectionId).then(\n          function(newBackendCollectionObject) {\n            _updateCollection(newBackendCollectionObject);\n          },\n          function(error) {\n            AlertsService.addWarning(\n              error || \'There was an error when loading the collection.\');\n            _collectionIsLoading = false;\n          });\n        CollectionRightsBackendApiService.fetchCollectionRights(\n          collectionId).then(function(newBackendCollectionRightsObject) {\n          _updateCollectionRights(newBackendCollectionRightsObject);\n          _collectionIsLoading = false;\n        }, function(error) {\n          AlertsService.addWarning(\n            error ||\n            \'There was an error when loading the collection rights.\');\n          _collectionIsLoading = false;\n        });\n      },\n\n      /**\n       * Returns whether this service is currently attempting to load the\n       * collection maintained by this service.\n       */\n      isLoadingCollection: function() {\n        return _collectionIsLoading;\n      },\n\n      /**\n       * Returns whether a collection has yet been loaded using either\n       * loadCollection() or setCollection().\n       */\n      hasLoadedCollection: function() {\n        return _collectionIsInitialized;\n      },\n\n      /**\n       * Returns the current collection to be shared among the collection\n       * editor. Please note any changes to this collection will be propogated\n       * to all bindings to it. This collection object will be retained for the\n       * lifetime of the editor. This function never returns null, though it may\n       * return an empty collection object if the collection has not yet been\n       * loaded for this editor instance.\n       */\n      getCollection: function() {\n        return _collection;\n      },\n\n      /**\n       * Returns the current collection rights to be shared among the collection\n       * editor. Please note any changes to this collection rights will be\n       * propogated to all bindings to it. This collection rights object will\n       * be retained for the lifetime of the editor. This function never returns\n       * null, though it may return an empty collection rights object if the\n       * collection rights has not yet been loaded for this editor instance.\n       */\n      getCollectionRights: function() {\n        return _collectionRights;\n      },\n\n      /**\n       * Sets the collection stored within this service, propogating changes to\n       * all bindings to the collection returned by getCollection(). The first\n       * time this is called it will fire a global event based on the\n       * EVENT_COLLECTION_INITIALIZED constant. All subsequent\n       * calls will similarly fire a EVENT_COLLECTION_REINITIALIZED event.\n       */\n      setCollection: function(collection) {\n        _setCollection(collection);\n      },\n\n      /**\n       * Sets the collection rights stored within this service, propogating\n       * changes to all bindings to the collection returned by\n       * getCollectionRights(). The first time this is called it will fire a\n       * global event based on the EVENT_COLLECTION_INITIALIZED constant. All\n       * subsequent calls will similarly fire a EVENT_COLLECTION_REINITIALIZED\n       * event.\n       */\n      setCollectionRights: function(collectionRights) {\n        _setCollectionRights(collectionRights);\n      },\n\n      /**\n       * Attempts to save the current collection given a commit message. This\n       * function cannot be called until after a collection has been initialized\n       * in this service. Returns false if a save is not performed due to no\n       * changes pending, or true if otherwise. This function, upon success,\n       * will clear the UndoRedoService of pending changes. This function also\n       * shares behavior with setCollection(), when it succeeds.\n       */\n      saveCollection: function(commitMessage, successCallback) {\n        if (!_collectionIsInitialized) {\n          AlertsService.fatalWarning(\n            \'Cannot save a collection before one is loaded.\');\n        }\n\n        // Don\'t attempt to save the collection if there are no changes pending.\n        if (!UndoRedoService.hasChanges()) {\n          return false;\n        }\n        _collectionIsBeingSaved = true;\n        EditableCollectionBackendApiService.updateCollection(\n          _collection.getId(), _collection.getVersion(),\n          commitMessage, UndoRedoService.getCommittableChangeList()).then(\n          function(collectionBackendObject) {\n            _updateCollection(collectionBackendObject);\n            UndoRedoService.clearChanges();\n            _collectionIsBeingSaved = false;\n            if (successCallback) {\n              successCallback();\n            }\n          }, function(error) {\n            AlertsService.addWarning(\n              error || \'There was an error when saving the collection.\');\n            _collectionIsBeingSaved = false;\n          });\n        return true;\n      },\n\n      /**\n       * Returns whether this service is currently attempting to save the\n       * collection maintained by this service.\n       */\n      isSavingCollection: function() {\n        return _collectionIsBeingSaved;\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
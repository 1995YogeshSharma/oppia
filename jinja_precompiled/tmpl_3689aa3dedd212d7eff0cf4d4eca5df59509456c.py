from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/StateRulesStatsServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for state rules stats service.\n */\n\ndescribe(\'State Rules Stats Service\', function() {\n  var StateRulesStatsService = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(inject(function($injector) {\n    StateRulesStatsService = $injector.get(\'StateRulesStatsService\');\n  }));\n\n  it(\n    \'should claim text-input interaction states support issues overview\',\n    function() {\n      // Only including properties required to identify supported states.\n      var TEXT_INPUT_STATE = {interaction: {id: \'TextInput\'}};\n\n      expect(\n        StateRulesStatsService.stateSupportsIssuesOverview(TEXT_INPUT_STATE)\n      ).toBe(true);\n    });\n\n  describe(\'Stats Computation\', function() {\n    var $httpBackend = null;\n    beforeEach(inject(function($injector) {\n      $httpBackend = $injector.get(\'$httpBackend\');\n    }));\n    afterEach(function() {\n      $httpBackend.verifyNoOutstandingExpectation();\n      $httpBackend.verifyNoOutstandingRequest();\n    });\n\n    var EXPLORATION_ID = \'7\';\n    beforeEach(inject(function(ContextService) {\n      spyOn(\n        ContextService, \'getExplorationId\'\n      ).and.returnValue(EXPLORATION_ID);\n    }));\n\n    it(\'should respond with answer frequencies\', function() {\n      // Only including properties required for stat computation.\n      var HOLA_STATE = {name: \'Hola\', interaction: {id: \'TextInput\'}};\n      // Only including properties required for stat computation.\n      var HOLA_STATE_RULES_STATS_RESPONSE = {\n        visualizations_info: [{\n          data: [\n            {answer: \'Ni Hao\', frequency: 5},\n            {answer: \'Aloha\', frequency: 3},\n            {answer: \'Hola\', frequency: 1}\n          ]\n        }]\n      };\n      var successHandler = jasmine.createSpy(\'success\');\n      var failureHandler = jasmine.createSpy(\'failure\');\n      $httpBackend.expectGET(\'/createhandler/state_rules_stats/7/Hola\').respond(\n        HOLA_STATE_RULES_STATS_RESPONSE\n      );\n\n      StateRulesStatsService.computeStateRulesStats(\n        HOLA_STATE\n      ).then(successHandler, failureHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(\n        jasmine.objectContaining({\n          visualizations_info: [jasmine.objectContaining({\n            data: [\n              {answer: \'Ni Hao\', frequency: 5},\n              {answer: \'Aloha\', frequency: 3},\n              {answer: \'Hola\', frequency: 1}\n            ]\n          })]\n        })\n      );\n      expect(failureHandler).not.toHaveBeenCalled();\n    });\n\n    it(\'should handle addressed info for TextInput\', function() {\n      // Only including properties required for stat computation.\n      var HOLA_STATE = {\n        name: \'Hola\',\n        interaction: {\n          answerGroups: [{\n            rules: [{type: \'Equals\', inputs: {x: \'hola!\'}}],\n            outcome: {dest: \'Me Llamo\'}\n          }, {\n            rules: [{type: \'Contains\', inputs: {x: \'hola\'}}],\n            outcome: {dest: \'Me Llamo\'}\n          }, {\n            rules: [{type: \'FuzzyEquals\', inputs: {x: \'hola\'}}],\n            outcome: {dest: \'Hola\'}\n          }],\n          defaultOutcome: {dest: \'Hola\'},\n          id: \'TextInput\'\n        }\n      };\n      // Only including properties required for stat computation.\n      var HOLA_STATE_RULES_STATS_RESPONSE = {\n        visualizations_info: [{\n          data: [{answer: \'Ni Hao\'}, {answer: \'Aloha\'}, {answer: \'Hola\'}],\n          addressed_info_is_supported: true\n        }]\n      };\n      var successHandler = jasmine.createSpy(\'success\');\n      var failureHandler = jasmine.createSpy(\'failure\');\n      $httpBackend.expectGET(\'/createhandler/state_rules_stats/7/Hola\').respond(\n        HOLA_STATE_RULES_STATS_RESPONSE);\n\n      StateRulesStatsService.computeStateRulesStats(HOLA_STATE).then(\n        successHandler, failureHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(\n        jasmine.objectContaining({\n          visualizations_info: [jasmine.objectContaining({\n            data: [\n              jasmine.objectContaining({answer: \'Ni Hao\', is_addressed: false}),\n              jasmine.objectContaining({answer: \'Aloha\', is_addressed: false}),\n              jasmine.objectContaining({answer: \'Hola\', is_addressed: true})\n            ]\n          })]\n        })\n      );\n      expect(failureHandler).not.toHaveBeenCalled();\n    });\n  });\n});'

blocks = {}
debug_info = ''
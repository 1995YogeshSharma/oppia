from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/AlertsServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the Alerts Service.\n */\n\ndescribe(\'Alerts Service\', function() {\n  var AlertsService;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(inject(function($injector) {\n    AlertsService = $injector.get(\'AlertsService\');\n  }));\n\n  describe(\'Warnings\', function() {\n    it(\'should add a warning\', function() {\n      expect(AlertsService.warnings.length).toBe(0);\n      AlertsService.addWarning(\'Warning 1\');\n      expect(AlertsService.warnings.length).toBe(1);\n    });\n\n    it(\'should delete a warning (no duplicates)\', function() {\n      var warning = \'Warning 1\';\n      // Warning message to be deleted\n      AlertsService.addWarning(warning);\n      // Add a few other warning message\n      AlertsService.addWarning(\'Warning 2\');\n      AlertsService.addWarning(\'Warning 3\');\n\n      expect(AlertsService.warnings.length).toBe(3);\n      AlertsService.deleteWarning({\n        type: \'warning\',\n        content: warning\n      });\n      expect(AlertsService.warnings.length).toBe(2);\n\n      // Search for the deleted warning message\n      var found = false;\n      for (var i = 0; i < AlertsService.warnings.length; i++) {\n        if (AlertsService.warnings[i].content === warning) {\n          found = true;\n        }\n      }\n      expect(found).toBe(false);\n      expect(AlertsService.warnings[0].content).toBe(\'Warning 2\');\n      expect(AlertsService.warnings[1].content).toBe(\'Warning 3\');\n    });\n\n    it(\'should delete a warning (with duplicates)\', function() {\n      var warning = \'Warning 1\';\n      // Warning message to be deleted\n      AlertsService.addWarning(warning);\n      // Add a few other warning message\n      AlertsService.addWarning(\'Warning 2\');\n      AlertsService.addWarning(warning);\n      AlertsService.addWarning(\'Warning 3\');\n\n      expect(AlertsService.warnings.length).toBe(4);\n      AlertsService.deleteWarning({\n        type: \'warning\',\n        content: warning\n      });\n      expect(AlertsService.warnings.length).toBe(2);\n\n      // Search for the deleted warning message\n      var found = false;\n      for (var i = 0; i < AlertsService.warnings.length; i++) {\n        if (AlertsService.warnings[i].content === warning) {\n          found = true;\n        }\n      }\n      expect(found).toBe(false);\n      expect(AlertsService.warnings[0].content).toBe(\'Warning 2\');\n      expect(AlertsService.warnings[1].content).toBe(\'Warning 3\');\n    });\n\n    it(\'should not add more than 10 warnings\', function() {\n      var warning = \'Warning \';\n      for (var i = 1; i < 15; i++) {\n        AlertsService.addWarning(warning + i);\n      }\n      expect(AlertsService.warnings.length).toBe(10);\n    });\n\n    it(\'should clear all the warning messages\', function() {\n      AlertsService.addWarning(\'Warning 1\');\n      AlertsService.addWarning(\'Warning 2\');\n      AlertsService.addWarning(\'Warning 3\');\n      AlertsService.clearWarnings();\n      expect(AlertsService.warnings.length).toBe(0);\n    });\n  });\n\n  describe(\'Messages\', function() {\n    it(\'should add an info message\', function() {\n      var message = \'Info 1\';\n      expect(AlertsService.messages.length).toBe(0);\n      AlertsService.addInfoMessage(message);\n      expect(AlertsService.messages.length).toBe(1);\n      expect(AlertsService.messages[0].type).toBe(\'info\');\n      expect(AlertsService.messages[0].content).toBe(message);\n    });\n\n    it(\'should add a success message\', function() {\n      var message = \'Success 1\';\n      expect(AlertsService.messages.length).toBe(0);\n      AlertsService.addSuccessMessage(message);\n      AlertsService.addInfoMessage(\'Info 1\');\n      expect(AlertsService.messages.length).toBe(2);\n      expect(AlertsService.messages[0].type).toBe(\'success\');\n      expect(AlertsService.messages[0].content).toBe(message);\n    });\n\n    it(\'should delete a message (no duplicates)\', function() {\n      var message = \'Info 1\';\n      // Info Message to be deleted\n      AlertsService.addInfoMessage(message);\n      // Add a few other messages\n      AlertsService.addInfoMessage(\'Info 2\');\n      AlertsService.addSuccessMessage(\'Success 1\');\n\n      expect(AlertsService.messages.length).toBe(3);\n      AlertsService.deleteMessage({\n        type: \'info\',\n        content: message\n      });\n      expect(AlertsService.messages.length).toBe(2);\n\n      // Search for the message\n      var found = false;\n      for (var i = 0; i < AlertsService.messages.length; i++) {\n        if (AlertsService.messages[i].content === message &&\n            AlertsService.messages[i].type === \'info\') {\n          found = true;\n        }\n      }\n      expect(found).toBe(false);\n      expect(AlertsService.messages[0].content).toBe(\'Info 2\');\n      expect(AlertsService.messages[1].content).toBe(\'Success 1\');\n    });\n\n    it(\'should delete a message (with duplicates)\', function() {\n      var message = \'Info 1\';\n      // Info Message to be deleted\n      AlertsService.addInfoMessage(message);\n      // Add a few other messages\n      AlertsService.addInfoMessage(\'Info 2\');\n      AlertsService.addSuccessMessage(\'Success 1\');\n      AlertsService.addInfoMessage(message);\n\n      expect(AlertsService.messages.length).toBe(4);\n      AlertsService.deleteMessage({\n        type: \'info\',\n        content: message\n      });\n      expect(AlertsService.messages.length).toBe(2);\n\n      // Search for the message\n      var found = false;\n      for (var i = 0; i < AlertsService.messages.length; i++) {\n        if (AlertsService.messages[i].content === message &&\n            AlertsService.messages[i].type === \'info\') {\n          found = true;\n        }\n      }\n      expect(found).toBe(false);\n      expect(AlertsService.messages[0].content).toBe(\'Info 2\');\n      expect(AlertsService.messages[1].content).toBe(\'Success 1\');\n    });\n\n    it(\'should not add more than 10 messages\', function() {\n      var message = \'Info \';\n      for (var i = 1; i < 15; i++) {\n        AlertsService.addInfoMessage(message + i);\n      }\n      AlertsService.addSuccessMessage(\'Success 1\');\n      expect(AlertsService.messages.length).toBe(10);\n    });\n\n    it(\'should clear all the messages\', function() {\n      AlertsService.addInfoMessage(\'Info 1\');\n      AlertsService.addInfoMessage(\'Info 2\');\n      AlertsService.addSuccessMessage(\'Success 1\');\n      AlertsService.clearMessages();\n      expect(AlertsService.messages.length).toBe(0);\n    });\n  });\n});'

blocks = {}
debug_info = ''
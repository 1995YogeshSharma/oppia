from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/StoryNodeObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for StoryContentsObjectFactory.\n */\n\ndescribe(\'Story node object factory\', function() {\n  var StoryNodeObjectFactory = null;\n  var _sampleSubtopic = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    StoryNodeObjectFactory = $injector.get(\'StoryNodeObjectFactory\');\n\n    var sampleStoryNodeBackendDict = {\n      id: \'node_1\',\n      prerequisite_skill_ids: [\'skill_1\'],\n      acquired_skill_ids: [\'skill_2\'],\n      destination_node_ids: [\'node_2\'],\n      outline: \'Outline\',\n      exploration_id: null,\n      outline_is_finalized: false\n    };\n    _sampleStoryNode = StoryNodeObjectFactory.createFromBackendDict(\n      sampleStoryNodeBackendDict);\n  }));\n\n  it(\'should correctly create a node from node id alone\', function() {\n    var storyNode = StoryNodeObjectFactory.createFromId(\'node_1\');\n    expect(storyNode.getId()).toEqual(\'node_1\');\n    expect(storyNode.getDestinationNodeIds()).toEqual([]);\n    expect(storyNode.getPrerequisiteSkillIds()).toEqual([]);\n    expect(storyNode.getAcquiredSkillIds()).toEqual([]);\n    expect(storyNode.getOutline()).toEqual(\'\');\n    expect(storyNode.getOutlineStatus()).toEqual(false);\n    expect(storyNode.getExplorationId()).toEqual(null);\n  });\n\n  it(\'should correctly validate a valid story node\', function() {\n    expect(_sampleStoryNode.validate()).toEqual([]);\n  });\n\n  it(\'should correctly validate story nodes\', function() {\n    _sampleStoryNode.addPrerequisiteSkillId(\'skill_2\');\n    _sampleStoryNode.addDestinationNodeId(\'node_1\');\n\n    expect(_sampleStoryNode.validate()).toEqual([\n      \'The skill with id skill_2 is common to both the acquired and\' +\n      \' prerequisite skill id list in node with id node_1\',\n      \'The destination node id of node with id node_1 points to itself.\'\n    ]);\n  });\n\n  it(\'should correctly throw error when duplicate values are added to arrays\',\n    function() {\n      expect(function() {\n        _sampleStoryNode.addDestinationNodeId(\'node_2\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryNode.addPrerequisiteSkillId(\'skill_1\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryNode.addAcquiredSkillId(\'skill_2\');\n      }).toThrow();\n    });\n\n  it(\'should correctly throw error when invalid values are deleted from arrays\',\n    function() {\n      expect(function() {\n        _sampleStoryNode.removeDestinationNodeId(\'node_5\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryNode.removePrerequisiteSkillId(\'skill_4\');\n      }).toThrow();\n      expect(function() {\n        _sampleStoryNode.removeAcquiredSkillId(\'skill_4\');\n      }).toThrow();\n    });\n});'

blocks = {}
debug_info = ''
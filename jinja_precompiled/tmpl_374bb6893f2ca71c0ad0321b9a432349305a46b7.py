from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/PlayerTranscriptServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the player transcript service.\n */\n\ndescribe(\'Player transcript service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  var pts;\n  beforeEach(inject(function($injector) {\n    pts = $injector.get(\'PlayerTranscriptService\');\n  }));\n\n  it(\'should reset the transcript correctly\', function() {\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    pts.addNewCard(\'Second state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n\n    expect(pts.getNumCards()).toBe(2);\n\n    pts.init();\n    expect(pts.getNumCards()).toBe(0);\n    pts.addNewCard(\'Third state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    expect(pts.getCard(0).getStateName()).toBe(\'Third state\');\n  });\n\n  it(\'should compute the state history correctly\', function() {\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    pts.addNewCard(\'Second state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    expect(pts.getStateHistory()).toEqual([\n      \'First state\', \'Second state\', \'First state\']);\n  });\n\n  it(\'should add a new card correctly\', function() {\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false, false);\n\n    var firstCard = pts.getCard(0);\n    expect(firstCard.getStateName()).toEqual(\'First state\');\n    expect(firstCard.getCurrentParams()).toEqual({\n      a: \'b\'\n    });\n    expect(firstCard.getContentHtml()).toEqual(\'Content HTML\');\n    expect(firstCard.getInteractionHtml()).toEqual(\n      \'<oppia-text-input-html></oppia-text-input-html>\');\n    expect(firstCard.getInputResponsePairs()).toEqual([]);\n    expect(firstCard.getDestStateName()).toEqual(null);\n    expect(firstCard.getLeadsToConceptCard()).toEqual(false);\n  });\n\n  it(\'should add a previous card correctly\', function() {\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    pts.addNewCard(\'Second state\', {\n      a: \'b\'\n    }, \'Content HTML 2\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    pts.addPreviousCard();\n\n    expect(pts.getNumCards()).toEqual(3);\n    expect(pts.getCard([0]).getStateName()).toEqual(\'First state\');\n    expect(pts.getCard([1]).getStateName()).toEqual(\'Second state\');\n    expect(pts.getCard([2]).getStateName()).toEqual(\'First state\');\n  });\n\n  it(\'should set lastAnswer correctly\', function() {\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    var lastAnswer = pts.getLastAnswerOnActiveCard(0);\n    expect(lastAnswer).toEqual(null);\n\n    pts.addNewInput(\'first answer\', false);\n    pts.addNewCard(\'Second state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    lastAnswer = pts.getLastAnswerOnActiveCard(0);\n    expect(lastAnswer).toEqual(\'first answer\');\n\n    pts.addNewCard(\'Third state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    // lastAnswer should be null as no answers were provided in the second\n    // state.\n    lastAnswer = pts.getLastAnswerOnActiveCard(1);\n    expect(lastAnswer).toEqual(null);\n  });\n\n  it(\'should record answer/feedback pairs in the correct order\', function() {\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    pts.addNewInput(\'first answer\', false);\n    expect(function() {\n      pts.addNewInput(\'invalid answer\');\n    }).toThrow(\n      new Error(\n        \'Trying to add an input before the response for the previous \' +\n        \'input has been received.\'));\n\n    pts.addNewResponse(\'feedback\');\n    expect(function() {\n      pts.addNewResponse(\'invalid feedback\');\n    }).toThrow(\n      new Error(\'Trying to add a response when it has already been added.\'));\n\n    pts.addNewInput(\'second answer\', true);\n\n    var firstCard = pts.getCard(0);\n    expect(firstCard.getInputResponsePairs()).toEqual([{\n      learnerInput: \'first answer\',\n      oppiaResponse: \'feedback\',\n      isHint: false\n    }, {\n      learnerInput: \'second answer\',\n      oppiaResponse: null,\n      isHint: true\n    }]);\n    expect(pts.getNumSubmitsForLastCard()).toBe(1);\n  });\n\n  it(\'should set a destination name correctly\', function() {\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    expect(pts.getCard(0).getDestStateName()).toBeNull();\n    pts.setDestination(\'New destination\');\n    expect(pts.getCard(0).getDestStateName()).toBe(\'New destination\');\n    expect(function() {\n      pts.setDestination(\'Invalid new destination\');\n    }).toThrow(\n      new Error(\'Trying to set a destStateName when it has already been set.\'));\n  });\n\n  it(\'should retrieve the last card of the transcript correctly\', function() {\n    pts.addNewCard(\'First state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    pts.addNewCard(\'Second state\', {\n      a: \'b\'\n    }, \'Content HTML\', \'<oppia-text-input-html></oppia-text-input-html>\',\n    false);\n    expect(pts.getNumCards()).toBe(2);\n    expect(pts.getLastCard().getStateName()).toBe(\'Second state\');\n    expect(pts.isLastCard(0)).toBe(false);\n    expect(pts.isLastCard(1)).toBe(true);\n    expect(pts.isLastCard(2)).toBe(false);\n    expect(pts.getLastStateName()).toBe(\'Second state\');\n\n    expect(pts.getNumSubmitsForLastCard()).toBe(0);\n    pts.addNewInput(\'first answer\', false);\n    expect(pts.getNumSubmitsForLastCard()).toBe(1);\n    pts.addNewResponse(\'first feedback\');\n    expect(pts.getNumSubmitsForLastCard()).toBe(1);\n    pts.addNewInput(\'second answer\', false);\n    expect(pts.getNumSubmitsForLastCard()).toBe(2);\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/history_tab/VersionTreeService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for handling all interactions with the version history\n * tree.\n */\n\noppia.factory(\'VersionTreeService\', [function() {\n  var _snapshots = null;\n  var _treeParents = null;\n  return {\n    init: function(snapshotsData) {\n      _treeParents = {};\n      _snapshots = {};\n      var numberOfVersions = snapshotsData.length;\n\n      // Populate _snapshots so _snapshots[i] corresponds to version i\n      for (var i = 0; i < numberOfVersions; i++) {\n        _snapshots[i + 1] = snapshotsData[i];\n      }\n\n      // Generate the version tree of an exploration from its snapshots\n      for (var versionNum = 2; versionNum <= numberOfVersions; versionNum++) {\n        if (_snapshots[versionNum].commit_type === \'revert\') {\n          for (var i = 0; i < _snapshots[versionNum].commit_cmds.length; i++) {\n            if (_snapshots[versionNum].commit_cmds[i].cmd ===\n                \'AUTO_revert_version_number\') {\n              _treeParents[versionNum] =\n                  _snapshots[versionNum].commit_cmds[i].version_number;\n            }\n          }\n        } else {\n          _treeParents[versionNum] = versionNum - 1;\n        }\n      }\n      _treeParents[1] = -1;\n    },\n    /**\n     * Returns a object whose keys are the version number and whose value is\n     * the parent of each version, where parent points to previous version\n     * in general or reverted version if commit is a reversion.\n     * The parent of the root (version 1) is -1.\n     */\n    getVersionTree: function() {\n      if (_treeParents === null) {\n        throw new Error(\'version tree not initialized.\');\n      }\n      return _treeParents;\n    },\n    // Finds lowest common ancestor of v1 and v2 in the version tree.\n    findLCA: function(v1, v2) {\n      // Find paths from root to v1 and v2\n      var pathToV1 = [];\n      var pathToV2 = [];\n      while (_treeParents[v1] !== -1) {\n        pathToV1.push(v1);\n        if (_treeParents[v1] === undefined) {\n          throw new Error(\'Could not find parent of \' + v1);\n        }\n        v1 = _treeParents[v1];\n      }\n      pathToV1.push(1);\n      pathToV1.reverse();\n\n      while (_treeParents[v2] !== -1) {\n        pathToV2.push(v2);\n        if (_treeParents[v2] === undefined) {\n          throw new Error(\'Could not find parent of \' + v2);\n        }\n        v2 = _treeParents[v2];\n      }\n      pathToV2.push(1);\n      pathToV2.reverse();\n\n      // Compare paths\n      var maxIndex = Math.min(pathToV1.length, pathToV2.length) - 1;\n      var lca = null;\n      for (var i = maxIndex; i >= 0; i--) {\n        if (pathToV1[i] === pathToV2[i]) {\n          lca = pathToV1[i];\n          break;\n        }\n      }\n      return lca;\n    },\n    /**\n     * Returns the change list of a version of the exploration.\n     * Should be called only after getVersionTree is called to initialize\n     * _snapshots. Should not be called to retrieve change list of version 1.\n     * Returns a list of objects with keys depending on type of commit:\n     *  - \'cmd\': type of commit; \'add_state\', \'rename_state\', \'delete_state\',\n     *           \'edit_state_property\' or \'revert\'\n     * for \'add_state\' and \'delete_state\':\n     *  - \'state_name\': added or deleted state name\n     * for \'rename_state\':\n     *  - \'new_state_name\': new state name\n     *  - \'old_state_name\': old state name\n     * for \'edit_state_property\': (edits to state content or rules)\n     *  - \'new_value\': object which represents new version of state\n     *  - \'old_value\': object which represents old version of state\n     *  - \'state_name\': name of state which was changed\n     * for \'revert\':\n     *  - \'version_number\': version number reverted to\n     */\n    getChangeList: function(version) {\n      if (_snapshots === null) {\n        throw new Error(\'snapshots is not initialized\');\n      } else if (version === 1) {\n        throw new Error(\'Tried to retrieve change list of version 1\');\n      }\n      return angular.copy(_snapshots[version].commit_cmds);\n    }\n  };\n}]);'

blocks = {}
debug_info = ''
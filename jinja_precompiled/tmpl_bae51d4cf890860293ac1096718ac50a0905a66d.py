from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/TopicRightsObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating instances of frontend\n * topic rights domain objects.\n */\n\noppia.factory(\'TopicRightsObjectFactory\', [\n  function() {\n    var TopicRights = function(published, canPublishTopic, canEditTopic) {\n      this._published = published;\n      this._canPublishTopic = canPublishTopic;\n      this._canEditTopic = canEditTopic;\n    };\n\n    // Instance methods\n\n    TopicRights.prototype.canEditTopic = function() {\n      return this._canEditTopic;\n    };\n\n    TopicRights.prototype.isPublished = function() {\n      return this._published;\n    };\n\n    TopicRights.prototype.canPublishTopic = function() {\n      return this._canPublishTopic;\n    };\n\n    // Currently only admins can publish/unpublish a topic or edit its name.\n    TopicRights.prototype.canEditName = function() {\n      return this._canPublishTopic;\n    };\n\n    // Sets _isPublished to true only if the user can publish the\n    // corresponding topic.\n    TopicRights.prototype.markTopicAsPublished = function() {\n      if (this._canPublishTopic) {\n        this._published = true;\n      } else {\n        throw new Error(\'User is not allowed to publish this topic.\');\n      }\n    };\n\n    // Sets _isPublished to false if user can unpublish the topic.\n    TopicRights.prototype.markTopicAsUnpublished = function() {\n      if (this._canPublishTopic) {\n        this._published = false;\n      } else {\n        throw new Error(\'User is not allowed to unpublish this topic.\');\n      }\n    };\n\n    // This function takes a JSON object which represents a backend\n    // topic python dict.\n    TopicRights.createFromBackendDict = function(topicRightsBackendObject) {\n      return new TopicRights(\n        topicRightsBackendObject.published,\n        topicRightsBackendObject.can_publish_topic,\n        topicRightsBackendObject.can_edit_topic\n      );\n    };\n\n    // Reassigns all values within this topic to match the existing\n    // topic rights. This is performed as a deep copy such that none of the\n    // internal, bindable objects are changed within this topic rights.\n    TopicRights.prototype.copyFromTopicRights = function(otherTopicRights) {\n      this._published = otherTopicRights.isPublished();\n      this._canEditTopic = otherTopicRights.canEditTopic();\n      this._canPublishTopic = otherTopicRights.canPublishTopic();\n    };\n\n    // This creates an interstitial topic rights object which acts as a\n    // placeholder until the actual topic rights object is fetched from\n    // the backend. Since it is acting as a placeholder, it should be valid and\n    // hence the most restrictive rights are given to the object.\n    TopicRights.createInterstitialRights = function() {\n      return new TopicRights(false, false, false);\n    };\n\n    return TopicRights;\n  }\n]);'

blocks = {}
debug_info = ''
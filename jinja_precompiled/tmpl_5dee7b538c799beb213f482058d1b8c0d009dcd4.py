from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/LearnerLocalNav.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the local navigation in the learner view.\n */\n\noppia.constant(\n  \'FLAG_EXPLORATION_URL_TEMPLATE\', \'/flagexplorationhandler/<exploration_id>\');\n\noppia.controller(\'LearnerLocalNav\', [\n  \'$scope\', \'$uibModal\', \'$http\', \'ExplorationEngineService\', \'AlertsService\',\n  \'FocusManagerService\', \'UrlInterpolationService\',\n  \'FLAG_EXPLORATION_URL_TEMPLATE\', function(\n      $scope, $uibModal, $http, ExplorationEngineService, AlertsService,\n      FocusManagerService, UrlInterpolationService,\n      FLAG_EXPLORATION_URL_TEMPLATE) {\n    $scope.explorationId = ExplorationEngineService.getExplorationId();\n    $scope.canEdit = GLOBALS.canEdit;\n    $scope.username = GLOBALS.username;\n    $scope.showLearnerSuggestionModal = function() {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_player/\' +\n          \'learner_view_suggestion_modal_directive.html\'),\n        backdrop: \'static\',\n        resolve: {},\n        controller: [\n          \'$scope\', \'$uibModalInstance\', \'$timeout\', \'PlayerPositionService\',\n          \'ExplorationEngineService\',\n          function(\n              $scope, $uibModalInstance, $timeout, PlayerPositionService,\n              ExplorationEngineService) {\n            var stateName = PlayerPositionService.getCurrentStateName();\n            $scope.originalHtml =\n              ExplorationEngineService.getStateContentHtml();\n            $scope.description = \'\';\n            // ng-model needs to bind to a property of an object on\n            // the scope (the property cannot sit directly on the scope)\n            // Reference https://stackoverflow.com/q/12618342\n            $scope.suggestionData = {suggestionHtml: $scope.originalHtml};\n            $scope.showEditor = false;\n            // Rte initially displays content unrendered for a split second\n            $timeout(function() {\n              $scope.showEditor = true;\n            }, 500);\n\n            $scope.cancelSuggestion = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n\n            $scope.submitSuggestion = function() {\n              data = {\n                target_id: ExplorationEngineService.getExplorationId(),\n                version: ExplorationEngineService.getExplorationVersion(),\n                stateName: stateName,\n                suggestion_type: \'edit_exploration_state_content\',\n                target_type: \'exploration\',\n                description: $scope.description,\n                suggestionHtml: $scope.suggestionData.suggestionHtml,\n              };\n              $uibModalInstance.close(data);\n            };\n          }]\n      }).result.then(function(result) {\n        data = {\n          suggestion_type: result.suggestion_type,\n          target_type: result.target_type,\n          target_id: result.target_id,\n          target_version_at_submission: result.version,\n          assigned_reviewer_id: null,\n          final_reviewer_id: null,\n          description: result.description,\n          change: {\n            cmd: \'edit_state_property\',\n            property_name: \'content\',\n            state_name: result.stateName,\n            new_value: {\n              html: result.suggestionHtml\n            }\n          }\n        };\n        url = \'/generalsuggestionhandler/\';\n\n        $http.post(url, data).error(function(res) {\n          AlertsService.addWarning(res);\n        });\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_player/\' +\n            \'learner_suggestion_submitted_modal_directive.html\'),\n          backdrop: true,\n          resolve: {},\n          controller: [\n            \'$scope\', \'$uibModalInstance\',\n            function($scope, $uibModalInstance) {\n              $scope.close = function() {\n                $uibModalInstance.dismiss();\n              };\n            }\n          ]\n        });\n      });\n    };\n    $scope.showFlagExplorationModal = function() {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_player/flag_exploration_modal_directive.html\'),\n        backdrop: true,\n        controller: [\n          \'$scope\', \'$uibModalInstance\', \'PlayerPositionService\',\n          function($scope, $uibModalInstance, PlayerPositionService) {\n            $scope.flagMessageTextareaIsShown = false;\n            var stateName = PlayerPositionService.getCurrentStateName();\n\n            $scope.showFlagMessageTextarea = function(value) {\n              if (value) {\n                $scope.flagMessageTextareaIsShown = true;\n                FocusManagerService.setFocus(\'flagMessageTextarea\');\n              }\n            };\n\n            $scope.submitReport = function() {\n              if ($scope.flagMessage) {\n                $uibModalInstance.close({\n                  report_type: $scope.flag,\n                  report_text: $scope.flagMessage,\n                  state: stateName\n                });\n              }\n            };\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n          }\n        ]\n      }).result.then(function(result) {\n        var flagExplorationUrl = UrlInterpolationService.interpolateUrl(\n          FLAG_EXPLORATION_URL_TEMPLATE, {\n            exploration_id: $scope.explorationId\n          }\n        );\n        var report = (\n          \'[\' + result.state + \'] (\' + result.report_type + \') \' +\n          result.report_text);\n        $http.post(flagExplorationUrl, {\n          report_text: report\n        }).error(function(error) {\n          AlertsService.addWarning(error);\n        });\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_player/\' +\n            \'exploration_successfully_flagged_modal_directive.html\'),\n          backdrop: true,\n          controller: [\n            \'$scope\', \'$uibModalInstance\',\n            function($scope, $uibModalInstance) {\n              $scope.close = function() {\n                $uibModalInstance.dismiss(\'cancel\');\n              };\n            }\n          ]\n        });\n      });\n    };\n  }\n]);'

blocks = {}
debug_info = ''
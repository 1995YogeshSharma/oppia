from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/ExplorationEngineService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utility service for the learner\'s view of an exploration.\n */\n\noppia.constant(\'INTERACTION_SPECS\', GLOBALS.INTERACTION_SPECS);\n\n// A service that provides a number of utility functions for JS used by\n// the player skin.\n// Note that this service is used both in the learner and the editor views.\n// The URL determines which of these it is. Some methods may need to be\n// implemented differently depending on whether the skin is being played\n// in the learner view, or whether it is being previewed in the editor view.\noppia.factory(\'ExplorationEngineService\', [\n  \'$http\', \'$rootScope\', \'$q\', \'AlertsService\', \'AnswerClassificationService\',\n  \'AudioPreloaderService\', \'AudioTranslationLanguageService\',\n  \'EditableExplorationBackendApiService\', \'ContextService\',\n  \'ExplorationHtmlFormatterService\', \'ExplorationObjectFactory\',\n  \'ExpressionInterpolationService\', \'GuestCollectionProgressService\',\n  \'ImagePreloaderService\', \'LanguageUtilService\', \'LearnerParamsService\',\n  \'NumberAttemptsService\', \'PlayerCorrectnessFeedbackEnabledService\',\n  \'PlayerTranscriptService\', \'PlaythroughService\', \'INTERACTION_SPECS\',\n  \'ReadOnlyExplorationBackendApiService\', \'StateClassifierMappingService\',\n  \'StatsReportingService\', \'UrlInterpolationService\', \'UserService\',\n  \'WindowDimensionsService\', \'DEFAULT_PROFILE_IMAGE_PATH\',\n  \'PAGE_CONTEXT\', \'WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS\',\n  function(\n      $http, $rootScope, $q, AlertsService, AnswerClassificationService,\n      AudioPreloaderService, AudioTranslationLanguageService,\n      EditableExplorationBackendApiService, ContextService,\n      ExplorationHtmlFormatterService, ExplorationObjectFactory,\n      ExpressionInterpolationService, GuestCollectionProgressService,\n      ImagePreloaderService, LanguageUtilService, LearnerParamsService,\n      NumberAttemptsService, PlayerCorrectnessFeedbackEnabledService,\n      PlayerTranscriptService, PlaythroughService, INTERACTION_SPECS,\n      ReadOnlyExplorationBackendApiService, StateClassifierMappingService,\n      StatsReportingService, UrlInterpolationService, UserService,\n      WindowDimensionsService, DEFAULT_PROFILE_IMAGE_PATH,\n      PAGE_CONTEXT, WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS) {\n    var _explorationId = ContextService.getExplorationId();\n    var _editorPreviewMode = ContextService.isInExplorationEditorPage();\n    var answerIsBeingProcessed = false;\n\n    var exploration = null;\n\n    // This list may contain duplicates. A state name is added to it each time\n    // the learner moves to a new card.\n    var visitedStateNames = [];\n    var currentStateName = null;\n    var nextStateName = null;\n\n    // Param changes to be used ONLY in editor preview mode.\n    var manualParamChanges = null;\n    var initialStateName = null;\n    var version = GLOBALS.explorationVersion;\n\n    var randomFromArray = function(arr) {\n      return arr[Math.floor(Math.random() * arr.length)];\n    };\n\n    // Evaluate feedback.\n    var makeFeedback = function(feedbackHtml, envs) {\n      return ExpressionInterpolationService.processHtml(feedbackHtml, envs);\n    };\n\n    // Evaluate parameters. Returns null if any evaluation fails.\n    var makeParams = function(oldParams, paramChanges, envs) {\n      var newParams = angular.copy(oldParams);\n      if (paramChanges.every(function(pc) {\n        if (pc.generatorId === \'Copier\') {\n          if (!pc.customizationArgs.parse_with_jinja) {\n            newParams[pc.name] = pc.customizationArgs.value;\n          } else {\n            var paramValue = ExpressionInterpolationService.processUnicode(\n              pc.customizationArgs.value, [newParams].concat(envs));\n            if (paramValue === null) {\n              return false;\n            }\n            newParams[pc.name] = paramValue;\n          }\n        } else {\n          // RandomSelector.\n          newParams[pc.name] = randomFromArray(\n            pc.customizationArgs.list_of_values);\n        }\n        return true;\n      })) {\n        // All parameters were evaluated successfully.\n        return newParams;\n      }\n      // Evaluation of some parameter failed.\n      return null;\n    };\n\n    // Evaluate question string.\n    var makeQuestion = function(newState, envs) {\n      return ExpressionInterpolationService.processHtml(\n        newState.content.getHtml(), envs);\n    };\n\n    // This should only be called when \'exploration\' is non-null.\n    var _loadInitialState = function(successCallback) {\n      var initialState = exploration.getInitialState();\n      var oldParams = LearnerParamsService.getAllParams();\n      var newParams = makeParams(\n        oldParams, initialState.paramChanges, [oldParams]);\n      if (newParams === null) {\n        AlertsService.addWarning(\'Expression parsing error.\');\n        return;\n      }\n\n      var questionHtml = makeQuestion(initialState, [newParams]);\n      if (questionHtml === null) {\n        AlertsService.addWarning(\'Expression parsing error.\');\n        return;\n      }\n\n      if (!_editorPreviewMode) {\n        StatsReportingService.recordExplorationStarted(\n          exploration.initStateName, newParams);\n      }\n      currentStateName = exploration.initStateName;\n      nextStateName = exploration.initStateName;\n      $rootScope.$broadcast(\'playerStateChange\', initialState.name);\n      successCallback(currentStateName, questionHtml, newParams);\n    };\n\n    // Initialize the parameters in the exploration as specified in the\n    // exploration-level initial parameter changes list, followed by any\n    // manual parameter changes (in editor preview mode).\n    var initParams = function(manualParamChanges) {\n      var baseParams = {};\n      exploration.paramSpecs.forEach(function(paramName, paramSpec) {\n        baseParams[paramName] = paramSpec.getType().createDefaultValue();\n      });\n\n      var startingParams = makeParams(\n        baseParams,\n        exploration.paramChanges.concat(manualParamChanges),\n        [baseParams]);\n\n      LearnerParamsService.init(startingParams);\n    };\n\n    return {\n      // This should only be used in editor preview mode. It sets the\n      // exploration data from what\'s currently specified in the editor, and\n      // also initializes the parameters to empty strings.\n      initSettingsFromEditor: function(activeStateNameFromPreviewTab,\n          manualParamChangesToInit) {\n        if (_editorPreviewMode) {\n          manualParamChanges = manualParamChangesToInit;\n          initStateName = activeStateNameFromPreviewTab;\n        } else {\n          throw \'Error: cannot populate exploration in learner mode.\';\n        }\n      },\n      /**\n       * Initializes an exploration, passing the data for the first state to\n       * successCallback.\n       *\n       * In editor preview mode, populateExploration() must be called before\n       * calling init().\n       *\n       * @param {function} successCallback - The function to execute after the\n       *   initial exploration data is successfully loaded. This function will\n       *   be passed two arguments:\n       *   - stateName {string}, the name of the first state\n       *   - initHtml {string}, an HTML string representing the content of the\n       *       first state.\n       */\n      init: function(\n          explorationDict, explorationVersion, preferredAudioLanguage,\n          autoTtsEnabled, successCallback) {\n        answerIsBeingProcessed = false;\n        if (_editorPreviewMode) {\n          exploration = ExplorationObjectFactory.createFromBackendDict(\n            explorationDict);\n          exploration.setInitialStateName(initStateName);\n          visitedStateNames = [exploration.getInitialState().name];\n          initParams(manualParamChanges);\n          AudioTranslationLanguageService.init(\n            exploration.getAllAudioLanguageCodes(),\n            null,\n            exploration.getLanguageCode(),\n            explorationDict.auto_tts_enabled);\n          AudioPreloaderService.init(exploration);\n          AudioPreloaderService.kickOffAudioPreloader(initStateName);\n          _loadInitialState(successCallback);\n        } else {\n          exploration = ExplorationObjectFactory.createFromBackendDict(\n            explorationDict);\n          visitedStateNames.push(exploration.getInitialState().name);\n          version = explorationVersion;\n          initParams([]);\n          AudioTranslationLanguageService.init(\n            exploration.getAllAudioLanguageCodes(),\n            preferredAudioLanguage,\n            exploration.getLanguageCode(),\n            autoTtsEnabled);\n          AudioPreloaderService.init(exploration);\n          AudioPreloaderService.kickOffAudioPreloader(\n            exploration.getInitialState().name);\n          ImagePreloaderService.init(exploration);\n          ImagePreloaderService.kickOffImagePreloader(\n            exploration.getInitialState().name);\n          _loadInitialState(successCallback);\n        }\n      },\n      moveToExploration: function(successCallback) {\n        _loadInitialState(successCallback);\n      },\n      getCurrentStateName: function() {\n        return currentStateName;\n      },\n      isCurrentStateInitial: function() {\n        return currentStateName === exploration.initStateName;\n      },\n      recordNewCardAdded: function() {\n        currentStateName = nextStateName;\n      },\n      getExplorationId: function() {\n        return _explorationId;\n      },\n      getExplorationTitle: function() {\n        return exploration.title;\n      },\n      getExplorationVersion: function() {\n        return version;\n      },\n      getStateContentHtml: function() {\n        return exploration.getUninterpolatedContentHtml(currentStateName);\n      },\n      getStateContentAudioTranslations: function() {\n        return exploration.getAudioTranslations(currentStateName);\n      },\n      getStateContentAudioTranslation: function(stateName, languageCode) {\n        return exploration.getAudioTranslation(stateName, languageCode);\n      },\n      isContentAudioTranslationAvailable: function() {\n        return Object.keys(\n          exploration.getAudioTranslations(currentStateName)).length > 0 ||\n          AudioTranslationLanguageService.isAutogeneratedAudioAllowed();\n      },\n      getCurrentInteractionHtml: function(labelForFocusTarget) {\n        var interactionId = exploration.getInteractionId(currentStateName);\n        if (!interactionId) {\n          return null;\n        }\n\n        return ExplorationHtmlFormatterService.getInteractionHtml(\n          interactionId,\n          exploration.getInteractionCustomizationArgs(currentStateName),\n          true,\n          labelForFocusTarget);\n      },\n      getNextInteractionHtml: function(labelForFocusTarget) {\n        var interactionId = exploration.getInteractionId(nextStateName);\n\n        return ExplorationHtmlFormatterService.getInteractionHtml(\n          interactionId,\n          exploration.getInteractionCustomizationArgs(nextStateName),\n          true,\n          labelForFocusTarget);\n      },\n      getNextInteraction: function() {\n        return exploration.getInteraction(nextStateName);\n      },\n      getCurrentInteraction: function() {\n        return exploration.getInteraction(currentStateName);\n      },\n      isInteractionInline: function() {\n        if (currentStateName === null) {\n          return true;\n        }\n        return exploration.isInteractionInline(currentStateName);\n      },\n      isNextInteractionInline: function() {\n        return exploration.isInteractionInline(nextStateName);\n      },\n      getCurrentInteractionInstructions: function() {\n        return exploration.getInteractionInstructions(currentStateName);\n      },\n      getNextInteractionInstructions: function() {\n        return exploration.getInteractionInstructions(nextStateName);\n      },\n      isCurrentStateTerminal: function() {\n        return exploration.isStateTerminal(currentStateName);\n      },\n      isNextStateTerminal: function() {\n        return exploration.isStateTerminal(nextStateName);\n      },\n      isStateShowingConceptCard: function() {\n        if (currentStateName === null) {\n          return true;\n        }\n        return false;\n      },\n      getAuthorRecommendedExpIds: function() {\n        return exploration.getAuthorRecommendedExpIds(currentStateName);\n      },\n      getLanguageCode: function() {\n        return exploration.getLanguageCode();\n      },\n      getHints: function() {\n        return exploration.getInteraction(currentStateName).hints;\n      },\n      doesInteractionSupportHints: function() {\n        return (\n          !INTERACTION_SPECS[\n            exploration.getInteraction(currentStateName).id].is_terminal &&\n          !INTERACTION_SPECS[\n            exploration.getInteraction(currentStateName).id].is_linear);\n      },\n      getSolution: function() {\n        return exploration.getInteraction(currentStateName).solution;\n      },\n      getContentIdsToAudioTranslations: function() {\n        return (\n          exploration.getState(currentStateName).contentIdsToAudioTranslations);\n      },\n      isInPreviewMode: function() {\n        return !!_editorPreviewMode;\n      },\n      submitAnswer: function(answer, interactionRulesService, successCallback) {\n        if (answerIsBeingProcessed) {\n          return;\n        }\n\n        answerIsBeingProcessed = true;\n        var oldStateName = PlayerTranscriptService.getLastStateName();\n        var oldState = exploration.getState(oldStateName);\n        var contentIdsToAudioTranslations =\n          oldState.contentIdsToAudioTranslations;\n        var classificationResult = (\n          AnswerClassificationService.getMatchingClassificationResult(\n            oldStateName, oldState.interaction, answer,\n            interactionRulesService));\n        var answerIsCorrect = classificationResult.outcome.labelledAsCorrect;\n\n        // Use angular.copy() to clone the object\n        // since classificationResult.outcome points\n        // at oldState.interaction.default_outcome\n        var outcome = angular.copy(classificationResult.outcome);\n        var newStateName = outcome.dest;\n\n        if (!_editorPreviewMode) {\n          var feedbackIsUseful = (\n            AnswerClassificationService.isClassifiedExplicitlyOrGoesToNewState(\n              oldStateName, oldState, answer,\n              interactionRulesService));\n          StatsReportingService.recordAnswerSubmitted(\n            oldStateName,\n            LearnerParamsService.getAllParams(),\n            answer,\n            classificationResult.answerGroupIndex,\n            classificationResult.ruleIndex,\n            classificationResult.classificationCategorization,\n            feedbackIsUseful);\n\n          StatsReportingService.recordAnswerSubmitAction(\n            oldStateName, newStateName, oldState.interaction.id, answer,\n            outcome.feedback);\n        }\n\n        var refresherExplorationId = outcome.refresherExplorationId;\n        var missingPrerequisiteSkillId = outcome.missingPrerequisiteSkillId;\n        var newState = exploration.getState(newStateName);\n        var isFirstHit = Boolean(visitedStateNames.indexOf(\n          newStateName) === -1);\n        if (oldStateName !== newStateName) {\n          visitedStateNames.push(newStateName);\n        }\n        // Compute the data for the next state.\n        var oldParams = LearnerParamsService.getAllParams();\n        oldParams.answer = answer;\n        var feedbackHtml =\n          makeFeedback(outcome.feedback.getHtml(), [oldParams]);\n        var feedbackContentId = outcome.feedback.getContentId();\n        var feedbackAudioTranslations =\n          contentIdsToAudioTranslations.getBindableAudioTranslations(\n            feedbackContentId);\n        if (feedbackHtml === null) {\n          answerIsBeingProcessed = false;\n          AlertsService.addWarning(\'Expression parsing error.\');\n          return;\n        }\n\n        var newParams = (\n          newState ? makeParams(\n            oldParams, newState.paramChanges, [oldParams]) : oldParams);\n        if (newParams === null) {\n          answerIsBeingProcessed = false;\n          AlertsService.addWarning(\'Expression parsing error.\');\n          return;\n        }\n\n        var questionHtml = makeQuestion(newState, [newParams, {\n          answer: \'answer\'\n        }]);\n        if (questionHtml === null) {\n          answerIsBeingProcessed = false;\n          AlertsService.addWarning(\'Expression parsing error.\');\n          return;\n        }\n\n        // TODO(sll): Remove the \'answer\' key from newParams.\n        newParams.answer = answer;\n\n        answerIsBeingProcessed = false;\n\n        var refreshInteraction = (\n          oldStateName !== newStateName ||\n          exploration.isInteractionInline(oldStateName));\n        nextStateName = newStateName;\n        var onSameCard = (oldStateName === newStateName);\n\n        $rootScope.$broadcast(\'updateActiveStateIfInEditor\', newStateName);\n        successCallback(\n          newStateName, refreshInteraction, feedbackHtml,\n          feedbackAudioTranslations, questionHtml, newParams,\n          refresherExplorationId, missingPrerequisiteSkillId, onSameCard,\n          (oldStateName === exploration.initStateName), isFirstHit, false);\n        return answerIsCorrect;\n      },\n      isAnswerBeingProcessed: function() {\n        return answerIsBeingProcessed;\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
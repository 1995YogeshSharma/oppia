from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/GuestCollectionProgressService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service that records progress guests make during a collection\n * playthrough. Note that this service does not currently support saving a\n * user\'s progress when they create an account.\n */\n\n// TODO(bhenning): Move this to a service which stores shared state across the\n// frontend in a way that can be persisted in the backend upon account\n// creation, such as exploration progress.\n\n// TODO(bhenning): This should be reset upon login, otherwise the progress will\n// be different depending on the user\'s logged in/logged out state.\n\noppia.factory(\'GuestCollectionProgressService\', [\n  \'$window\', \'GuestCollectionProgressObjectFactory\',\n  function($window, GuestCollectionProgressObjectFactory) {\n    var COLLECTION_STORAGE_KEY = \'collectionProgressStore_v1\';\n\n    var storeGuestCollectionProgress = function(guestCollectionProgress) {\n      $window.localStorage[COLLECTION_STORAGE_KEY] = (\n        guestCollectionProgress.toJson());\n    };\n\n    var loadGuestCollectionProgress = function() {\n      return GuestCollectionProgressObjectFactory.createFromJson(\n        $window.localStorage[COLLECTION_STORAGE_KEY]);\n    };\n\n    var recordCompletedExploration = function(collectionId, explorationId) {\n      var guestCollectionProgress = loadGuestCollectionProgress();\n      var completedExplorationIdHasBeenAdded = (\n        guestCollectionProgress.addCompletedExplorationId(\n          collectionId, explorationId));\n      if (completedExplorationIdHasBeenAdded) {\n        storeGuestCollectionProgress(guestCollectionProgress);\n      }\n    };\n\n    var getValidCompletedExplorationIds = function(collection) {\n      var collectionId = collection.getId();\n      var guestCollectionProgress = loadGuestCollectionProgress();\n      var completedExplorationIds = (\n        guestCollectionProgress.getCompletedExplorationIds(collectionId));\n      // Filter the exploration IDs by whether they are contained within the\n      // specified collection structure.\n      return completedExplorationIds.filter(function(expId) {\n        return collection.containsCollectionNode(expId);\n      });\n    };\n\n    // This method corresponds to collection_domain.get_next_exploration_id.\n    var _getNextExplorationId = function(collection, completedIds) {\n      var explorationIds = collection.getExplorationIds();\n\n      for (var i = 0; i < explorationIds.length; i++) {\n        if (completedIds.indexOf(explorationIds[i]) === -1) {\n          return explorationIds[i];\n        }\n      }\n      return null;\n    };\n\n    return {\n      /**\n       * Records that the specified exploration was completed in the context of\n       * the specified collection, as a guest.\n       */\n      recordExplorationCompletedInCollection: function(\n          collectionId, explorationId) {\n        recordCompletedExploration(collectionId, explorationId);\n      },\n\n      /**\n       * Returns whether the guest user has made any progress toward completing\n       * the specified collection by completing at least one exploration related\n       * to the collection. Note that this does not account for any completed\n       * explorations which are no longer referenced by the collection;\n       * getCompletedExplorationIds() should be used for that, instead.\n       */\n      hasCompletedSomeExploration: function(collectionId) {\n        var guestCollectionProgress = loadGuestCollectionProgress();\n        return guestCollectionProgress.hasCompletionProgress(collectionId);\n      },\n\n      /**\n       * Given a collection object, returns the list of exploration IDs\n       * completed by the guest user. The return list of exploration IDs will\n       * not include any previously completed explorations for the given\n       * collection that are no longer part of the collection.\n       */\n      getCompletedExplorationIds: function(collection) {\n        return getValidCompletedExplorationIds(collection);\n      },\n\n      /**\n       * Given a collection object a list of completed exploration IDs, returns\n       * the next exploration ID the guest user can play as part of\n       * completing the collection. If this method returns null, the\n       * guest has completed the collection.\n       */\n      getNextExplorationId: function(collection, completedExplorationIds) {\n        return _getNextExplorationId(collection, completedExplorationIds);\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
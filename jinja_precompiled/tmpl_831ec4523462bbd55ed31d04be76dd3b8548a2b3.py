from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/ValidatorsServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for Validators Service.\n */\n\ndescribe(\'Validators service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'validators service\', function() {\n    var vs = null;\n\n    beforeEach(inject(function($injector) {\n      vs = $injector.get(\'ValidatorsService\');\n    }));\n\n    it(\'should correctly validate entity names\', function() {\n      GLOBALS.INVALID_NAME_CHARS = \'xyz\';\n\n      expect(vs.isValidEntityName(\'b\')).toBe(true);\n      expect(vs.isValidEntityName(\'b   \')).toBe(true);\n      expect(vs.isValidEntityName(\'   b\')).toBe(true);\n      expect(vs.isValidEntityName(\'bd\')).toBe(true);\n\n      expect(vs.isValidEntityName(\'\')).toBe(false);\n      expect(vs.isValidEntityName(\'   \')).toBe(false);\n      expect(vs.isValidEntityName(\'x\')).toBe(false);\n      expect(vs.isValidEntityName(\'y\')).toBe(false);\n      expect(vs.isValidEntityName(\'bx\')).toBe(false);\n    });\n\n    it(\'should correctly validate exploration titles\', function() {\n      GLOBALS.INVALID_NAME_CHARS = \'#\';\n\n      expect(vs.isValidExplorationTitle(\'b\')).toBe(true);\n      expect(vs.isValidExplorationTitle(\'abc def\')).toBe(true);\n\n      expect(vs.isValidExplorationTitle(\'\')).toBe(false);\n      expect(vs.isValidExplorationTitle(null)).toBe(false);\n      expect(vs.isValidExplorationTitle(undefined)).toBe(false);\n      expect(vs.isValidExplorationTitle(\n        \'A title with invalid characters #\')).toBe(false);\n      expect(vs.isValidExplorationTitle(\n        \'A title that is way way way way way way way too long.\')).toBe(false);\n    });\n\n    it(\'should correctly validate non-emptiness\', function() {\n      expect(vs.isNonempty(\'b\')).toBe(true);\n      expect(vs.isNonempty(\'abc def\')).toBe(true);\n\n      expect(vs.isNonempty(\'\')).toBe(false);\n      expect(vs.isNonempty(null)).toBe(false);\n      expect(vs.isNonempty(undefined)).toBe(false);\n    });\n\n    it(\'should correctly validate exploration IDs\', function() {\n      expect(vs.isValidExplorationId(\'b\')).toBe(true);\n      expect(vs.isValidExplorationId(\'2\')).toBe(true);\n      expect(vs.isValidExplorationId(\'asbfjkdAFS-_\')).toBe(true);\n\n      expect(vs.isValidExplorationId(\'abc def\')).toBe(false);\n      expect(vs.isValidExplorationId(\'\')).toBe(false);\n      expect(vs.isValidExplorationId(\'abcd;\')).toBe(false);\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/AlertsService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for handling warnings and info messages.\n */\n\noppia.factory(\'AlertsService\', [\'$log\', function($log) {\n  var AlertsService = {\n    /**\n     * Each element in each of the arrays here is an object with two keys:\n     *   - type:  a string specifying the type of message or warning.\n     *            Possible types - "warning", "info" or "success".\n     *   - content: a string containing the warning or message.\n     */\n\n    /**\n     * Array of "warning" messages.\n     */\n    warnings: [],\n    /**\n     * Array of "success" or "info" messages.\n     */\n    messages: []\n  };\n\n  // This is to prevent infinite loops.\n  var MAX_TOTAL_WARNINGS = 10;\n  var MAX_TOTAL_MESSAGES = 10;\n\n  /**\n   * Adds a warning message.\n   * @param {string} warning - The warning message to display.\n   */\n  AlertsService.addWarning = function(warning) {\n    $log.error(warning);\n    if (AlertsService.warnings.length >= MAX_TOTAL_WARNINGS) {\n      return;\n    }\n    AlertsService.warnings.push({\n      type: \'warning\',\n      content: warning\n    });\n  };\n\n  /**\n   * Adds a warning in the same way as addWarning(), except it also throws an\n   * exception to cause a hard failure in the frontend.\n   * @param {string} warning - The warning message to display.\n   */\n  AlertsService.fatalWarning = function(warning) {\n    AlertsService.addWarning(warning);\n    throw new Error(warning);\n  };\n\n  /**\n   * Deletes the warning from the warnings list.\n   * @param {Object} warningObject - The warning message to be deleted.\n   */\n  AlertsService.deleteWarning = function(warningObject) {\n    var warnings = AlertsService.warnings;\n    var newWarnings = [];\n    for (var i = 0; i < warnings.length; i++) {\n      if (warnings[i].content !== warningObject.content) {\n        newWarnings.push(warnings[i]);\n      }\n    }\n    AlertsService.warnings = newWarnings;\n  };\n\n  /**\n   * Clears all warnings.\n   */\n  AlertsService.clearWarnings = function() {\n    AlertsService.warnings = [];\n  };\n\n  /**\n   * Adds a message, can be info messages or success messages.\n   * @param {string} type - Type of message\n   * @param {string} message - Message content\n   * @param {number|undefined} timeoutMilliseconds - Timeout for the toast.\n   */\n  AlertsService.addMessage = function(type, message, timeoutMilliseconds) {\n    if (AlertsService.messages.length >= MAX_TOTAL_MESSAGES) {\n      return;\n    }\n    AlertsService.messages.push({\n      type: type,\n      content: message,\n      timeout: timeoutMilliseconds\n    });\n  };\n\n  /**\n   * Deletes the message from the messages list.\n   * @param {Object} messageObject - Message to be deleted.\n   */\n  AlertsService.deleteMessage = function(messageObject) {\n    var messages = AlertsService.messages;\n    var newMessages = [];\n    for (var i = 0; i < messages.length; i++) {\n      if (messages[i].type !== messageObject.type ||\n          messages[i].content !== messageObject.content) {\n        newMessages.push(messages[i]);\n      }\n    }\n    AlertsService.messages = newMessages;\n  };\n\n  /**\n   * Adds an info message.\n   * @param {string} message - Info message to display.\n   * @param {number|undefined} timeoutMilliseconds - Timeout for the toast.\n   */\n  AlertsService.addInfoMessage = function(message, timeoutMilliseconds) {\n    if (timeoutMilliseconds === undefined) {\n      timeoutMilliseconds = 1500;\n    }\n    AlertsService.addMessage(\'info\', message, timeoutMilliseconds);\n  };\n\n  /**\n   * Adds a success message.\n   * @param {string} message - Success message to display\n   * @param {number|undefined} timeoutMilliseconds - Timeout for the toast.\n   */\n  AlertsService.addSuccessMessage = function(message, timeoutMilliseconds) {\n    if (timeoutMilliseconds === undefined) {\n      timeoutMilliseconds = 1500;\n    }\n    AlertsService.addMessage(\'success\', message, timeoutMilliseconds);\n  };\n\n  /**\n   * Clears all messages.\n   */\n  AlertsService.clearMessages = function() {\n    AlertsService.messages = [];\n  };\n\n  return AlertsService;\n}]);'

blocks = {}
debug_info = ''
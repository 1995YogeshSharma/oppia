from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/question/PretestQuestionBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for PretestQuestionBackendApiService.\n */\n\ndescribe(\'Pretest question backend API service\', function() {\n  var PretestQuestionBackendApiService = null;\n  var sampleDataResults = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    PretestQuestionBackendApiService = $injector.get(\n      \'PretestQuestionBackendApiService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n\n    // Sample question object returnable from the backend\n    sampleDataResults = {\n      pretest_question_dicts: [{\n        id: \'0\',\n        question_state_data: {\n          content: {\n            html: \'Question 1\'\n          },\n          content_ids_to_audio_translations: {},\n          interaction: {\n            answer_groups: [],\n            confirmed_unclassified_answers: [],\n            customization_args: {},\n            default_outcome: {\n              dest: null,\n              feedback: {\n                html: \'Correct Answer\'\n              },\n              param_changes: [],\n              labelled_as_correct: true\n            },\n            hints: [\n              {\n                hint_content: {\n                  html: \'Hint 1\'\n                }\n              }\n            ],\n            solution: {\n              correct_answer: \'This is the correct answer\',\n              answer_is_exclusive: false,\n              explanation: {\n                html: \'Solution explanation\'\n              }\n            },\n            id: \'TextInput\'\n          },\n          param_changes: []\n        },\n        language_code: \'en\',\n        version: 1\n      }],\n      next_start_cursor: null\n    };\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully fetch pretest questions from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\n        \'GET\', \'/pretest_handler/expId?story_id=storyId&cursor=\').respond(\n        sampleDataResults);\n      PretestQuestionBackendApiService.fetchPretestQuestions(\n        \'expId\', \'storyId\').then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(\n        sampleDataResults.pretest_question_dicts);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\n        \'GET\', \'/pretest_handler/expId?story_id=storyId&cursor=\').respond(\n        500, \'Error loading pretest questions.\');\n      PretestQuestionBackendApiService.fetchPretestQuestions(\n        \'expId\', \'storyId\').then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\n        \'Error loading pretest questions.\');\n    }\n  );\n});'

blocks = {}
debug_info = ''
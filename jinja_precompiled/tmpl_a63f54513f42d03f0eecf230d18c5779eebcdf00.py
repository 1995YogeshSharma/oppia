from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/creator_dashboard/CreatorDashboard.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the creator dashboard.\n */\n\noppia.constant(\'EXPLORATION_DROPDOWN_STATS\', {\n  OPEN_FEEDBACK: \'open_feedback\'\n});\n\noppia.constant(\'EXPLORATIONS_SORT_BY_KEYS\', {\n  TITLE: \'title\',\n  RATING: \'ratings\',\n  NUM_VIEWS: \'num_views\',\n  OPEN_FEEDBACK: \'num_open_threads\',\n  LAST_UPDATED: \'last_updated_msec\'\n});\n\noppia.constant(\'HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS\', {\n  TITLE: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_TITLE \',\n  RATING: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_AVERAGE_RATING\',\n  NUM_VIEWS: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_TOTAL_PLAYS\',\n  OPEN_FEEDBACK: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_OPEN_FEEDBACK\',\n  LAST_UPDATED: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_LAST_UPDATED\'\n});\n\noppia.constant(\'SUBSCRIPTION_SORT_BY_KEYS\', {\n  USERNAME: \'subscriber_username\',\n  IMPACT: \'subscriber_impact\'\n});\n\noppia.constant(\'HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS\', {\n  USERNAME: \'Username\',\n  IMPACT: \'Impact\'\n});\n\noppia.controller(\'CreatorDashboard\', [\n  \'$scope\', \'$rootScope\', \'$http\', \'$window\', \'DateTimeFormatService\',\n  \'AlertsService\', \'CreatorDashboardBackendApiService\',\n  \'RatingComputationService\', \'ExplorationCreationService\',\n  \'UrlInterpolationService\', \'FATAL_ERROR_CODES\',\n  \'EXPLORATION_DROPDOWN_STATS\', \'EXPLORATIONS_SORT_BY_KEYS\',\n  \'HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS\', \'SUBSCRIPTION_SORT_BY_KEYS\',\n  \'HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS\',\n  function(\n      $scope, $rootScope, $http, $window, DateTimeFormatService,\n      AlertsService, CreatorDashboardBackendApiService,\n      RatingComputationService, ExplorationCreationService,\n      UrlInterpolationService, FATAL_ERROR_CODES,\n      EXPLORATION_DROPDOWN_STATS, EXPLORATIONS_SORT_BY_KEYS,\n      HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS, SUBSCRIPTION_SORT_BY_KEYS,\n      HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS) {\n    var EXP_PUBLISH_TEXTS = {\n      defaultText: (\n        \'This exploration is private. Publish it to receive statistics.\'),\n      smText: \'Publish the exploration to receive statistics.\'\n    };\n\n    $scope.DEFAULT_EMPTY_TITLE = \'Untitled\';\n    $scope.EXPLORATION_DROPDOWN_STATS = EXPLORATION_DROPDOWN_STATS;\n    $scope.EXPLORATIONS_SORT_BY_KEYS = EXPLORATIONS_SORT_BY_KEYS;\n    $scope.HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS = (\n      HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS);\n    $scope.SUBSCRIPTION_SORT_BY_KEYS = SUBSCRIPTION_SORT_BY_KEYS;\n    $scope.HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS = (\n      HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS);\n    $scope.DEFAULT_TWITTER_SHARE_MESSAGE_DASHBOARD = (\n      GLOBALS.DEFAULT_TWITTER_SHARE_MESSAGE_DASHBOARD);\n\n    $scope.canCreateCollections = GLOBALS.can_create_collections;\n    $scope.getAverageRating = RatingComputationService.computeAverageRating;\n    $scope.createNewExploration = (\n      ExplorationCreationService.createNewExploration);\n    $scope.getLocaleAbbreviatedDatetimeString = (\n      DateTimeFormatService.getLocaleAbbreviatedDatetimeString);\n\n    $scope.emptyDashboardImgUrl = UrlInterpolationService.getStaticImageUrl(\n      \'/general/empty_dashboard.svg\');\n\n    $scope.setActiveTab = function(newActiveTabName) {\n      $scope.activeTab = newActiveTabName;\n    };\n\n    $scope.getExplorationUrl = function(explorationId) {\n      return \'/create/\' + explorationId;\n    };\n\n    $scope.getCollectionUrl = function(collectionId) {\n      return \'/collection_editor/create/\' + collectionId;\n    };\n\n    $scope.setMyExplorationsView = function(viewType) {\n      $http.post(\'/creatordashboardhandler/data\', {\n        display_preference: viewType,\n      }).then(function() {\n        $scope.myExplorationsView = viewType;\n      });\n    };\n\n    $scope.checkMobileView = function() {\n      return ($window.innerWidth < 500);\n    };\n\n    $scope.showUsernamePopover = function(subscriberUsername) {\n      // The popover on the subscription card is only shown if the length of\n      // the subscriber username is greater than 10 and the user hovers over\n      // the truncated username.\n      if (subscriberUsername.length > 10) {\n        return \'mouseenter\';\n      } else {\n        return \'none\';\n      }\n    };\n\n    $scope.updatesGivenScreenWidth = function() {\n      if ($scope.checkMobileView()) {\n        $scope.myExplorationsView = (\n          constants.ALLOWED_CREATOR_DASHBOARD_DISPLAY_PREFS.CARD);\n        $scope.publishText = EXP_PUBLISH_TEXTS.smText;\n      } else {\n        $scope.publishText = EXP_PUBLISH_TEXTS.defaultText;\n      }\n    };\n\n    $scope.updatesGivenScreenWidth();\n    angular.element($window).bind(\'resize\', function() {\n      $scope.updatesGivenScreenWidth();\n    });\n\n    $scope.setExplorationsSortingOptions = function(sortType) {\n      if (sortType === $scope.currentSortType) {\n        $scope.isCurrentSortDescending = !$scope.isCurrentSortDescending;\n      } else {\n        $scope.currentSortType = sortType;\n      }\n    };\n\n    $scope.setSubscriptionSortingOptions = function(sortType) {\n      if (sortType === $scope.currentSubscribersSortType) {\n        $scope.isCurrentSubscriptionSortDescending = (\n          !$scope.isCurrentSubscriptionSortDescending);\n      } else {\n        $scope.currentSubscribersSortType = sortType;\n      }\n    };\n\n    $scope.sortSubscriptionFunction = function(entity) {\n      // This function is passed as a custom comparator function to `orderBy`,\n      // so that special cases can be handled while sorting subscriptions.\n      var value = entity[$scope.currentSubscribersSortType];\n      if ($scope.currentSubscribersSortType ===\n          SUBSCRIPTION_SORT_BY_KEYS.IMPACT) {\n        value = (value || 0);\n      }\n      return value;\n    };\n\n    $scope.sortByFunction = function(entity) {\n      // This function is passed as a custom comparator function to `orderBy`,\n      // so that special cases can be handled while sorting explorations.\n      var value = entity[$scope.currentSortType];\n      if (entity.status === \'private\') {\n        if ($scope.currentSortType === EXPLORATIONS_SORT_BY_KEYS.TITLE) {\n          value = (value || $scope.DEFAULT_EMPTY_TITLE);\n        } else if ($scope.currentSortType !==\n                   EXPLORATIONS_SORT_BY_KEYS.LAST_UPDATED) {\n          value = 0;\n        }\n      } else if ($scope.currentSortType === EXPLORATIONS_SORT_BY_KEYS.RATING) {\n        var averageRating = $scope.getAverageRating(value);\n        value = (averageRating || 0);\n      }\n      return value;\n    };\n\n    $scope.getCompleteThumbnailIconUrl = function (iconUrl) {\n      return UrlInterpolationService.getStaticImageUrl(iconUrl);\n    };\n\n    $rootScope.loadingMessage = \'Loading\';\n    CreatorDashboardBackendApiService.fetchDashboardData().then(\n      function(response) {\n        var responseData = response.data;\n        $scope.currentSortType = EXPLORATIONS_SORT_BY_KEYS.OPEN_FEEDBACK;\n        $scope.currentSubscribersSortType = SUBSCRIPTION_SORT_BY_KEYS.USERNAME;\n        $scope.isCurrentSortDescending = true;\n        $scope.isCurrentSubscriptionSortDescending = true;\n        $scope.explorationsList = responseData.explorations_list;\n        $scope.collectionsList = responseData.collections_list;\n        $scope.subscribersList = responseData.subscribers_list;\n        $scope.dashboardStats = responseData.dashboard_stats;\n        $scope.lastWeekStats = responseData.last_week_stats;\n        $scope.myExplorationsView = responseData.display_preference;\n        if ($scope.dashboardStats && $scope.lastWeekStats) {\n          $scope.relativeChangeInTotalPlays = (\n            $scope.dashboardStats.total_plays - $scope.lastWeekStats.total_plays\n          );\n        }\n        if ($scope.explorationsList.length === 0 &&\n          $scope.collectionsList.length > 0) {\n          $scope.activeTab = \'myCollections\';\n        } else {\n          $scope.activeTab = \'myExplorations\';\n        }\n        $rootScope.loadingMessage = \'\';\n      },\n      function(errorResponse) {\n        if (FATAL_ERROR_CODES.indexOf(errorResponse.status) !== -1) {\n          AlertsService.addWarning(\'Failed to get dashboard data\');\n        }\n      }\n    );\n  }\n]);'

blocks = {}
debug_info = ''
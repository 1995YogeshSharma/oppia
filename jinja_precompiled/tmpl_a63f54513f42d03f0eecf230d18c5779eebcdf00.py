from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/creator_dashboard/CreatorDashboard.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the creator dashboard.\n */\n\noppia.constant(\'EXPLORATION_DROPDOWN_STATS\', {\n  OPEN_FEEDBACK: \'open_feedback\'\n});\n\noppia.constant(\'EXPLORATIONS_SORT_BY_KEYS\', {\n  TITLE: \'title\',\n  RATING: \'ratings\',\n  NUM_VIEWS: \'num_views\',\n  OPEN_FEEDBACK: \'num_open_threads\',\n  LAST_UPDATED: \'last_updated_msec\'\n});\n\noppia.constant(\'HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS\', {\n  TITLE: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_TITLE \',\n  RATING: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_AVERAGE_RATING\',\n  NUM_VIEWS: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_TOTAL_PLAYS\',\n  OPEN_FEEDBACK: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_OPEN_FEEDBACK\',\n  LAST_UPDATED: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_LAST_UPDATED\'\n});\n\noppia.constant(\'SUBSCRIPTION_SORT_BY_KEYS\', {\n  USERNAME: \'subscriber_username\',\n  IMPACT: \'subscriber_impact\'\n});\n\noppia.constant(\'HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS\', {\n  USERNAME: \'Username\',\n  IMPACT: \'Impact\'\n});\n\noppia.controller(\'CreatorDashboard\', [\n  \'$scope\', \'$rootScope\', \'$http\', \'$uibModal\', \'$window\', \'$log\',\n  \'DateTimeFormatService\', \'AlertsService\', \'CreatorDashboardBackendApiService\',\n  \'RatingComputationService\', \'ExplorationCreationService\',\n  \'QuestionObjectFactory\', \'SuggestionObjectFactory\',\n  \'SuggestionThreadObjectFactory\', \'TopicsAndSkillsDashboardBackendApiService\',\n  \'ThreadStatusDisplayService\', \'UrlInterpolationService\', \'FATAL_ERROR_CODES\',\n  \'EXPLORATION_DROPDOWN_STATS\', \'EXPLORATIONS_SORT_BY_KEYS\',\n  \'HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS\', \'SUBSCRIPTION_SORT_BY_KEYS\',\n  \'HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS\',\n  function(\n      $scope, $rootScope, $http, $uibModal, $window, $log,\n      DateTimeFormatService, AlertsService, CreatorDashboardBackendApiService,\n      RatingComputationService, ExplorationCreationService,\n      QuestionObjectFactory, SuggestionObjectFactory,\n      SuggestionThreadObjectFactory, TopicsAndSkillsDashboardBackendApiService,\n      ThreadStatusDisplayService, UrlInterpolationService, FATAL_ERROR_CODES,\n      EXPLORATION_DROPDOWN_STATS, EXPLORATIONS_SORT_BY_KEYS,\n      HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS, SUBSCRIPTION_SORT_BY_KEYS,\n      HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS) {\n    var EXP_PUBLISH_TEXTS = {\n      defaultText: (\n        \'This exploration is private. Publish it to receive statistics.\'),\n      smText: \'Publish the exploration to receive statistics.\'\n    };\n\n    $scope.DEFAULT_EMPTY_TITLE = \'Untitled\';\n    $scope.EXPLORATION_DROPDOWN_STATS = EXPLORATION_DROPDOWN_STATS;\n    $scope.EXPLORATIONS_SORT_BY_KEYS = EXPLORATIONS_SORT_BY_KEYS;\n    $scope.HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS = (\n      HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS);\n    $scope.SUBSCRIPTION_SORT_BY_KEYS = SUBSCRIPTION_SORT_BY_KEYS;\n    $scope.HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS = (\n      HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS);\n    $scope.DEFAULT_TWITTER_SHARE_MESSAGE_DASHBOARD = (\n      GLOBALS.DEFAULT_TWITTER_SHARE_MESSAGE_DASHBOARD);\n\n    $scope.canCreateCollections = GLOBALS.can_create_collections;\n    $scope.getAverageRating = RatingComputationService.computeAverageRating;\n    $scope.createNewExploration = (\n      ExplorationCreationService.createNewExploration);\n    $scope.getLocaleAbbreviatedDatetimeString = (\n      DateTimeFormatService.getLocaleAbbreviatedDatetimeString);\n    $scope.enableQuestionSuggestions = (\n      constants.ENABLE_GENERALIZED_FEEDBACK_THREADS &&\n      constants.ENABLE_NEW_STRUCTURES);\n    $scope.getHumanReadableStatus = (\n      ThreadStatusDisplayService.getHumanReadableStatus);\n\n    $scope.emptyDashboardImgUrl = UrlInterpolationService.getStaticImageUrl(\n      \'/general/empty_dashboard.svg\');\n    $scope.canReviewActiveThread = null;\n\n    $scope.setActiveTab = function(newActiveTabName) {\n      $scope.activeTab = newActiveTabName;\n    };\n\n    $scope.getExplorationUrl = function(explorationId) {\n      return \'/create/\' + explorationId;\n    };\n\n    $scope.getCollectionUrl = function(collectionId) {\n      return \'/collection_editor/create/\' + collectionId;\n    };\n\n    $scope.setMyExplorationsView = function(viewType) {\n      $http.post(\'/creatordashboardhandler/data\', {\n        display_preference: viewType,\n      }).then(function() {\n        $scope.myExplorationsView = viewType;\n      });\n    };\n\n    $scope.checkMobileView = function() {\n      return ($window.innerWidth < 500);\n    };\n\n    $scope.showUsernamePopover = function(subscriberUsername) {\n      // The popover on the subscription card is only shown if the length of\n      // the subscriber username is greater than 10 and the user hovers over\n      // the truncated username.\n      if (subscriberUsername.length > 10) {\n        return \'mouseenter\';\n      } else {\n        return \'none\';\n      }\n    };\n\n    $scope.updatesGivenScreenWidth = function() {\n      if ($scope.checkMobileView()) {\n        $scope.myExplorationsView = (\n          constants.ALLOWED_CREATOR_DASHBOARD_DISPLAY_PREFS.CARD);\n        $scope.publishText = EXP_PUBLISH_TEXTS.smText;\n      } else {\n        $scope.publishText = EXP_PUBLISH_TEXTS.defaultText;\n      }\n    };\n\n    $scope.updatesGivenScreenWidth();\n    angular.element($window).bind(\'resize\', function() {\n      $scope.updatesGivenScreenWidth();\n    });\n\n    $scope.setExplorationsSortingOptions = function(sortType) {\n      if (sortType === $scope.currentSortType) {\n        $scope.isCurrentSortDescending = !$scope.isCurrentSortDescending;\n      } else {\n        $scope.currentSortType = sortType;\n      }\n    };\n\n    $scope.setSubscriptionSortingOptions = function(sortType) {\n      if (sortType === $scope.currentSubscribersSortType) {\n        $scope.isCurrentSubscriptionSortDescending = (\n          !$scope.isCurrentSubscriptionSortDescending);\n      } else {\n        $scope.currentSubscribersSortType = sortType;\n      }\n    };\n\n    $scope.sortSubscriptionFunction = function(entity) {\n      // This function is passed as a custom comparator function to `orderBy`,\n      // so that special cases can be handled while sorting subscriptions.\n      var value = entity[$scope.currentSubscribersSortType];\n      if ($scope.currentSubscribersSortType ===\n          SUBSCRIPTION_SORT_BY_KEYS.IMPACT) {\n        value = (value || 0);\n      }\n      return value;\n    };\n\n    var _fetchMessages = function(threadId) {\n      $http.get(\'/threadhandler/\' + threadId).then(function(response) {\n        var allThreads = $scope.mySuggestionsList.concat(\n          $scope.suggestionsToReviewList);\n        for (var i = 0; i < allThreads.length; i++) {\n          if (allThreads[i].threadId === threadId) {\n            allThreads[i].setMessages(response.data.messages);\n            break;\n          }\n        }\n      });\n    };\n\n    $scope.clearActiveThread = function() {\n      $scope.activeThread = null;\n    };\n\n    $scope.setActiveThread = function(threadId) {\n      _fetchMessages(threadId);\n      for (var i = 0; i < $scope.mySuggestionsList.length; i++) {\n        if ($scope.mySuggestionsList[i].threadId === threadId) {\n          $scope.activeThread = $scope.mySuggestionsList[i];\n          $scope.canReviewActiveThread = false;\n          break;\n        }\n      }\n      if (!$scope.activeThread) {\n        for (var i = 0; i < $scope.suggestionsToReviewList.length; i++) {\n          if ($scope.suggestionsToReviewList[i].threadId === threadId) {\n            $scope.activeThread = $scope.suggestionsToReviewList[i];\n            $scope.canReviewActiveThread = true;\n            break;\n          }\n        }\n      }\n    };\n\n    $scope.showSuggestionModal = function() {\n      if ($scope.activeThread.suggestion.suggestionType ===\n          \'edit_exploration_state_content\') {\n        templateUrl = UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/creator_dashboard/\' +\n          \'view_suggestion_edit_exploration_state_content_modal.html\');\n      }\n\n      $uibModal.open({\n        templateUrl: templateUrl,\n        backdrop: true,\n        size: \'lg\',\n        resolve: {\n          suggestionIsHandled: function() {\n            return $scope.activeThread.isSuggestionHandled();\n          },\n          suggestionStatus: function() {\n            return $scope.activeThread.getSuggestionStatus();\n          },\n          description: function() {\n            return $scope.activeThread.description;\n          },\n          oldContent: function() {\n            return $scope.activeThread.suggestion.oldValue;\n          },\n          newContent: function() {\n            return $scope.activeThread.suggestion.newValue;\n          },\n          canReviewActiveThread: function() {\n            return $scope.canReviewActiveThread;\n          }\n        },\n        controller: [\n          \'$scope\', \'$log\', \'$uibModalInstance\', \'suggestionIsHandled\',\n          \'suggestionStatus\', \'description\', \'oldContent\',\n          \'newContent\', \'canReviewActiveThread\', function(\n              $scope, $log, $uibModalInstance, suggestionIsHandled,\n              suggestionStatus, description, oldContent,\n              newContent, canReviewActiveThread) {\n            var SUGGESTION_ACCEPTED_MSG = \'This suggestion has already been \' +\n              \'accepted.\';\n            var SUGGESTION_REJECTED_MSG = \'This suggestion has already been \' +\n              \'rejected.\';\n            var ACTION_ACCEPT_SUGGESTION = \'accept\';\n            var ACTION_REJECT_SUGGESTION = \'reject\';\n            $scope.isNotHandled = !suggestionIsHandled;\n            $scope.canReject = $scope.isNotHandled;\n            $scope.canAccept = $scope.isNotHandled;\n\n            if (!$scope.isNotHandled) {\n              $scope.errorMessage = (suggestionStatus === \'accepted\') ?\n                SUGGESTION_ACCEPTED_MSG : SUGGESTION_REJECTED_MSG;\n            } else {\n              $scope.errorMessage = \'\';\n            }\n\n            $scope.oldContent = oldContent;\n            $scope.newContent = newContent;\n            $scope.commitMessage = description;\n            $scope.reviewMessage = null;\n            $scope.canReviewActiveThread = canReviewActiveThread;\n            $scope.acceptSuggestion = function() {\n              $uibModalInstance.close({\n                action: ACTION_ACCEPT_SUGGESTION,\n                commitMessage: $scope.commitMessage,\n                reviewMessage: $scope.reviewMessage,\n              });\n            };\n\n            $scope.rejectSuggestion = function() {\n              $uibModalInstance.close({\n                action: ACTION_REJECT_SUGGESTION,\n                commitMessage: null,\n                reviewMessage: $scope.reviewMessage\n              });\n            };\n\n            $scope.cancelReview = function() {\n              $uibModalInstance.dismiss();\n            };\n          }\n        ]\n      }).result.then(function(result) {\n        $http.put(\n          \'/generalsuggestionactionhandler/\' +\n          $scope.activeThread.suggestion.targetType + \'/\' +\n          $scope.activeThread.suggestion.targetId + \'/\' +\n          $scope.activeThread.suggestion.suggestionId, {\n            action: result.action,\n            commit_message: result.commitMessage,\n            review_message: result.reviewMessage\n          }\n        ).then(function() {\n          for (var i = 0; i < $scope.suggestionsToReviewList.length; i++) {\n            if ($scope.suggestionsToReviewList[i] === $scope.activeThread) {\n              $scope.suggestionsToReviewList.splice(i, 1);\n              break;\n            }\n          }\n          $scope.clearActiveThread();\n        }, function() {\n          $log.error(\'Error resolving suggestion\');\n        });\n      });\n    };\n\n    $scope.sortByFunction = function(entity) {\n      // This function is passed as a custom comparator function to `orderBy`,\n      // so that special cases can be handled while sorting explorations.\n      var value = entity[$scope.currentSortType];\n      if (entity.status === \'private\') {\n        if ($scope.currentSortType === EXPLORATIONS_SORT_BY_KEYS.TITLE) {\n          value = (value || $scope.DEFAULT_EMPTY_TITLE);\n        } else if ($scope.currentSortType !==\n                   EXPLORATIONS_SORT_BY_KEYS.LAST_UPDATED) {\n          value = 0;\n        }\n      } else if ($scope.currentSortType === EXPLORATIONS_SORT_BY_KEYS.RATING) {\n        var averageRating = $scope.getAverageRating(value);\n        value = (averageRating || 0);\n      }\n      return value;\n    };\n\n    $scope.getCompleteThumbnailIconUrl = function(iconUrl) {\n      return UrlInterpolationService.getStaticImageUrl(iconUrl);\n    };\n\n    $scope.showCreateQuestionModal = function() {\n      var question = QuestionObjectFactory.createDefaultQuestion();\n      var topicSummaries = $scope.topicSummaries;\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/creator_dashboard/create_question_modal_directive.html\'),\n        backdrop: \'static\',\n        keyboard: false,\n        size: \'lg\',\n        resolve: {},\n        controller: [\n          \'$scope\', \'$uibModalInstance\', function(\n              $scope, $uibModalInstance) {\n            $scope.question = question;\n            $scope.topicId = null;\n            $scope.questionStateData = $scope.question.getStateData();\n            $scope.topicSummaries = topicSummaries;\n            $scope.misconceptions = [];\n            $scope.errorMessage = null;\n\n            $scope.isValidQuestion = function() {\n              var errorMessage = $scope.question.validate([]);\n              if (!$scope.topicId) {\n                $scope.errorMessage = \'Please choose a topic before submitting\';\n              } else if (errorMessage === false) {\n                $scope.errorMessage = null;\n              } else {\n                $scope.errorMessage = errorMessage;\n              }\n              return ($scope.question.validate([]) === false);\n            };\n\n            $scope.dismissModal = function() {\n              $uibModalInstance.dismiss();\n            };\n\n            $scope.createQuestion = function() {\n              var errorMessage = question.validate([]);\n              if (!$scope.topicId) {\n                $scope.errorMessage = \'Please choose a topic before submitting\';\n              } else if (errorMessage === false) {\n                $scope.errorMessage = null;\n                $uibModalInstance.close({\n                  question: question,\n                  topicId: $scope.topicId\n                });\n              } else {\n                $scope.errorMessage = errorMessage;\n              }\n            };\n          }\n        ]\n      }).result.then(function(result) {\n        var topicVersion = null;\n        for (var i = 0; i < topicSummaries.length; i++) {\n          if (topicSummaries[i].id === result.topicId) {\n            topicVersion = topicSummaries[i].version;\n            break;\n          }\n        }\n        if (!topicVersion) {\n          $log.error(\'Unable to match topic id selected with topic choices.\');\n        }\n        $http.post(\'/generalsuggestionhandler/\', {\n          suggestion_type: \'add_question\',\n          target_type: \'topic\',\n          target_id: result.topicId,\n          target_version_at_submission: topicVersion,\n          change: {\n            cmd: \'create_new_fully_specified_question\',\n            question_dict: result.question.toBackendDict(true),\n            skill_id: null\n          },\n          description: null\n        });\n      }, function() {\n        $log.error(\'Error while submitting question\');\n      });\n    };\n\n    $rootScope.loadingMessage = \'Loading\';\n    CreatorDashboardBackendApiService.fetchDashboardData().then(\n      function(response) {\n        var responseData = response.data;\n        $scope.currentSortType = EXPLORATIONS_SORT_BY_KEYS.OPEN_FEEDBACK;\n        $scope.currentSubscribersSortType = SUBSCRIPTION_SORT_BY_KEYS.USERNAME;\n        $scope.isCurrentSortDescending = true;\n        $scope.isCurrentSubscriptionSortDescending = true;\n        $scope.explorationsList = responseData.explorations_list;\n        $scope.collectionsList = responseData.collections_list;\n        $scope.subscribersList = responseData.subscribers_list;\n        $scope.dashboardStats = responseData.dashboard_stats;\n        $scope.lastWeekStats = responseData.last_week_stats;\n        $scope.myExplorationsView = responseData.display_preference;\n        $scope.topicSummaries = responseData.topic_summary_dicts;\n        var numberOfCreatedSuggestions = (\n          responseData.threads_for_created_suggestions_list.length);\n        var numberOfSuggestionsToReview = (\n          responseData.threads_for_suggestions_to_review_list.length);\n        $scope.mySuggestionsList = [];\n        for (var i = 0; i < numberOfCreatedSuggestions; i++) {\n          if (responseData.created_suggestions_list.length !==\n              numberOfCreatedSuggestions) {\n            $log.error(\'Number of suggestions does not match number of \' +\n                       \'suggestion threads\');\n          }\n          for (var j = 0; j < numberOfCreatedSuggestions; j++) {\n            var suggestion = SuggestionObjectFactory.createFromBackendDict(\n              responseData.created_suggestions_list[j]);\n            var threadDict = (\n              responseData.threads_for_created_suggestions_list[i]);\n            if (threadDict.thread_id === suggestion.getThreadId()) {\n              var suggestionThread = (\n                SuggestionThreadObjectFactory.createFromBackendDicts(\n                  threadDict, responseData.created_suggestions_list[j]));\n              $scope.mySuggestionsList.push(suggestionThread);\n            }\n          }\n        }\n        $scope.suggestionsToReviewList = [];\n        for (var i = 0; i < numberOfSuggestionsToReview; i++) {\n          if (responseData.suggestions_to_review_list.length !==\n              numberOfSuggestionsToReview) {\n            $log.error(\'Number of suggestions does not match number of \' +\n                       \'suggestion threads\');\n          }\n          for (var j = 0; j < numberOfSuggestionsToReview; j++) {\n            var suggestion = SuggestionObjectFactory.createFromBackendDict(\n              responseData.suggestions_to_review_list[j]);\n            var threadDict = (\n              responseData.threads_for_suggestions_to_review_list[i]);\n            if (threadDict.thread_id === suggestion.getThreadId()) {\n              var suggestionThread = (\n                SuggestionThreadObjectFactory.createFromBackendDicts(\n                  threadDict, responseData.suggestions_to_review_list[j]));\n              $scope.suggestionsToReviewList.push(suggestionThread);\n            }\n          }\n        }\n\n        if ($scope.dashboardStats && $scope.lastWeekStats) {\n          $scope.relativeChangeInTotalPlays = (\n            $scope.dashboardStats.total_plays - $scope.lastWeekStats.total_plays\n          );\n        }\n\n        if ($scope.explorationsList.length === 0 &&\n          $scope.collectionsList.length > 0) {\n          $scope.activeTab = \'myCollections\';\n        } else if ($scope.explorationsList.length === 0 && (\n          $scope.mySuggestionsList.length > 0 ||\n          $scope.suggestionsToReviewList.length > 0)) {\n          $scope.activeTab = \'suggestions\';\n        } else {\n          $scope.activeTab = \'myExplorations\';\n        }\n        $rootScope.loadingMessage = \'\';\n      },\n      function(errorResponse) {\n        if (FATAL_ERROR_CODES.indexOf(errorResponse.status) !== -1) {\n          AlertsService.addWarning(\'Failed to get dashboard data\');\n        }\n      }\n    );\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/OutcomeEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directives for the outcome editor.\n */\n\noppia.directive(\'outcomeEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        isEditable: \'&isEditable\',\n        displayFeedback: \'=\',\n        getOnSaveDestFn: \'&onSaveDest\',\n        getOnSaveFeedbackFn: \'&onSaveFeedback\',\n        getOnSaveCorrectnessLabelFn: \'&onSaveCorrectnessLabel\',\n        outcome: \'=outcome\',\n        suppressWarnings: \'&suppressWarnings\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/outcome_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$uibModal\', \'EditorStateService\',\n        \'stateInteractionIdService\', \'COMPONENT_NAME_FEEDBACK\',\n        \'ExplorationCorrectnessFeedbackService\', \'INTERACTION_SPECS\',\n        function(\n            $scope, $uibModal, EditorStateService,\n            stateInteractionIdService, COMPONENT_NAME_FEEDBACK,\n            ExplorationCorrectnessFeedbackService, INTERACTION_SPECS) {\n          $scope.editOutcomeForm = {};\n          $scope.feedbackEditorIsOpen = false;\n          $scope.destinationEditorIsOpen = false;\n          $scope.correctnessLabelEditorIsOpen = false;\n          // TODO(sll): Investigate whether this line can be removed, due to\n          // $scope.savedOutcome now being set in onExternalSave().\n          $scope.savedOutcome = angular.copy($scope.outcome);\n\n          $scope.COMPONENT_NAME_FEEDBACK = COMPONENT_NAME_FEEDBACK;\n\n          $scope.getCurrentInteractionId = function() {\n            return stateInteractionIdService.savedMemento;\n          };\n\n          // This returns false if the current interaction ID is null.\n          $scope.isCurrentInteractionLinear = function() {\n            var interactionId = $scope.getCurrentInteractionId();\n            return interactionId && INTERACTION_SPECS[interactionId].is_linear;\n          };\n\n          $scope.isCorrectnessFeedbackEnabled = function() {\n            return ExplorationCorrectnessFeedbackService.isEnabled();\n          };\n\n          var openMarkAllAudioAsNeedingUpdateModal = function() {\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/components/forms/\' +\n                \'mark_all_audio_as_needing_update_modal_directive.html\'),\n              backdrop: true,\n              resolve: {},\n              controller: \'MarkAllAudioAsNeedingUpdateController\'\n            }).result.then(function() {\n              $scope.outcome.feedback.markAllAudioAsNeedingUpdate();\n              $scope.savedOutcome.feedback = angular.copy(\n                $scope.outcome.feedback);\n              $scope.getOnSaveFeedbackFn()($scope.savedOutcome);\n            });\n          };\n\n          var onExternalSave = function() {\n            // The reason for this guard is because, when the editor page for an\n            // exploration is first opened, the \'initializeAnswerGroups\' event\n            // (which fires an \'externalSave\' event) only fires after the\n            // $scope.savedOutcome is set above. Until then, $scope.savedOutcome\n            // is undefined.\n            if ($scope.savedOutcome === undefined) {\n              $scope.savedOutcome = angular.copy($scope.outcome);\n            }\n\n            if ($scope.feedbackEditorIsOpen) {\n              if ($scope.editOutcomeForm.editFeedbackForm.$valid &&\n                  !$scope.invalidStateAfterFeedbackSave()) {\n                $scope.saveThisFeedback(false);\n              } else {\n                $scope.cancelThisFeedbackEdit();\n              }\n            }\n\n            if ($scope.destinationEditorIsOpen) {\n              if ($scope.editOutcomeForm.editDestForm.$valid &&\n                  !$scope.invalidStateAfterDestinationSave()) {\n                $scope.saveThisDestination();\n              } else {\n                $scope.cancelThisDestinationEdit();\n              }\n            }\n          };\n\n          $scope.$on(\'externalSave\', function() {\n            onExternalSave();\n          });\n\n          $scope.$on(\'onInteractionIdChanged\', function() {\n            onExternalSave();\n          });\n\n          $scope.isSelfLoop = function(outcome) {\n            return (\n              outcome &&\n              outcome.dest === EditorStateService.getActiveStateName());\n          };\n\n          $scope.getCurrentInteractionId = function() {\n            return stateInteractionIdService.savedMemento;\n          };\n\n          $scope.isSelfLoopWithNoFeedback = function(outcome) {\n            if (!outcome) {\n              return false;\n            }\n            return $scope.isSelfLoop(outcome) &&\n              !outcome.hasNonemptyFeedback();\n          };\n\n          $scope.invalidStateAfterFeedbackSave = function() {\n            var tmpOutcome = angular.copy($scope.savedOutcome);\n            tmpOutcome.feedback = angular.copy($scope.outcome.feedback);\n            return $scope.isSelfLoopWithNoFeedback(tmpOutcome);\n          };\n          $scope.invalidStateAfterDestinationSave = function() {\n            var tmpOutcome = angular.copy($scope.savedOutcome);\n            tmpOutcome.dest = angular.copy($scope.outcome.dest);\n            return $scope.isSelfLoopWithNoFeedback(tmpOutcome);\n          };\n          $scope.openFeedbackEditor = function() {\n            if ($scope.isEditable()) {\n              $scope.feedbackEditorIsOpen = true;\n            }\n          };\n\n          $scope.openDestinationEditor = function() {\n            if ($scope.isEditable()) {\n              $scope.destinationEditorIsOpen = true;\n            }\n          };\n\n          $scope.saveThisFeedback = function(fromClickSaveFeedbackButton) {\n            $scope.$broadcast(\'saveOutcomeFeedbackDetails\');\n            $scope.feedbackEditorIsOpen = false;\n            var contentHasChanged = (\n              $scope.savedOutcome.feedback.getHtml() !==\n              $scope.outcome.feedback.getHtml());\n            $scope.savedOutcome.feedback = angular.copy(\n              $scope.outcome.feedback);\n            if ($scope.savedOutcome.feedback.hasUnflaggedAudioTranslations() &&\n                fromClickSaveFeedbackButton && contentHasChanged) {\n              openMarkAllAudioAsNeedingUpdateModal();\n            }\n            $scope.getOnSaveFeedbackFn()($scope.savedOutcome);\n          };\n\n          $scope.saveThisDestination = function() {\n            $scope.$broadcast(\'saveOutcomeDestDetails\');\n            $scope.destinationEditorIsOpen = false;\n            $scope.savedOutcome.dest = angular.copy($scope.outcome.dest);\n            if (!$scope.isSelfLoop($scope.outcome)) {\n              $scope.outcome.refresherExplorationId = null;\n            }\n            $scope.savedOutcome.refresherExplorationId = (\n              $scope.outcome.refresherExplorationId);\n\n            $scope.getOnSaveDestFn()($scope.savedOutcome);\n          };\n\n          $scope.onChangeCorrectnessLabel = function() {\n            $scope.savedOutcome.labelledAsCorrect = (\n              $scope.outcome.labelledAsCorrect);\n\n            $scope.getOnSaveCorrectnessLabelFn()($scope.savedOutcome);\n          };\n\n          $scope.cancelThisFeedbackEdit = function() {\n            $scope.outcome.feedback = angular.copy(\n              $scope.savedOutcome.feedback);\n            $scope.feedbackEditorIsOpen = false;\n          };\n\n          $scope.cancelThisDestinationEdit = function() {\n            $scope.outcome.dest = angular.copy($scope.savedOutcome.dest);\n            $scope.outcome.refresherExplorationId = (\n              $scope.savedOutcome.refresherExplorationId);\n            $scope.destinationEditorIsOpen = false;\n          };\n\n\n          $scope.onAudioTranslationsStartEditAction = function() {\n            // Close the content editor and save all existing changes to the\n            // HTML.\n            if ($scope.feedbackEditorIsOpen) {\n              $scope.saveThisFeedback(false);\n            }\n          };\n\n          $scope.onAudioTranslationsEdited = function() {\n            $scope.saveThisFeedback(false);\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
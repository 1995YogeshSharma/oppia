from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/summary_tile/ExplorationSummaryTileDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Component for an exploration summary tile.\n */\n\noppia.directive(\'explorationSummaryTile\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        getCollectionId: \'&collectionId\',\n        getExplorationId: \'&explorationId\',\n        getExplorationTitle: \'&explorationTitle\',\n        getLastUpdatedMsec: \'&lastUpdatedMsec\',\n        getNumViews: \'&numViews\',\n        getObjective: \'&objective\',\n        getCategory: \'&category\',\n        getRatings: \'&ratings\',\n        getContributorsSummary: \'&contributorsSummary\',\n        getThumbnailIconUrl: \'&thumbnailIconUrl\',\n        getThumbnailBgColor: \'&thumbnailBgColor\',\n        // If this is not null, the new exploration opens in a new window when\n        // the summary tile is clicked.\n        openInNewWindow: \'@openInNewWindow\',\n        isCommunityOwned: \'&isCommunityOwned\',\n        // If this is not undefined, collection preview tile for mobile\n        // will be displayed.\n        isCollectionPreviewTile: \'@isCollectionPreviewTile\',\n        // If the screen width is below the threshold defined here, the mobile\n        // version of the summary tile is displayed. This attribute is optional:\n        // if it is not specified, it is treated as 0, which means that the\n        // desktop version of the summary tile is always displayed.\n        mobileCutoffPx: \'@mobileCutoffPx\',\n        isPlaylistTile: \'&isPlaylistTile\',\n        getParentExplorationIds: \'&parentExplorationIds\',\n        showLearnerDashboardIconsIfPossible: (\n          \'&showLearnerDashboardIconsIfPossible\'),\n        isContainerNarrow: \'&containerIsNarrow\',\n        isOwnedByCurrentUser: \'&activityIsOwnedByCurrentUser\',\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/summary_tile/\' +\n        \'exploration_summary_tile_directive.html\'),\n      link: function(scope, element) {\n        element.find(\'.exploration-summary-avatars\').on(\'mouseenter\',\n          function() {\n            element.find(\'.mask\').attr(\'class\',\n              \'exploration-summary-tile-mask mask\');\n            // As animation duration time may be 400ms, .stop(true) is used to\n            // prevent the effects queue falling behind the mouse movement.\n            // .hide(1) and .show(1) used to place the animation in the effects\n            // queue.\n            element.find(\'.avatars-num-minus-one\').stop(true).hide(1,\n              function() {\n                element.find(\'.all-avatars\').stop(true).slideDown();\n              }\n            );\n          }\n        );\n\n        element.find(\'.exploration-summary-avatars\').on(\'mouseleave\',\n          function() {\n            element.find(\'.mask\').attr(\'class\', \'top-section-mask mask\');\n            element.find(\'.all-avatars\').stop(true).slideUp(400, function() {\n              element.find(\'.avatars-num-minus-one\').stop(true).show(1);\n            });\n          }\n        );\n      },\n      controller: [\n        \'$scope\', \'$http\', \'$window\',\n        \'DateTimeFormatService\', \'RatingComputationService\',\n        \'WindowDimensionsService\', \'UrlService\',\n        function(\n            $scope, $http, $window,\n            DateTimeFormatService, RatingComputationService,\n            WindowDimensionsService, UrlService) {\n          $scope.userIsLoggedIn = GLOBALS.userIsLoggedIn;\n          $scope.ACTIVITY_TYPE_EXPLORATION = (\n            constants.ACTIVITY_TYPE_EXPLORATION);\n          var contributorsSummary = $scope.getContributorsSummary() || {};\n          $scope.contributors = Object.keys(\n            contributorsSummary).sort(\n            function(contributorUsername1, contributorUsername2) {\n              var commitsOfContributor1 = contributorsSummary[\n                contributorUsername1].num_commits;\n              var commitsOfContributor2 = contributorsSummary[\n                contributorUsername2].num_commits;\n              return commitsOfContributor2 - commitsOfContributor1;\n            }\n          );\n\n          $scope.isRefresherExploration = false;\n          if ($scope.getParentExplorationIds()) {\n            $scope.isRefresherExploration = (\n              $scope.getParentExplorationIds().length > 0);\n          }\n\n          $scope.avatarsList = [];\n\n          $scope.MAX_AVATARS_TO_DISPLAY = 5;\n\n          $scope.setHoverState = function(hoverState) {\n            $scope.explorationIsCurrentlyHoveredOver = hoverState;\n          };\n\n          $scope.loadParentExploration = function() {\n            $window.location.href = $scope.getExplorationLink();\n          };\n\n          $scope.getAverageRating = function() {\n            if (!$scope.getRatings()) {\n              return null;\n            }\n            return RatingComputationService.computeAverageRating(\n              $scope.getRatings());\n          };\n\n          $scope.getLastUpdatedDatetime = function() {\n            if (!$scope.getLastUpdatedMsec()) {\n              return null;\n            }\n            return DateTimeFormatService.getLocaleAbbreviatedDatetimeString(\n              $scope.getLastUpdatedMsec());\n          };\n\n          $scope.getExplorationLink = function() {\n            if (!$scope.getExplorationId()) {\n              return \'#\';\n            } else {\n              var result = \'/explore/\' + $scope.getExplorationId();\n              var urlParams = UrlService.getUrlParams();\n              var parentExplorationIds = $scope.getParentExplorationIds();\n\n              var collectionIdToAdd = $scope.getCollectionId();\n              // Replace the collection ID with the one in the URL if it exists\n              // in urlParams.\n              if (parentExplorationIds &&\n                  urlParams.hasOwnProperty(\'collection_id\')) {\n                collectionIdToAdd = urlParams.collection_id;\n              }\n\n              if (collectionIdToAdd) {\n                result = UrlService.addField(\n                  result, \'collection_id\', collectionIdToAdd);\n              }\n              if (parentExplorationIds) {\n                for (var i = 0; i < parentExplorationIds.length - 1; i++) {\n                  result = UrlService.addField(\n                    result, \'parent\', parentExplorationIds[i]);\n                }\n              }\n              return result;\n            }\n          };\n\n          if (!$scope.mobileCutoffPx) {\n            $scope.mobileCutoffPx = 0;\n          }\n          $scope.isWindowLarge = (\n            WindowDimensionsService.getWidth() >= $scope.mobileCutoffPx);\n\n          WindowDimensionsService.registerOnResizeHook(function() {\n            $scope.isWindowLarge = (\n              WindowDimensionsService.getWidth() >= $scope.mobileCutoffPx);\n            $scope.$apply();\n          });\n\n          $scope.getCompleteThumbnailIconUrl = function() {\n            return UrlInterpolationService.getStaticImageUrl(\n              $scope.getThumbnailIconUrl());\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
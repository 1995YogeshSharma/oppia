from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/utilities/LanguageUtilService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utility service for language operations.\n */\n\noppia.factory(\'LanguageUtilService\', [\n  \'AudioLanguageObjectFactory\', \'AutogeneratedAudioLanguageObjectFactory\',\n  \'SUPPORTED_AUDIO_LANGUAGES\', \'AUTOGENERATED_AUDIO_LANGUAGES\',\n  \'BrowserCheckerService\',\n  function(\n      AudioLanguageObjectFactory, AutogeneratedAudioLanguageObjectFactory,\n      SUPPORTED_AUDIO_LANGUAGES, AUTOGENERATED_AUDIO_LANGUAGES,\n      BrowserCheckerService) {\n    var supportedAudioLanguageList = SUPPORTED_AUDIO_LANGUAGES;\n    var autogeneratedAudioLanguageList = AUTOGENERATED_AUDIO_LANGUAGES;\n\n    var supportedAudioLanguages = {};\n    var autogeneratedAudioLanguagesByExplorationLanguageCode = {};\n    var autogeneratedAudioLanguagesByAutogeneratedLanguageCode = {};\n\n    var allAudioLanguageCodes = (\n      supportedAudioLanguageList.map(function(audioLanguage) {\n        return audioLanguage.id;\n      }));\n\n    supportedAudioLanguageList.forEach(function(audioLanguageDict) {\n      supportedAudioLanguages[audioLanguageDict.id] =\n        AudioLanguageObjectFactory.createFromDict(audioLanguageDict);\n    });\n\n    autogeneratedAudioLanguageList.forEach(\n      function(autogeneratedAudioLanguageDict) {\n        autogeneratedAudioLanguage =\n          AutogeneratedAudioLanguageObjectFactory.createFromDict(\n            autogeneratedAudioLanguageDict);\n\n        autogeneratedAudioLanguagesByExplorationLanguageCode[\n          autogeneratedAudioLanguage.explorationLanguage] =\n            autogeneratedAudioLanguage;\n\n        autogeneratedAudioLanguagesByAutogeneratedLanguageCode[\n          autogeneratedAudioLanguage.id] =\n            autogeneratedAudioLanguage;\n      }\n    );\n\n    var audioLanguagesCount = allAudioLanguageCodes.length;\n\n    return {\n      getAudioLanguagesCount: function() {\n        return audioLanguagesCount;\n      },\n      getAllAudioLanguageCodes: function() {\n        return allAudioLanguageCodes;\n      },\n      getAudioLanguageDescription: function(audioLanguageCode) {\n        return supportedAudioLanguages[audioLanguageCode].description;\n      },\n      // Given a list of audio language codes, returns the complement list, i.e.\n      // the list of audio language codes not in the input list.\n      getComplementAudioLanguageCodes: function(audioLanguageCodes) {\n        return allAudioLanguageCodes.filter(function(languageCode) {\n          return audioLanguageCodes.indexOf(languageCode) === -1;\n        });\n      },\n      getLanguageCodesRelatedToAudioLanguageCode: function(audioLanguageCode) {\n        return supportedAudioLanguages[audioLanguageCode].relatedLanguages;\n      },\n      supportsAutogeneratedAudio: function(explorationLanguageCode) {\n        return (\n          BrowserCheckerService.supportsSpeechSynthesis() &&\n          autogeneratedAudioLanguagesByExplorationLanguageCode\n            .hasOwnProperty(explorationLanguageCode));\n      },\n      isAutogeneratedAudioLanguage: function(audioLanguageCode) {\n        return autogeneratedAudioLanguagesByAutogeneratedLanguageCode\n          .hasOwnProperty(audioLanguageCode);\n      },\n      getAutogeneratedAudioLanguage: function(explorationLanguageCode) {\n        return autogeneratedAudioLanguagesByExplorationLanguageCode[\n          explorationLanguageCode];\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
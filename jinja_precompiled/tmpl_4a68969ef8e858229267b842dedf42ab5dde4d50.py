from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'app.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Initialization and basic configuration for the Oppia module.\n */\n// TODO(sll): Remove the check for window.GLOBALS. This check is currently\n// only there so that the Karma tests run, since it looks like Karma doesn\'t\n// \'see\' the GLOBALS variable that is defined in base.html. We should fix this\n// in order to make the testing and production environments match.\nvar oppia = angular.module(\n  \'oppia\', [\n    \'ngMaterial\', \'ngAnimate\', \'ngAudio\', \'ngSanitize\', \'ngTouch\', \'ngResource\',\n    \'ui.bootstrap\', \'ui.sortable\', \'infinite-scroll\', \'ngJoyRide\', \'ngImgCrop\',\n    \'ui.validate\', \'textAngular\', \'pascalprecht.translate\', \'ngCookies\',\n    \'toastr\', \'headroom\'\n  ].concat(\n    window.GLOBALS ? (window.GLOBALS.ADDITIONAL_ANGULAR_MODULES || []) : []));\n\nfor (var constantName in constants) {\n  oppia.constant(constantName, constants[constantName]);\n}\n\noppia.constant(\n  \'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE\', \'/explorationsummarieshandler/data\');\n\n// We use a slash because this character is forbidden in a state name.\noppia.constant(\'PLACEHOLDER_OUTCOME_DEST\', \'/\');\noppia.constant(\'INTERACTION_DISPLAY_MODE_INLINE\', \'inline\');\noppia.constant(\'OBJECT_EDITOR_URL_PREFIX\', \'/object_editor_template/\');\n// Feature still in development.\n// NOTE TO DEVELOPERS: This should be synchronized with the value in feconf.\noppia.constant(\'ENABLE_ML_CLASSIFIERS\', false);\n// Feature still in development.\noppia.constant(\'INFO_MESSAGE_SOLUTION_IS_INVALID\',\n  \'The current solution does not lead to another card.\');\noppia.constant(\'INFO_MESSAGE_SOLUTION_IS_VALID\',\n  \'The solution is now valid!\');\noppia.constant(\'INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_CURRENT_RULE\',\n  \'The current solution is no longer valid.\');\noppia.constant(\'PARAMETER_TYPES\', {\n  REAL: \'Real\',\n  UNICODE_STRING: \'UnicodeString\'\n});\noppia.constant(\'ACTION_ACCEPT_SUGGESTION\', \'accept\');\noppia.constant(\'ACTION_REJECT_SUGGESTION\', \'reject\');\n\n// The maximum number of nodes to show in a row of the state graph.\noppia.constant(\'MAX_NODES_PER_ROW\', 4);\n// The following variable must be at least 3. It represents the maximum length,\n// in characters, for the name of each node label in the state graph.\noppia.constant(\'MAX_NODE_LABEL_LENGTH\', 15);\n\n// If an $http request fails with the following error codes, a warning is\n// displayed.\noppia.constant(\'FATAL_ERROR_CODES\', [400, 401, 404, 500]);\n\n// Do not modify these, for backwards-compatibility reasons.\noppia.constant(\'COMPONENT_NAME_CONTENT\', \'content\');\noppia.constant(\'COMPONENT_NAME_HINT\', \'hint\');\noppia.constant(\'COMPONENT_NAME_SOLUTION\', \'solution\');\noppia.constant(\'COMPONENT_NAME_FEEDBACK\', \'feedback\');\n\n// Add RTE extensions to textAngular toolbar options.\noppia.config([\'$provide\', function($provide) {\n  $provide.decorator(\'taOptions\', [\n    \'$delegate\', \'$document\', \'$uibModal\', \'$timeout\', \'FocusManagerService\',\n    \'taRegisterTool\', \'RteHelperService\', \'AlertsService\',\n    \'ExplorationContextService\', \'PAGE_CONTEXT\',\n    \'UrlInterpolationService\',\n    function(\n        taOptions, $document, $uibModal, $timeout, FocusManagerService,\n        taRegisterTool, RteHelperService, AlertsService,\n        ExplorationContextService, PAGE_CONTEXT,\n        UrlInterpolationService) {\n      taOptions.disableSanitizer = true;\n      taOptions.forceTextAngularSanitize = false;\n      taOptions.classes.textEditor = \'form-control oppia-rte-content\';\n      taOptions.setup.textEditorSetup = function($element) {\n        $timeout(function() {\n          $element.trigger(\'focus\');\n        });\n      };\n\n      // The refocusFn arg is a function that restores focus to the text editor\n      // after exiting the modal, and moves the cursor back to where it was\n      // before the modal was opened.\n      var _openCustomizationModal = function(\n          customizationArgSpecs, attrsCustomizationArgsDict, onSubmitCallback,\n          onDismissCallback, refocusFn) {\n        $document[0].execCommand(\'enableObjectResizing\', false, false);\n        var modalDialog = $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/components/forms/customize_rte_component_modal_directive.html\'),\n          backdrop: \'static\',\n          resolve: {},\n          controller: [\n            \'$scope\', \'$uibModalInstance\', \'$timeout\',\n            function($scope, $uibModalInstance, $timeout) {\n              $scope.customizationArgSpecs = customizationArgSpecs;\n\n              // Without this code, the focus will remain in the background RTE\n              // even after the modal loads. This switches the focus to a\n              // temporary field in the modal which is then removed from the\n              // DOM.\n              // TODO(sll): Make this switch to the first input field in the\n              // modal instead.\n              $scope.modalIsLoading = true;\n              FocusManagerService.setFocus(\'tmpFocusPoint\');\n              $timeout(function() {\n                $scope.modalIsLoading = false;\n              });\n\n              $scope.tmpCustomizationArgs = [];\n              for (var i = 0; i < customizationArgSpecs.length; i++) {\n                var caName = customizationArgSpecs[i].name;\n                $scope.tmpCustomizationArgs.push({\n                  name: caName,\n                  value: (\n                    attrsCustomizationArgsDict.hasOwnProperty(caName) ?\n                      attrsCustomizationArgsDict[caName] :\n                      customizationArgSpecs[i].default_value)\n                });\n              }\n\n              $scope.cancel = function() {\n                $uibModalInstance.dismiss(\'cancel\');\n              };\n\n              $scope.save = function() {\n                $scope.$broadcast(\'externalSave\');\n\n                var customizationArgsDict = {};\n                for (var i = 0; i < $scope.tmpCustomizationArgs.length; i++) {\n                  var caName = $scope.tmpCustomizationArgs[i].name;\n                  customizationArgsDict[caName] = (\n                    $scope.tmpCustomizationArgs[i].value);\n                }\n\n                $uibModalInstance.close(customizationArgsDict);\n              };\n            }\n          ]\n        });\n\n        modalDialog.result.then(onSubmitCallback, onDismissCallback);\n        // \'finally\' is a JS keyword. If it is just used in its ".finally" form,\n        // the minification process throws an error.\n        modalDialog.result[\'finally\'](refocusFn);\n      };\n\n      RteHelperService.getRichTextComponents().forEach(function(componentDefn) {\n        var buttonDisplay = RteHelperService.createToolbarIcon(componentDefn);\n        var canUseFs = ExplorationContextService.getPageContext() ===\n          PAGE_CONTEXT.EDITOR;\n\n        taRegisterTool(componentDefn.id, {\n          display: buttonDisplay.outerHTML,\n          tooltiptext: componentDefn.tooltip,\n          disabled: function() {\n            // Disable components that affect fs for non-editors.\n            return !canUseFs && componentDefn.requiresFs;\n          },\n          onElementSelect: {\n            element: \'img\',\n            filter: function(elt) {\n              return elt.hasClass(\'oppia-noninteractive-\' + componentDefn.id);\n            },\n            action: function(event, $element) {\n              event.preventDefault();\n              var textAngular = this;\n\n              if (!canUseFs && componentDefn.requiresFs) {\n                var FS_UNAUTHORIZED_WARNING = \'Unfortunately, only \' +\n                  \'exploration authors can make changes involving files.\';\n                AlertsService.addWarning(FS_UNAUTHORIZED_WARNING);\n                // Without this, the view will not update to show the warning.\n                textAngular.$editor().$parent.$apply();\n                return;\n              }\n\n              // Move the cursor to be immediately after the clicked widget.\n              // This prevents users from overwriting the widget.\n              var elRange = rangy.createRange();\n              elRange.setStartAfter($element.get(0));\n              elRange.setEndAfter($element.get(0));\n              var elSelection = rangy.getSelection();\n              elSelection.removeAllRanges();\n              elSelection.addRange(elRange);\n              var savedSelection = rangy.saveSelection();\n\n              // Temporarily pauses sanitizer so rangy markers save position\n              textAngular.$editor().$parent.isCustomizationModalOpen = true;\n              _openCustomizationModal(\n                componentDefn.customizationArgSpecs,\n                RteHelperService.createCustomizationArgDictFromAttrs(\n                  $element[0].attributes),\n                function(customizationArgsDict) {\n                  var el = RteHelperService.createRteElement(\n                    componentDefn, customizationArgsDict);\n                  $element[0].parentNode.replaceChild(el, $element[0]);\n                  textAngular.$editor().updateTaBindtaTextElement();\n                },\n                function() {},\n                function() {\n                  // Re-enables the sanitizer now that the modal is closed.\n                  textAngular.$editor(\n                  ).$parent.isCustomizationModalOpen = false;\n                  textAngular.$editor().displayElements.text[0].focus();\n                  rangy.restoreSelection(savedSelection);\n                });\n              return false;\n            }\n          },\n          action: function() {\n            var textAngular = this;\n            var savedSelection = rangy.saveSelection();\n            textAngular.$editor().wrapSelection(\n              \'insertHtml\', \'<span class="insertionPoint"></span>\');\n\n            // Temporarily pauses sanitizer so rangy markers save position.\n            textAngular.$editor().$parent.isCustomizationModalOpen = true;\n            _openCustomizationModal(\n              componentDefn.customizationArgSpecs,\n              {},\n              function(customizationArgsDict) {\n                var el = RteHelperService.createRteElement(\n                  componentDefn, customizationArgsDict);\n                var insertionPoint = (\n                  textAngular.$editor().displayElements.text[0].querySelector(\n                    \'.insertionPoint\'));\n                var parent = insertionPoint.parentNode;\n                parent.replaceChild(el, insertionPoint);\n                textAngular.$editor().updateTaBindtaTextElement();\n              },\n              function() {\n                // Clean up the insertion point if no widget was inserted.\n                var insertionPoint = (\n                  textAngular.$editor().displayElements.text[0].querySelector(\n                    \'.insertionPoint\'));\n                if (insertionPoint !== null) {\n                  insertionPoint.remove();\n                }\n              },\n              function() {\n                // Re-enables the sanitizer now that the modal is closed.\n                textAngular.$editor().$parent.isCustomizationModalOpen = false;\n                textAngular.$editor().displayElements.text[0].focus();\n                rangy.restoreSelection(savedSelection);\n              }\n            );\n          }\n        });\n      });\n\n      return taOptions;\n    }\n  ]);\n}]);\n\noppia.config([\n  \'$compileProvider\', \'$httpProvider\', \'$interpolateProvider\',\n  \'$locationProvider\', \'$cookiesProvider\',\n  function(\n      $compileProvider, $httpProvider, $interpolateProvider,\n      $locationProvider, $cookiesProvider) {\n    // This improves performance by disabling debug data. For more details,\n    // see https://code.angularjs.org/1.5.5/docs/guide/production\n    $compileProvider.debugInfoEnabled(false);\n\n    // Set the AngularJS interpolators as <[ and ]>, to not conflict with\n    // Jinja2 templates.\n    $interpolateProvider.startSymbol(\'<[\');\n    $interpolateProvider.endSymbol(\']>\');\n\n    // Prevent the search page from reloading if the search query is changed.\n    $locationProvider.html5Mode(false);\n    if (window.location.pathname === \'/search/find\') {\n      $locationProvider.html5Mode(true);\n    }\n\n    // Prevent storing duplicate cookies for translation language.\n    $cookiesProvider.defaults.path = \'/\';\n\n    // Set default headers for POST and PUT requests.\n    $httpProvider.defaults.headers.post = {\n      \'Content-Type\': \'application/x-www-form-urlencoded\'\n    };\n    $httpProvider.defaults.headers.put = {\n      \'Content-Type\': \'application/x-www-form-urlencoded\'\n    };\n\n    // Add an interceptor to convert requests to strings and to log and show\n    // warnings for error responses.\n    $httpProvider.interceptors.push([\n      \'$q\', \'$log\', \'AlertsService\', function($q, $log, AlertsService) {\n        return {\n          request: function(config) {\n            if (config.data) {\n              config.data = $.param({\n                csrf_token: GLOBALS.csrf_token,\n                payload: JSON.stringify(config.data),\n                source: document.URL\n              }, true);\n            }\n            return config;\n          },\n          responseError: function(rejection) {\n            // A rejection status of -1 seems to indicate (it\'s hard to find\n            // documentation) that the response has not completed,\n            // which can occur if the user navigates away from the page\n            // while the response is pending, This should not be considered\n            // an error.\n            if (rejection.status !== -1) {\n              $log.error(rejection.data);\n\n              var warningMessage = \'Error communicating with server.\';\n              if (rejection.data && rejection.data.error) {\n                warningMessage = rejection.data.error;\n              }\n              AlertsService.addWarning(warningMessage);\n            }\n            return $q.reject(rejection);\n          }\n        };\n      }\n    ]);\n  }\n]);\n\noppia.config([\'$provide\', function($provide) {\n  $provide.decorator(\'$log\', [\'$delegate\', function($delegate) {\n    var _originalError = $delegate.error;\n\n    if (window.GLOBALS && !window.GLOBALS.DEV_MODE) {\n      $delegate.log = function() {};\n      $delegate.info = function() {};\n      // TODO(sll): Send errors (and maybe warnings) to the backend.\n      $delegate.warn = function() { };\n      $delegate.error = function(message) {\n        if (String(message).indexOf(\'$digest already in progress\') === -1) {\n          _originalError(message);\n        }\n      };\n      // This keeps angular-mocks happy (in tests).\n      $delegate.error.logs = [];\n    }\n\n    return $delegate;\n  }]);\n}]);\n\noppia.config([\'toastrConfig\', function(toastrConfig) {\n  angular.extend(toastrConfig, {\n    allowHtml: false,\n    iconClasses: {\n      error: \'toast-error\',\n      info: \'toast-info\',\n      success: \'toast-success\',\n      warning: \'toast-warning\'\n    },\n    positionClass: \'toast-bottom-right\',\n    messageClass: \'toast-message\',\n    progressBar: false,\n    tapToDismiss: true,\n    titleClass: \'toast-title\'\n  });\n}]);\n\n// Overwrite the built-in exceptionHandler service to log errors to the backend\n// (so that they can be fixed).\noppia.factory(\'$exceptionHandler\', [\'$log\', function($log) {\n  return function(exception, cause) {\n    var messageAndSourceAndStackTrace = [\n      \'\',\n      \'Cause: \' + cause,\n      exception.message,\n      String(exception.stack),\n      \'    at URL: \' + window.location.href\n    ].join(\'\\n\');\n\n    // Catch all errors, to guard against infinite recursive loops.\n    try {\n      // We use jQuery here instead of Angular\'s $http, since the latter\n      // creates a circular dependency.\n      $.ajax({\n        type: \'POST\',\n        url: \'/frontend_errors\',\n        data: $.param({\n          csrf_token: GLOBALS.csrf_token,\n          payload: JSON.stringify({\n            error: messageAndSourceAndStackTrace\n          }),\n          source: document.URL\n        }, true),\n        contentType: \'application/x-www-form-urlencoded\',\n        dataType: \'text\',\n        async: true\n      });\n    } catch (loggingError) {\n      $log.warn(\'Error logging failed.\');\n    }\n\n    $log.error.apply($log, arguments);\n  };\n}]);\n\noppia.constant(\'LABEL_FOR_CLEARING_FOCUS\', \'labelForClearingFocus\');\n\n// Service for sending events to Google Analytics.\n//\n// Note that events are only sent if the CAN_SEND_ANALYTICS_EVENTS flag is\n// turned on. This flag must be turned on explicitly by the application\n// owner in feconf.py.\noppia.factory(\'siteAnalyticsService\', [\'$window\', function($window) {\n  var CAN_SEND_ANALYTICS_EVENTS = constants.CAN_SEND_ANALYTICS_EVENTS;\n  // For definitions of the various arguments, please see:\n  // developers.google.com/analytics/devguides/collection/analyticsjs/events\n  var _sendEventToGoogleAnalytics = function(\n      eventCategory, eventAction, eventLabel) {\n    if ($window.ga && CAN_SEND_ANALYTICS_EVENTS) {\n      $window.ga(\'send\', \'event\', eventCategory, eventAction, eventLabel);\n    }\n  };\n\n  // For definitions of the various arguments, please see:\n  // developers.google.com/analytics/devguides/collection/analyticsjs/\n  //   social-interactions\n  var _sendSocialEventToGoogleAnalytics = function(\n      network, action, targetUrl) {\n    if ($window.ga && CAN_SEND_ANALYTICS_EVENTS) {\n      $window.ga(\'send\', \'social\', network, action, targetUrl);\n    }\n  };\n\n  return {\n    // The srcElement refers to the element on the page that is clicked.\n    registerStartLoginEvent: function(srcElement) {\n      _sendEventToGoogleAnalytics(\n        \'LoginButton\', \'click\', $window.location.pathname + \' \' + srcElement);\n    },\n    registerNewSignupEvent: function() {\n      _sendEventToGoogleAnalytics(\'SignupButton\', \'click\', \'\');\n    },\n    registerClickBrowseLibraryButtonEvent: function() {\n      _sendEventToGoogleAnalytics(\n        \'BrowseLibraryButton\', \'click\', $window.location.pathname);\n    },\n    registerGoToDonationSiteEvent: function(donationSiteName) {\n      _sendEventToGoogleAnalytics(\n        \'GoToDonationSite\', \'click\', donationSiteName);\n    },\n    registerApplyToTeachWithOppiaEvent: function() {\n      _sendEventToGoogleAnalytics(\'ApplyToTeachWithOppia\', \'click\', \'\');\n    },\n    registerClickCreateExplorationButtonEvent: function() {\n      _sendEventToGoogleAnalytics(\n        \'CreateExplorationButton\', \'click\', $window.location.pathname);\n    },\n    registerCreateNewExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\'NewExploration\', \'create\', explorationId);\n    },\n    registerCreateNewExplorationInCollectionEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'NewExplorationFromCollection\', \'create\', explorationId);\n    },\n    registerCreateNewCollectionEvent: function(collectionId) {\n      _sendEventToGoogleAnalytics(\'NewCollection\', \'create\', collectionId);\n    },\n    registerCommitChangesToPrivateExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'CommitToPrivateExploration\', \'click\', explorationId);\n    },\n    registerShareExplorationEvent: function(network) {\n      _sendSocialEventToGoogleAnalytics(\n        network, \'share\', $window.location.pathname);\n    },\n    registerShareCollectionEvent: function(network) {\n      _sendSocialEventToGoogleAnalytics(\n        network, \'share\', $window.location.pathname);\n    },\n    registerOpenEmbedInfoEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\'EmbedInfoModal\', \'open\', explorationId);\n    },\n    registerCommitChangesToPublicExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'CommitToPublicExploration\', \'click\', explorationId);\n    },\n    // Metrics for tutorial on first creating exploration\n    registerTutorialModalOpenEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'TutorialModalOpen\', \'open\', explorationId);\n    },\n    registerDeclineTutorialModalEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'DeclineTutorialModal\', \'click\', explorationId);\n    },\n    registerAcceptTutorialModalEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'AcceptTutorialModal\', \'click\', explorationId);\n    },\n    // Metrics for visiting the help center\n    registerClickHelpButtonEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'ClickHelpButton\', \'click\', explorationId);\n    },\n    registerVisitHelpCenterEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'VisitHelpCenter\', \'click\', explorationId);\n    },\n    registerOpenTutorialFromHelpCenterEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'OpenTutorialFromHelpCenter\', \'click\', explorationId);\n    },\n    // Metrics for exiting the tutorial\n    registerSkipTutorialEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'SkipTutorial\', \'click\', explorationId);\n    },\n    registerFinishTutorialEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FinishTutorial\', \'click\', explorationId);\n    },\n    // Metrics for first time editor use\n    registerEditorFirstEntryEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstEnterEditor\', \'open\', explorationId);\n    },\n    registerFirstOpenContentBoxEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstOpenContentBox\', \'open\', explorationId);\n    },\n    registerFirstSaveContentEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstSaveContent\', \'click\', explorationId);\n    },\n    registerFirstClickAddInteractionEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstClickAddInteraction\', \'click\', explorationId);\n    },\n    registerFirstSelectInteractionTypeEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstSelectInteractionType\', \'click\', explorationId);\n    },\n    registerFirstSaveInteractionEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstSaveInteraction\', \'click\', explorationId);\n    },\n    registerFirstSaveRuleEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstSaveRule\', \'click\', explorationId);\n    },\n    registerFirstCreateSecondStateEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstCreateSecondState\', \'create\', explorationId);\n    },\n    // Metrics for publishing explorations\n    registerSavePlayableExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'SavePlayableExploration\', \'save\', explorationId);\n    },\n    registerOpenPublishExplorationModalEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'PublishExplorationModal\', \'open\', explorationId);\n    },\n    registerPublishExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'PublishExploration\', \'click\', explorationId);\n    },\n    registerVisitOppiaFromIframeEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'VisitOppiaFromIframe\', \'click\', explorationId);\n    },\n    registerNewCard: function(cardNum) {\n      if (cardNum <= 10 || cardNum % 10 === 0) {\n        _sendEventToGoogleAnalytics(\'PlayerNewCard\', \'click\', cardNum);\n      }\n    },\n    registerFinishExploration: function() {\n      _sendEventToGoogleAnalytics(\'PlayerFinishExploration\', \'click\', \'\');\n    },\n    registerOpenFractionsFromLandingPageEvent: function(viewerType) {\n      _sendEventToGoogleAnalytics(\n        \'OpenFractionsFromLandingPage\', \'click\', viewerType);\n    }\n  };\n}]);\n\n// Service for assembling extension tags (for interactions).\noppia.factory(\'extensionTagAssemblerService\', [\n  \'$filter\', \'HtmlEscaperService\', function($filter, HtmlEscaperService) {\n    return {\n      formatCustomizationArgAttrs: function(element, customizationArgSpecs) {\n        for (var caSpecName in customizationArgSpecs) {\n          var caSpecValue = customizationArgSpecs[caSpecName].value;\n          element.attr(\n            $filter(\'camelCaseToHyphens\')(caSpecName) + \'-with-value\',\n            HtmlEscaperService.objToEscapedJson(caSpecValue));\n        }\n        return element;\n      }\n    };\n  }\n]);\n\n// Add a String.prototype.trim() polyfill for IE8.\nif (typeof String.prototype.trim !== \'function\') {\n  String.prototype.trim = function() {\n    return this.replace(/^\\s+|\\s+$/g, \'\');\n  };\n}\n\n// Add an Object.create() polyfill for IE8.\nif (typeof Object.create !== \'function\') {\n  (function() {\n    var F = function() {};\n    Object.create = function(o) {\n      if (arguments.length > 1) {\n        throw Error(\'Second argument for Object.create() is not supported\');\n      }\n      if (o === null) {\n        throw Error(\'Cannot set a null [[Prototype]]\');\n      }\n      if (typeof o !== \'object\') {\n        throw TypeError(\'Argument must be an object\');\n      }\n      F.prototype = o;\n      return new F();\n    };\n  })();\n}\n\n// Add a Number.isInteger() polyfill for IE.\nNumber.isInteger = Number.isInteger || function(value) {\n  return (\n    typeof value === \'number\' && isFinite(value) &&\n    Math.floor(value) === value);\n};'

blocks = {}
debug_info = ''
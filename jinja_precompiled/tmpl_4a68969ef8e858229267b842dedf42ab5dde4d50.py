from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'app.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Initialization and basic configuration for the Oppia module.\n */\n// TODO(sll): Remove the check for window.GLOBALS. This check is currently\n// only there so that the Karma tests run, since it looks like Karma doesn\'t\n// \'see\' the GLOBALS variable that is defined in base.html. We should fix this\n// in order to make the testing and production environments match.\nvar oppia = angular.module(\n  \'oppia\', [\n    \'ngMaterial\', \'ngAnimate\', \'ngAudio\', \'angularAudioRecorder\', \'ngSanitize\',\n    \'ngTouch\', \'ngResource\', \'ui.bootstrap\', \'ui.tree\', \'ui.sortable\',\n    \'infinite-scroll\', \'ngJoyRide\', \'ngImgCrop\', \'ui.validate\',\n    \'pascalprecht.translate\', \'ngCookies\', \'toastr\', \'headroom\', \'dndLists\'\n  ].concat(\n    window.GLOBALS ? (window.GLOBALS.ADDITIONAL_ANGULAR_MODULES || []) : []));\n\nfor (var constantName in constants) {\n  oppia.constant(constantName, constants[constantName]);\n}\n\noppia.constant(\n  \'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE\', \'/explorationsummarieshandler/data\');\n\noppia.constant(\'EXPLORATION_AND_SKILL_ID_PATTERN\', /^[a-zA-Z0-9_-]+$/);\n\n// We use a slash because this character is forbidden in a state name.\noppia.constant(\'PLACEHOLDER_OUTCOME_DEST\', \'/\');\noppia.constant(\'INTERACTION_DISPLAY_MODE_INLINE\', \'inline\');\noppia.constant(\'LOADING_INDICATOR_URL\', \'/activity/loadingIndicator.gif\');\noppia.constant(\'OBJECT_EDITOR_URL_PREFIX\', \'/object_editor_template/\');\n// Feature still in development.\n// NOTE TO DEVELOPERS: This should be synchronized with the value in feconf.\noppia.constant(\'ENABLE_ML_CLASSIFIERS\', false);\n// Feature still in development.\noppia.constant(\'INFO_MESSAGE_SOLUTION_IS_INVALID\',\n  \'The current solution does not lead to another card.\');\noppia.constant(\'INFO_MESSAGE_SOLUTION_IS_VALID\',\n  \'The solution is now valid!\');\noppia.constant(\'INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_CURRENT_RULE\',\n  \'The current solution is no longer valid.\');\noppia.constant(\'PARAMETER_TYPES\', {\n  REAL: \'Real\',\n  UNICODE_STRING: \'UnicodeString\'\n});\noppia.constant(\'ACTION_ACCEPT_SUGGESTION\', \'accept\');\noppia.constant(\'ACTION_REJECT_SUGGESTION\', \'reject\');\n\n// The maximum number of nodes to show in a row of the state graph.\noppia.constant(\'MAX_NODES_PER_ROW\', 4);\n// The following variable must be at least 3. It represents the maximum length,\n// in characters, for the name of each node label in the state graph.\noppia.constant(\'MAX_NODE_LABEL_LENGTH\', 15);\n\n// If an $http request fails with the following error codes, a warning is\n// displayed.\noppia.constant(\'FATAL_ERROR_CODES\', [400, 401, 404, 500]);\n\n// Do not modify these, for backwards-compatibility reasons.\noppia.constant(\'COMPONENT_NAME_CONTENT\', \'content\');\noppia.constant(\'COMPONENT_NAME_HINT\', \'hint\');\noppia.constant(\'COMPONENT_NAME_SOLUTION\', \'solution\');\noppia.constant(\'COMPONENT_NAME_FEEDBACK\', \'feedback\');\noppia.constant(\'COMPONENT_NAME_DEFAULT_OUTCOME\', \'default_outcome\');\n\n// Enables recording playthroughs from learner sessions.\noppia.constant(\'CURRENT_ACTION_SCHEMA_VERSION\', 1);\noppia.constant(\'CURRENT_ISSUE_SCHEMA_VERSION\', 1);\noppia.constant(\'EARLY_QUIT_THRESHOLD_IN_SECS\', 45);\noppia.constant(\'NUM_INCORRECT_ANSWERS_THRESHOLD\', 3);\noppia.constant(\'NUM_REPEATED_CYCLES_THRESHOLD\', 3);\noppia.constant(\'MAX_PLAYTHROUGHS_FOR_ISSUE\', 5);\n\noppia.constant(\'ACTION_TYPE_EXPLORATION_START\', \'ExplorationStart\');\noppia.constant(\'ACTION_TYPE_ANSWER_SUBMIT\', \'AnswerSubmit\');\noppia.constant(\'ACTION_TYPE_EXPLORATION_QUIT\', \'ExplorationQuit\');\n\noppia.constant(\'ISSUE_TYPE_EARLY_QUIT\', \'EarlyQuit\');\noppia.constant(\n  \'ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS\', \'MultipleIncorrectSubmissions\');\noppia.constant(\'ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS\', \'CyclicStateTransitions\');\noppia.constant(\'SITE_NAME\', \'Oppia.org\');\n\noppia.constant(\'DEFAULT_PROFILE_IMAGE_PATH\', \'/avatar/user_blue_72px.png\');\n\n// Dynamically generate CKEditor widgets for the rich text components.\noppia.run([\n  \'$timeout\', \'$compile\', \'$rootScope\', \'$uibModal\', \'RteHelperService\',\n  \'HtmlEscaperService\',\n  function($timeout, $compile, $rootScope, $uibModal, RteHelperService,\n      HtmlEscaperService) {\n    var _RICH_TEXT_COMPONENTS = RteHelperService.getRichTextComponents();\n    _RICH_TEXT_COMPONENTS.forEach(function(componentDefn) {\n      // The name of the CKEditor widget corresponding to this component.\n      var ckName = \'oppia\' + componentDefn.id;\n\n      // Check to ensure that a plugin is not registered more than once.\n      if (CKEDITOR.plugins.registered[ckName] !== undefined) {\n        return;\n      }\n      var tagName = \'oppia-noninteractive-\' + componentDefn.id;\n      var customizationArgSpecs = componentDefn.customizationArgSpecs;\n      var isInline = RteHelperService.isInlineComponent(componentDefn.id);\n\n      // Inline components will be wrapped in a span, while block components\n      // will be wrapped in a div.\n      if (isInline) {\n        var componentTemplate = \'<span type="\' + tagName + \'">\' +\n                                \'<\' + tagName + \'></\' + tagName + \'>\' +\n                                \'</span>\';\n      } else {\n        var componentTemplate = \'<div class="oppia-rte-component-container" \' +\n                                \'type="\' + tagName + \'">\' +\n                                \'<\' + tagName + \'></\' + tagName + \'>\' +\n                                \'<div class="component-overlay"></div>\' +\n                                \'</div>\';\n      }\n      CKEDITOR.plugins.add(ckName, {\n        init: function(editor) {\n          // Create the widget itself.\n          editor.widgets.add(ckName, {\n            button: componentDefn.tooltip,\n            inline: isInline,\n            template: componentTemplate,\n            edit: function(event) {\n              editor.fire(\'lockSnapshot\', {\n                dontUpdate: true\n              });\n              // Prevent default action since we are using our own edit modal.\n              event.cancel();\n              // Save this for creating the widget later.\n              var container = this.wrapper.getParent(true);\n              var that = this;\n              var customizationArgs = {};\n              customizationArgSpecs.forEach(function(spec) {\n                customizationArgs[spec.name] = that.data[spec.name] ||\n                                               spec.default_value;\n              });\n\n              RteHelperService._openCustomizationModal(\n                customizationArgSpecs,\n                customizationArgs,\n                function(customizationArgsDict) {\n                  for (var arg in customizationArgsDict) {\n                    if (customizationArgsDict.hasOwnProperty(arg)) {\n                      that.setData(arg, customizationArgsDict[arg]);\n                    }\n                  }\n                  /**\n                  * This checks whether the widget has already been inited\n                  * and set up before (if we are editing a widget that\n                  * has already been inserted into the RTE, we do not\n                  * need to finalizeCreation again).\n                  */\n                  if (!that.isReady()) {\n                    // Actually create the widget, if we have not already.\n                    editor.widgets.finalizeCreation(container);\n                  }\n\n                  /**\n                   * Need to manually $compile so the directive renders.\n                   * Note that.element.$ is the native DOM object\n                   * represented by that.element. See:\n                   * http://docs.ckeditor.com/#!/api/CKEDITOR.dom.element\n                   */\n                  $compile($(that.element.$).contents())($rootScope);\n                  // $timeout ensures we do not take the undo snapshot until\n                  // after angular finishes its changes to the component tags.\n                  $timeout(function() {\n                    // For inline widgets, place the caret after the\n                    // widget so the user can continue typing immediately.\n                    if (isInline) {\n                      var range = editor.createRange();\n                      var widgetContainer = that.element.getParent();\n                      range.moveToPosition(\n                        widgetContainer, CKEDITOR.POSITION_AFTER_END);\n                      editor.getSelection().selectRanges([range]);\n                      // Another timeout needed so the undo snapshot is\n                      // not taken until the caret is in the right place.\n                      $timeout(function() {\n                        editor.fire(\'unlockSnapshot\');\n                        editor.fire(\'saveSnapshot\');\n                      });\n                    } else {\n                      editor.fire(\'unlockSnapshot\');\n                      editor.fire(\'saveSnapshot\');\n                    }\n                  });\n                },\n                function() {},\n                function() {});\n            },\n            /**\n             * This is how the widget will be represented in the outputs source,\n             * so it is called when we call editor.getData().\n             */\n            downcast: function(element) {\n              // Clear the angular rendering content, which we don\'t\n              // want in the output.\n              element.children[0].setHtml(\'\');\n              // Return just the rich text component, without its wrapper.\n              return element.children[0];\n            },\n            /**\n             * This is how a widget is recognized by CKEditor, for example\n             * when we first load data in. Returns a boolean,\n             * true iff "element" is an instance of this widget.\n             */\n            upcast: function(element) {\n              return (element.name !== \'p\' &&\n                      element.children.length > 0 &&\n                      element.children[0].name === tagName);\n            },\n            data: function() {\n              var that = this;\n              // Set attributes of component according to data values.\n              customizationArgSpecs.forEach(function(spec) {\n                that.element.getChild(0).setAttribute(\n                  spec.name + \'-with-value\',\n                  HtmlEscaperService.objToEscapedJson(\n                    that.data[spec.name] || \'\'));\n              });\n            },\n            init: function() {\n              editor.fire(\'lockSnapshot\', {\n                dontUpdate: true\n              });\n              var that = this;\n              var isMissingAttributes = false;\n              // On init, read values from component attributes and save them.\n              customizationArgSpecs.forEach(function(spec) {\n                var value = that.element.getChild(0).getAttribute(\n                  spec.name + \'-with-value\');\n                if (value) {\n                  that.setData(\n                    spec.name, HtmlEscaperService.escapedJsonToObj(value));\n                } else {\n                  isMissingAttributes = true;\n                }\n              });\n\n              if (!isMissingAttributes) {\n                // Need to manually $compile so the directive renders.\n                $compile($(this.element.$).contents())($rootScope);\n              }\n              $timeout(function() {\n                editor.fire(\'unlockSnapshot\');\n                editor.fire(\'saveSnapshot\');\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n]);\n\noppia.config([\n  \'$compileProvider\', \'$httpProvider\', \'$interpolateProvider\',\n  \'$locationProvider\', \'$cookiesProvider\',\n  function(\n      $compileProvider, $httpProvider, $interpolateProvider,\n      $locationProvider, $cookiesProvider) {\n    // This improves performance by disabling debug data. For more details,\n    // see https://code.angularjs.org/1.5.5/docs/guide/production\n    $compileProvider.debugInfoEnabled(false);\n\n    // Set the AngularJS interpolators as <[ and ]>, to not conflict with\n    // Jinja2 templates.\n    $interpolateProvider.startSymbol(\'<[\');\n    $interpolateProvider.endSymbol(\']>\');\n\n    // Prevent the search page from reloading if the search query is changed.\n    $locationProvider.html5Mode(false);\n    if (window.location.pathname === \'/search/find\') {\n      $locationProvider.html5Mode(true);\n    }\n\n    // Prevent storing duplicate cookies for translation language.\n    $cookiesProvider.defaults.path = \'/\';\n\n    // Set default headers for POST and PUT requests.\n    $httpProvider.defaults.headers.post = {\n      \'Content-Type\': \'application/x-www-form-urlencoded\'\n    };\n    $httpProvider.defaults.headers.put = {\n      \'Content-Type\': \'application/x-www-form-urlencoded\'\n    };\n\n    // Add an interceptor to convert requests to strings and to log and show\n    // warnings for error responses.\n    $httpProvider.interceptors.push([\n      \'$q\', \'$log\', \'AlertsService\', function($q, $log, AlertsService) {\n        return {\n          request: function(config) {\n            if (config.data) {\n              config.data = $.param({\n                csrf_token: GLOBALS.csrf_token,\n                payload: JSON.stringify(config.data),\n                source: document.URL\n              }, true);\n            }\n            return config;\n          },\n          responseError: function(rejection) {\n            // A rejection status of -1 seems to indicate (it\'s hard to find\n            // documentation) that the response has not completed,\n            // which can occur if the user navigates away from the page\n            // while the response is pending, This should not be considered\n            // an error.\n            if (rejection.status !== -1) {\n              $log.error(rejection.data);\n\n              var warningMessage = \'Error communicating with server.\';\n              if (rejection.data && rejection.data.error) {\n                warningMessage = rejection.data.error;\n              }\n              AlertsService.addWarning(warningMessage);\n            }\n            return $q.reject(rejection);\n          }\n        };\n      }\n    ]);\n  }\n]);\n\noppia.config([\'$provide\', function($provide) {\n  $provide.decorator(\'$log\', [\'$delegate\', function($delegate) {\n    var _originalError = $delegate.error;\n\n    if (window.GLOBALS && !window.GLOBALS.DEV_MODE) {\n      $delegate.log = function() {};\n      $delegate.info = function() {};\n      // TODO(sll): Send errors (and maybe warnings) to the backend.\n      $delegate.warn = function() { };\n      $delegate.error = function(message) {\n        if (String(message).indexOf(\'$digest already in progress\') === -1) {\n          _originalError(message);\n        }\n      };\n      // This keeps angular-mocks happy (in tests).\n      $delegate.error.logs = [];\n    }\n\n    return $delegate;\n  }]);\n}]);\n\noppia.config([\'toastrConfig\', function(toastrConfig) {\n  angular.extend(toastrConfig, {\n    allowHtml: false,\n    iconClasses: {\n      error: \'toast-error\',\n      info: \'toast-info\',\n      success: \'toast-success\',\n      warning: \'toast-warning\'\n    },\n    positionClass: \'toast-bottom-right\',\n    messageClass: \'toast-message\',\n    progressBar: false,\n    tapToDismiss: true,\n    titleClass: \'toast-title\'\n  });\n}]);\n\noppia.config([\'recorderServiceProvider\', function(recorderServiceProvider) {\n  recorderServiceProvider.forceSwf(false);\n  recorderServiceProvider.withMp3Conversion(true, {\n    bitRate: 128\n  });\n}]);\n\n// Overwrite the built-in exceptionHandler service to log errors to the backend\n// (so that they can be fixed).\noppia.factory(\'$exceptionHandler\', [\'$log\', function($log) {\n  return function(exception, cause) {\n    var messageAndSourceAndStackTrace = [\n      \'\',\n      \'Cause: \' + cause,\n      exception.message,\n      String(exception.stack),\n      \'    at URL: \' + window.location.href\n    ].join(\'\\n\');\n\n    // Catch all errors, to guard against infinite recursive loops.\n    try {\n      // We use jQuery here instead of Angular\'s $http, since the latter\n      // creates a circular dependency.\n      $.ajax({\n        type: \'POST\',\n        url: \'/frontend_errors\',\n        data: $.param({\n          csrf_token: GLOBALS.csrf_token,\n          payload: JSON.stringify({\n            error: messageAndSourceAndStackTrace\n          }),\n          source: document.URL\n        }, true),\n        contentType: \'application/x-www-form-urlencoded\',\n        dataType: \'text\',\n        async: true\n      });\n    } catch (loggingError) {\n      $log.warn(\'Error logging failed.\');\n    }\n\n    $log.error.apply($log, arguments);\n  };\n}]);\n\noppia.constant(\'LABEL_FOR_CLEARING_FOCUS\', \'labelForClearingFocus\');\n\n// Service for sending events to Google Analytics.\n//\n// Note that events are only sent if the CAN_SEND_ANALYTICS_EVENTS flag is\n// turned on. This flag must be turned on explicitly by the application\n// owner in feconf.py.\noppia.factory(\'siteAnalyticsService\', [\'$window\', function($window) {\n  var CAN_SEND_ANALYTICS_EVENTS = constants.CAN_SEND_ANALYTICS_EVENTS;\n  // For definitions of the various arguments, please see:\n  // developers.google.com/analytics/devguides/collection/analyticsjs/events\n  var _sendEventToGoogleAnalytics = function(\n      eventCategory, eventAction, eventLabel) {\n    if ($window.ga && CAN_SEND_ANALYTICS_EVENTS) {\n      $window.ga(\'send\', \'event\', eventCategory, eventAction, eventLabel);\n    }\n  };\n\n  // For definitions of the various arguments, please see:\n  // developers.google.com/analytics/devguides/collection/analyticsjs/\n  //   social-interactions\n  var _sendSocialEventToGoogleAnalytics = function(\n      network, action, targetUrl) {\n    if ($window.ga && CAN_SEND_ANALYTICS_EVENTS) {\n      $window.ga(\'send\', \'social\', network, action, targetUrl);\n    }\n  };\n\n  return {\n    // The srcElement refers to the element on the page that is clicked.\n    registerStartLoginEvent: function(srcElement) {\n      _sendEventToGoogleAnalytics(\n        \'LoginButton\', \'click\', $window.location.pathname + \' \' + srcElement);\n    },\n    registerNewSignupEvent: function() {\n      _sendEventToGoogleAnalytics(\'SignupButton\', \'click\', \'\');\n    },\n    registerClickBrowseLibraryButtonEvent: function() {\n      _sendEventToGoogleAnalytics(\n        \'BrowseLibraryButton\', \'click\', $window.location.pathname);\n    },\n    registerGoToDonationSiteEvent: function(donationSiteName) {\n      _sendEventToGoogleAnalytics(\n        \'GoToDonationSite\', \'click\', donationSiteName);\n    },\n    registerApplyToTeachWithOppiaEvent: function() {\n      _sendEventToGoogleAnalytics(\'ApplyToTeachWithOppia\', \'click\', \'\');\n    },\n    registerClickCreateExplorationButtonEvent: function() {\n      _sendEventToGoogleAnalytics(\n        \'CreateExplorationButton\', \'click\', $window.location.pathname);\n    },\n    registerCreateNewExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\'NewExploration\', \'create\', explorationId);\n    },\n    registerCreateNewExplorationInCollectionEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'NewExplorationFromCollection\', \'create\', explorationId);\n    },\n    registerCreateNewCollectionEvent: function(collectionId) {\n      _sendEventToGoogleAnalytics(\'NewCollection\', \'create\', collectionId);\n    },\n    registerCommitChangesToPrivateExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'CommitToPrivateExploration\', \'click\', explorationId);\n    },\n    registerShareExplorationEvent: function(network) {\n      _sendSocialEventToGoogleAnalytics(\n        network, \'share\', $window.location.pathname);\n    },\n    registerShareCollectionEvent: function(network) {\n      _sendSocialEventToGoogleAnalytics(\n        network, \'share\', $window.location.pathname);\n    },\n    registerOpenEmbedInfoEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\'EmbedInfoModal\', \'open\', explorationId);\n    },\n    registerCommitChangesToPublicExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'CommitToPublicExploration\', \'click\', explorationId);\n    },\n    // Metrics for tutorial on first creating exploration\n    registerTutorialModalOpenEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'TutorialModalOpen\', \'open\', explorationId);\n    },\n    registerDeclineTutorialModalEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'DeclineTutorialModal\', \'click\', explorationId);\n    },\n    registerAcceptTutorialModalEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'AcceptTutorialModal\', \'click\', explorationId);\n    },\n    // Metrics for visiting the help center\n    registerClickHelpButtonEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'ClickHelpButton\', \'click\', explorationId);\n    },\n    registerVisitHelpCenterEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'VisitHelpCenter\', \'click\', explorationId);\n    },\n    registerOpenTutorialFromHelpCenterEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'OpenTutorialFromHelpCenter\', \'click\', explorationId);\n    },\n    // Metrics for exiting the tutorial\n    registerSkipTutorialEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'SkipTutorial\', \'click\', explorationId);\n    },\n    registerFinishTutorialEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FinishTutorial\', \'click\', explorationId);\n    },\n    // Metrics for first time editor use\n    registerEditorFirstEntryEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstEnterEditor\', \'open\', explorationId);\n    },\n    registerFirstOpenContentBoxEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstOpenContentBox\', \'open\', explorationId);\n    },\n    registerFirstSaveContentEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstSaveContent\', \'click\', explorationId);\n    },\n    registerFirstClickAddInteractionEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstClickAddInteraction\', \'click\', explorationId);\n    },\n    registerFirstSelectInteractionTypeEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstSelectInteractionType\', \'click\', explorationId);\n    },\n    registerFirstSaveInteractionEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstSaveInteraction\', \'click\', explorationId);\n    },\n    registerFirstSaveRuleEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstSaveRule\', \'click\', explorationId);\n    },\n    registerFirstCreateSecondStateEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'FirstCreateSecondState\', \'create\', explorationId);\n    },\n    // Metrics for publishing explorations\n    registerSavePlayableExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'SavePlayableExploration\', \'save\', explorationId);\n    },\n    registerOpenPublishExplorationModalEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'PublishExplorationModal\', \'open\', explorationId);\n    },\n    registerPublishExplorationEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'PublishExploration\', \'click\', explorationId);\n    },\n    registerVisitOppiaFromIframeEvent: function(explorationId) {\n      _sendEventToGoogleAnalytics(\n        \'VisitOppiaFromIframe\', \'click\', explorationId);\n    },\n    registerNewCard: function(cardNum) {\n      if (cardNum <= 10 || cardNum % 10 === 0) {\n        _sendEventToGoogleAnalytics(\'PlayerNewCard\', \'click\', cardNum);\n      }\n    },\n    registerFinishExploration: function() {\n      _sendEventToGoogleAnalytics(\'PlayerFinishExploration\', \'click\', \'\');\n    },\n    registerOpenFractionsFromLandingPageEvent: function(viewerType) {\n      _sendEventToGoogleAnalytics(\n        \'OpenFractionsFromLandingPage\', \'click\', viewerType);\n    }\n  };\n}]);\n\n// Service for assembling extension tags (for interactions).\noppia.factory(\'extensionTagAssemblerService\', [\n  \'$filter\', \'HtmlEscaperService\', function($filter, HtmlEscaperService) {\n    return {\n      formatCustomizationArgAttrs: function(element, customizationArgSpecs) {\n        for (var caSpecName in customizationArgSpecs) {\n          var caSpecValue = customizationArgSpecs[caSpecName].value;\n          element.attr(\n            $filter(\'camelCaseToHyphens\')(caSpecName) + \'-with-value\',\n            HtmlEscaperService.objToEscapedJson(caSpecValue));\n        }\n        return element;\n      }\n    };\n  }\n]);\n\n// Add a String.prototype.trim() polyfill for IE8.\nif (typeof String.prototype.trim !== \'function\') {\n  String.prototype.trim = function() {\n    return this.replace(/^\\s+|\\s+$/g, \'\');\n  };\n}\n\n// Add an Object.create() polyfill for IE8.\nif (typeof Object.create !== \'function\') {\n  (function() {\n    var F = function() {};\n    Object.create = function(o) {\n      if (arguments.length > 1) {\n        throw Error(\'Second argument for Object.create() is not supported\');\n      }\n      if (o === null) {\n        throw Error(\'Cannot set a null [[Prototype]]\');\n      }\n      if (typeof o !== \'object\') {\n        throw TypeError(\'Argument must be an object\');\n      }\n      F.prototype = o;\n      return new F();\n    };\n  })();\n}\n\n// Add a Number.isInteger() polyfill for IE.\nNumber.isInteger = Number.isInteger || function(value) {\n  return (\n    typeof value === \'number\' && isFinite(value) &&\n    Math.floor(value) === value);\n};'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/editor/undo_redo/ChangeObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating instances of frontend change\n * domain objects. This frontend object represents both CollectionChange and\n * ExplorationChange backend domain objects.\n */\n\n// TODO(bhenning): Consolidate the backend ExplorationChange and\n// CollectionChange domain objects.\n\noppia.factory(\'ChangeObjectFactory\', [function() {\n  var Change = function(\n      backendChangeObject, applyChangeToObject, reverseChangeToObject) {\n    this._backendChangeObject = angular.copy(backendChangeObject);\n    this._applyChangeToObject = applyChangeToObject;\n    this._reverseChangeToObject = reverseChangeToObject;\n  };\n\n  // Instance methods\n\n  // Returns the JSON object which represents a backend python dict of this\n  // change. Changes to this object are not reflected in this domain object.\n  Change.prototype.getBackendChangeObject = function() {\n    return angular.copy(this._backendChangeObject);\n  };\n\n  // Applies this change to the related object (such as a frontend collection\n  // domain object).\n  Change.prototype.applyChange = function(domainObject) {\n    this._applyChangeToObject(this._backendChangeObject, domainObject);\n  };\n\n  // Reverse-applies this change to the related object (such as a frontend\n  // collection domain object). This method should only be used to reverse a\n  // change that was previously applied by calling the applyChange() method.\n  Change.prototype.reverseChange = function(domainObject) {\n    this._reverseChangeToObject(this._backendChangeObject, domainObject);\n  };\n\n  // Static class methods. Note that "this" is not available in static\n  // contexts. The first parameter is a JSON representation of a backend\n  // python dict for the given change. The second parameter is a callback\n  // which will receive both the backend change object dictionary (as\n  // read-only) and the domain object in which to apply the change. The third\n  // parameter is a callback which behaves in the same way as the second\n  // parameter and takes the same inputs, except it should reverse the change\n  // for the provided domain object.\n  Change.create = function(\n      backendChangeObject, applyChangeToObject, reverseChangeToObject) {\n    return new Change(\n      backendChangeObject, applyChangeToObject, reverseChangeToObject);\n  };\n\n  return Change;\n}]);'

blocks = {}
debug_info = ''
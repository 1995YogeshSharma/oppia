from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ContentIdsToAudioTranslationsObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of\n * ContentIdsToAudioTranslations domain objects.\n */\n\noppia.factory(\'ContentIdsToAudioTranslationsObjectFactory\', [\n  \'AudioTranslationObjectFactory\', \'LanguageUtilService\',\n  \'COMPONENT_NAME_FEEDBACK\', function(AudioTranslationObjectFactory,\n      LanguageUtilService, COMPONENT_NAME_FEEDBACK) {\n    var ContentIdsToAudioTranslations = function(\n        contentIdsToAudioTranslations) {\n      this._contentIdsToAudioTranslations = contentIdsToAudioTranslations;\n    };\n\n    ContentIdsToAudioTranslations.prototype.getAllContentId = function() {\n      return Object.keys(this._contentIdsToAudioTranslations);\n    };\n\n    ContentIdsToAudioTranslations.prototype.getBindableAudioTranslations = (\n      function(contentId) {\n        return this._contentIdsToAudioTranslations[contentId];\n      });\n\n    ContentIdsToAudioTranslations.prototype.getAudioTranslation = function(\n        contentId, langCode) {\n      return this._contentIdsToAudioTranslations[contentId][\n        langCode];\n    };\n\n    ContentIdsToAudioTranslations.prototype.markAllAudioAsNeedingUpdate = (\n      function(contentId) {\n        var audioTranslations = this._contentIdsToAudioTranslations[contentId];\n        for (var languageCode in audioTranslations) {\n          audioTranslations[languageCode].markAsNeedingUpdate();\n        }\n      });\n\n    ContentIdsToAudioTranslations.prototype.getAudioLanguageCodes = function(\n        contentId) {\n      return Object.keys(this._contentIdsToAudioTranslations[contentId]);\n    };\n\n    ContentIdsToAudioTranslations.prototype.hasAudioTranslations = function(\n        contentId) {\n      return this.getAudioLanguageCodes(contentId).length > 0;\n    };\n\n    ContentIdsToAudioTranslations.prototype.hasUnflaggedAudioTranslations = (\n      function(contentId) {\n        var audioTranslations = this._contentIdsToAudioTranslations[contentId];\n        for (var languageCode in audioTranslations) {\n          if (!audioTranslations[languageCode].needsUpdate) {\n            return true;\n          }\n        }\n        return false;\n      });\n\n    ContentIdsToAudioTranslations.prototype.isFullyTranslated = function(\n        contentId) {\n      var audioTranslations = this._contentIdsToAudioTranslations[contentId];\n      var numLanguages = Object.keys(audioTranslations).length;\n      return (numLanguages === LanguageUtilService.getAudioLanguagesCount());\n    };\n\n    ContentIdsToAudioTranslations.prototype.addContentId = function(contentId) {\n      if (this._contentIdsToAudioTranslations.hasOwnProperty(contentId)) {\n        throw Error(\'Trying to add duplicate content id.\');\n      }\n      this._contentIdsToAudioTranslations[contentId] = {};\n    };\n\n    ContentIdsToAudioTranslations.prototype.deleteContentId = function(\n        contentId) {\n      if (!this._contentIdsToAudioTranslations.hasOwnProperty(contentId)) {\n        throw Error(\'Unable to find the given content id.\');\n      }\n      delete this._contentIdsToAudioTranslations[contentId];\n    };\n\n    ContentIdsToAudioTranslations.prototype.deleteAllFeedbackContentId =\n      function() {\n        var ContentIdList = this.getAllContentId();\n        var searchKey = COMPONENT_NAME_FEEDBACK + \'_\';\n        for (index in ContentIdList) {\n          if (ContentIdList[index].indexOf(searchKey) === 0) {\n            this.deleteContentId(ContentIdList[index]);\n          }\n        }\n      };\n\n    ContentIdsToAudioTranslations.prototype.addAudioTranslation = function(\n        contentId, languageCode, filename, fileSizeBytes) {\n      var audioTranslations = this._contentIdsToAudioTranslations[contentId];\n      if (audioTranslations.hasOwnProperty(languageCode)) {\n        throw Error(\'Trying to add duplicate language code.\');\n      }\n      audioTranslations[languageCode] = (\n        AudioTranslationObjectFactory.createNew(filename, fileSizeBytes));\n    };\n\n    ContentIdsToAudioTranslations.prototype.deleteAudioTranslation = function(\n        contentId, languageCode) {\n      var audioTranslations = this._contentIdsToAudioTranslations[contentId];\n      if (!audioTranslations.hasOwnProperty(languageCode)) {\n        throw Error(\n          \'Trying to remove non-existing translation for language code \' +\n          languageCode);\n      }\n      delete audioTranslations[languageCode];\n    };\n\n    ContentIdsToAudioTranslations.prototype.toggleNeedsUpdateAttribute = (\n      function(contentId, languageCode) {\n        var audioTranslations = this._contentIdsToAudioTranslations[contentId];\n        audioTranslations[languageCode].toggleNeedsUpdateAttribute();\n      });\n\n    ContentIdsToAudioTranslations.prototype.toBackendDict = function() {\n      var contentIdsToAudioTranslationsDict = {};\n      for (contentId in this._contentIdsToAudioTranslations) {\n        var audioTanslations = this._contentIdsToAudioTranslations[contentId];\n        var audioTranslationsDict = {};\n        Object.keys(audioTanslations).forEach(function(lang){\n          audioTranslationsDict[lang] = audioTanslations[lang].toBackendDict();\n        });\n        contentIdsToAudioTranslationsDict[contentId] = audioTranslationsDict;\n      }\n\n      return contentIdsToAudioTranslationsDict;\n    };\n\n    ContentIdsToAudioTranslations.createFromBackendDict = function(\n        contentIdsToAudioTranslationsDict) {\n      var contentIdsToAudioTranslations = {};\n      Object.keys(contentIdsToAudioTranslationsDict).forEach(function(\n          contentId) {\n        var audioTanslationsDict = (\n          contentIdsToAudioTranslationsDict[contentId]);\n        var audioTranslations = {};\n        Object.keys(audioTanslationsDict).forEach(function(langCode){\n          audioTranslations[langCode] = (\n            AudioTranslationObjectFactory.createFromBackendDict(\n              audioTanslationsDict[langCode]));\n        });\n        contentIdsToAudioTranslations[contentId] = audioTranslations;\n      });\n\n      return new ContentIdsToAudioTranslations(contentIdsToAudioTranslations);\n    };\n\n    return ContentIdsToAudioTranslations;\n  }\n]);'

blocks = {}
debug_info = ''
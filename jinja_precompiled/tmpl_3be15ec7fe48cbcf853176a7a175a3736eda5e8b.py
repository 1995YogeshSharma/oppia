from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/SubtitledHtmlObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of SubtitledHtml\n * domain objects.\n */\n\noppia.factory(\'SubtitledHtmlObjectFactory\', [\n  \'AudioTranslationObjectFactory\', \'LanguageUtilService\',\n  function(AudioTranslationObjectFactory, LanguageUtilService) {\n    var SubtitledHtml = function(html, audioTranslations) {\n      this._html = html;\n      this._audioTranslations = audioTranslations;\n    };\n\n    SubtitledHtml.prototype.getHtml = function() {\n      return this._html;\n    };\n\n    SubtitledHtml.prototype.setHtml = function(newHtml) {\n      // TODO(sll): Consider sanitizing here.\n      // TODO(sll): At this point do we invalidate the existing audio\n      // translations? In particular, saving empty HTML should invalidate all\n      // audio.\n      this._html = newHtml;\n    };\n\n    SubtitledHtml.prototype.hasNoHtml = function() {\n      return !this._html;\n    };\n\n    SubtitledHtml.prototype.getBindableAudioTranslations = function() {\n      return this._audioTranslations;\n    };\n\n    SubtitledHtml.prototype.getAudioTranslation = function(languageCode) {\n      return this._audioTranslations[languageCode];\n    };\n\n    SubtitledHtml.prototype.markAllAudioAsNeedingUpdate = function() {\n      for (var languageCode in this._audioTranslations) {\n        this._audioTranslations[languageCode].markAsNeedingUpdate();\n      }\n    };\n\n    SubtitledHtml.prototype.getAudioLanguageCodes = function() {\n      return Object.keys(this._audioTranslations);\n    };\n\n    SubtitledHtml.prototype.hasAudioTranslations = function() {\n      return this.getAudioLanguageCodes().length > 0;\n    };\n\n    SubtitledHtml.prototype.hasUnflaggedAudioTranslations = function() {\n      for (var languageCode in this._audioTranslations) {\n        if (!this._audioTranslations[languageCode].needsUpdate) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    SubtitledHtml.prototype.isFullyTranslated = function() {\n      var numLanguages = Object.keys(this._audioTranslations).length;\n      return (numLanguages === LanguageUtilService.getAudioLanguagesCount());\n    };\n\n    SubtitledHtml.prototype.addAudioTranslation = function(\n        languageCode, filename, fileSizeBytes) {\n      if (this._audioTranslations.hasOwnProperty(languageCode)) {\n        throw Error(\'Trying to add duplicate language code.\');\n      }\n      this._audioTranslations[languageCode] = (\n        AudioTranslationObjectFactory.createNew(filename, fileSizeBytes));\n    };\n\n    SubtitledHtml.prototype.deleteAudioTranslation = function(languageCode) {\n      if (!this._audioTranslations.hasOwnProperty(languageCode)) {\n        throw Error(\n          \'Trying to remove non-existing translation for language code \' +\n          languageCode);\n      }\n      delete this._audioTranslations[languageCode];\n    };\n\n    SubtitledHtml.prototype.toggleNeedsUpdateAttribute = function(\n        languageCode) {\n      this._audioTranslations[languageCode].toggleNeedsUpdateAttribute();\n    };\n\n    SubtitledHtml.prototype.toBackendDict = function() {\n      var audioTranslationsBackendDict = {};\n      for (var languageCode in this._audioTranslations) {\n        audioTranslationsBackendDict[languageCode] = (\n          this._audioTranslations[languageCode].toBackendDict());\n      }\n\n      return {\n        html: this._html,\n        audio_translations: audioTranslationsBackendDict\n      };\n    };\n\n    SubtitledHtml.prototype.isEmpty = function() {\n      return (\n        this.hasNoHtml() && Object.keys(this._audioTranslations).length === 0);\n    };\n\n    SubtitledHtml.createFromBackendDict = function(subtitledHtmlBackendDict) {\n      var audioTranslationsBackendDict = (\n        subtitledHtmlBackendDict.audio_translations);\n\n      var audioTranslations = {};\n      for (var languageCode in audioTranslationsBackendDict) {\n        audioTranslations[languageCode] = (\n          AudioTranslationObjectFactory.createFromBackendDict(\n            audioTranslationsBackendDict[languageCode]));\n      }\n\n      return new SubtitledHtml(\n        subtitledHtmlBackendDict.html, audioTranslations);\n    };\n\n    SubtitledHtml.createDefault = function(html) {\n      return new SubtitledHtml(html, {});\n    };\n\n    return SubtitledHtml;\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/ExplorationEditorTab.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the Editor tab in the exploration editor page.\n */\n\noppia.controller(\'ExplorationEditorTab\', [\n  \'$scope\', \'$rootScope\', \'StateEditorService\', \'ExplorationStatesService\',\n  \'ExplorationAdvancedFeaturesService\', \'UrlInterpolationService\',\n  \'ExplorationInitStateNameService\', \'GraphDataService\', \'RouterService\',\n  \'ExplorationCorrectnessFeedbackService\', \'AlertsService\',\n  \'ContextService\', \'ExplorationWarningsService\',\n  function(\n      $scope, $rootScope, StateEditorService, ExplorationStatesService,\n      ExplorationAdvancedFeaturesService, UrlInterpolationService,\n      ExplorationInitStateNameService, GraphDataService, RouterService,\n      ExplorationCorrectnessFeedbackService, AlertsService,\n      ContextService, ExplorationWarningsService) {\n    $scope.areParametersEnabled = (\n      ExplorationAdvancedFeaturesService.areParametersEnabled);\n\n    $scope.interactionIsShown = false;\n\n    $scope.$on(\'refreshStateEditor\', function() {\n      $scope.initStateEditor();\n    });\n\n    $scope.$watch(ExplorationStatesService.getStates, function() {\n      if (ExplorationStatesService.getStates()) {\n        StateEditorService.setStateNames(\n          ExplorationStatesService.getStateNames());\n      }\n    }, true);\n\n    $scope.getStateContentPlaceholder = function() {\n      if (\n        StateEditorService.getActiveStateName() ===\n        ExplorationInitStateNameService.savedMemento) {\n        return (\n          \'This is the first card of your exploration. Use this space to \' +\n          \'introduce your topic and engage the learner, then ask them a \' +\n          \'question.\');\n      } else {\n        return (\n          \'You can speak to the learner here, then ask them a question.\');\n      }\n    };\n\n    $scope.addState = function(newStateName) {\n      ExplorationStatesService.addState(newStateName, null);\n    };\n\n    $scope.refreshWarnings = function() {\n      ExplorationWarningsService.updateWarnings();\n    };\n\n    $scope.initStateEditor = function() {\n      $scope.stateName = StateEditorService.getActiveStateName();\n      StateEditorService.setStateNames(\n        ExplorationStatesService.getStateNames());\n      StateEditorService.setCorrectnessFeedbackEnabled(\n        ExplorationCorrectnessFeedbackService.isEnabled());\n      StateEditorService.setInQuestionMode(false);\n      var stateData = ExplorationStatesService.getState($scope.stateName);\n      if ($scope.stateName && stateData) {\n        $rootScope.$broadcast(\'stateEditorInitialized\', stateData);\n\n        var content = ExplorationStatesService.getStateContentMemento(\n          $scope.stateName);\n        if (content.getHtml() || stateData.interaction.id) {\n          $scope.interactionIsShown = true;\n        }\n\n        $rootScope.loadingMessage = \'\';\n      }\n    };\n\n    $scope.recomputeGraph = function() {\n      GraphDataService.recompute();\n    };\n\n    $scope.saveStateContent = function(displayedValue) {\n      ExplorationStatesService.saveStateContent(\n        $scope.stateName, angular.copy(displayedValue));\n      // Show the interaction when the text content is saved, even if no\n      // content is entered.\n      $scope.interactionIsShown = true;\n    };\n\n    $scope.saveInteractionId = function(displayedValue) {\n      ExplorationStatesService.saveInteractionId(\n        $scope.stateName, angular.copy(displayedValue));\n      StateEditorService.setInteractionId(angular.copy(displayedValue));\n    };\n\n    $scope.saveInteractionAnswerGroups = function(newAnswerGroups) {\n      ExplorationStatesService.saveInteractionAnswerGroups(\n        $scope.stateName, angular.copy(newAnswerGroups));\n\n      StateEditorService.setInteractionAnswerGroups(\n        angular.copy(newAnswerGroups));\n      $scope.recomputeGraph();\n    };\n\n    $scope.saveInteractionDefaultOutcome = function(newOutcome) {\n      ExplorationStatesService.saveInteractionDefaultOutcome(\n        $scope.stateName, angular.copy(newOutcome));\n\n      StateEditorService.setInteractionDefaultOutcome(\n        angular.copy(newOutcome));\n      $scope.recomputeGraph();\n    };\n\n    $scope.saveInteractionCustomizationArgs = function(displayedValue) {\n      ExplorationStatesService.saveInteractionCustomizationArgs(\n        $scope.stateName, angular.copy(displayedValue));\n\n      StateEditorService.setInteractionCustomizationArgs(\n        angular.copy(displayedValue));\n    };\n\n    $scope.saveSolution = function(displayedValue) {\n      ExplorationStatesService.saveSolution(\n        $scope.stateName, angular.copy(displayedValue));\n\n      StateEditorService.setInteractionSolution(\n        angular.copy(displayedValue));\n    };\n\n    $scope.saveHints = function(displayedValue) {\n      ExplorationStatesService.saveHints(\n        $scope.stateName, angular.copy(displayedValue));\n\n      StateEditorService.setInteractionHints(\n        angular.copy(displayedValue));\n    };\n\n    $scope.saveContentIdsToAudioTranslations = function(displayedValue) {\n      ExplorationStatesService.saveContentIdsToAudioTranslations(\n        $scope.stateName, angular.copy(displayedValue));\n    };\n\n    $scope.navigateToState = function(stateName) {\n      RouterService.navigateToMainTab(stateName);\n    };\n  }\n]);\n\noppia.directive(\'trainingPanel\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        answer: \'=\',\n        // The classification input is an object with two keys:\n        //   -answerGroupIndex: This refers to which answer group the answer\n        //      being trained has been classified to (for displaying feedback\n        //      to the creator). If answerGroupIndex is equal to the number of\n        //      answer groups, then it represents the default outcome feedback.\n        //      This index is changed by the panel when the creator specifies\n        //      which feedback should be associated with the answer.\n        //   -newOutcome: This refers to an outcome structure (containing a\n        //      list of feedback and a destination state name) which is\n        //      non-null if, and only if, the creator has specified that a new\n        //      response should be created for the trained answer.\n        classification: \'=\',\n        onFinishTraining: \'&\',\n        addingNewResponse: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/editor_tab/\' +\n        \'training_answer_modal_directive.html\'),\n      controller: [\n        \'$scope\', \'ExplorationHtmlFormatterService\',\n        \'StateEditorService\', \'ExplorationStatesService\',\n        \'TrainingDataService\', \'ResponsesService\', \'StateInteractionIdService\',\n        \'StateCustomizationArgsService\', \'AnswerGroupObjectFactory\',\n        \'OutcomeObjectFactory\', \'GenerateContentIdService\',\n        \'COMPONENT_NAME_FEEDBACK\',\n        \'StateContentIdsToAudioTranslationsService\',\n        function(\n            $scope, ExplorationHtmlFormatterService,\n            StateEditorService, ExplorationStatesService,\n            TrainingDataService, ResponsesService, StateInteractionIdService,\n            StateCustomizationArgsService, AnswerGroupObjectFactory,\n            OutcomeObjectFactory, GenerateContentIdService,\n            COMPONENT_NAME_FEEDBACK,\n            StateContentIdsToAudioTranslationsService) {\n          $scope.addingNewResponse = false;\n\n          var _stateName = StateEditorService.getActiveStateName();\n          var _state = ExplorationStatesService.getState(_stateName);\n          $scope.allOutcomes = TrainingDataService.getAllPotentialOutcomes(\n            _state);\n\n          var _updateAnswerTemplate = function() {\n            $scope.answerTemplate = (\n              ExplorationHtmlFormatterService.getAnswerHtml(\n                $scope.answer, StateInteractionIdService.savedMemento,\n                StateCustomizationArgsService.savedMemento));\n          };\n\n          $scope.$watch(\'answer\', _updateAnswerTemplate);\n          _updateAnswerTemplate();\n          $scope.selectedAnswerGroupIndex = (\n            $scope.classification.answerGroupIndex);\n\n          $scope.getCurrentStateName = function() {\n            return StateEditorService.getActiveStateName();\n          };\n\n          $scope.beginAddingNewResponse = function() {\n            var contentId = GenerateContentIdService.getNextId(\n              COMPONENT_NAME_FEEDBACK);\n            $scope.classification.newOutcome = OutcomeObjectFactory.createNew(\n              StateEditorService.getActiveStateName(), contentId, \'\', []);\n            $scope.addingNewResponse = true;\n          };\n\n          $scope.cancelAddingNewResponse = function() {\n            $scope.addingNewResponse = false;\n            $scope.classification.newOutcome = null;\n          };\n\n          $scope.selectAnswerGroupIndex = function(index) {\n            $scope.selectedAnswerGroupIndex = index;\n            $scope.classification.answerGroupIndex = index;\n            if (index > ResponsesService.getAnswerGroupCount()) {\n              $scope.classification.newOutcome = $scope.allOutcomes[index];\n            }\n          };\n\n          $scope.confirmNewFeedback = function() {\n            if ($scope.classification.newOutcome) {\n              // Push the new outcome at the end of the existing outcomes.\n              $scope.allOutcomes.push($scope.classification.newOutcome);\n              $scope.selectAnswerGroupIndex($scope.allOutcomes.length - 1);\n              $scope.addingNewResponse = false;\n            }\n          };\n        }\n      ]\n    };\n  }]\n);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/SpeechSynthesisChunkerServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for SpeechSynthesisChunkerService.\n */\n\ndescribe(\'Speech Synthesis Chunker Service\', function() {\n  var SpeechSynthesisChunkerService = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    SpeechSynthesisChunkerService = $injector.get(\n      \'SpeechSynthesisChunkerService\');\n  }));\n\n  it(\'Should properly convert subtraction in LaTeX to speakable text\',\n    function() {\n      var latex1 = \'5-3\';\n      var latex2 = \'i-j\';\n      var speakableLatex1 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex1);\n      var speakableLatex2 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex2);\n      expect(speakableLatex1).toEqual(\'5 minus 3\');\n      expect(speakableLatex2).toEqual(\'i minus j\');\n    }\n  );\n\n  it(\'Should properly convert fractions in LaTeX to speakable text\',\n    function() {\n      var latex1 = \'\\\\\\\\frac{2}{3}\';\n      var latex2 = \'\\\\\\\\frac{abc}{xyz}\';\n      var latex3 = \'\\\\\\\\frac{3n}{5}\';\n      var latex4 = \'\\\\\\\\frac{ijk}{5xy}\';\n      var speakableLatex1 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex1);\n      var speakableLatex2 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex2);\n      var speakableLatex3 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex3);\n      var speakableLatex4 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex4);\n      expect(speakableLatex1).toEqual(\'2/3\');\n      expect(speakableLatex2).toEqual(\'a b c over x y z\');\n      expect(speakableLatex3).toEqual(\'3n over 5\');\n      expect(speakableLatex4).toEqual(\'i j k over 5x y\');\n    }\n  );\n\n  it(\'Should properly convert square roots in LaTeX to speakable text\',\n    function() {\n      var latex1 = \'\\\\\\\\sqrt{3}\';\n      var latex2 = \'\\\\\\\\sqrt{xy}\';\n      var speakableLatex1 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex1);\n      var speakableLatex2 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex2);\n      expect(speakableLatex1).toEqual(\'the square root of 3\');\n      expect(speakableLatex2).toEqual(\'the square root of x y\');\n    }\n  );\n\n  it(\'Should properly convert exponents in LaTeX to speakable text\',\n    function() {\n      var latex1 = \'x^2\';\n      var latex2 = \'42^4\';\n      var latex3 = \'x^62\';\n      var latex4 = \'3n^4x\';\n      var speakableLatex1 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex1);\n      var speakableLatex2 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex2);\n      var speakableLatex3 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex3);\n      var speakableLatex4 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex4);\n      expect(speakableLatex1).toEqual(\'x^2\');\n      expect(speakableLatex2).toEqual(\'42 to the power of 4\');\n      expect(speakableLatex3).toEqual(\'x to the power of 62\');\n      expect(speakableLatex4).toEqual(\'3n to the power of 4x\');\n    }\n  );\n\n  it (\'Should properly convert trigonometric functions in LaTeX to \' +\n      \'speakable text\', function() {\n    var latex1 = \'\\\\\\\\sin{90}\';\n    var latex2 = \'\\\\\\\\cos{0}\';\n    var latex3 = \'\\\\\\\\tan{uv}\';\n    var speakableLatex1 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex1);\n    var speakableLatex2 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex2);\n    var speakableLatex3 =\n        SpeechSynthesisChunkerService.formatLatexToSpeakableText(latex3);\n    expect(speakableLatex1).toEqual(\'the sine of 90\');\n    expect(speakableLatex2).toEqual(\'the cosine of 0\');\n    expect(speakableLatex3).toEqual(\'the tangent of u v\');\n  });\n});'

blocks = {}
debug_info = ''
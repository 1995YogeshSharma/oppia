from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/StatesObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the States object factory.\n */\n\ndescribe(\'States object factory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'StatesObjectFactory\', function() {\n    var scope, sof, statesDict, statesWithAudioDict, atof;\n    beforeEach(inject(function($injector) {\n      ssof = $injector.get(\'StatesObjectFactory\');\n      sof = $injector.get(\'StateObjectFactory\');\n      atof = $injector.get(\'AudioTranslationObjectFactory\');\n\n      GLOBALS.NEW_STATE_TEMPLATE = {\n        classifier_model_id: null,\n        content: {\n          html: \'\',\n          audio_translations: {}\n        },\n        interaction: {\n          answer_groups: [],\n          confirmed_unclassified_answers: [],\n          customization_args: {\n            rows: {\n              value: 1\n            },\n            placeholder: {\n              value: \'Type your answer here.\'\n            }\n          },\n          default_outcome: {\n            dest: \'(untitled state)\',\n            feedback: [],\n            param_changes: []\n          },\n          hints: [],\n          id: \'TextInput\'\n        },\n        param_changes: []\n      };\n\n      statesDict = {\n        \'first state\': {\n          content: {\n            html: \'content\',\n            audio_translations: {}\n          },\n          interaction: {\n            id: \'RuleTest\',\n            answer_groups: [{\n              outcome: {\n                dest: \'outcome 1\',\n                feedback: [\'\'],\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null\n              },\n              rule_specs: [{\n                inputs: {\n                  x: 10\n                },\n                rule_type: \'Equals\'\n              }],\n            }],\n            default_outcome: {\n              dest: \'default\',\n              feedback: [],\n              labelled_as_correct: false,\n              param_changes: []\n            },\n            hints: [],\n            solution: null\n          },\n          param_changes: []\n        }\n      };\n\n      statesWithAudioDict = {\n        \'first state\': {\n          content: {\n            html: \'content\',\n            audio_translations: {\n              en: {\n                filename: \'myfile1.mp3\',\n                file_size_bytes: 0.5,\n                needs_update: false\n              },\n              \'hi-en\': {\n                filename: \'myfile3.mp3\',\n                file_size_bytes: 0.8,\n                needs_update: false\n              }\n            }\n          },\n          interaction: {\n            answer_groups: [{\n              outcome: {\n                dest: \'second state\',\n                feedback: {\n                  html: \'<p>Good.</p>\',\n                  audio_translations: {\n                    zh: {\n                      filename: \'myfile4.mp3\',\n                      file_size_bytes: 1.1,\n                      needs_update: false\n                    }\n                  }\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null\n              },\n              rule_specs: [{\n                inputs: {\n                  x: 20\n                },\n                rule_type: \'Equals\'\n              }]\n            }],\n            confirmed_unclassified_answers: [],\n            customization_args: {},\n            default_outcome: {\n              dest: \'new state\',\n              feedback: {\n                html: \'<p>Feedback</p>\',\n                audio_translations: {\n                  he: {\n                    filename: \'myfile10.mp3\',\n                    file_size_bytes: 0.5,\n                    needs_update: false\n                  }\n                }\n              },\n              labelled_as_correct: false,\n              param_changes: []\n            },\n            hints: [{\n              hint_content: {\n                html: \'<p>Here is a hint.</p>\',\n                audio_translations: {\n                  es: {\n                    filename: \'myfile5.mp3\',\n                    file_size_bytes: 0.7,\n                    needs_update: false\n                  },\n                  zh: {\n                    filename: \'myfile6.mp3\',\n                    file_size_bytes: 0.9,\n                    needs_update: false\n                  },\n                  \'hi-en\': {\n                    filename: \'myfile8.mp3\',\n                    file_size_bytes: 1.2,\n                    needs_update: false\n                  }\n                }\n              }\n            }, {\n              hint_content: {\n                html: \'<p>Here is another hint.</p>\',\n                audio_translations: {\n                  cs: {\n                    filename: \'myfile7.mp3\',\n                    file_size_bytes: 0.2,\n                    needs_update: false\n                  }\n                }\n              }\n            }],\n            id: \'TextInput\'\n          },\n          param_changes: []\n        },\n        \'second state\': {\n          content: {\n            html: \'more content\',\n            audio_translations: {\n              \'hi-en\': {\n                filename: \'myfile2.mp3\',\n                file_size_bytes: 0.8,\n                needs_update: false\n              }\n            }\n          },\n          interaction: {\n            answer_groups: [],\n            confirmed_unclassified_answers: [],\n            customization_args: {},\n            default_outcome: {\n              dest: \'new state\',\n              feedback: [],\n              labelled_as_correct: false,\n              param_changes: []\n            },\n            hints: [],\n            solution: {\n              answer_is_exclusive: false,\n              correct_answer: \'answer\',\n              explanation: {\n                html: \'<p>This is an explanation.</p>\',\n                audio_translations: {\n                  de: {\n                    filename: \'myfile9.mp3\',\n                    file_size_bytes: 0.5,\n                    needs_update: false\n                  }\n                }\n              }\n            },\n            id: \'TextInput\'\n          },\n          param_changes: []\n        }\n      };\n    }));\n\n    it(\'should create a new state given a state name\', function() {\n      var newStates = ssof.createFromBackendDict(statesDict);\n      newStates.addState(\'new state\');\n      expect(newStates.getState(\'new state\')).toEqual(\n        sof.createFromBackendDict(\'new state\', {\n          classifier_model_id: null,\n          content: {\n            html: \'\',\n            audio_translations: {}\n          },\n          interaction: {\n            answer_groups: [],\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              rows: {\n                value: 1\n              },\n              placeholder: {\n                value: \'Type your answer here.\'\n              }\n            },\n            default_outcome: {\n              dest: \'new state\',\n              feedback: [],\n              param_changes: []\n            },\n            hints: [],\n            id: \'TextInput\'\n          },\n          param_changes: []\n        }));\n    });\n\n    it(\'should correctly get all audio language codes in states\', function() {\n      var statesWithAudio = ssof.createFromBackendDict(statesWithAudioDict);\n      expect(statesWithAudio.getAllAudioLanguageCodes())\n        .toEqual([\'en\', \'hi-en\', \'zh\', \'he\', \'es\', \'cs\', \'de\']);\n    });\n\n    it(\'should correctly get all audio translations in states\', function() {\n      var statesWithAudio = ssof.createFromBackendDict(statesWithAudioDict);\n      expect(statesWithAudio.getAllAudioTranslations(\'hi-en\'))\n        .toEqual({\n          \'first state\': [atof.createFromBackendDict({\n            filename: \'myfile3.mp3\',\n            file_size_bytes: 0.8,\n            needs_update: false\n          }), atof.createFromBackendDict({\n            filename: \'myfile8.mp3\',\n            file_size_bytes: 1.2,\n            needs_update: false\n          })],\n          \'second state\': [atof.createFromBackendDict({\n            filename: \'myfile2.mp3\',\n            file_size_bytes: 0.8,\n            needs_update: false\n          })]\n        });\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/MisconceptionObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Object factory for creating frontend instances of\n * misconceptions.\n */\n\noppia.factory(\'MisconceptionObjectFactory\', [\n  function() {\n    var Misconception = function(id, name, notes, feedback) {\n      this._id = id;\n      this._name = name;\n      this._notes = notes;\n      this._feedback = feedback;\n    };\n\n    Misconception.prototype.toBackendDict = function() {\n      return {\n        id: this._id,\n        name: this._name,\n        notes: this._notes,\n        feedback: this._feedback\n      };\n    };\n\n    Misconception.createFromBackendDict = function(misconceptionBackendDict) {\n      return new Misconception(\n        misconceptionBackendDict.id,\n        misconceptionBackendDict.name,\n        misconceptionBackendDict.notes,\n        misconceptionBackendDict.feedback);\n    };\n\n    Misconception.create = function(id, name, notes, feedback) {\n      return new Misconception(id, name, notes, feedback);\n    };\n\n    Misconception.prototype.getId = function() {\n      return this._id;\n    };\n\n    Misconception.prototype.getName = function() {\n      return this._name;\n    };\n\n    Misconception.prototype.setName = function(newName) {\n      this._name = newName;\n    };\n\n    Misconception.prototype.getNotes = function() {\n      return this._notes;\n    };\n\n    Misconception.prototype.setNotes = function(newNotes) {\n      this._notes = newNotes;\n    };\n\n    Misconception.prototype.getFeedback = function() {\n      return this._feedback;\n    };\n\n    Misconception.prototype.setFeedback = function(newFeedback) {\n      this._feedback = newFeedback;\n    };\n\n    return Misconception;\n  }\n]);'

blocks = {}
debug_info = ''
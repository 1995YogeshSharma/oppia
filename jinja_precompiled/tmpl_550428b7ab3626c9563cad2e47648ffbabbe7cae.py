from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/question/EditableQuestionBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to send and receive changes to a question in the\n *  backend.\n */\noppia.constant(\n  \'EDITABLE_QUESTION_DATA_URL_TEMPLATE\',\n  \'/question_editor_handler/data/<question_id>\');\noppia.constant(\n  \'QUESTION_CREATION_URL\', \'/question_editor_handler/create_new/<skill_id>\');\noppia.constant(\n  \'QUESTION_SKILL_LINK_URL_TEMPLATE\',\n  \'/manage_question_skill_link/<question_id>/<skill_id>\');\n\noppia.factory(\'EditableQuestionBackendApiService\', [\n  \'$http\', \'$q\', \'EDITABLE_QUESTION_DATA_URL_TEMPLATE\',\n  \'UrlInterpolationService\', \'QUESTION_CREATION_URL\',\n  \'QUESTION_SKILL_LINK_URL_TEMPLATE\',\n  function(\n      $http, $q, EDITABLE_QUESTION_DATA_URL_TEMPLATE,\n      UrlInterpolationService, QUESTION_CREATION_URL,\n      QUESTION_SKILL_LINK_URL_TEMPLATE) {\n    var _createQuestion = function(\n        skillId, questionDict, successCallback, errorCallback) {\n      var questionCreationUrl = UrlInterpolationService.interpolateUrl(\n        QUESTION_CREATION_URL, {\n          skill_id: skillId\n        });\n      var postData = {\n        question_dict: questionDict\n      };\n      $http.post(questionCreationUrl, postData).then(function(response) {\n        if (successCallback) {\n          successCallback();\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _fetchQuestion = function(questionId, successCallback, errorCallback) {\n      var questionDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_QUESTION_DATA_URL_TEMPLATE, {\n          question_id: questionId\n        });\n\n      $http.get(questionDataUrl).then(function(response) {\n        var questionDict = angular.copy(response.data.question_dict);\n        if (successCallback) {\n          successCallback(questionDict);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _updateQuestion = function(\n        questionId, questionVersion, commitMessage, changeList,\n        successCallback, errorCallback) {\n      var editableQuestionDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_QUESTION_DATA_URL_TEMPLATE, {\n          question_id: questionId\n        });\n\n      var putData = {\n        version: questionVersion,\n        commit_message: commitMessage,\n        change_dicts: changeList\n      };\n      $http.put(editableQuestionDataUrl, putData).then(function(response) {\n        // The returned data is an updated question dict.\n        var questionDict = angular.copy(response.data.question_dict);\n\n        if (successCallback) {\n          successCallback(questionDict);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    return {\n      createQuestion: function(skillId, questionDict) {\n        return $q(function(resolve, reject) {\n          _createQuestion(skillId, questionDict, resolve, reject);\n        });\n      },\n\n      fetchQuestion: function(questionId) {\n        return $q(function(resolve, reject) {\n          _fetchQuestion(questionId, resolve, reject);\n        });\n      },\n\n      /**\n       * Updates a question in the backend with the provided question ID.\n       * The changes only apply to the question of the given version and the\n       * request to update the question will fail if the provided question\n       * version is older than the current version stored in the backend. Both\n       * the changes and the message to associate with those changes are used\n       * to commit a change to the question. The new question is passed to\n       * the success callback, if one is provided to the returned promise\n       * object. Errors are passed to the error callback, if one is provided.\n       */\n      updateQuestion: function(\n          questionId, questionVersion, commitMessage, changeList) {\n        return $q(function(resolve, reject) {\n          _updateQuestion(\n            questionId, questionVersion, commitMessage, changeList,\n            resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
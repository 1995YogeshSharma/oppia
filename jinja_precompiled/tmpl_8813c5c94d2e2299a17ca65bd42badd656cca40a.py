from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/forms/schema_editors/SchemaBasedUnicodeEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for a schema-based editor for unicode strings.\n */\n\noppia.directive(\'schemaBasedUnicodeEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      scope: {\n        localValue: \'=\',\n        isDisabled: \'&\',\n        validators: \'&\',\n        uiConfig: \'&\',\n        labelForFocusTarget: \'&\',\n        onInputBlur: \'=\',\n        onInputFocus: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/forms/schema_editors/\' +\n        \'schema_based_unicode_editor_directive.html\'),\n      restrict: \'E\',\n      controller: [\n        \'$scope\', \'$filter\', \'$sce\', \'$translate\', \'DeviceInfoService\',\n        function($scope, $filter, $sce, $translate, DeviceInfoService) {\n          if ($scope.uiConfig() && $scope.uiConfig().coding_mode) {\n            // Flag that is flipped each time the codemirror view is\n            // shown. (The codemirror instance needs to be refreshed\n            // every time it is unhidden.)\n            $scope.codemirrorStatus = false;\n            var CODING_MODE_NONE = \'none\';\n\n            $scope.codemirrorOptions = {\n              // Convert tabs to spaces.\n              extraKeys: {\n                Tab: function(cm) {\n                  var spaces = Array(cm.getOption(\'indentUnit\') + 1).join(\' \');\n                  cm.replaceSelection(spaces);\n                  // Move the cursor to the end of the selection.\n                  var endSelectionPos = cm.getDoc().getCursor(\'head\');\n                  cm.getDoc().setCursor(endSelectionPos);\n                }\n              },\n              indentWithTabs: false,\n              lineNumbers: true\n            };\n\n            if ($scope.isDisabled()) {\n              $scope.codemirrorOptions.readOnly = \'nocursor\';\n            }\n            // Note that only \'coffeescript\', \'javascript\', \'lua\', \'python\',\n            // \'ruby\' and \'scheme\' have CodeMirror-supported syntax\n            // highlighting. For other languages, syntax highlighting will not\n            // happen.\n            if ($scope.uiConfig().coding_mode !== CODING_MODE_NONE) {\n              $scope.codemirrorOptions.mode = $scope.uiConfig().coding_mode;\n            }\n\n            setTimeout(function() {\n              $scope.codemirrorStatus = !$scope.codemirrorStatus;\n            }, 200);\n\n            // When the form view is opened, flip the status flag. The\n            // timeout seems to be needed for the line numbers etc. to display\n            // properly.\n            $scope.$on(\'schemaBasedFormsShown\', function() {\n              setTimeout(function() {\n                $scope.codemirrorStatus = !$scope.codemirrorStatus;\n              }, 200);\n            });\n          }\n\n          $scope.onKeypress = function(evt) {\n            if (evt.keyCode === 13) {\n              $scope.$emit(\'submittedSchemaBasedUnicodeForm\');\n            }\n          };\n\n          $scope.getPlaceholder = function() {\n            if (!$scope.uiConfig()) {\n              return \'\';\n            } else {\n              if (!$scope.uiConfig().placeholder &&\n                  DeviceInfoService.hasTouchEvents()) {\n                return $translate.instant(\n                  \'I18N_PLAYER_DEFAULT_MOBILE_PLACEHOLDER\');\n              }\n              return $scope.uiConfig().placeholder;\n            }\n          };\n\n          $scope.getRows = function() {\n            if (!$scope.uiConfig()) {\n              return null;\n            } else {\n              return $scope.uiConfig().rows;\n            }\n          };\n\n          $scope.getCodingMode = function() {\n            if (!$scope.uiConfig()) {\n              return null;\n            } else {\n              return $scope.uiConfig().coding_mode;\n            }\n          };\n\n          $scope.getDisplayedValue = function() {\n            return $sce.trustAsHtml(\n              $filter(\'convertUnicodeWithParamsToHtml\')($scope.localValue));\n          };\n        }\n      ]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
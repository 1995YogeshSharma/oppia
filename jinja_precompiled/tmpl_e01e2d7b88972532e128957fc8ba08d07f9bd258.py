from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/ResponseHeaderDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the header of the response tiles.\n */\n\noppia.directive(\'responseHeader\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        getIndex: \'&index\',\n        getOutcome: \'&outcome\',\n        getSummary: \'&summary\',\n        getShortSummary: \'&shortSummary\',\n        isActive: \'&isActive\',\n        getOnDeleteFn: \'&onDeleteFn\',\n        getNumRules: \'&numRules\',\n        isResponse: \'&isResponse\',\n        showWarning: \'&showWarning\',\n        navigateToState: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/response_header_directive.html\'),\n      controller: [\n        \'$scope\', \'EditabilityService\', \'StateEditorService\',\n        \'PLACEHOLDER_OUTCOME_DEST\',\n        \'StateInteractionIdService\', \'INTERACTION_SPECS\',\n        function(\n            $scope, EditabilityService, StateEditorService,\n            PLACEHOLDER_OUTCOME_DEST,\n            StateInteractionIdService, INTERACTION_SPECS) {\n          $scope.EditabilityService = EditabilityService;\n          $scope.isInQuestionMode = StateEditorService.isInQuestionMode;\n\n          $scope.getCurrentInteractionId = function() {\n            return StateInteractionIdService.savedMemento;\n          };\n\n          $scope.isCorrectnessFeedbackEnabled = function() {\n            return StateEditorService.getCorrectnessFeedbackEnabled();\n          };\n          // This returns false if the current interaction ID is null.\n          $scope.isCurrentInteractionLinear = function() {\n            var interactionId = $scope.getCurrentInteractionId();\n            return interactionId && INTERACTION_SPECS[interactionId].is_linear;\n          };\n\n          $scope.isCorrect = function() {\n            return $scope.getOutcome() && $scope.getOutcome().labelledAsCorrect;\n          };\n\n          $scope.isOutcomeLooping = function() {\n            var outcome = $scope.getOutcome();\n            var activeStateName = StateEditorService.getActiveStateName();\n            return outcome && (outcome.dest === activeStateName);\n          };\n\n          $scope.isCreatingNewState = function() {\n            var outcome = $scope.getOutcome();\n            return outcome && outcome.dest === PLACEHOLDER_OUTCOME_DEST;\n          };\n\n          $scope.deleteResponse = function(evt) {\n            $scope.getOnDeleteFn()($scope.getIndex(), evt);\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
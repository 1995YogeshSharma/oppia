from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/RuleTypeSelectorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the rule type selector.\n */\n\noppia.directive(\'ruleTypeSelector\', [function() {\n  return {\n    restrict: \'E\',\n    scope: {\n      localValue: \'@\',\n      onSelectionChange: \'&\'\n    },\n    template: \'<select></select>\',\n    controller: [\n      \'$scope\', \'$element\', \'$rootScope\', \'$filter\',\n      \'StateInteractionIdService\', \'INTERACTION_SPECS\',\n      function(\n          $scope, $element, $rootScope, $filter,\n          StateInteractionIdService, INTERACTION_SPECS) {\n        var choices = [];\n        var numberOfRuleTypes = 0;\n\n        var ruleTypesToDescriptions = INTERACTION_SPECS[\n          StateInteractionIdService.savedMemento].rule_descriptions;\n        for (var ruleType in ruleTypesToDescriptions) {\n          numberOfRuleTypes++;\n          choices.push({\n            id: ruleType,\n            text: $filter(\'replaceInputsWithEllipses\')(\n              ruleTypesToDescriptions[ruleType])\n          });\n        }\n\n        // TODO(bhenning): The order of choices should be meaningful. E.g.,\n        // having "is equal to" for most interactions first makes sense. They\n        // should ideally be ordered based on likelihood of being used.\n        choices.sort(function(a, b) {\n          if (a.text < b.text) {\n            return -1;\n          } else if (a.text > b.text) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        var select2Node = $element[0].firstChild;\n        $(select2Node).select2({\n          allowClear: false,\n          data: choices,\n          // Suppress the search box.\n          minimumResultsForSearch: -1,\n          width: \'350px\',\n          templateSelection: function(object) {\n            return $filter(\'truncateAtFirstEllipsis\')(object.text);\n          }\n        });\n\n        // Select the first choice by default.\n        if (!$scope.localValue) {\n          $scope.localValue = choices[0].id;\n          $scope.onSelectionChange()($scope.localValue);\n        }\n\n        // Initialize the dropdown.\n        $(select2Node).val($scope.localValue).trigger(\'change\');\n\n        $(select2Node).on(\'change\', function(e) {\n          $scope.onSelectionChange()($(select2Node).val());\n          // This is needed to propagate the change and display input fields\n          // for parameterizing the rule. Otherwise, the input fields do not\n          // get updated when the rule type is changed.\n          $scope.$apply();\n        });\n      }\n    ]\n  };\n}]);'

blocks = {}
debug_info = ''
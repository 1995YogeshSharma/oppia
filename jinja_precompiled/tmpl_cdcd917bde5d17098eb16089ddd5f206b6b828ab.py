from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/FeedbackPopupDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the feedback popup.\n */\n\n// This directive is unusual in that it should only be invoked indirectly, as\n// follows:\n//\n// <some-html-element popover-placement="bottom"\n//                    uib-popover-template="popover/feedback"\n//                    popover-trigger="click" state-name="<[STATE_NAME]>">\n// </some-html-element>\n//\n// The state-name argument is optional. If it is not provided, the feedback is\n// assumed to apply to the exploration as a whole.\noppia.directive(\'feedbackPopup\', [\n  \'ExplorationEngineService\', \'UrlInterpolationService\',\n  function(ExplorationEngineService, UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {},\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_player/feedback_popup_directive.html\'),\n      controller: [\n        \'$scope\', \'$element\', \'$http\', \'$log\', \'$timeout\', \'$filter\',\n        \'FocusManagerService\', \'AlertsService\', \'BackgroundMaskService\',\n        \'PlayerPositionService\', \'WindowDimensionsService\',\n        \'FEEDBACK_SUBJECT_MAX_CHAR_LIMIT\',\n        function(\n            $scope, $element, $http, $log, $timeout, $filter,\n            FocusManagerService, AlertsService, BackgroundMaskService,\n            PlayerPositionService, WindowDimensionsService,\n            FEEDBACK_SUBJECT_MAX_CHAR_LIMIT) {\n          $scope.feedbackText = \'\';\n          $scope.isSubmitterAnonymized = false;\n          $scope.isLoggedIn = GLOBALS.userIsLoggedIn;\n          $scope.feedbackSubmitted = false;\n          // We generate a random id since there may be multiple popover\n          // elements on the same page.\n          $scope.feedbackPopoverId = (\n            \'feedbackPopover\' + Math.random().toString(36).slice(2));\n\n          if (WindowDimensionsService.isWindowNarrow()) {\n            BackgroundMaskService.activateMask();\n          }\n\n          FocusManagerService.setFocus($scope.feedbackPopoverId);\n\n          var feedbackUrl = (\n            \'/explorehandler/give_feedback/\' +\n            ExplorationEngineService.getExplorationId());\n\n          var getTriggerElt = function() {\n            // Find the popover trigger node (the one with a popover-template\n            // attribute). This is also the DOM node that contains the state\n            // name. Since the popover DOM node is inserted as a sibling to the\n            // node, we therefore climb up the DOM tree until we find the\n            // top-level popover element. The trigger will be one of its\n            // siblings.\n            //\n            // If the trigger element cannot be found, a value of undefined is\n            // returned. This could happen if the trigger is clicked while the\n            // feedback confirmation message is being displayed.\n            var elt = $element;\n            var popoverChildElt = null;\n            for (var i = 0; i < 10; i++) {\n              elt = elt.parent();\n              if (!angular.isUndefined(\n                elt.attr(\'uib-popover-template-popup\'))) {\n                popoverChildElt = elt;\n                break;\n              }\n            }\n            if (!popoverChildElt) {\n              $log.error(\'Could not close popover element.\');\n              return undefined;\n            }\n\n            var popoverElt = popoverChildElt.parent();\n            var triggerElt = null;\n            var childElts = popoverElt.children();\n            for (var i = 0; i < childElts.length; i++) {\n              var childElt = $(childElts[i]);\n              if (childElt.attr(\'uib-popover-template\')) {\n                triggerElt = childElt;\n                break;\n              }\n            }\n\n            if (!triggerElt) {\n              $log.error(\'Could not find popover trigger.\');\n              return undefined;\n            }\n\n            return triggerElt;\n          };\n\n          $scope.saveFeedback = function() {\n            if ($scope.feedbackText) {\n              $http.post(feedbackUrl, {\n                subject: $filter(\'getAbbreviatedText\')(\n                  $scope.feedbackText, FEEDBACK_SUBJECT_MAX_CHAR_LIMIT),\n                feedback: $scope.feedbackText,\n                include_author: (\n                  !$scope.isSubmitterAnonymized && $scope.isLoggedIn),\n                state_name: PlayerPositionService.getCurrentStateName()\n              });\n            }\n\n            $scope.feedbackSubmitted = true;\n            $timeout(function() {\n              var triggerElt = getTriggerElt();\n              if (triggerElt) {\n                triggerElt.trigger(\'click\');\n              }\n            }, 2000);\n          };\n\n          $scope.closePopover = function() {\n            // Closing the popover is done by clicking on the popover trigger.\n            // The timeout is needed to postpone the click event to\n            // the subsequent digest cycle. Otherwise, an "$apply already\n            // in progress" error is raised.\n            $timeout(function() {\n              getTriggerElt().trigger(\'click\');\n            });\n            BackgroundMaskService.deactivateMask();\n          };\n\n          $scope.$on(\'$destroy\', function() {\n            BackgroundMaskService.deactivateMask();\n          });\n        }\n      ]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
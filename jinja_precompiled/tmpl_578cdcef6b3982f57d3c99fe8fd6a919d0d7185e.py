from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/SolutionObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the Solution object factory.\n */\n\ndescribe(\'Solution object factory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'SolutionObjectFactory\', function() {\n    var scope, sof, solution;\n    beforeEach(inject(function($injector, $rootScope) {\n      scope = $rootScope.$new();\n      sof = $injector.get(\'SolutionObjectFactory\');\n      solution = sof.createFromBackendDict({\n        answer_is_exclusive: false,\n        correct_answer: \'This is a correct answer!\',\n        explanation: {\n          content_id: \'solution\',\n          html: \'This is the explanation to the answer\'\n        }\n      });\n    }));\n\n\n    it(\'should create a new solution\', function() {\n      expect(solution.toBackendDict()).toEqual({\n        answer_is_exclusive: false,\n        correct_answer: \'This is a correct answer!\',\n        explanation: {\n          content_id: \'solution\',\n          html: \'This is the explanation to the answer\'\n        }\n      });\n    });\n\n    it(\'should create summary correctly\', function() {\n      expect(solution.getSummary(\'TextInput\')).toEqual(\n        \'One solution is "&quot;This is a correct answer!&quot;". \' +\n        \'This is the explanation to the answer.\');\n\n      solution.setCorrectAnswer({\n        ascii: \'one\',\n        latex: \'one\'\n      });\n      expect(solution.getSummary(\'MathExpressionInput\')).toEqual(\n        \'One solution is "one". This is the explanation to the answer.\');\n\n      solution.setCorrectAnswer({\n        code: \'a=10\',\n        error: \'\',\n        evaluation: \'\',\n        output: \'\'\n      });\n      expect(solution.getSummary(\'CodeRepl\')).toEqual(\n        \'One solution is "a=10". This is the explanation to the answer.\');\n\n      solution.setCorrectAnswer({\n        isNegative: false,\n        wholeNumber: 0,\n        numerator: 1,\n        denominator: 6\n      });\n      expect(solution.getSummary(\'FractionInput\')).toEqual(\n        \'One solution is "1/6". This is the explanation to the answer.\');\n    });\n  });\n});'

blocks = {}
debug_info = ''
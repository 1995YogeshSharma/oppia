from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/TrainingModalService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service which handles opening and closing\n * the training modal used for both unresolved answers\n * and answers within the training data of a classifier.\n */\n\noppia.factory(\'TrainingModalService\', [\n  \'$rootScope\', \'$uibModal\', \'AlertsService\', \'UrlInterpolationService\',\n  function($rootScope, $uibModal, AlertsService, UrlInterpolationService) {\n    return {\n      openTrainUnresolvedAnswerModal: function(unhandledAnswer, externalSave) {\n        AlertsService.clearWarnings();\n        if (externalSave) {\n          $rootScope.$broadcast(\'externalSave\');\n        }\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_editor/editor_tab/\' +\n            \'training_unresolved_answer_modal_directive.html\'),\n          backdrop: true,\n          controller: [\n            \'$scope\', \'$injector\', \'$uibModalInstance\',\n            \'ExplorationStatesService\', \'EditorStateService\',\n            \'AnswerClassificationService\', \'ExplorationContextService\',\n            \'stateInteractionIdService\', \'AngularNameService\',\n            function($scope, $injector, $uibModalInstance,\n                ExplorationStatesService, EditorStateService,\n                AnswerClassificationService, ExplorationContextService,\n                stateInteractionIdService, AngularNameService) {\n              $scope.trainingDataAnswer = \'\';\n              $scope.trainingDataFeedback = \'\';\n              $scope.trainingDataOutcomeDest = \'\';\n\n              // See the training panel directive in StateEditor for an\n              // explanation on the structure of this object.\n              $scope.classification = {\n                answerGroupIndex: 0,\n                newOutcome: null\n              };\n\n              $scope.finishTraining = function() {\n                $uibModalInstance.close();\n              };\n\n              $scope.init = function() {\n                var explorationId =\n                  ExplorationContextService.getExplorationId();\n                var currentStateName =\n                  EditorStateService.getActiveStateName();\n                var state = ExplorationStatesService.getState(currentStateName);\n\n                // Retrieve the interaction ID.\n                var interactionId = stateInteractionIdService.savedMemento;\n\n                var rulesServiceName =\n                  AngularNameService.getNameOfInteractionRulesService(\n                    interactionId);\n\n                // Inject RulesService dynamically.\n                var rulesService = $injector.get(rulesServiceName);\n\n                var classificationResult = (\n                  AnswerClassificationService.getMatchingClassificationResult(\n                    explorationId, currentStateName, state, unhandledAnswer,\n                    rulesService));\n                var feedback = \'Nothing\';\n                var dest = classificationResult.outcome.dest;\n                if (classificationResult.outcome.feedback.length > 0) {\n                  feedback = classificationResult.outcome.feedback.getHtml();\n                }\n                if (dest === currentStateName) {\n                  dest = \'<em>(try again)</em>\';\n                }\n\n                // $scope.trainingDataAnswer, $scope.trainingDataFeedback\n                // $scope.trainingDataOutcomeDest are intended to be local\n                // to this modal and should not be used to populate any\n                // information in the active exploration (including the\n                // feedback). The feedback here refers to a representation\n                // of the outcome of an answer group, rather than the\n                // specific feedback of the outcome (for instance, it\n                // includes the destination state within the feedback).\n                $scope.trainingDataAnswer = unhandledAnswer;\n                $scope.trainingDataFeedback = feedback;\n                $scope.trainingDataOutcomeDest = dest;\n                $scope.classification.answerGroupIndex = (\n                  classificationResult.answerGroupIndex);\n              };\n\n              $scope.init();\n            }]\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
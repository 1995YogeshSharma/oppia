from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/PlayerTranscriptService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for the learner view transcript.\n */\n\n// A service that maintains the transcript of the playthrough (i.e., what cards\n// are shown, what answers have been given, etc. Note that this service does\n// not maintain the currently-active card -- it\'s more like a log of what the\n// learner has \'discovered\' so far.\noppia.factory(\'PlayerTranscriptService\', [\n  \'$log\', \'StateCardObjectFactory\', function($log, StateCardObjectFactory) {\n    // Each element of this array represents a \'StateCard\' domain object.\n    //\n    // Note that every card in this transcript is visible on the screen. The\n    // \'card.getDestStateName()\' field is intended to identify transcripts where\n    // there is a card \'in reserve\', but the learner has not yet navigated to it\n    // -- this happens if the current card offers feedback to the learner before\n    // they carry on.\n    var transcript = [];\n    var numAnswersSubmitted = 0;\n\n    return {\n      restore: function(oldTranscript) {\n        transcript = angular.copy(oldTranscript);\n      },\n      init: function() {\n        transcript = [];\n        numAnswersSubmitted = 0;\n      },\n      getStateHistory: function() {\n        var result = [];\n        transcript.forEach(function(transcriptItem) {\n          result.push(transcriptItem.getStateName());\n        });\n        return result;\n      },\n      addNewCard: function(\n          stateName, params, contentHtml, interactionHtml,\n          interaction, leadsToConceptCard) {\n        transcript.push(\n          StateCardObjectFactory.createNewCard(\n            stateName, params, contentHtml, interactionHtml,\n            interaction, leadsToConceptCard\n          )\n        );\n        numAnswersSubmitted = 0;\n      },\n      addPreviousCard: function() {\n        if (transcript.length === 1) {\n          throw Error(\n            \'Exploration player is on the first card and hence no previous \' +\n            \'card exists.\');\n        }\n        // TODO(aks681): Once worked examples are introduced, modify the below\n        // line to take into account the number of worked examples displayed.\n        var previousCard = angular.copy(transcript[transcript.length - 2]);\n        previousCard.setLeadsToConceptCard(false);\n        transcript.push(previousCard);\n      },\n      setDestination: function(newDestStateName) {\n        var lastCard = this.getLastCard();\n        if (lastCard.getDestStateName()) {\n          throw Error(\n            \'Trying to set a destStateName when it has already been set.\',\n            transcript);\n        }\n\n        lastCard.setDestStateName(newDestStateName);\n      },\n      addNewInput: function(input, isHint) {\n        var card = this.getLastCard();\n        var pairs = card.getInputResponsePairs();\n        if (pairs.length > 0 && card.getLastOppiaResponse() === null) {\n          throw Error(\n            \'Trying to add an input before the response for the previous \' +\n            \'input has been received.\',\n            transcript);\n        }\n        if (!isHint) {\n          numAnswersSubmitted += 1;\n        }\n        transcript[transcript.length - 1].addInputResponsePair({\n          learnerInput: input,\n          oppiaResponse: null,\n          isHint: isHint\n        });\n      },\n      addNewResponse: function(response) {\n        var card = this.getLastCard();\n        if (card.getLastOppiaResponse() !== null) {\n          throw Error(\n            \'Trying to add a response when it has already been added.\',\n            transcript);\n        }\n        card.setLastOppiaResponse(response);\n      },\n      getNumCards: function() {\n        return transcript.length;\n      },\n      getCard: function(index) {\n        if (index < 0 || index >= transcript.length) {\n          $log.error(\n            \'Requested card with index \' + index +\n            \', but transcript only has length \' +\n            transcript.length + \' cards.\');\n        }\n        return transcript[index];\n      },\n      getLastAnswerOnActiveCard: function(activeCardIndex) {\n        if (\n          this.isLastCard(activeCardIndex) ||\n          transcript[activeCardIndex].getStateName() === null ||\n          transcript[activeCardIndex].getInputResponsePairs().length === 0) {\n          return null;\n        } else {\n          return transcript[activeCardIndex].\n            getInputResponsePairs().slice(-1)[0].learnerInput;\n        }\n      },\n      isLastCard: function(index) {\n        return index === transcript.length - 1;\n      },\n      getLastCard: function() {\n        return this.getCard(transcript.length - 1);\n      },\n      setCurrentCardLeadsToConceptCard: function() {\n        this.getLastCard().setLeadsToConceptCard(true);\n      },\n      getNumSubmitsForLastCard: function() {\n        return numAnswersSubmitted;\n      },\n      updateLatestInteractionHtml: function(newInteractionHtml) {\n        this.getLastCard().setInteractionHtml(newInteractionHtml);\n      },\n      getLastStateName: function() {\n        return this.getLastCard().getStateName();\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
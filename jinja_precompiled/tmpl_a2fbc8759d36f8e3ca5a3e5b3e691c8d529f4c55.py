from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/PlayerTranscriptService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for the learner view transcript.\n */\n\n// A service that maintains the transcript of the playthrough (i.e., what cards\n// are shown, what answers have been given, etc. Note that this service does\n// not maintain the currently-active card -- it\'s more like a log of what the\n// learner has \'discovered\' so far.\noppia.factory(\'PlayerTranscriptService\', [\'$log\', function($log) {\n  // Each element of this array represents a \'card\' in the learner view,\n  // represented as a JavaScript object with the following keys:\n  // - stateName: the name of the state\n  // - currentParams: an object with the current parameter names and values.\n  //   Each object has two keys:\n  //   - parameterName: the name of the parameter\n  //   - parameterValue: the new value of the parameter\n  // - contentHtml: the HTML representing the non-interactive content, i.e.\n  //     what Oppia first says to the learner before asking for a response\n  // - interactionHtml: the HTML representing the interaction\n  // - inputResponsePairs: a list of input response pairs:\n  //   - learnerInput: the JS representation of the learner\'s input. This can\n  //       either be an answer or a request for a hint.\n  //   - oppiaResponse: the HTML representation of Oppia\'s response to\n  //       the learner\'s input. This could either be a hint or a feedback for\n  //       the learner\'s answer.\n  //   - isHint: A boolean value representing if the current input is a request\n  //       for a hint.\n  // - destStateName: if non-null, this means that the learner is ready to move\n  //     on. It represents the state name of the next card.\n  //\n  // Note that every card in this transcript is visible on the screen. The\n  // \'destStateName\' field is intended to identify transcripts where there is a\n  // card \'in reserve\', but the learner has not yet navigated to it -- this\n  // happens if the current card offers feedback to the learner before they\n  // carry on.\n  var transcript = [];\n  var numAnswersSubmitted = 0;\n\n  return {\n    restore: function(oldTranscript) {\n      transcript = angular.copy(oldTranscript);\n    },\n    init: function() {\n      transcript = [];\n      numAnswersSubmitted = 0;\n    },\n    getStateHistory: function() {\n      var result = [];\n      transcript.forEach(function(transcriptItem) {\n        result.push(transcriptItem.stateName);\n      });\n      return result;\n    },\n    addNewCard: function(stateName, params, contentHtml, interactionHtml) {\n      transcript.push({\n        stateName: stateName,\n        currentParams: params,\n        contentHtml: contentHtml,\n        interactionHtml: interactionHtml,\n        inputResponsePairs: [],\n        destStateName: null\n      });\n      numAnswersSubmitted = 0;\n    },\n    setDestination: function(newDestStateName) {\n      var lastCard = this.getLastCard();\n      if (lastCard.destStateName) {\n        throw Error(\n          \'Trying to set a destStateName when it has already been set.\',\n          transcript);\n      }\n\n      lastCard.destStateName = newDestStateName;\n    },\n    addNewInput: function(input, isHint) {\n      var pairs = transcript[transcript.length - 1].inputResponsePairs;\n      if (pairs.length > 0 &&\n          pairs[pairs.length - 1].oppiaResponse === null) {\n        throw Error(\n          \'Trying to add an input before the response for the previous \' +\n          \'input has been received.\',\n          transcript);\n      }\n      if (!isHint) {\n        numAnswersSubmitted += 1;\n      }\n      transcript[transcript.length - 1].inputResponsePairs.push({\n        learnerInput: input,\n        oppiaResponse: null,\n        isHint: isHint\n      });\n    },\n    addNewResponse: function(response) {\n      var pairs = transcript[transcript.length - 1].inputResponsePairs;\n      if (pairs[pairs.length - 1].oppiaResponse !== null) {\n        throw Error(\n          \'Trying to add a response when it has already been added.\',\n          transcript);\n      }\n      pairs[pairs.length - 1].oppiaResponse = response;\n    },\n    getNumCards: function() {\n      return transcript.length;\n    },\n    getCard: function(index) {\n      if (index < 0 || index >= transcript.length) {\n        $log.error(\n          \'Requested card with index \' + index +\n          \', but transcript only has length \' + transcript.length + \' cards.\');\n      }\n      return transcript[index];\n    },\n    getLastAnswerOnActiveCard: function(index) {\n      if (this.isLastCard(index)) {\n        return null;\n      } else {\n        return transcript[index].\n          inputResponsePairs.slice(-1)[0].learnerInput;\n      }\n    },\n    isLastCard: function(index) {\n      return index === transcript.length - 1;\n    },\n    getLastCard: function() {\n      return this.getCard(transcript.length - 1);\n    },\n    getNumSubmitsForLastCard: function() {\n      return numAnswersSubmitted;\n    },\n    updateLatestInteractionHtml: function(newInteractionHtml) {\n      this.getLastCard().interactionHtml = newInteractionHtml;\n    },\n    getLastStateName: function() {\n      return this.getLastCard().stateName;\n    }\n  };\n}]);'

blocks = {}
debug_info = ''
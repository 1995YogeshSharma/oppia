from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/learner_dashboard/LearnerDashboardIdsBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for LearnerDashboardIdsBackendApiService.\n */\n\ndescribe(\'Learner Dashboard Backend API Service\', function() {\n  var LearnerDashboardIdsBackendApiService = null;\n  var $httpBackend = null;\n\n  var sampleDataResults = {\n    username: \'test\',\n    profile_picture_data_url: \'TestURL\',\n    learner_dashboard_activity_ids: {\n      completed_exploration_ids: [],\n      exploration_playlist_ids: [],\n      completed_collection_ids: [],\n      incomplete_exploration_ids: [],\n      collection_playlist_ids: [],\n      incomplete_collection_ids: []\n    },\n    user_email: \'test@example.com\',\n    is_admin: false,\n    is_super_admin: false,\n    is_moderator: false\n  };\n\n  var LEARNER_DASHBOARD_IDS_DATA_URL = \'/learnerdashboardidshandler/data\';\n  var ERROR_STATUS_CODE = 500;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    LearnerDashboardIdsBackendApiService = $injector.get(\n      \'LearnerDashboardIdsBackendApiService\');\n    UrlInterpolationService = $injector.get(\'UrlInterpolationService\');\n    $httpBackend = $injector.get(\'$httpBackend\');\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully fetch learner dashboard IDs data from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', LEARNER_DASHBOARD_IDS_DATA_URL).respond(\n        sampleDataResults);\n      LearnerDashboardIdsBackendApiService.fetchLearnerDashboardIds().then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(jasmine.objectContaining(\n        {data: sampleDataResults}));\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\n    \'should use rejection handler if learner dashboard IDs\' +\n    \' data backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', LEARNER_DASHBOARD_IDS_DATA_URL).respond(\n        ERROR_STATUS_CODE, \'Error loading dashboard IDs data.\');\n      LearnerDashboardIdsBackendApiService.fetchLearnerDashboardIds().then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(jasmine.objectContaining(\n        {data: \'Error loading dashboard IDs data.\'}));\n    });\n});'

blocks = {}
debug_info = ''
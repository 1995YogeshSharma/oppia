from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/EditableSkillBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for EditableSkillBackendApiService.\n */\n\ndescribe(\'Editable skill backend API service\', function() {\n  var EditableSkillBackendApiService = null;\n  var UndoRedoService = null;\n  var $httpBackend = null;\n  var sampleResponse = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    EditableSkillBackendApiService = $injector.get(\n      \'EditableSkillBackendApiService\');\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n    $httpBackend = $injector.get(\'$httpBackend\');\n\n    var misconceptionDict1 = {\n      id: \'2\',\n      name: \'test name\',\n      notes: \'test notes\',\n      feedback: \'test feedback\'\n    };\n\n    var misconceptionDict2 = {\n      id: \'4\',\n      name: \'test name\',\n      notes: \'test notes\',\n      feedback: \'test feedback\'\n    };\n\n    var skillContentsDict = {\n      explanation: \'test explanation\',\n      worked_examples: [\'test worked example 1\', \'test worked example 2\']\n    };\n\n    var skillDict = {\n      id: \'1\',\n      description: \'test description\',\n      misconceptions: [misconceptionDict1, misconceptionDict2],\n      skill_contents: skillContentsDict,\n      language_code: \'en\',\n      version: 3\n    };\n\n    sampleResponse = {\n      skill: skillDict\n    };\n  }));\n\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should succesfully fetch an existing skill from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/skill_editor_handler/data/1\').respond(\n        sampleResponse);\n      EditableSkillBackendApiService.fetchSkill(\'1\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(sampleResponse.skill);\n      expect(failHandler).not.toHaveBeenCalled();\n    });\n\n  it(\'should use the rejection handler if backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/skill_editor_handler/data/1\').respond(\n        500, \'Error loading skill 1.\');\n      EditableSkillBackendApiService.fetchSkill(\'1\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\'Error loading skill 1.\');\n    });\n\n  it(\'should make a request to update the skill in the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/skill_editor_handler/data/1\').respond(\n        sampleResponse);\n\n      var skillDict = null;\n      EditableSkillBackendApiService.fetchSkill(\'1\').then(\n        function(data) {\n          skillDict = data;\n        });\n      $httpBackend.flush();\n\n      $httpBackend.expect(\'PUT\', \'/skill_editor_handler/data/1\')\n        .respond({\n          skill: skillDict\n        });\n\n      EditableSkillBackendApiService.updateSkill(\n        skillDict.id, skillDict.version, \'commit message\', []\n      ).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(skillDict);\n      expect(failHandler).not.toHaveBeenCalled();\n    });\n});'

blocks = {}
debug_info = ''
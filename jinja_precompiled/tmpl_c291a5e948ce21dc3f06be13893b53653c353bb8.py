from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/tests/FormBuilderTestPage.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    l_0_paramUnicode1 = resolve('paramUnicode1')
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the form builder test page.\n */\n\noppia.directive(\'formOverlay\', [\n  \'NestedDirectivesRecursionTimeoutPreventionService\',\n  \'UrlInterpolationService\',\n  function(\n      NestedDirectivesRecursionTimeoutPreventionService,\n      UrlInterpolationService) {\n    return {\n      scope: {\n        definition: \'=\',\n        isDisabled: \'&\',\n        savedValue: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/tests/form_entry_point_modal_directive.html\'),\n      restrict: \'E\',\n      compile: NestedDirectivesRecursionTimeoutPreventionService.compile,\n      controller: [\'$scope\', function($scope) {\n        $scope.$watch(\'savedValue\', function() {\n          $scope.localValue = angular.copy($scope.savedValue);\n        });\n\n        $scope.submitValue = function() {\n          $scope.savedValue = angular.copy($scope.localValue);\n          alert($scope.savedValue);\n        };\n        $scope.cancelEdit = function() {\n          $scope.localValue = angular.copy($scope.savedValue);\n        };\n      }]\n    };\n  }\n]);\n\noppia.controller(\'FormBuilderTests\', [\n  \'$scope\', function($scope) {\n    $scope.testText = \'abc%s\';\n\n    $scope.unicodeForm = {\n      schema: {\n        type: \'unicode\'\n      },\n      value: \'aab%s\'\n    };\n\n    $scope.booleanForms = [{\n      name: \'Boolean form\',\n      schema: {\n        type: \'bool\'\n      },\n      value: true\n    }];\n\n    $scope.intForms = [{\n      name: \'Integer form (value must be greater than 2)\',\n      schema: {\n        type: \'int\',\n        validators: [{\n          id: \'is_at_least\',\n          min_value: 2\n        }]\n      },\n      value: 3\n    }];\n\n    $scope.floatForms = [{\n      name: \'Float form (value must be between -3 and 6)\',\n      schema: {\n        type: \'float\',\n        validators: [{\n          id: \'is_at_least\',\n          min_value: -3.0\n        }, {\n          id: \'is_at_most\',\n          max_value: 6.0\n        }]\n      },\n      value: 3.14\n    }];\n\n    $scope.unicodeForms = [{\n      name: \'Restricted unicode form; the value must be either a or b.\',\n      schema: {\n        type: \'unicode\',\n        choices: [\'a\', \'b\']\n      },\n      value: \'a\'\n    }];\n\n    $scope.htmlForms = [{\n      name: \'HTML form\',\n      schema: {\n        type: \'html\'\n      },\n      value: \'Some <b>HTML</b>\'\n    }];\n\n    $scope.compositeForms = [{\n      name: (\n        \'Dict with a bool, a unicode string and a list of ints. \' +\n        \'The string must be either \\\'abc\\\' or \\\'def\\\'.\'),\n      schema: {\n        type: \'dict\',\n        properties: [{\n          name: \'a_unicode_string_appearing_first\',\n          description: \'First field.\',\n          schema: {\n            type: \'unicode\',\n            choices: [\'abc\', \'def\']\n          }\n        }, {\n          name: \'a_list_appearing_second\',\n          description: \'Second field.\',\n          schema: {\n            type: \'list\',\n            items: {\n              type: \'int\'\n            }\n          }\n        }, {\n          name: \'a_boolean_appearing_last\',\n          description: \'Third field.\',\n          schema: {\n            type: \'bool\'\n          }\n        }]\n      },\n      value: {\n        a_boolean_appearing_last: false,\n        a_unicode_string_appearing_first: \'abc\',\n        a_list_appearing_second: [2, 3]\n      }\n    }, {\n      name: \'List of code areas with custom \\\'add element\\\' text\',\n      schema: {\n        type: \'list\',\n        items: {\n          type: \'unicode\',\n          ui_config: {\n            coding_mode: \'python\'\n          }\n        },\n        ui_config: {\n          add_element_text: \'[Custom \\\'add element\\\' text]\'\n        }\n      },\n      value: [\'abc\', \'def\', \'ghi\']\n    }, {\n      name: \'Fixed-length list of 2 multiple-choice floats\',\n      schema: {\n        type: \'list\',\n        items: {\n          type: \'float\',\n          choices: [1.0, 0.0, -1.0, -2.0, -3.0]\n        },\n        len: 2\n      },\n      value: [1.0, -3.0]\n    }, {\n      name: \'List of complex items (no descriptions in the dicts)\',\n      schema: {\n        type: \'list\',\n        items: {\n          type: \'dict\',\n          properties: [{\n            name: \'intField\',\n            schema: {\n              type: \'int\'\n            }\n          }, {\n            name: \'htmlField\',\n            schema: {\n              type: \'html\'\n            }\n          }]\n        }\n      },\n      value: [{\n        intField: 5,\n        htmlField: \'<span><b>d</b>ef</span>\'\n      }]\n    }, {\n      name: \'Nested lists\',\n      schema: {\n        type: \'list\',\n        items: {\n          type: \'list\',\n          items: {\n            type: \'unicode\'\n          }\n        }\n      },\n      value: [[\'abc\'], [\'def\', \'ghi\']]\n    }];\n\n    $scope.formsets = [{\n      name: \'Boolean editors\',\n      forms: $scope.booleanForms\n    }, {\n      name: \'Integer editors\',\n      forms: $scope.intForms\n    }, {\n      name: \'Float editors\',\n      forms: $scope.floatForms\n    }, {\n      name: \'Unicode editors\',\n      forms: $scope.unicodeForms\n    }, {\n      name: \'HTML editors\',\n      forms: $scope.htmlForms\n    }, {\n      name: \'Composite editors\',\n      forms: $scope.compositeForms\n    }];\n  }\n]);' % (
        escape((undefined(name='paramUnicode1') if l_0_paramUnicode1 is missing else l_0_paramUnicode1)), 
        escape((undefined(name='paramUnicode1') if l_0_paramUnicode1 is missing else l_0_paramUnicode1)), 
    )

blocks = {}
debug_info = '54=12&60=13'
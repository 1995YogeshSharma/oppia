from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/StateInteraction.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for a state\'s interaction editor.\n */\n\noppia.controller(\'StateInteraction\', [\n  \'$scope\', \'$http\', \'$rootScope\', \'$uibModal\', \'$injector\', \'$filter\',\n  \'AlertsService\', \'EditorStateService\', \'HtmlEscaperService\',\n  \'INTERACTION_SPECS\', \'stateInteractionIdService\',\n  \'stateCustomizationArgsService\', \'EditabilityService\',\n  \'ExplorationStatesService\', \'GraphDataService\',\n  \'InteractionDetailsCacheService\',\n  \'ExplorationHtmlFormatterService\', \'UrlInterpolationService\',\n  \'SubtitledHtmlObjectFactory\', \'stateSolutionService\', \'stateContentService\',\n  function($scope, $http, $rootScope, $uibModal, $injector, $filter,\n      AlertsService, EditorStateService, HtmlEscaperService,\n      INTERACTION_SPECS, stateInteractionIdService,\n      stateCustomizationArgsService, EditabilityService,\n      ExplorationStatesService, GraphDataService,\n      InteractionDetailsCacheService,\n      ExplorationHtmlFormatterService, UrlInterpolationService,\n      SubtitledHtmlObjectFactory, stateSolutionService, stateContentService) {\n    var DEFAULT_TERMINAL_STATE_CONTENT = \'Congratulations, you have finished!\';\n\n    // Declare dummy submitAnswer() and adjustPageHeight() methods for the\n    // interaction preview.\n    $scope.submitAnswer = function() {};\n    $scope.adjustPageHeight = function() {};\n\n    $scope.stateInteractionIdService = stateInteractionIdService;\n    $scope.hasLoaded = false;\n    $scope.customizationModalReopened = false;\n\n    $scope.userBlueImgUrl = UrlInterpolationService.getStaticImageUrl(\n      \'/avatar/user_blue_72px.png\');\n    $scope.userBlackImgUrl = UrlInterpolationService.getStaticImageUrl(\n      \'/avatar/user_black_72px.png\');\n\n    $scope.getCurrentInteractionName = function() {\n      return (\n        stateInteractionIdService.savedMemento ?\n          INTERACTION_SPECS[stateInteractionIdService.savedMemento].name : \'\');\n    };\n\n    $scope.doesCurrentInteractionHaveCustomizations = function() {\n      var interactionSpec = INTERACTION_SPECS[\n        stateInteractionIdService.savedMemento];\n      return (\n        interactionSpec && interactionSpec.customization_arg_specs.length > 0);\n    };\n\n    var _getInteractionPreviewTag = function(interactionCustomizationArgs) {\n      if (!stateInteractionIdService.savedMemento) {\n        return \'\';\n      }\n      return ExplorationHtmlFormatterService.getInteractionHtml(\n        stateInteractionIdService.savedMemento, interactionCustomizationArgs,\n        false);\n    };\n\n    $scope.$on(\'stateEditorInitialized\', function(evt, stateData) {\n      $scope.hasLoaded = false;\n\n      InteractionDetailsCacheService.reset();\n\n      $scope.stateName = EditorStateService.getActiveStateName();\n\n      stateInteractionIdService.init(\n        $scope.stateName, stateData.interaction.id);\n      stateCustomizationArgsService.init(\n        $scope.stateName, stateData.interaction.customizationArgs);\n\n      stateSolutionService.init(\n        EditorStateService.getActiveStateName(),\n        stateData.interaction.solution);\n\n      $rootScope.$broadcast(\'initializeAnswerGroups\', {\n        interactionId: stateData.interaction.id,\n        answerGroups: stateData.interaction.answerGroups,\n        defaultOutcome: stateData.interaction.defaultOutcome,\n        confirmedUnclassifiedAnswers: (\n          stateData.interaction.confirmedUnclassifiedAnswers)\n      });\n\n      _updateInteractionPreviewAndAnswerChoices();\n      $scope.hasLoaded = true;\n    });\n\n    // If a terminal interaction is selected for a state with no content, this\n    // function sets the content to DEFAULT_TERMINAL_STATE_CONTENT.\n    // NOTE TO DEVELOPERS: Callers of this function must ensure that the current\n    // active state is a terminal one.\n    var updateDefaultTerminalStateContentIfEmpty = function() {\n      // Get current state.\n      var stateName = EditorStateService.getActiveStateName();\n\n      // Check if the content is currently empty, as expected.\n      var previousContent = stateContentService.savedMemento;\n      if (!previousContent.isEmpty()) {\n        return;\n      }\n\n      // Update the state\'s content.\n      stateContentService.displayed = SubtitledHtmlObjectFactory.createDefault(\n        DEFAULT_TERMINAL_STATE_CONTENT);\n      stateContentService.saveDisplayedValue();\n    };\n\n    $scope.onCustomizationModalSavePostHook = function() {\n      var hasInteractionIdChanged = (\n        stateInteractionIdService.displayed !==\n        stateInteractionIdService.savedMemento);\n      if (hasInteractionIdChanged) {\n        if (INTERACTION_SPECS[stateInteractionIdService.displayed]\n          .is_terminal) {\n          updateDefaultTerminalStateContentIfEmpty();\n        }\n        stateInteractionIdService.saveDisplayedValue();\n      }\n\n      stateCustomizationArgsService.saveDisplayedValue();\n\n      InteractionDetailsCacheService.set(\n        stateInteractionIdService.savedMemento,\n        stateCustomizationArgsService.savedMemento);\n\n      // This must be called here so that the rules are updated before the state\n      // graph is recomputed.\n      if (hasInteractionIdChanged) {\n        $rootScope.$broadcast(\n          \'onInteractionIdChanged\', stateInteractionIdService.savedMemento);\n      }\n\n      GraphDataService.recompute();\n      _updateInteractionPreviewAndAnswerChoices();\n    };\n\n    $scope.openInteractionCustomizerModal = function() {\n      if (EditabilityService.isEditable()) {\n        AlertsService.clearWarnings();\n\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_editor/editor_tab/\' +\n            \'customize_interaction_modal_directive.html\'),\n          backdrop: true,\n          resolve: {},\n          controller: [\n            \'$scope\', \'$uibModalInstance\', \'$injector\', \'stateSolutionService\',\n            \'stateInteractionIdService\', \'stateCustomizationArgsService\',\n            \'InteractionDetailsCacheService\', \'INTERACTION_SPECS\',\n            \'UrlInterpolationService\', \'EditorFirstTimeEventsService\',\n            function(\n                $scope, $uibModalInstance, $injector, stateSolutionService,\n                stateInteractionIdService, stateCustomizationArgsService,\n                InteractionDetailsCacheService, INTERACTION_SPECS,\n                UrlInterpolationService, EditorFirstTimeEventsService) {\n              EditorFirstTimeEventsService\n                .registerFirstClickAddInteractionEvent();\n\n              // This binds the services to the HTML template, so that their\n              // displayed values can be used in the HTML.\n              $scope.stateInteractionIdService = stateInteractionIdService;\n              $scope.stateCustomizationArgsService = (\n                stateCustomizationArgsService);\n\n              $scope.getInteractionThumbnailImageUrl = (\n                UrlInterpolationService.getInteractionThumbnailImageUrl);\n\n              $scope.INTERACTION_SPECS = INTERACTION_SPECS;\n              $scope.ALLOWED_INTERACTION_CATEGORIES = (\n                GLOBALS.ALLOWED_INTERACTION_CATEGORIES);\n\n              if (stateInteractionIdService.savedMemento) {\n                $scope.customizationModalReopened = true;\n                var interactionSpec = INTERACTION_SPECS[\n                  stateInteractionIdService.savedMemento];\n                $scope.customizationArgSpecs = (\n                  interactionSpec.customization_arg_specs);\n\n                stateInteractionIdService.displayed = angular.copy(\n                  stateInteractionIdService.savedMemento);\n                stateCustomizationArgsService.displayed = {};\n                // Ensure that stateCustomizationArgsService.displayed is fully\n                // populated.\n                for (var i = 0; i < $scope.customizationArgSpecs.length; i++) {\n                  var argName = $scope.customizationArgSpecs[i].name;\n                  stateCustomizationArgsService.displayed[argName] = {\n                    value: (\n                      stateCustomizationArgsService.savedMemento.hasOwnProperty(\n                        argName) ?\n                        angular.copy(\n                          stateCustomizationArgsService.savedMemento[\n                            argName].value) :\n                        angular.copy(\n                          $scope.customizationArgSpecs[i].default_value)\n                    )\n                  };\n                }\n\n                $scope.$broadcast(\'schemaBasedFormsShown\');\n                $scope.form = {};\n                $scope.hasCustomizationArgs = (Object.keys(\n                  stateCustomizationArgsService.displayed).length > 0);\n              }\n\n              $scope.getCustomizationArgsWarningsList = function() {\n                var validationServiceName =\n                  INTERACTION_SPECS[\n                    $scope.stateInteractionIdService.displayed].id +\n                  \'ValidationService\';\n                var validationService = $injector.get(validationServiceName);\n                var warningsList =\n                  validationService.getCustomizationArgsWarnings(\n                    stateCustomizationArgsService.displayed);\n                return warningsList;\n              };\n\n              $scope.onChangeInteractionId = function(newInteractionId) {\n                EditorFirstTimeEventsService\n                  .registerFirstSelectInteractionTypeEvent();\n\n                var interactionSpec = INTERACTION_SPECS[newInteractionId];\n                $scope.customizationArgSpecs = (\n                  interactionSpec.customization_arg_specs);\n\n                stateInteractionIdService.displayed = newInteractionId;\n                stateCustomizationArgsService.displayed = {};\n                if (InteractionDetailsCacheService.contains(newInteractionId)) {\n                  stateCustomizationArgsService.displayed = (\n                    InteractionDetailsCacheService.get(\n                      newInteractionId).customization);\n                } else {\n                  $scope.customizationArgSpecs.forEach(function(caSpec) {\n                    stateCustomizationArgsService.displayed[caSpec.name] = {\n                      value: angular.copy(caSpec.default_value)\n                    };\n                  });\n                }\n\n                if (Object.keys(\n                  stateCustomizationArgsService.displayed).length === 0) {\n                  $scope.save();\n                  $scope.hasCustomizationArgs = false;\n                } else {\n                  $scope.hasCustomizationArgs = true;\n                }\n\n                $scope.$broadcast(\'schemaBasedFormsShown\');\n                $scope.form = {};\n              };\n\n              $scope.returnToInteractionSelector = function() {\n                InteractionDetailsCacheService.set(\n                  stateInteractionIdService.displayed,\n                  stateCustomizationArgsService.displayed);\n\n                stateInteractionIdService.displayed = null;\n                stateCustomizationArgsService.displayed = {};\n              };\n\n              $scope.isSaveInteractionButtonEnabled = function() {\n                return $scope.hasCustomizationArgs &&\n                  $scope.stateInteractionIdService.displayed &&\n                  $scope.form.schemaForm.$valid &&\n                  $scope.getCustomizationArgsWarningsList().length === 0;\n              };\n\n              $scope.getSaveInteractionButtonTooltip = function() {\n                if (!$scope.hasCustomizationArgs) {\n                  return \'No customization arguments\';\n                }\n                if (!$scope.stateInteractionIdService.displayed) {\n                  return \'No interaction being displayed\';\n                }\n\n                var warningsList = $scope.getCustomizationArgsWarningsList();\n                var warningMessages = warningsList.map(function(warning) {\n                  return warning.message;\n                });\n\n                if (warningMessages.length === 0) {\n                  if ($scope.form.schemaForm.$invalid) {\n                    return \'Some of the form entries are invalid.\';\n                  } else {\n                    return \'\';\n                  }\n                } else {\n                  return warningMessages.join(\' \');\n                }\n              };\n\n              $scope.save = function() {\n                EditorFirstTimeEventsService\n                  .registerFirstSaveInteractionEvent();\n                $uibModalInstance.close();\n              };\n\n              $scope.okay = function() {\n                $uibModalInstance.close(\'okay\');\n              };\n\n              $scope.cancel = function() {\n                $uibModalInstance.dismiss(\'cancel\');\n              };\n            }\n          ]\n        }).result.then($scope.onCustomizationModalSavePostHook, function() {\n          stateInteractionIdService.restoreFromMemento();\n          stateCustomizationArgsService.restoreFromMemento();\n        });\n      }\n    };\n\n    $scope.deleteInteraction = function() {\n      AlertsService.clearWarnings();\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/editor_tab/\' +\n          \'delete_interaction_modal_directive.html\'),\n        backdrop: true,\n        controller: [\n          \'$scope\', \'$uibModalInstance\', function($scope, $uibModalInstance) {\n            $scope.reallyDelete = function() {\n              $uibModalInstance.close();\n            };\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n              AlertsService.clearWarnings();\n            };\n          }\n        ]\n      }).result.then(function() {\n        stateInteractionIdService.displayed = null;\n        stateCustomizationArgsService.displayed = {};\n        stateSolutionService.displayed = null;\n        InteractionDetailsCacheService.removeDetails(\n          stateInteractionIdService.savedMemento);\n        stateInteractionIdService.saveDisplayedValue();\n        stateCustomizationArgsService.saveDisplayedValue();\n        stateSolutionService.saveDisplayedValue();\n        $rootScope.$broadcast(\n          \'onInteractionIdChanged\', stateInteractionIdService.savedMemento);\n        GraphDataService.recompute();\n        _updateInteractionPreviewAndAnswerChoices();\n      });\n    };\n\n    var _updateInteractionPreviewAndAnswerChoices = function() {\n      $scope.interactionId = stateInteractionIdService.savedMemento;\n\n      var currentCustomizationArgs = stateCustomizationArgsService.savedMemento;\n      $scope.interactionPreviewHtml = _getInteractionPreviewTag(\n        currentCustomizationArgs);\n\n      // Special cases for multiple choice input and image click input.\n      if ($scope.interactionId === \'MultipleChoiceInput\') {\n        $rootScope.$broadcast(\n          \'updateAnswerChoices\',\n          currentCustomizationArgs.choices.value.map(function(val, ind) {\n            return {\n              val: ind,\n              label: val\n            };\n          })\n        );\n      } else if ($scope.interactionId === \'ImageClickInput\') {\n        var _answerChoices = [];\n        var imageWithRegions = currentCustomizationArgs.imageAndRegions.value;\n        for (var j = 0; j < imageWithRegions.labeledRegions.length; j++) {\n          _answerChoices.push({\n            val: imageWithRegions.labeledRegions[j].label,\n            label: imageWithRegions.labeledRegions[j].label\n          });\n        }\n\n        $rootScope.$broadcast(\'updateAnswerChoices\', _answerChoices);\n      } else if ($scope.interactionId === \'ItemSelectionInput\') {\n        $rootScope.$broadcast(\n          \'updateAnswerChoices\',\n          currentCustomizationArgs.choices.value.map(function(val) {\n            return {\n              val: val,\n              label: val\n            };\n          })\n        );\n      } else {\n        $rootScope.$broadcast(\'updateAnswerChoices\', null);\n      }\n    };\n  }\n]);\n\noppia.directive(\'testInteractionPanel\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        stateContent: \'&\',\n        inputTemplate: \'&\',\n        onSubmitAnswer: \'&\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/editor_tab/\' +\n        \'test_interaction_modal_directive.html\'),\n      controller: [\n        \'$scope\', \'EditorStateService\', \'ExplorationStatesService\',\n        \'INTERACTION_SPECS\', \'INTERACTION_DISPLAY_MODE_INLINE\',\n        function($scope, EditorStateService, ExplorationStatesService,\n            INTERACTION_SPECS, INTERACTION_DISPLAY_MODE_INLINE) {\n          var _stateName = EditorStateService.getActiveStateName();\n          var _state = ExplorationStatesService.getState(_stateName);\n          $scope.interactionIsInline = (\n            INTERACTION_SPECS[_state.interaction.id].display_mode ===\n            INTERACTION_DISPLAY_MODE_INLINE);\n          $scope.submitAnswer = function(answer) {\n            $scope.onSubmitAnswer({\n              answer: answer\n            });\n          };\n        }\n      ]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/ImagePreloaderServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \'License\');\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \'AS-IS\' BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the image preloader service.\n */\n\ndescribe(\'Image preloader service\', function() {\n  beforeEach(function() {\n    module(\'oppia\');\n    // Set a global value for INTERACTION_SPECS that will be used by all the\n    // descendant dependencies.\n    module(function($provide) {\n      $provide.constant(\'INTERACTION_SPECS\', {\n        TextInput: {\n          is_terminal: false\n        },\n        ItemSelectionInput: {\n          is_terminal: false\n        },\n        MultipleChoiceInput: {\n          is_terminal: false\n        },\n        Continue: {\n          is_terminal: false\n        },\n        EndExploration: {\n          is_terminal: true\n        }\n      });\n    });\n  });\n\n  var abas, ips, eof, ecs;\n  var $httpBackend = null;\n  var $rootScope = null;\n  var explorationDict;\n  var requestUrl1, requestUrl2, requestUrl3, requestUrl4, requestUrl5;\n  beforeEach(inject(function($injector) {\n    $httpBackend = $injector.get(\'$httpBackend\');\n    ips = $injector.get(\'ImagePreloaderService\');\n    eof = $injector.get(\'ExplorationObjectFactory\');\n    ecs = $injector.get(\'ContextService\');\n    abas = $injector.get(\'AssetsBackendApiService\');\n    spyOn(ecs, \'getExplorationId\').and.returnValue(\'1\');\n    $rootScope = $injector.get(\'$rootScope\');\n    explorationDict = {\n      id: 1,\n      title: \'My Title\',\n      category: \'Art\',\n      objective: \'Your objective\',\n      tags: [],\n      blurb: \'\',\n      author_notes: \'\',\n      states_schema_version: 15,\n      init_state_name: \'Introduction\',\n      states: {\n        \'State 1\': {\n          param_changes: [],\n          content: {\n            html: \'\',\n            audio_translations: {}\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {}\n          },\n          interaction: {\n            id: \'Continue\',\n            default_outcome: {\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'\'\n              },\n              dest: \'State 3\',\n              param_changes: []\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              buttonText: {\n                value: \'Continue\'\n              }\n            },\n            solution: null,\n            answer_groups: [],\n            hints: []\n          },\n          classifier_model_id: null\n        },\n        \'State 3\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'Congratulations, you have finished!\'\n          },\n          content_ids_to_audio_translations: {\n            content: {}\n          },\n          interaction: {\n            id: \'EndExploration\',\n            default_outcome: null,\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              recommendedExplorationIds: {\n                value: []\n              }\n            },\n            solution: null,\n            answer_groups: [],\n            hints: []\n          },\n          classifier_model_id: null\n        },\n        Introduction: {\n          classifier_model_id: null,\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'Multiple Choice\'\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {},\n            feedback_1: {},\n            feedback_2: {}\n          },\n          interaction: {\n            id: \'MultipleChoiceInput\',\n            default_outcome: {\n              dest: \'Introduction\',\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'Try Again!\'\n              }\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              choices: {\n                value: [\n                  \'<p> Go to ItemSelection <oppia-noninteractive-image\' +\n                  \' filepath-with-value="&amp;quot;\' +\n                  \'sIMChoice1_height_32_width_42.png&amp;\' +\n                  \'quot;"></oppia-noninteractive-image></p>\',\n                  \'<p> Go to ImageAndRegion<oppia-noninteractive-image\' +\n                  \' filepath-with-value="&amp;quot;\' +\n                  \'sIMChoice2_height_30_width_40.png&amp;\' +\n                  \'quot;"></oppia-noninteractive-image></p>\'\n                ]\n              }\n            },\n            answer_groups: [\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 6\',\n                  feedback: {\n                    content_id: \'feedback_1\',\n                    html: \'<p>We are going to ItemSelection\' +\n                          \'<oppia-noninteractive-image filepath-with-value=\' +\n                          \'"&amp;quot;sIOFeedback_height_50_width_50.png\' +\n                          \'&amp;quot;"></oppia-noninteractive-image></p>\'\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null,\n                  missing_prerequisite_skill_id: null\n                },\n                rule_specs: [\n                  {\n                    inputs: {\n                      x: 0\n                    },\n                    rule_type: \'Equals\'\n                  }\n                ]\n              },\n              {\n                labelled_as_correct: false,\n                outcome: {\n                  dest: \'State 1\',\n                  feedback: {\n                    content_id: \'feedback_2\',\n                    html: "Let\'s go to state 1 ImageAndRegion"\n                  },\n                  param_changes: [],\n                  refresher_exploration_id: null,\n                  missing_prerequisite_skill_id: null\n                },\n                rule_specs: [\n                  {\n                    inputs: {\n                      x: 1\n                    },\n                    rule_type: \'Equals\'\n                  }\n                ]\n              }\n            ],\n            hints: [],\n            solution: null\n          }\n        },\n        \'State 6\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'<p>Text Input Content</p>\'\n          },\n          content_ids_to_audio_translations: {\n            content: {},\n            default_outcome: {},\n            feedback_1: {},\n            feedback_2: {},\n            hint_1: {}\n          },\n          interaction: {\n            id: \'TextInput\',\n            default_outcome: {\n              dest: \'State 6\',\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'\'\n              },\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null,\n              missing_prerequisite_skill_id: null\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              rows: {\n                value: 1\n              },\n              placeholder: {\n                value: \'\'\n              }\n            },\n            answer_groups: [{\n              rule_specs: [{\n                inputs: {\n                  x: \'1\'\n                },\n                rule_type: \'Contains\'\n              }],\n              outcome: {\n                dest: \'State 1\',\n                feedback: {\n                  content_id: \'feedback_1\',\n                  html: "<p>Let\'s go to State 1</p>"\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null,\n                missing_prerequisite_skill_id: null\n              }\n            }, {\n              rule_specs: [{\n                inputs: {\n                  x: \'2\'\n                },\n                rule_type: \'Contains\'\n              }],\n              outcome: {\n                dest: \'State 1\',\n                feedback: {\n                  content_id: \'feedback_2\',\n                  html: "<p>Let\'s go to State 1</p>"\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null,\n                missing_prerequisite_skill_id: null\n              }\n            }],\n            hints: [{\n              hint_content: {\n                content_id: \'hint_1\',\n                html: \'<p><oppia-noninteractive-image filepath-with-value="\' +\n                      \'&amp;quot;s6Hint1_height_60_width_60.png&amp;quot;">\' +\n                      \'</oppia-noninteractive-image></p>\'\n              }\n            }],\n            solution: null,\n          },\n          classifier_model_id: null\n        }\n      },\n      param_specs: {},\n      param_changes: [],\n      version: 1\n    };\n\n    requestUrl1 = UrlInterpolationService.interpolateUrl(\n      \'/imagehandler/<exploration_id>/<filename>\', {\n        exploration_id: \'1\',\n        filename: \'sIMChoice1_height_32_width_42.png\'\n      });\n    requestUrl2 = UrlInterpolationService.interpolateUrl(\n      \'/imagehandler/<exploration_id>/<filename>\', {\n        exploration_id: \'1\',\n        filename: \'sIMChoice2_height_30_width_40.png\'\n      });\n    requestUrl3 = UrlInterpolationService.interpolateUrl(\n      \'/imagehandler/<exploration_id>/<filename>\', {\n        exploration_id: \'1\',\n        filename: \'sIOFeedback_height_50_width_50.png\'\n      });\n    requestUrl4 = UrlInterpolationService.interpolateUrl(\n      \'/imagehandler/<exploration_id>/<filename>\', {\n        exploration_id: \'1\',\n        filename: \'s6Hint1_height_60_width_60.png\'\n      });\n\n    var exploration = eof.createFromBackendDict(explorationDict);\n    ips.init(exploration);\n    ips.kickOffImagePreloader(exploration.getInitialState().name);\n  }));\n\n  it(\'should maintain the correct number of download requests in queue\',\n    function() {\n      $httpBackend.expect(\'GET\', requestUrl1).respond(201, \'image data 1\');\n      $httpBackend.expect(\'GET\', requestUrl2).respond(201, \'image data 2\');\n      $httpBackend.expect(\'GET\', requestUrl3).respond(201, \'image data 3\');\n      $httpBackend.expect(\'GET\', requestUrl4).respond(201, \'image data 4\');\n      expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(3);\n      expect(ips.isLoadingImageFile(\n        \'sIMChoice1_height_32_width_42.png\')).toBe(true);\n      expect(ips.isLoadingImageFile(\n        \'sIMChoice2_height_30_width_40.png\')).toBe(true);\n      expect(ips.isLoadingImageFile(\n        \'sIOFeedback_height_50_width_50.png\')).toBe(true);\n      expect(ips.isLoadingImageFile(\n        \'s6Hint1_height_60_width_60.png\')).toBe(false);\n      $httpBackend.flush(1);\n      expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(3);\n      $httpBackend.flush(1);\n      expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(2);\n      $httpBackend.flush(1);\n      expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(1);\n      $httpBackend.flush(1);\n      expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(0);\n      expect(ips.isLoadingImageFile(\n        \'sIMChoice1_height_32_width_42.png\')).toBe(false);\n      expect(ips.isLoadingImageFile(\n        \'sIMChoice2_height_30_width_40.png\')).toBe(false);\n      expect(ips.isLoadingImageFile(\n        \'sIOFeedback_height_50_width_50.png\')).toBe(false);\n      expect(ips.isLoadingImageFile(\n        \'s6Hint1_height_60_width_60.png\')).toBe(false);\n    });\n\n  it(\'should properly restart pre-loading from a new state\', function() {\n    expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(3);\n    ips.restartImagePreloader(\'State 6\');\n    expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(1);\n    expect(ips.isLoadingImageFile(\n      \'s6Hint1_height_60_width_60.png\')).toBe(true);\n  });\n\n  it(\'should verify that preloader starts when state changes\', function() {\n    expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(3);\n    expect(ips.isLoadingImageFile(\n      \'s6Hint1_height_60_width_60.png\')).toBe(false);\n    ips.onStateChange(\'State 6\');\n    expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(1);\n    expect(ips.isLoadingImageFile(\n      \'s6Hint1_height_60_width_60.png\')).toBe(true);\n  });\n\n  it(\'should check that there is sync between AssetsBackendApi Service and\' +\n    \'ImagePreloader Service\', function() {\n    var filenamesOfImageCurrentlyDownloading = (\n      ips.getFilenamesOfImageCurrentlyDownloading());\n    var imageFilesCurrentlyBeingRequested = (\n      abas.getAssetsFilesCurrentlyBeingRequested().image\n    );\n    $httpBackend.expect(\'GET\', requestUrl1).respond(201, \'image data 1\');\n    for (x in filenamesOfImageCurrentlyDownloading) {\n      expect(filenamesOfImageCurrentlyDownloading[x]).toBe(\n        imageFilesCurrentlyBeingRequested[x].filename);\n    }\n  });\n\n  it(\'should maintain the filenames of image which failed to download\',\n    function() {\n      $httpBackend.expect(\'GET\', requestUrl1).respond(201, \'image data 1\');\n      $httpBackend.expect(\'GET\', requestUrl2).respond(201, \'image data 2\');\n      $httpBackend.expect(\'GET\', requestUrl3).respond(404);\n      $httpBackend.expect(\'GET\', requestUrl4).respond(408);\n      expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(3);\n      $httpBackend.flush(3);\n      expect(ips.isInFailedDownload(\n        \'sIOFeedback_height_50_width_50.png\')).toBe(true);\n      expect(ips.getFilenamesOfImageCurrentlyDownloading().length).toBe(1);\n      $httpBackend.flush(1);\n      expect(ips.isInFailedDownload(\n        \'s6Hint1_height_60_width_60.png\')).toBe(true);\n      ips.restartImagePreloader(\'State 6\');\n      expect(ips.isInFailedDownload(\n        \'s6Hint1_height_60_width_60.png\')).toBe(false);\n    });\n\n  it(\'should calculate the dimensions of the image file\', function() {\n    dimensions1 = ips.getDimensionsOfImage(\n      \'sIOFeedback_height_50_width_50.png\');\n    expect(dimensions1.width).toBe(50);\n    expect(dimensions1.height).toBe(50);\n    dimensions2 = ips.getDimensionsOfImage(\n      \'sIOFeedback_height_30_width_45_height_56_width_56.png\');\n    expect(dimensions2.width).toBe(56);\n    expect(dimensions2.height).toBe(56);\n    expect(function() {\n      ips.getDimensionsOfImage(\n        \'s6Hint1_height_width_60.png\');\n    }).toThrowError(\n      /it does not contain dimensions/);\n    expect(function() {\n      ips.getDimensionsOfImage(\n        \'sol_height_ds_width_60.png\');\n    }).toThrowError(\n      /it does not contain dimensions/);\n  });\n});'

blocks = {}
debug_info = ''
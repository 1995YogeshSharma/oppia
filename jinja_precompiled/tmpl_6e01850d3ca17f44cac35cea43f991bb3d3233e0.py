from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/suggestion/SuggestionObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n* @fileoverview Unit tests for SuggestionObjectFactory.\n*/\n\ndescribe(\'Suggestion object factory\', function() {\n  beforeEach(function() {\n    module(\'oppia\');\n  });\n\n  var SuggestionObjectFactory = null;\n\n  beforeEach(inject(function($injector) {\n    SuggestionObjectFactory = $injector.get(\'SuggestionObjectFactory\');\n  }));\n\n  it(\'should create a new suggestion from a backend dict.\', function(){\n    suggestionBackendDict = {\n      suggestion_id: \'exploration.exp1.thread1\',\n      suggestion_type: \'edit_exploration_state_content\',\n      target_type: \'exploration\',\n      target_id: \'exp1\',\n      target_version_at_submission: 1,\n      status: \'accepted\',\n      author_name: \'author\',\n      change: {\n        cmd: \'edit_state_property\',\n        property_name: \'content\',\n        state_name: \'state_1\',\n        new_value: \'new suggestion content\',\n        old_value: \'old suggestion content\'\n      },\n      last_updated: 1000\n    };\n    constants.ENABLE_GENERALIZED_FEEDBACK_THREADS = true;\n    suggestion = SuggestionObjectFactory.createFromBackendDict(\n      suggestionBackendDict);\n    expect(suggestion.suggestionType).toEqual(\'edit_exploration_state_content\');\n    expect(suggestion.targetType).toEqual(\'exploration\');\n    expect(suggestion.targetId).toEqual(\'exp1\');\n    expect(suggestion.suggestionId).toEqual(\'exploration.exp1.thread1\');\n    expect(suggestion.status).toEqual(\'accepted\');\n    expect(suggestion.authorName).toEqual(\'author\');\n    expect(suggestion.stateName).toEqual(\'state_1\');\n    expect(suggestion.newValue).toEqual(\'new suggestion content\');\n    expect(suggestion.oldValue).toEqual(\'old suggestion content\');\n    expect(suggestion.lastUpdated).toEqual(1000);\n    expect(suggestion.getThreadId()).toEqual(\'exploration.exp1.thread1\');\n    constants.ENABLE_GENERALIZED_FEEDBACK_THREADS = false;\n  });\n});'

blocks = {}
debug_info = ''
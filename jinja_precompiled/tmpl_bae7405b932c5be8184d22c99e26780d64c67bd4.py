from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/EditableCollectionBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for EditableCollectionBackendApiService.\n */\n\ndescribe(\'Editable collection backend API service\', function() {\n  var EditableCollectionBackendApiService = null;\n  var sampleDataResults = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n  var UndoRedoService = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    EditableCollectionBackendApiService = $injector.get(\n      \'EditableCollectionBackendApiService\');\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n\n    // Sample collection object returnable from the backend\n    sampleDataResults = {\n      collection: {\n        id: \'0\',\n        title: \'Collection Under Test\',\n        category: \'Test\',\n        objective: \'To pass\',\n        version: \'1\',\n        nodes: [{\n          exploration_id: \'0\'\n        }],\n        next_exploration_ids: [],\n        completed_exploration_ids: []\n      }\n    };\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully fetch an existing collection from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/collection_editor_handler/data/0\').respond(\n        sampleDataResults);\n      EditableCollectionBackendApiService.fetchCollection(\'0\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(sampleDataResults.collection);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a collection the first time should fetch it from the backend.\n      $httpBackend.expect(\'GET\', \'/collection_editor_handler/data/1\').respond(\n        500, \'Error loading collection 1.\');\n      EditableCollectionBackendApiService.fetchCollection(\'1\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\'Error loading collection 1.\');\n    }\n  );\n\n  it(\'should update a collection after fetching it from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a collection the first time should fetch it from the backend.\n      $httpBackend.expect(\'GET\', \'/collection_editor_handler/data/0\').respond(\n        sampleDataResults);\n\n      EditableCollectionBackendApiService.fetchCollection(\'0\').then(\n        function(data) {\n          collection = data;\n        });\n      $httpBackend.flush();\n\n      collection.title = \'New Title\';\n      collection.version = \'2\';\n      var collectionWrapper = {\n        collection: collection\n      };\n\n      $httpBackend.expect(\'PUT\', \'/collection_editor_handler/data/0\').respond(\n        collectionWrapper);\n\n      // Send a request to update collection\n      EditableCollectionBackendApiService.updateCollection(\n        collection.id, collection.version, collection.title, []\n      ).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(collection);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n});'

blocks = {}
debug_info = ''
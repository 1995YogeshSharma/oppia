from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/CkEditorRteDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Modal and functionality for the create story button.\n */\n\noppia.directive(\'ckEditorRte\', [\n  \'RteHelperService\', \'ContextService\', \'PAGE_CONTEXT\',\n  function(RteHelperService, ContextService, PAGE_CONTEXT) {\n    return {\n      restrict: \'E\',\n      scope: {\n        uiConfig: \'&\'\n      },\n      template: \'<div><div></div>\' +\n                \'<div contenteditable="true" class="oppia-rte">\' +\n                \'</div></div>\',\n      require: \'?ngModel\',\n\n      link: function(scope, el, attr, ngModel) {\n        var _RICH_TEXT_COMPONENTS = RteHelperService.getRichTextComponents();\n        var names = [];\n        var icons = [];\n        var canUseFs = ContextService.getPageContext() ===\n          PAGE_CONTEXT.EXPLORATION_EDITOR;\n        _RICH_TEXT_COMPONENTS.forEach(function(componentDefn) {\n          if (!((scope.uiConfig() &&\n            scope.uiConfig().hide_complex_extensions &&\n            componentDefn.isComplex) ||\n            (!canUseFs && componentDefn.requiresFs))) {\n            names.push(componentDefn.id);\n            icons.push(componentDefn.iconDataUrl);\n          }\n        });\n\n        /**\n         * Create rules to whitelist all the rich text components and\n         * their wrappers and overlays.\n         * See format of filtering rules here:\n         * http://docs.ckeditor.com/#!/guide/dev_allowed_content_rules\n         */\n        // Whitelist the component tags with any attributes and classes.\n        var componentRule = names.map(function(name) {\n          return \'oppia-noninteractive-\' + name;\n        }).join(\' \') + \'(*)[*];\';\n        // Whitelist the inline component wrapper, which is a\n        // span with a "type" attribute.\n        var inlineWrapperRule = \' span[type];\';\n        // Whitelist the block component wrapper, which is a div\n        // with a "type" attribute and a CSS class.\n        var blockWrapperRule = \' div(oppia-rte-component-container)[type];\';\n        // Whitelist the transparent block component overlay, which is\n        // a div with a CSS class.\n        var blockOverlayRule = \' div(oppia-rte-component-overlay);\';\n        // Put all the rules together.\n        var extraAllowedContentRules = componentRule +\n                                       inlineWrapperRule +\n                                       blockWrapperRule +\n                                       blockOverlayRule;\n\n        var pluginNames = names.map(function(name) {\n          return \'oppia\' + name;\n        }).join(\',\');\n        var buttonNames = [];\n        names.forEach(function(name) {\n          buttonNames.push(\'Oppia\' + name);\n          buttonNames.push(\'-\');\n        });\n        buttonNames.pop();\n        // All icons on the toolbar except the Rich Text components.\n        var allIcons = [\'undo\', \'redo\', \'bold\', \'Italic\', \'numberedList\',\n          \'bulletedList\', \'pre\', \'indent\', \'outdent\'];\n\n        // Add external plugins.\n        CKEDITOR.plugins.addExternal(\n          \'sharedspace\',\n          \'/third_party/static/ckeditor-sharedspace-4.9.2/\', \'plugin.js\');\n        // Pre plugin is not available for 4.9.2 version of CKEditor. This is\n        // a self created plugin (other plugins are provided by CKEditor).\n        CKEDITOR.plugins.addExternal(\n          \'pre\', \'/extensions/ckeditor_plugins/pre/\', \'plugin.js\');\n\n        // Initialize CKEditor.\n        var ck = CKEDITOR.inline(el[0].children[0].children[1], {\n          extraPlugins: \'pre,sharedspace,\' + pluginNames,\n          startupFocus: true,\n          removePlugins: \'indentblock\',\n          title: false,\n          floatSpaceDockedOffsetY: 15,\n          extraAllowedContent: extraAllowedContentRules,\n          sharedSpaces: {\n            top: el[0].children[0].children[0]\n          },\n          skin: \'bootstrapck,/third_party/static/ckeditor-bootstrapck-1.0/\',\n          toolbar: [\n            {\n              name: \'basicstyles\',\n              items: [\'Bold\', \'-\', \'Italic\']\n            },\n            {\n              name: \'paragraph\',\n              items: [\n                \'NumberedList\', \'-\',\n                \'BulletedList\', \'-\',\n                \'Pre\', \'-\',\n                \'Blockquote\', \'-\',\n                \'Indent\', \'-\',\n                \'Outdent\'\n              ]\n            },\n            {\n              name: \'rtecomponents\',\n              items: buttonNames\n            },\n            {\n              name: \'document\',\n              items: [\'Source\']\n            }\n          ]\n        });\n\n        // A RegExp for matching rich text components.\n        var componentRe = (\n          /(<(oppia-noninteractive-(.+?))\\b[^>]*>)[\\s\\S]*?<\\/\\2>/g\n        );\n\n        /**\n         * Before data is loaded into CKEditor, we need to wrap every rte\n         * component in a span (inline) or div (block).\n         * For block elements, we add an overlay div as well.\n         */\n        var wrapComponents = function(html) {\n          if (html === undefined) {\n            return html;\n          }\n          return html.replace(componentRe, function(match, p1, p2, p3) {\n            if (RteHelperService.isInlineComponent(p3)) {\n              return \'<span type="oppia-noninteractive-\' + p3 + \'">\' +\n                    match + \'</span>\';\n            } else {\n              return \'<div type="oppia-noninteractive-\' + p3 + \'"\' +\n                     \'class="oppia-rte-component-container">\' + match +\n                     \'<div class="oppia-rte-component-overlay"></div></div>\';\n            }\n          });\n        };\n\n        ck.on(\'instanceReady\', function() {\n          // Set the css and icons for each toolbar button.\n          names.forEach(function(name, index) {\n            var icon = icons[index];\n            var upperCasedName = name.charAt(0).toUpperCase() + name.slice(1);\n            $(\'.cke_button__oppia\' + name)\n              .css(\'background-image\', \'url("/extensions\' + icon + \'")\')\n              .css(\'background-position\', \'center\')\n              .css(\'background-repeat\', \'no-repeat\')\n              .css(\'height\', \'24px\')\n              .css(\'width\', \'24px\')\n              .css(\'padding\', \'0px 0px\');\n          });\n\n          $(\'.cke_toolbar_separator\')\n            .css(\'height\', \'22px\');\n\n          $(\'.cke_button_icon\')\n            .css(\'height\', \'24px\')\n            .css(\'width\', \'24px\');\n          ck.setData(wrapComponents(ngModel.$viewValue));\n        });\n\n        // Angular rendering of components confuses CKEditor\'s undo system, so\n        // we hide all of that stuff away from CKEditor.\n        ck.on(\'getSnapshot\', function(event) {\n          if (event.data === undefined) {\n            return;\n          }\n          event.data = event.data.replace(componentRe, function(match, p1, p2) {\n            return p1 + \'</\' + p2 + \'>\';\n          });\n        }, null, null, 20);\n\n        ck.on(\'change\', function() {\n          var elt = $(\'<div>\' + ck.getData() + \'</div>\');\n          var textElt = elt[0].childNodes;\n          for (var i = textElt.length; i > 0; i--) {\n            for (var j = textElt[i - 1].childNodes.length; j > 0; j--) {\n              if (textElt[i - 1].childNodes[j - 1].nodeName === \'BR\' ||\n                (textElt[i - 1].childNodes[j - 1].nodeName === \'#text\' &&\n                  textElt[i - 1].childNodes[j - 1].nodeValue.trim() === \'\')) {\n                textElt[i - 1].childNodes[j - 1].remove();\n              } else {\n                break;\n              }\n            }\n            if (textElt[i - 1].childNodes.length === 0) {\n              if (textElt[i - 1].nodeName === \'BR\' ||\n                (textElt[i - 1].nodeName === \'#text\' &&\n                  textElt[i - 1].nodeValue.trim() === \'\') ||\n                  textElt[i - 1].nodeName === \'P\') {\n                textElt[i - 1].remove();\n                continue;\n              }\n            } else {\n              break;\n            }\n          }\n          ngModel.$setViewValue(elt.html());\n        });\n\n        ngModel.$render = function() {\n          ck.setData(ngModel.$viewValue);\n        };\n\n        scope.$on(\'$destroy\', function() {\n          // Clean up CKEditor instance when directive is removed.\n          ck.destroy();\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/ExplorationRecommendationsService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for recommending explorations at the end of an\n * exploration.\n */\n\noppia.factory(\'ExplorationRecommendationsService\', [\n  \'$http\', \'UrlService\', \'ContextService\', \'PAGE_CONTEXT\',\n  \'EXPLORATION_EDITOR_TAB_CONTEXT\',\n  function(\n      $http, UrlService, ContextService, PAGE_CONTEXT,\n      EXPLORATION_EDITOR_TAB_CONTEXT) {\n    var isIframed = UrlService.isIframed();\n    var isInEditorPage = (\n      ContextService.getPageContext() === PAGE_CONTEXT.EXPLORATION_EDITOR);\n    var isInEditorPreviewMode = isInEditorPage && (\n      ContextService.getEditorTabContext() ===\n      EXPLORATION_EDITOR_TAB_CONTEXT.PREVIEW);\n    var explorationId = ContextService.getExplorationId();\n\n    return {\n      getRecommendedSummaryDicts: function(\n          authorRecommendedExpIds, includeAutogeneratedRecommendations,\n          successCallback) {\n        var recommendationsUrlParams = {\n          stringified_author_recommended_ids: JSON.stringify(\n            authorRecommendedExpIds)\n        };\n        if (GLOBALS.collectionId) {\n          recommendationsUrlParams.collection_id = GLOBALS.collectionId;\n        }\n        if (includeAutogeneratedRecommendations && !isInEditorPage) {\n          recommendationsUrlParams.include_system_recommendations = \'true\';\n        }\n\n        $http.get(\'/explorehandler/recommendations/\' + explorationId, {\n          params: recommendationsUrlParams\n        }).then(function(response) {\n          successCallback(response.data.summaries);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/AudioTranslationObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the AudioTranslation object factory.\n */\n\ndescribe(\'AudioTranslation object factory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'AudioTranslationObjectFactory\', function() {\n    var scope, atof, audioTranslation;\n\n    beforeEach(inject(function($injector, $rootScope) {\n      scope = $rootScope.$new();\n      atof = $injector.get(\'AudioTranslationObjectFactory\');\n      audioTranslation = atof.createFromBackendDict({\n        filename: \'a.mp3\',\n        file_size_bytes: 200000,\n        needs_update: false\n      });\n    }));\n\n    it(\'should correctly mark audio as needing update\', inject(function() {\n      audioTranslation.markAsNeedingUpdate();\n      expect(audioTranslation).toEqual(atof.createFromBackendDict({\n        filename: \'a.mp3\',\n        file_size_bytes: 200000,\n        needs_update: true\n      }));\n    }));\n\n    it(\'should toggle needs update attribute correctly\', inject(function() {\n      audioTranslation.toggleNeedsUpdateAttribute();\n      expect(audioTranslation).toEqual(atof.createFromBackendDict({\n        filename: \'a.mp3\',\n        file_size_bytes: 200000,\n        needs_update: true\n      }));\n\n      audioTranslation.toggleNeedsUpdateAttribute();\n      expect(audioTranslation).toEqual(atof.createFromBackendDict({\n        filename: \'a.mp3\',\n        file_size_bytes: 200000,\n        needs_update: false\n      }));\n    }));\n\n    it(\'should convert to backend dict correctly\', inject(function() {\n      expect(audioTranslation.toBackendDict()).toEqual({\n        filename: \'a.mp3\',\n        file_size_bytes: 200000,\n        needs_update: false\n      });\n    }));\n\n    it(\'should create a new audio translation\', inject(function() {\n      expect(atof.createNew(\'filename.mp3\', 100000)).toEqual(\n        atof.createFromBackendDict({\n          filename: \'filename.mp3\',\n          file_size_bytes: 100000,\n          needs_update: false\n        })\n      );\n    }));\n\n    it(\'should get the correct file size in MB\', inject(function() {\n      var NUM_BYTES_IN_MB = 1 << 20;\n      expect(audioTranslation.getFileSizeMB()).toEqual(\n        200000 / NUM_BYTES_IN_MB);\n    }));\n  });\n});'

blocks = {}
debug_info = ''
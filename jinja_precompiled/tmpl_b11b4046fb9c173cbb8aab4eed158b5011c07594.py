from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/history_tab/VersionTreeServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the Versions Tree Service.\n */\n\ndescribe(\'Versions tree service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'versions tree service\', function() {\n    var vts = null;\n    var snapshots = [{\n      commit_type: \'create\',\n      version_number: 1\n    }, {\n      commit_type: \'edit\',\n      commit_cmds: [{\n        cmd: \'add_state\',\n        state_name: \'B\'\n      }, {\n        cmd: \'rename_state\',\n        new_state_name: \'A\',\n        old_state_name: \'First State\'\n      }],\n      version_number: 2\n    }, {\n      commit_type: \'edit\',\n      commit_cmds: [{\n        cmd: \'rename_state\',\n        new_state_name: \'C\',\n        old_state_name: \'B\'\n      }],\n      version_number: 3\n    }, {\n      commit_type: \'revert\',\n      commit_cmds: [{\n        version_number: 2,\n        cmd: \'AUTO_revert_version_number\'\n      }],\n      version_number: 4\n    }, {\n      commit_type: \'edit\',\n      commit_cmds: [{\n        cmd: \'delete_state\',\n        state_name: \'B\'\n      }, {\n        cmd: \'rename_state\',\n        new_state_name: \'D\',\n        old_state_name: \'A\'\n      }],\n      version_number: 5\n    }, {\n      commit_type: \'revert\',\n      commit_cmds: [{\n        version_number: 3,\n        cmd: \'AUTO_revert_version_number\'\n      }],\n      version_number: 6\n    }, {\n      commit_type: \'edit\',\n      commit_cmds: [{\n        cmd: \'add_state\',\n        state_name: \'D\'\n      }],\n      version_number: 7\n    }, {\n      commit_type: \'edit\',\n      commit_cmds: [{\n        cmd: \'edit_state_property\',\n        state_name: \'D\',\n        new_value: {\n          html: \'Some text\',\n          audio_translations: {}\n        },\n        old_value: {\n          html: \'\',\n          audio_translations: {}\n        }\n      }],\n      version_number: 8\n    }];\n\n    beforeEach(inject(function($injector) {\n      vts = $injector.get(\'VersionTreeService\');\n    }));\n\n    it(\'should get correct list of parents\', function() {\n      vts.init(snapshots);\n      var expectedParents = {\n        1: -1,\n        2: 1,\n        3: 2,\n        4: 2,\n        5: 4,\n        6: 3,\n        7: 6,\n        8: 7\n      };\n      expect(vts.getVersionTree()).toEqual(expectedParents);\n    });\n\n    it(\'should find correct LCA\', function() {\n      vts.init(snapshots);\n      expect(vts.findLCA(1, 6)).toBe(1);\n      expect(vts.findLCA(3, 5)).toBe(2);\n      expect(vts.findLCA(3, 8)).toBe(3);\n      expect(vts.findLCA(3, 4)).toBe(2);\n      expect(vts.findLCA(3, 3)).toBe(3);\n      expect(vts.findLCA(2, 4)).toBe(2);\n    });\n\n    it(\'should get correct change list\', function() {\n      vts.init(snapshots);\n      expect(function() {\n        vts.getChangeList(1);\n      }).toThrow(new Error(\'Tried to retrieve change list of version 1\'));\n      expect(vts.getChangeList(2)).toEqual([{\n        cmd: \'add_state\',\n        state_name: \'B\'\n      }, {\n        cmd: \'rename_state\',\n        new_state_name: \'A\',\n        old_state_name: \'First State\'\n      }]);\n      expect(vts.getChangeList(4)).toEqual([{\n        cmd: \'AUTO_revert_version_number\',\n        version_number: 2\n      }]);\n      expect(vts.getChangeList(5)).toEqual([{\n        cmd: \'delete_state\',\n        state_name: \'B\'\n      }, {\n        cmd: \'rename_state\',\n        new_state_name: \'D\',\n        old_state_name: \'A\'\n      }]);\n      expect(vts.getChangeList(8)).toEqual([{\n        cmd: \'edit_state_property\',\n        state_name: \'D\',\n        new_value: {\n          html: \'Some text\',\n          audio_translations: {}\n        },\n        old_value: {\n          html: \'\',\n          audio_translations: {}\n        }\n      }]);\n    });\n  });\n});'

blocks = {}
debug_info = ''
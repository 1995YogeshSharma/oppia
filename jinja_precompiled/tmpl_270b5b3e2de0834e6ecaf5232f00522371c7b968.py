from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/UnresolvedAnswersOverviewDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the state graph visualization.\n */\n\n// TODO(brianrodri): Add all other interaction IDs to this list, then remove\n// the list altogether.\noppia.constant(\'SUPPORTED_HTML_RENDERINGS_FOR_INTERACTION_IDS\', [\'TextInput\']);\n\noppia.directive(\'unresolvedAnswersOverview\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {},\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/editor_tab/\' +\n        \'unresolved_answers_overview_directive.html\'),\n      controller: [\n        \'$rootScope\', \'$scope\', \'$uibModal\', \'EditabilityService\',\n        \'ExplorationRightsService\', \'ExplorationStatesService\',\n        \'StateEditorService\', \'StateInteractionIdService\',\n        \'StateTopAnswersStatsService\', \'INTERACTION_SPECS\',\n        \'SUPPORTED_HTML_RENDERINGS_FOR_INTERACTION_IDS\',\n        function(\n            $rootScope, $scope, $uibModal, EditabilityService,\n            ExplorationRightsService, ExplorationStatesService,\n            StateEditorService, StateInteractionIdService,\n            StateTopAnswersStatsService, INTERACTION_SPECS,\n            SUPPORTED_HTML_RENDERINGS_FOR_INTERACTION_IDS) {\n          var MAXIMUM_UNRESOLVED_ANSWERS = 5;\n          var MINIMUM_UNRESOLVED_ANSWER_FREQUENCY = 2;\n\n          $scope.unresolvedAnswersOverviewIsShown = false;\n\n          $scope.SHOW_TRAINABLE_UNRESOLVED_ANSWERS = (\n            GLOBALS.SHOW_TRAINABLE_UNRESOLVED_ANSWERS);\n\n          /**\n           * @returns {boolean} - answers from this state can be rendered with\n           * HTML.\n           */\n          var isStateInteractionIdHtmlRenderable = function(stateName) {\n            var state = ExplorationStatesService.getState(stateName);\n            return (!!state &&\n              SUPPORTED_HTML_RENDERINGS_FOR_INTERACTION_IDS.indexOf(\n                state.interaction.id) !== -1);\n          };\n\n          $scope.isUnresolvedAnswersOverviewShown = function() {\n            var activeStateName = StateEditorService.getActiveStateName();\n            return StateTopAnswersStatsService.hasStateStats(activeStateName) &&\n              isStateInteractionIdHtmlRenderable(activeStateName);\n          };\n\n          $scope.getCurrentInteractionId = function() {\n            return StateInteractionIdService.savedMemento;\n          };\n\n          $scope.isCurrentInteractionLinear = function() {\n            var interactionId = $scope.getCurrentInteractionId();\n            return interactionId && INTERACTION_SPECS[interactionId].is_linear;\n          };\n\n          $scope.isCurrentInteractionTrainable = function() {\n            var interactionId = $scope.getCurrentInteractionId();\n            return (\n              interactionId &&\n              INTERACTION_SPECS[interactionId].is_trainable);\n          };\n\n          $scope.isEditableOutsideTutorialMode = function() {\n            return EditabilityService.isEditableOutsideTutorialMode();\n          };\n\n          $scope.openTeachOppiaModal = function() {\n            $rootScope.$broadcast(\'externalSave\');\n\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/editor_tab/\' +\n                \'teach_oppia_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$filter\', \'$http\', \'$injector\', \'$scope\', \'$uibModalInstance\',\n                \'AlertsService\', \'AngularNameService\',\n                \'AnswerClassificationService\', \'ContextService\',\n                \'ExplorationHtmlFormatterService\', \'ExplorationStatesService\',\n                \'StateCustomizationArgsService\', \'StateEditorService\',\n                \'StateInteractionIdService\', \'TrainingDataService\',\n                \'TrainingModalService\', \'UrlInterpolationService\',\n                \'DEFAULT_OUTCOME_CLASSIFICATION\', \'EXPLICIT_CLASSIFICATION\',\n                \'TRAINING_DATA_CLASSIFICATION\',\n                function(\n                    $filter, $http, $injector, $scope, $uibModalInstance,\n                    AlertsService, AngularNameService,\n                    AnswerClassificationService, ContextService,\n                    ExplorationHtmlFormatterService, ExplorationStatesService,\n                    StateCustomizationArgsService, StateEditorService,\n                    StateInteractionIdService, TrainingDataService,\n                    TrainingModalService, UrlInterpolationService,\n                    DEFAULT_OUTCOME_CLASSIFICATION, EXPLICIT_CLASSIFICATION,\n                    TRAINING_DATA_CLASSIFICATION) {\n                  var _explorationId = (\n                    ContextService.getExplorationId());\n                  var _stateName = StateEditorService.getActiveStateName();\n                  var _state = ExplorationStatesService.getState(_stateName);\n                  var interactionId = StateInteractionIdService.savedMemento;\n\n                  var rulesServiceName = (\n                    AngularNameService.getNameOfInteractionRulesService(\n                      interactionId));\n\n                  // Inject RulesService dynamically.\n                  var rulesService = $injector.get(rulesServiceName);\n\n                  // Timeout for the toast that is shown when a response has\n                  // been confirmed or fixed.\n                  var TOAST_TIMEOUT = 2000;\n\n                  var fetchAndShowUnresolvedAnswers = function(\n                      expId, stateName) {\n                    var unresolvedAnswersUrl = (\n                      UrlInterpolationService.interpolateUrl(\n                        \'/createhandler/get_top_unresolved_answers/\' +\n                        \'<exploration_id>\', {\n                          exploration_id: expId\n                        }));\n                    $http.get(unresolvedAnswersUrl, {\n                      params: {\n                        state_name: stateName\n                      }\n                    }).success(function(response) {\n                      $scope.showUnresolvedAnswers(response.unresolved_answers);\n                    }).error(function(response) {\n                      $log.error(\n                        \'Error occurred while fetching unresolved answers \' +\n                        \'for exploration \' + _explorationId + \'state \' +\n                        _stateName + \': \' + response);\n                      $scope.showUnresolvedAnswers([]);\n                    });\n                  };\n\n                  $scope.showUnresolvedAnswers = function(unresolvedAnswers) {\n                    $scope.loadingDotsAreShown = false;\n                    $scope.unresolvedAnswers = [];\n\n                    unresolvedAnswers.forEach(function(item) {\n                      var acs = AnswerClassificationService;\n                      var answer = item.answer;\n                      var classificationResult = (\n                        acs.getMatchingClassificationResult(\n                          _stateName, _state.interaction, answer,\n                          rulesService));\n                      var classificationType = (\n                        classificationResult.classificationCategorization);\n                      if (classificationType !== EXPLICIT_CLASSIFICATION &&\n                        classificationType !== TRAINING_DATA_CLASSIFICATION &&\n                        !TrainingDataService.isConfirmedUnclassifiedAnswer(\n                          answer)) {\n                        var answerTemplate = (\n                          ExplorationHtmlFormatterService.getAnswerHtml(\n                            answer, StateInteractionIdService.savedMemento,\n                            StateCustomizationArgsService.savedMemento));\n                        var feedbackHtml = (\n                          classificationResult.outcome.feedback.getHtml());\n                        $scope.unresolvedAnswers.push({\n                          answer: answer,\n                          answerTemplate: answerTemplate,\n                          classificationResult: classificationResult,\n                          feedbackHtml: feedbackHtml\n                        });\n                      }\n                    });\n                  };\n\n                  $scope.confirmAnswerAssignment = function(answerIndex) {\n                    answer = $scope.unresolvedAnswers[answerIndex];\n                    $scope.unresolvedAnswers.splice(answerIndex, 1);\n\n                    var classificationType = (\n                      answer.classificationResult.classificationCategorization);\n                    var truncatedAnswer = $filter(\n                      \'truncateInputBasedOnInteractionAnswerType\')(\n                      answer.answer, interactionId, 12);\n                    var successToast = (\n                      \'The answer \' + truncatedAnswer +\n                      \' has been successfully trained.\');\n\n                    if (classificationType === DEFAULT_OUTCOME_CLASSIFICATION) {\n                      TrainingDataService.associateWithDefaultResponse(\n                        answer.answer);\n                      AlertsService.addSuccessMessage(\n                        successToast, TOAST_TIMEOUT);\n                      return;\n                    }\n\n                    TrainingDataService.associateWithAnswerGroup(\n                      answer.classificationResult.answerGroupIndex,\n                      answer.answer);\n                    AlertsService.addSuccessMessage(\n                      successToast, TOAST_TIMEOUT);\n                  };\n\n                  $scope.openTrainUnresolvedAnswerModal = function(\n                      answerIndex) {\n                    var selectedAnswerIndex = answerIndex;\n                    var unresolvedAnswer = (\n                      $scope.unresolvedAnswers[answerIndex]);\n                    var answer = unresolvedAnswer.answer;\n                    var answerGroupIndex = (\n                      unresolvedAnswer.classificationResult.answerGroupIndex);\n                    return TrainingModalService.openTrainUnresolvedAnswerModal(\n                      answer, function() {\n                        $scope.unresolvedAnswers.splice(selectedAnswerIndex, 1);\n                        var truncatedAnswer = $filter(\n                          \'truncateInputBasedOnInteractionAnswerType\')(\n                          answer, interactionId, 12);\n                        var successToast = (\n                          \'The response for \' + truncatedAnswer +\n                          \' has been fixed.\');\n                        AlertsService.addSuccessMessage(\n                          successToast, TOAST_TIMEOUT);\n                      });\n                  };\n\n                  $scope.finishTeaching = function(reopen) {\n                    $uibModalInstance.dismiss();\n                  };\n\n                  $scope.loadingDotsAreShown = true;\n                  fetchAndShowUnresolvedAnswers(_explorationId, _stateName);\n                }]\n            });\n          };\n\n          $scope.getUnresolvedStateStats = function() {\n            return StateTopAnswersStatsService.getUnresolvedStateStats(\n              StateEditorService.getActiveStateName());\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
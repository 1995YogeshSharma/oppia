from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/UnresolvedAnswersOverviewDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the state graph visualization.\n */\n\noppia.directive(\'unresolvedAnswersOverview\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {},\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/editor_tab/\' +\n        \'unresolved_answers_overview_directive.html\'),\n      controller: [\n        \'$scope\', \'EditorStateService\', \'ExplorationStatesService\',\n        \'StateRulesStatsService\',\n        function(\n            $scope, EditorStateService, ExplorationStatesService,\n            StateRulesStatsService) {\n          var MAXIMUM_UNRESOLVED_ANSWERS = 5;\n          var MINIMUM_UNRESOLVED_ANSWER_FREQUENCY = 2;\n\n          $scope.unresolvedAnswersData = null;\n          $scope.latestRefreshDate = new Date();\n\n          $scope.computeUnresolvedAnswers = function() {\n            var state = ExplorationStatesService.getState(\n              EditorStateService.getActiveStateName()\n            );\n\n            if (!StateRulesStatsService.stateSupportsIssuesOverview(state)) {\n              $scope.unresolvedAnswersData = [];\n            } else {\n              StateRulesStatsService.computeStateRulesStats(\n                state\n              ).then(function(stats) {\n                var calculatedUnresolvedAnswersData = [];\n\n                for (var i = 0; i < stats.visualizations_info.length; ++i) {\n                  var vizInfo = stats.visualizations_info[i];\n                  if (!vizInfo.addressed_info_is_supported) {\n                    continue;\n                  }\n\n                  // NOTE: vizInfo.data is already sorted in descending order by\n                  // frequency.\n                  for (var j = 0; j < vizInfo.data.length; ++j) {\n                    var answer = vizInfo.data[j];\n                    if (answer.is_addressed ||\n                        answer.frequency <\n                          MINIMUM_UNRESOLVED_ANSWER_FREQUENCY) {\n                      continue;\n                    }\n\n                    calculatedUnresolvedAnswersData.push(answer);\n                    if (calculatedUnresolvedAnswersData.length >=\n                          MAXIMUM_UNRESOLVED_ANSWERS) {\n                      break;\n                    }\n                  }\n\n                  // Will only take the answers from first eligible\n                  // visualization.\n                  break;\n                }\n\n                $scope.unresolvedAnswersData = calculatedUnresolvedAnswersData;\n                $scope.latestRefreshDate = new Date();\n              });\n            }\n          };\n\n          $scope.$on(\'refreshStateEditor\', $scope.computeUnresolvedAnswers);\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
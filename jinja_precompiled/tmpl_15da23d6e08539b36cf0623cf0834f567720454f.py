from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/IssuesBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for fetching issues and playthroughs from the backend.\n */\n\noppia.constant(\n  \'FETCH_ISSUES_URL\', \'/issuesdatahandler/<exploration_id>\');\n\noppia.constant(\n  \'FETCH_PLAYTHROUGH_URL\',\n  \'/playthroughdatahandler/<exploration_id>/<playthrough_id>\');\n\noppia.constant(\n  \'RESOLVE_ISSUE_URL\', \'/resolveissuehandler/<exploration_id>\');\n\noppia.factory(\'IssuesBackendApiService\', [\n  \'$http\', \'ExplorationIssueObjectFactory\', \'PlaythroughObjectFactory\',\n  \'UrlInterpolationService\', \'FETCH_ISSUES_URL\', \'FETCH_PLAYTHROUGH_URL\',\n  \'RESOLVE_ISSUE_URL\',\n  function(\n      $http, ExplorationIssueObjectFactory, PlaythroughObjectFactory,\n      UrlInterpolationService, FETCH_ISSUES_URL, FETCH_PLAYTHROUGH_URL,\n      RESOLVE_ISSUE_URL) {\n    var getFullIssuesUrl = function(explorationId) {\n      return UrlInterpolationService.interpolateUrl(\n        FETCH_ISSUES_URL, {\n          exploration_id: explorationId\n        });\n    };\n\n    var getFullPlaythroughUrl = function(expId, playthroughId) {\n      return UrlInterpolationService.interpolateUrl(\n        FETCH_PLAYTHROUGH_URL, {\n          exploration_id: expId,\n          playthrough_id: playthroughId\n        });\n    };\n\n    var getFullResolveIssueUrl = function(explorationId) {\n      return UrlInterpolationService.interpolateUrl(\n        RESOLVE_ISSUE_URL, {\n          exploration_id: explorationId\n        });\n    };\n    return {\n      fetchIssues: function(explorationId, explorationVersion) {\n        return $http.get(getFullIssuesUrl(explorationId), {\n          params: {\n            exp_version: explorationVersion\n          }\n        }).then(function(response) {\n          var unresolvedIssuesDicts = response.data;\n          return unresolvedIssuesDicts.map(\n            ExplorationIssueObjectFactory.createFromBackendDict);\n        });\n      },\n      fetchPlaythrough: function(expId, playthroughId) {\n        return $http.get(getFullPlaythroughUrl(expId, playthroughId)).then(\n          function(response) {\n            var playthroughDict = response.data;\n            return PlaythroughObjectFactory.createFromBackendDict(\n              playthroughDict);\n          });\n      },\n      resolveIssue: function(issue, expId, expVersion) {\n        $http.post(getFullResolveIssueUrl(expId), {\n          exp_issue_dict: issue.toBackendDict(),\n          exp_version: expVersion\n        });\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/learner_dashboard/LearnerPlaylistService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service related to the learner playlist.\n */\n\noppia.factory(\'LearnerPlaylistService\', [\n  \'$http\', \'$uibModal\', \'AlertsService\', \'UrlInterpolationService\',\n  function($http, $uibModal, AlertsService, UrlInterpolationService) {\n    var _addToLearnerPlaylist = function(activityId, activityType) {\n      var successfullyAdded = true;\n      var addToLearnerPlaylistUrl = (\n        UrlInterpolationService.interpolateUrl(\n          \'/learnerplaylistactivityhandler/<activityType>/<activityId>\', {\n            activityType: activityType,\n            activityId: activityId\n          }));\n      $http.post(addToLearnerPlaylistUrl, {})\n        .then(function(response) {\n          if (response.data.belongs_to_completed_or_incomplete_list) {\n            successfullyAdded = false;\n            AlertsService.addInfoMessage(\n              \'You have already completed or are completing this \' +\n              \'activity.\');\n          }\n          if (response.data.belongs_to_subscribed_activities) {\n            successfullyAdded = false;\n            AlertsService.addInfoMessage(\n              \'This is present in your creator dashboard\');\n          }\n          if (response.data.playlist_limit_exceeded) {\n            successfullyAdded = false;\n            AlertsService.addInfoMessage(\n              \'Your \\\'Play Later\\\' list is full!  Either you can \' +\n              \'complete some or you can head to the learner dashboard \' +\n              \'and remove some.\');\n          }\n          if (successfullyAdded) {\n            AlertsService.addSuccessMessage(\n              \'Successfully added to your \\\'Play Later\\\' list.\');\n          }\n        });\n      return successfullyAdded;\n    };\n\n    var _removeFromLearnerPlaylist = function(\n        activityId, activityTitle, activityType, learnerDashboardActivityIds) {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/learner_dashboard/\' +\n          \'remove_activity_from_learner_dashboard_modal_directive.html\'),\n        backdrop: true,\n        resolve: {\n          activityId: function() {\n            return activityId;\n          },\n          activityTitle: function() {\n            return activityTitle;\n          }\n        },\n        controller: [\n          \'$scope\', \'$uibModalInstance\', \'$http\', \'UrlInterpolationService\',\n          function($scope, $uibModalInstance, $http, UrlInterpolationService) {\n            $scope.sectionNameI18nId = (\n              \'I18N_LEARNER_DASHBOARD_PLAYLIST_SECTION\');\n            $scope.activityTitle = activityTitle;\n            var removeFromLearnerPlaylistUrl = (\n              UrlInterpolationService.interpolateUrl(\n                \'/learnerplaylistactivityhandler/\' +\n                \'<activityType>/<activityId>\', {\n                  activityType: activityType,\n                  activityId: activityId\n                }));\n            $scope.remove = function() {\n              $http[\'delete\'](removeFromLearnerPlaylistUrl);\n              $uibModalInstance.close();\n            };\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n          }\n        ]\n      }).result.then(function() {\n        if (activityType === constants.ACTIVITY_TYPE_EXPLORATION) {\n          learnerDashboardActivityIds.removeFromExplorationLearnerPlaylist(\n            activityId);\n        } else if (activityType === constants.ACTIVITY_TYPE_COLLECTION) {\n          learnerDashboardActivityIds.removeFromCollectionLearnerPlaylist(\n            activityId);\n        }\n      });\n    };\n\n    return {\n      addToLearnerPlaylist: _addToLearnerPlaylist,\n      removeFromLearnerPlaylist: _removeFromLearnerPlaylist\n    };\n  }]);'

blocks = {}
debug_info = ''
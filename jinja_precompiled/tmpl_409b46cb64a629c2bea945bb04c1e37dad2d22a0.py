from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/collection_player/CollectionPlayer.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the learner\'s view of a collection.\n */\n\noppia.constant(\n  \'COLLECTION_DATA_URL_TEMPLATE\', \'/collection_handler/data/<collection_id>\');\n\noppia.animation(\'.oppia-collection-animate-slide\', function() {\n  return {\n    enter: function(element) {\n      element.hide().slideDown();\n    },\n    leave: function(element) {\n      element.slideUp();\n    }\n  };\n});\n\noppia.controller(\'CollectionPlayer\', [\n  \'$scope\', \'$anchorScroll\', \'$location\', \'$http\',\n  \'ReadOnlyCollectionBackendApiService\', \'CollectionObjectFactory\',\n  \'CollectionPlaythroughObjectFactory\', \'AlertsService\',\n  \'UrlInterpolationService\', \'GuestCollectionProgressService\',\n  \'WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS\',\n  function(\n      $scope, $anchorScroll, $location, $http,\n      ReadOnlyCollectionBackendApiService, CollectionObjectFactory,\n      CollectionPlaythroughObjectFactory, AlertsService,\n      UrlInterpolationService, GuestCollectionProgressService,\n      WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS) {\n    $scope.collection = null;\n    $scope.collectionPlaythrough = null;\n    $scope.collectionId = GLOBALS.collectionId;\n    $scope.isLoggedIn = GLOBALS.isLoggedIn;\n    $scope.explorationCardIsShown = false;\n    $scope.getStaticImageUrl = UrlInterpolationService.getStaticImageUrl;\n    // The pathIconParameters is an array containing the co-ordinates,\n    // background color and icon url for the icons generated on the path.\n    $scope.pathIconParameters = [];\n    $scope.activeHighlightedIconIndex = -1;\n    $scope.MIN_HEIGHT_FOR_PATH_SVG_PX = 220;\n    $scope.ODD_SVG_HEIGHT_OFFSET_PX = 150;\n    $scope.EVEN_SVG_HEIGHT_OFFSET_PX = 280;\n    $scope.ICON_Y_INITIAL_PX = 35;\n    $scope.ICON_Y_INCREMENT_PX = 110;\n    $scope.ICON_X_MIDDLE_PX = 225;\n    $scope.ICON_X_LEFT_PX = 55;\n    $scope.ICON_X_RIGHT_PX = 395;\n    $scope.svgHeight = $scope.MIN_HEIGHT_FOR_PATH_SVG_PX;\n    $scope.nextExplorationId = null;\n    $scope.whitelistedCollectionIdsForGuestProgress = (\n      WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS);\n    $anchorScroll.yOffset = -80;\n\n    $scope.setIconHighlight = function(index) {\n      $scope.activeHighlightedIconIndex = index;\n    };\n\n    $scope.unsetIconHighlight = function() {\n      $scope.activeHighlightedIconIndex = -1;\n    };\n\n    $scope.togglePreviewCard = function() {\n      $scope.explorationCardIsShown = !$scope.explorationCardIsShown;\n    };\n\n    $scope.getCollectionNodeForExplorationId = function(explorationId) {\n      var collectionNode = (\n        $scope.collection.getCollectionNodeByExplorationId(explorationId));\n      if (!collectionNode) {\n        AlertsService.addWarning(\'There was an error loading the collection.\');\n      }\n      return collectionNode;\n    };\n\n    $scope.getNextRecommendedCollectionNodes = function() {\n      return $scope.getCollectionNodeForExplorationId(\n        $scope.collectionPlaythrough.getNextExplorationId());\n    };\n\n    $scope.getCompletedExplorationNodes = function() {\n      return $scope.getCollectionNodeForExplorationId(\n        $scope.collectionPlaythrough.getCompletedExplorationIds());\n    };\n\n    $scope.getNonRecommendedCollectionNodeCount = function() {\n      return $scope.collection.getCollectionNodeCount() - (\n        $scope.collectionPlaythrough.getNextRecommendedCollectionNodeCount() +\n        $scope.collectionPlaythrough.getCompletedExplorationNodeCount());\n    };\n\n    $scope.updateExplorationPreview = function(explorationId) {\n      $scope.explorationCardIsShown = true;\n      $scope.currentExplorationId = explorationId;\n      $scope.summaryToPreview = $scope.getCollectionNodeForExplorationId(\n        explorationId).getExplorationSummaryObject();\n    };\n\n    // Calculates the SVG parameters required to draw the curved path.\n    $scope.generatePathParameters = function() {\n      // The pathSvgParameters represents the final string of SVG parameters\n      // for the bezier curve to be generated. The default parameters represent\n      // the first curve ie. lesson 1 to lesson 3.\n      $scope.pathSvgParameters = \'M250 80  C 470 100, 470 280, 250 300\';\n      var collectionNodeCount = $scope.collection.getCollectionNodeCount();\n      // The sParameterExtension represents the co-ordinates following the \'S\'\n      // (smooth curve to) command in SVG.\n      var sParameterExtension = \'\';\n      $scope.pathIconParameters = $scope.generatePathIconParameters();\n      if (collectionNodeCount === 1) {\n        $scope.pathSvgParameters = \'\';\n      } else if (collectionNodeCount === 2) {\n        $scope.pathSvgParameters = \'M250 80  C 470 100, 470 280, 250 300\';\n      } else {\n        // The x and y here represent the co-ordinates of the control points\n        // for the bezier curve (path).\n        var y = 500;\n        for (var i = 1; i < Math.floor(collectionNodeCount / 2); i++) {\n          var x = (i % 2) ? 30 : 470;\n          sParameterExtension += x + \' \' + y + \', \';\n          y += 20;\n          sParameterExtension += 250 + \' \' + y + \', \';\n          y += 200;\n        }\n        if (sParameterExtension !== \'\') {\n          $scope.pathSvgParameters += \' S \' + sParameterExtension;\n        }\n      }\n      if (collectionNodeCount % 2 === 0) {\n        if (collectionNodeCount === 2) {\n          $scope.svgHeight = $scope.MIN_HEIGHT_FOR_PATH_SVG_PX;\n        } else {\n          $scope.svgHeight = y - $scope.EVEN_SVG_HEIGHT_OFFSET_PX;\n        }\n      } else {\n        if (collectionNodeCount === 1) {\n          $scope.svgHeight = $scope.MIN_HEIGHT_FOR_PATH_SVG_PX;\n        } else {\n          $scope.svgHeight = y - $scope.ODD_SVG_HEIGHT_OFFSET_PX;\n        }\n      }\n    };\n\n    $scope.generatePathIconParameters = function() {\n      var collectionNodes = $scope.collection.getCollectionNodes();\n      var iconParametersArray = [];\n      iconParametersArray.push({\n        thumbnailIconUrl:\n          collectionNodes[0].getExplorationSummaryObject(\n          ).thumbnail_icon_url.replace(\'subjects\', \'inverted_subjects\'),\n        left: \'225px\',\n        top: \'35px\',\n        thumbnailBgColor:\n          collectionNodes[0].getExplorationSummaryObject().thumbnail_bg_color\n      });\n\n      // Here x and y represent the co-ordinates for the icons in the path.\n      var x = $scope.ICON_X_MIDDLE_PX;\n      var y = $scope.ICON_Y_INITIAL_PX;\n      var countMiddleIcon = 1;\n\n      for (var i = 1; i < $scope.collection.getCollectionNodeCount(); i++) {\n        if (countMiddleIcon === 0 && x === $scope.ICON_X_MIDDLE_PX) {\n          x = $scope.ICON_X_LEFT_PX;\n          y += $scope.ICON_Y_INCREMENT_PX;\n          countMiddleIcon = 1;\n        } else if (countMiddleIcon === 1 && x === $scope.ICON_X_MIDDLE_PX) {\n          x = $scope.ICON_X_RIGHT_PX;\n          y += $scope.ICON_Y_INCREMENT_PX;\n          countMiddleIcon = 0;\n        } else {\n          x = $scope.ICON_X_MIDDLE_PX;\n          y += $scope.ICON_Y_INCREMENT_PX;\n        }\n        iconParametersArray.push({\n          thumbnailIconUrl:\n            collectionNodes[i].getExplorationSummaryObject(\n            ).thumbnail_icon_url.replace(\'subjects\', \'inverted_subjects\'),\n          left: x + \'px\',\n          top: y + \'px\',\n          thumbnailBgColor:\n            collectionNodes[i].getExplorationSummaryObject().thumbnail_bg_color\n        });\n      }\n      return iconParametersArray;\n    };\n\n    $scope.isCompletedExploration = function(explorationId) {\n      var completedExplorationIds = (\n        $scope.collectionPlaythrough.getCompletedExplorationIds());\n      return completedExplorationIds.indexOf(explorationId) > -1;\n    };\n\n    $scope.getExplorationUrl = function(explorationId) {\n      return (\n        \'/explore/\' + explorationId + \'?collection_id=\' + $scope.collectionId);\n    };\n\n    $http.get(\'/collectionsummarieshandler/data\', {\n      params: {\n        stringified_collection_ids: JSON.stringify([$scope.collectionId])\n      }\n    }).then(\n      function(response) {\n        $scope.collectionSummary = response.data.summaries[0];\n      },\n      function() {\n        AlertsService.addWarning(\n          \'There was an error while fetching the collection summary.\');\n      }\n    );\n\n    // Load the collection the learner wants to view.\n    ReadOnlyCollectionBackendApiService.loadCollection(\n      $scope.collectionId).then(\n      function(collectionBackendObject) {\n        $scope.collection = CollectionObjectFactory.create(\n          collectionBackendObject);\n\n        // Load the user\'s current progress in the collection. If the user is a\n        // guest, then either the defaults from the server will be used or the\n        // user\'s local progress, if any has been made and the collection is\n        // whitelisted.\n        var collectionAllowsGuestProgress = (\n          $scope.whitelistedCollectionIdsForGuestProgress.indexOf(\n            $scope.collectionId) !== -1);\n        if (!$scope.isLoggedIn && collectionAllowsGuestProgress &&\n            GuestCollectionProgressService.hasCompletedSomeExploration(\n              $scope.collectionId)) {\n          var completedExplorationIds = (\n            GuestCollectionProgressService.getCompletedExplorationIds(\n              $scope.collection));\n          var nextExplorationId = (\n            GuestCollectionProgressService.getNextExplorationId(\n              $scope.collection, completedExplorationIds));\n          $scope.collectionPlaythrough = (\n            CollectionPlaythroughObjectFactory.create(\n              nextExplorationId, completedExplorationIds));\n        } else {\n          $scope.collectionPlaythrough = (\n            CollectionPlaythroughObjectFactory.createFromBackendObject(\n              collectionBackendObject.playthrough_dict));\n        }\n\n        $scope.nextExplorationId =\n          $scope.collectionPlaythrough.getNextExplorationId();\n      },\n      function() {\n        // TODO(bhenning): Handle not being able to load the collection.\n        // NOTE TO DEVELOPERS: Check the backend console for an indication as to\n        // why this error occurred; sometimes the errors are noisy, so they are\n        // not shown to the user.\n        AlertsService.addWarning(\n          \'There was an error loading the collection.\');\n      }\n    );\n\n    $scope.$watch(\'collection\', function(newValue) {\n      if (newValue !== null) {\n        $scope.generatePathParameters();\n      }\n    }, true);\n\n    $scope.scrollToLocation = function(id) {\n      $location.hash(id);\n      $anchorScroll();\n    };\n\n    $scope.closeOnClickingOutside = function() {\n      $scope.explorationCardIsShown = false;\n    };\n\n    $scope.onClickStopPropagation = function($evt) {\n      $evt.stopPropagation();\n    };\n\n    // Touching anywhere outside the mobile preview should hide it.\n    document.addEventListener(\'touchstart\', function() {\n      if ($scope.explorationCardIsShown === true) {\n        $scope.explorationCardIsShown = false;\n      }\n    });\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/CollectionUpdateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to build changes to a collection. These changes may\n * then be used by other services, such as a backend API service to update the\n * collection in the backend. This service also registers all changes with the\n * undo/redo service.\n */\n\n// These should match the constants defined in core.domain.collection_domain.\n// TODO(bhenning): The values of these constants should be provided by the\n// backend.\n// NOTE TO DEVELOPERS: the properties \'prerequisite_skills\' and\n// \'acquired_skills\' are deprecated. Do not use them.\noppia.constant(\'CMD_ADD_COLLECTION_NODE\', \'add_collection_node\');\noppia.constant(\'CMD_SWAP_COLLECTION_NODES\', \'swap_nodes\');\noppia.constant(\'CMD_DELETE_COLLECTION_NODE\', \'delete_collection_node\');\noppia.constant(\'CMD_EDIT_COLLECTION_PROPERTY\', \'edit_collection_property\');\noppia.constant(\n  \'CMD_EDIT_COLLECTION_NODE_PROPERTY\', \'edit_collection_node_property\');\noppia.constant(\'COLLECTION_PROPERTY_TITLE\', \'title\');\noppia.constant(\'COLLECTION_PROPERTY_CATEGORY\', \'category\');\noppia.constant(\'COLLECTION_PROPERTY_OBJECTIVE\', \'objective\');\noppia.constant(\'COLLECTION_PROPERTY_LANGUAGE_CODE\', \'language_code\');\noppia.constant(\'COLLECTION_PROPERTY_TAGS\', \'tags\');\noppia.constant(\'CMD_ADD_COLLECTION_SKILL\', \'add_collection_skill\');\noppia.constant(\'CMD_DELETE_COLLECTION_SKILL\', \'delete_collection_skill\');\noppia.constant(\n  \'COLLECTION_NODE_PROPERTY_PREREQUISITE_SKILL_IDS\', \'prerequisite_skill_ids\');\noppia.constant(\n  \'COLLECTION_NODE_PROPERTY_ACQUIRED_SKILL_IDS\', \'acquired_skill_ids\');\n\noppia.factory(\'CollectionUpdateService\', [\n  \'CollectionNodeObjectFactory\',\n  \'ChangeObjectFactory\', \'UndoRedoService\',\n  \'CMD_ADD_COLLECTION_NODE\', \'CMD_SWAP_COLLECTION_NODES\',\n  \'CMD_DELETE_COLLECTION_NODE\', \'CMD_EDIT_COLLECTION_PROPERTY\',\n  \'CMD_EDIT_COLLECTION_NODE_PROPERTY\', \'COLLECTION_PROPERTY_TITLE\',\n  \'COLLECTION_PROPERTY_CATEGORY\', \'COLLECTION_PROPERTY_OBJECTIVE\',\n  \'COLLECTION_PROPERTY_LANGUAGE_CODE\', \'COLLECTION_PROPERTY_TAGS\',\n  \'COLLECTION_NODE_PROPERTY_PREREQUISITE_SKILL_IDS\',\n  \'COLLECTION_NODE_PROPERTY_ACQUIRED_SKILL_IDS\',\n  \'CMD_ADD_COLLECTION_SKILL\', \'CMD_DELETE_COLLECTION_SKILL\', function(\n      CollectionNodeObjectFactory,\n      ChangeObjectFactory, UndoRedoService,\n      CMD_ADD_COLLECTION_NODE, CMD_SWAP_COLLECTION_NODES,\n      CMD_DELETE_COLLECTION_NODE, CMD_EDIT_COLLECTION_PROPERTY,\n      CMD_EDIT_COLLECTION_NODE_PROPERTY, COLLECTION_PROPERTY_TITLE,\n      COLLECTION_PROPERTY_CATEGORY, COLLECTION_PROPERTY_OBJECTIVE,\n      COLLECTION_PROPERTY_LANGUAGE_CODE, COLLECTION_PROPERTY_TAGS,\n      COLLECTION_NODE_PROPERTY_PREREQUISITE_SKILL_IDS,\n      COLLECTION_NODE_PROPERTY_ACQUIRED_SKILL_IDS,\n      CMD_ADD_COLLECTION_SKILL, CMD_DELETE_COLLECTION_SKILL) {\n    // Creates a change using an apply function, reverse function, a change\n    // command and related parameters. The change is applied to a given\n    // collection.\n    var _applyChange = function(collection, command, params, apply, reverse) {\n      var changeDict = angular.copy(params);\n      changeDict.cmd = command;\n      var changeObj = ChangeObjectFactory.create(changeDict, apply, reverse);\n      UndoRedoService.applyChange(changeObj, collection);\n    };\n\n    var _getParameterFromChangeDict = function(changeDict, paramName) {\n      return changeDict[paramName];\n    };\n\n    // Applies a collection property change, specifically. See _applyChange()\n    // for details on the other behavior of this function.\n    var _applyPropertyChange = function(\n        collection, propertyName, newValue, oldValue, apply, reverse) {\n      _applyChange(collection, CMD_EDIT_COLLECTION_PROPERTY, {\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue)\n      }, apply, reverse);\n    };\n\n    var _getNewPropertyValueFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'new_value\');\n    };\n\n    // Applies a property change to a collection node. See _applyChanges() for\n    // details on the other behavior of this function.\n    var _applyNodePropertyChange = function(\n        collection, propertyName, explorationId, newValue, oldValue, apply,\n        reverse) {\n      _applyChange(collection, CMD_EDIT_COLLECTION_NODE_PROPERTY, {\n        property_name: propertyName,\n        exploration_id: explorationId,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue)\n      }, apply, reverse);\n    };\n\n    var _getExplorationIdFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'exploration_id\');\n    };\n\n    var _getFirstIndexFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'first_index\');\n    };\n\n    var _getSecondIndexFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'second_index\');\n    };\n\n    // These functions are associated with updates available in\n    // core.domain.collection_services.apply_change_list.\n    return {\n      /**\n       * Adds a new exploration to a collection and records the change in the\n       * undo/redo service.\n       */\n      addCollectionNode: function(collection, explorationId,\n          explorationSummaryBackendObject) {\n        var oldSummaryBackendObject = angular.copy(\n          explorationSummaryBackendObject);\n        _applyChange(collection, CMD_ADD_COLLECTION_NODE, {\n          exploration_id: explorationId\n        }, function(changeDict, collection) {\n          // Apply.\n          var explorationId = _getExplorationIdFromChangeDict(changeDict);\n          var collectionNode = (\n            CollectionNodeObjectFactory.createFromExplorationId(\n              explorationId));\n          collectionNode.setExplorationSummaryObject(oldSummaryBackendObject);\n          collection.addCollectionNode(collectionNode);\n        }, function(changeDict, collection) {\n          // Undo.\n          var explorationId = _getExplorationIdFromChangeDict(changeDict);\n          collection.deleteCollectionNode(explorationId);\n        });\n      },\n\n      swapNodes: function(collection, firstIndex, secondIndex) {\n        _applyChange(collection, CMD_SWAP_COLLECTION_NODES, {\n          first_index: firstIndex,\n          second_index: secondIndex\n        }, function(changeDict, collection) {\n          // Apply.\n          var firstIndex = _getFirstIndexFromChangeDict(changeDict);\n          var secondIndex = _getSecondIndexFromChangeDict(changeDict);\n\n          collection.swapCollectionNodes(firstIndex, secondIndex);\n        }, function(changeDict, collection) {\n          // Undo.\n          var firstIndex = _getFirstIndexFromChangeDict(changeDict);\n          var secondIndex = _getSecondIndexFromChangeDict(changeDict);\n\n          collection.swapCollectionNodes(firstIndex, secondIndex);\n        });\n      },\n\n      /**\n       * Removes an exploration from a collection and records the change in\n       * the undo/redo service.\n       */\n      deleteCollectionNode: function(collection, explorationId) {\n        var oldCollectionNode = angular.copy(\n          collection.getCollectionNodeByExplorationId(explorationId));\n        _applyChange(collection, CMD_DELETE_COLLECTION_NODE, {\n          exploration_id: explorationId\n        }, function(changeDict, collection) {\n          // Apply.\n          var explorationId = _getExplorationIdFromChangeDict(changeDict);\n          collection.deleteCollectionNode(explorationId);\n        }, function(changeDict, collection) {\n          // Undo.\n          collection.addCollectionNode(oldCollectionNode);\n        });\n      },\n\n      /**\n       * Changes the title of a collection and records the change in the\n       * undo/redo service.\n       */\n      setCollectionTitle: function(collection, title) {\n        var oldTitle = angular.copy(collection.getTitle());\n        _applyPropertyChange(\n          collection, COLLECTION_PROPERTY_TITLE, title, oldTitle,\n          function(changeDict, collection) {\n            // Apply\n            var title = _getNewPropertyValueFromChangeDict(changeDict);\n            collection.setTitle(title);\n          }, function(changeDict, collection) {\n            // Undo.\n            collection.setTitle(oldTitle);\n          });\n      },\n\n      /**\n       * Changes the category of a collection and records the change in the\n       * undo/redo service.\n       */\n      setCollectionCategory: function(collection, category) {\n        var oldCategory = angular.copy(collection.getCategory());\n        _applyPropertyChange(\n          collection, COLLECTION_PROPERTY_CATEGORY, category, oldCategory,\n          function(changeDict, collection) {\n            // Apply.\n            var category = _getNewPropertyValueFromChangeDict(changeDict);\n            collection.setCategory(category);\n          }, function(changeDict, collection) {\n            // Undo.\n            collection.setCategory(oldCategory);\n          });\n      },\n\n      /**\n       * Changes the objective of a collection and records the change in the\n       * undo/redo service.\n       */\n      setCollectionObjective: function(collection, objective) {\n        var oldObjective = angular.copy(collection.getObjective());\n        _applyPropertyChange(\n          collection, COLLECTION_PROPERTY_OBJECTIVE, objective, oldObjective,\n          function(changeDict, collection) {\n            // Apply.\n            var objective = _getNewPropertyValueFromChangeDict(changeDict);\n            collection.setObjective(objective);\n          }, function(changeDict, collection) {\n            // Undo.\n            collection.setObjective(oldObjective);\n          });\n      },\n\n      /**\n       * Changes the language code of a collection and records the change in\n       * the undo/redo service.\n       */\n      setCollectionLanguageCode: function(collection, languageCode) {\n        var oldLanguageCode = angular.copy(collection.getLanguageCode());\n        _applyPropertyChange(\n          collection, COLLECTION_PROPERTY_LANGUAGE_CODE, languageCode,\n          oldLanguageCode,\n          function(changeDict, collection) {\n            // Apply.\n            var languageCode = _getNewPropertyValueFromChangeDict(changeDict);\n            collection.setLanguageCode(languageCode);\n          }, function(changeDict, collection) {\n            // Undo.\n            collection.setLanguageCode(oldLanguageCode);\n          });\n      },\n\n      /**\n       * Changes the tags of a collection and records the change in\n       * the undo/redo service.\n       */\n      setCollectionTags: function(collection, tags) {\n        var oldTags = angular.copy(collection.getTags());\n        _applyPropertyChange(\n          collection, COLLECTION_PROPERTY_TAGS, tags, oldTags,\n          function(changeDict, collection) {\n            // Apply.\n            var tags = _getNewPropertyValueFromChangeDict(changeDict);\n            collection.setTags(tags);\n          }, function(changeDict, collection) {\n            // Undo.\n            collection.setTags(oldTags);\n          });\n      },\n\n      /**\n       * Returns whether the given change object constructed by this service\n       * is adding a new collection node to a collection.\n       */\n      isAddingCollectionNode: function(changeObject) {\n        var backendChangeObject = changeObject.getBackendChangeObject();\n        return backendChangeObject.cmd === CMD_ADD_COLLECTION_NODE;\n      },\n\n      /**\n       * Returns the exploration ID referenced by the specified change object,\n       * or undefined if the given changeObject does not reference an\n       * exploration ID. The change object is expected to be one constructed\n       * by this service.\n       */\n      getExplorationIdFromChangeObject: function(changeObject) {\n        return _getExplorationIdFromChangeDict(\n          changeObject.getBackendChangeObject());\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
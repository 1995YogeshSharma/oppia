from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/editor/undo_redo/UndoRedoServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for UndoRedoService.\n */\n\ndescribe(\'Undo/Redo Service\', function() {\n  var UndoRedoService = null;\n  var ChangeObjectFactory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n    ChangeObjectFactory = $injector.get(\'ChangeObjectFactory\');\n  }));\n\n  var _createBackendChangeObject = function(value) {\n    return {\n      roperty_name: value\n    };\n  };\n\n  var _createChangeDomainObject = function(backendObj, applyFunc, reverseFunc) {\n    if (!applyFunc) {\n      applyFunc = function() {};\n    }\n    if (!reverseFunc) {\n      reverseFunc = function() {};\n    }\n    return ChangeObjectFactory.create(backendObj, applyFunc, reverseFunc);\n  };\n\n  var _createNoOpChangeDomainObject = function(value) {\n    var backendObject = _createBackendChangeObject(value);\n    return _createChangeDomainObject(backendObject);\n  };\n\n  it(\'should apply a single change\', function() {\n    var applyFunc = jasmine.createSpy(\'applyChange\');\n\n    expect(UndoRedoService.hasChanges()).toBeFalsy();\n\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n    var backendChangeObject = _createBackendChangeObject(\'value\');\n    var changeDomainObject = _createChangeDomainObject(\n      backendChangeObject, applyFunc, function() {});\n    UndoRedoService.applyChange(changeDomainObject, fakeDomainObject);\n\n    expect(UndoRedoService.hasChanges()).toBeTruthy();\n    expect(applyFunc).toHaveBeenCalledWith(\n      backendChangeObject, fakeDomainObject);\n  });\n\n  it(\'should be able to undo an applied change\', function() {\n    var applyFunc = jasmine.createSpy(\'applyChange\');\n    var reverseFunc = jasmine.createSpy(\'reverseChange\');\n\n    expect(UndoRedoService.hasChanges()).toBeFalsy();\n\n    // Apply the initial change.\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n    var backendChangeObject = _createBackendChangeObject(\'value\');\n    var changeDomainObject = _createChangeDomainObject(\n      backendChangeObject, applyFunc, reverseFunc);\n    UndoRedoService.applyChange(changeDomainObject, fakeDomainObject);\n\n    expect(UndoRedoService.hasChanges()).toBeTruthy();\n    expect(applyFunc).toHaveBeenCalledWith(\n      backendChangeObject, fakeDomainObject);\n\n    expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n    expect(UndoRedoService.hasChanges()).toBeFalsy();\n    expect(reverseFunc).toHaveBeenCalledWith(\n      backendChangeObject, fakeDomainObject);\n  });\n\n  it(\'should be able to redo an undone change\', function() {\n    var applyFunc = jasmine.createSpy(\'applyChange\');\n    var reverseFunc = jasmine.createSpy(\'reverseChange\');\n\n    expect(UndoRedoService.hasChanges()).toBeFalsy();\n\n    // Apply the initial change.\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n    var backendChangeObject = _createBackendChangeObject(\'value\');\n    var changeDomainObject = _createChangeDomainObject(\n      backendChangeObject, applyFunc, reverseFunc);\n    UndoRedoService.applyChange(changeDomainObject, fakeDomainObject);\n    expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n\n    expect(reverseFunc).toHaveBeenCalledWith(\n      backendChangeObject, fakeDomainObject);\n    expect(UndoRedoService.hasChanges()).toBeFalsy();\n\n    expect(UndoRedoService.redoChange(fakeDomainObject)).toBeTruthy();\n    expect(UndoRedoService.hasChanges()).toBeTruthy();\n    expect(applyFunc).toHaveBeenCalledWith(\n      backendChangeObject, fakeDomainObject);\n\n    // Apply must be called twice (once for the first apply and once for redo).\n    expect(applyFunc.calls.count()).toEqual(2);\n  });\n\n  it(\'should not undo anything if no changes are applied\', function() {\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n\n    expect(UndoRedoService.hasChanges()).toBeFalsy();\n    expect(UndoRedoService.undoChange(fakeDomainObject)).toBeFalsy();\n  });\n\n  it(\'should not redo anything if no changes are undone\', function() {\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n\n    expect(UndoRedoService.hasChanges()).toBeFalsy();\n    expect(UndoRedoService.redoChange(fakeDomainObject)).toBeFalsy();\n\n    var changeDomainObject = _createNoOpChangeDomainObject(\'value\');\n    UndoRedoService.applyChange(changeDomainObject, fakeDomainObject);\n    expect(UndoRedoService.redoChange(fakeDomainObject)).toBeFalsy();\n  });\n\n  it(\'should only clear the list on clear and not undo changes\', function() {\n    var applyFunc = jasmine.createSpy(\'applyChange\');\n    var reverseFunc = jasmine.createSpy(\'reverseChange\');\n\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n    var backendChangeObject = _createBackendChangeObject(\'value\');\n    var changeDomainObject = _createChangeDomainObject(\n      backendChangeObject, applyFunc, reverseFunc);\n\n    expect(UndoRedoService.getChangeCount()).toEqual(0);\n\n    UndoRedoService.applyChange(changeDomainObject, fakeDomainObject);\n    expect(UndoRedoService.getChangeCount()).toEqual(1);\n\n    UndoRedoService.clearChanges();\n    expect(UndoRedoService.getChangeCount()).toEqual(0);\n\n    expect(applyFunc).toHaveBeenCalled();\n    expect(reverseFunc).not.toHaveBeenCalled();\n    expect(applyFunc.calls.count()).toEqual(1);\n  });\n\n  it(\'should undo changes in the reverse order of applying\', function() {\n    var appliedChanges = [];\n    var reversedChanges = [];\n\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n    var backendChangeObject1 = _createBackendChangeObject(\'value1\');\n    var changeDomainObject1 = _createChangeDomainObject(\n      backendChangeObject1, function() {\n        appliedChanges.push(\'change1\');\n      }, function() {\n        reversedChanges.push(\'change1\');\n      });\n\n    var backendChangeObject2 = _createBackendChangeObject(\'value2\');\n    var changeDomainObject2 = _createChangeDomainObject(\n      backendChangeObject2, function() {\n        appliedChanges.push(\'change2\');\n      }, function() {\n        reversedChanges.push(\'change2\');\n      });\n\n    var backendChangeObject3 = _createBackendChangeObject(\'value3\');\n    var changeDomainObject3 = _createChangeDomainObject(\n      backendChangeObject3, function() {\n        appliedChanges.push(\'change3\');\n      }, function() {\n        reversedChanges.push(\'change3\');\n      });\n\n    expect(appliedChanges).toEqual([]);\n    expect(reversedChanges).toEqual([]);\n\n    UndoRedoService.applyChange(changeDomainObject1, fakeDomainObject);\n    UndoRedoService.applyChange(changeDomainObject2, fakeDomainObject);\n    UndoRedoService.applyChange(changeDomainObject3, fakeDomainObject);\n\n    expect(appliedChanges).toEqual([\'change1\', \'change2\', \'change3\']);\n    expect(reversedChanges).toEqual([]);\n    expect(UndoRedoService.getChangeCount()).toEqual(3);\n\n    expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n    expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n    expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n\n    expect(appliedChanges).toEqual([\'change1\', \'change2\', \'change3\']);\n    expect(reversedChanges).toEqual([\'change3\', \'change2\', \'change1\']);\n    expect(UndoRedoService.getChangeCount()).toEqual(0);\n  });\n\n  it(\'should not be able to redo after applying a new change after undo\',\n    function() {\n      expect(UndoRedoService.getChangeCount()).toEqual(0);\n\n      var fakeDomainObject = {\n        domain_property_name: \'fake value\'\n      };\n      var changeDomainObject1 = _createNoOpChangeDomainObject(\'value1\');\n      var changeDomainObject2 = _createNoOpChangeDomainObject(\'value2\');\n      var changeDomainObject3 = _createNoOpChangeDomainObject(\'value3\');\n\n      UndoRedoService.applyChange(changeDomainObject1, fakeDomainObject);\n      UndoRedoService.applyChange(changeDomainObject2, fakeDomainObject);\n      expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n\n      UndoRedoService.applyChange(changeDomainObject3, fakeDomainObject);\n      expect(UndoRedoService.redoChange(fakeDomainObject)).toBeFalsy();\n\n      expect(UndoRedoService.getChangeCount()).toEqual(2);\n    }\n  );\n\n  it(\'should have an empty change list with no changes\', function() {\n    expect(UndoRedoService.hasChanges()).toBeFalsy();\n    expect(UndoRedoService.getChangeList()).toEqual([]);\n  });\n\n  it(\'should build a change list from only applied changes\', function() {\n    expect(UndoRedoService.getChangeCount()).toEqual(0);\n\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n    var changeDomainObject1 = _createNoOpChangeDomainObject(\'value1\');\n    var changeDomainObject2 = _createNoOpChangeDomainObject(\'value2\');\n    var changeDomainObject3 = _createNoOpChangeDomainObject(\'value3\');\n\n    UndoRedoService.applyChange(changeDomainObject2, fakeDomainObject);\n    UndoRedoService.applyChange(changeDomainObject3, fakeDomainObject);\n    expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n\n    UndoRedoService.applyChange(changeDomainObject1, fakeDomainObject);\n    expect(UndoRedoService.getChangeCount()).toEqual(2);\n\n    var changeList = UndoRedoService.getChangeList();\n    expect(changeList).toEqual([changeDomainObject2, changeDomainObject1]);\n  });\n\n  it(\'should return a change list whose mutations do not change the service\',\n    function() {\n      var fakeDomainObject = {\n        domain_property_name: \'fake value\'\n      };\n      var changeDomainObject1 = _createNoOpChangeDomainObject(\'value1\');\n      var changeDomainObject2 = _createNoOpChangeDomainObject(\'value2\');\n\n      UndoRedoService.applyChange(changeDomainObject1, fakeDomainObject);\n      UndoRedoService.applyChange(changeDomainObject2, fakeDomainObject);\n\n      var changeList = UndoRedoService.getChangeList();\n      expect(changeList).toEqual([changeDomainObject1, changeDomainObject2]);\n      expect(UndoRedoService.getChangeCount()).toEqual(2);\n\n      // Change the returned change list, which should be a copy.\n      changeList.splice(0, 1);\n      expect(UndoRedoService.getChangeCount()).toEqual(2);\n\n      var origChangeList = UndoRedoService.getChangeList();\n      expect(origChangeList)\n        .toEqual([changeDomainObject1, changeDomainObject2]);\n    }\n  );\n\n  it(\'should build a committable change list with one change\', function() {\n    var fakeDomainObject = {\n      domain_property_name: \'fake value\'\n    };\n    var backendChangeObject = _createBackendChangeObject(\'value\');\n    var changeDomainObject = _createChangeDomainObject(backendChangeObject);\n\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([]);\n\n    UndoRedoService.applyChange(changeDomainObject, fakeDomainObject);\n    expect(UndoRedoService.getCommittableChangeList()).toEqual([\n      backendChangeObject\n    ]);\n  });\n\n  it(\'should build a committable change list in the order of applied changes\',\n    function() {\n      // Perform a series of complex operations to build the committable change\n      // list. Apply 3 changes, undo two, redo one, and apply one.\n      var fakeDomainObject = {\n        domain_property_name: \'fake value\'\n      };\n      var backendChangeObject1 = _createBackendChangeObject(\'value1\');\n      var backendChangeObject2 = _createBackendChangeObject(\'value2\');\n      var backendChangeObject3 = _createBackendChangeObject(\'value3\');\n      var backendChangeObject4 = _createBackendChangeObject(\'value4\');\n      var changeDomainObject1 = _createChangeDomainObject(backendChangeObject1);\n      var changeDomainObject2 = _createChangeDomainObject(backendChangeObject2);\n      var changeDomainObject3 = _createChangeDomainObject(backendChangeObject3);\n      var changeDomainObject4 = _createChangeDomainObject(backendChangeObject4);\n\n      expect(UndoRedoService.getChangeCount()).toEqual(0);\n\n      UndoRedoService.applyChange(changeDomainObject4, fakeDomainObject);\n      UndoRedoService.applyChange(changeDomainObject2, fakeDomainObject);\n      UndoRedoService.applyChange(changeDomainObject3, fakeDomainObject);\n\n      expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n      expect(UndoRedoService.undoChange(fakeDomainObject)).toBeTruthy();\n      expect(UndoRedoService.redoChange(fakeDomainObject)).toBeTruthy();\n\n      UndoRedoService.applyChange(changeDomainObject1, fakeDomainObject);\n      expect(UndoRedoService.getChangeCount()).toEqual(3);\n\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([\n        backendChangeObject4, backendChangeObject2, backendChangeObject1\n      ]);\n    }\n  );\n});'

blocks = {}
debug_info = ''
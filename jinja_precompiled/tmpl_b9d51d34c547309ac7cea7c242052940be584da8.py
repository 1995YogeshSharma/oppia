from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/StoryUpdateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to build changes to a story. These changes may\n * then be used by other services, such as a backend API service to update the\n * story in the backend. This service also registers all changes with the\n * undo/redo service.\n */\n\n// These should match the constants defined in core.domain.story_domain.\n\noppia.constant(\'CMD_ADD_STORY_NODE\', \'add_story_node\');\noppia.constant(\'CMD_DELETE_STORY_NODE\', \'delete_story_node\');\noppia.constant(\n  \'CMD_UPDATE_STORY_NODE_OUTLINE_STATUS\', \'update_story_node_outline_status\');\n\noppia.constant(\'CMD_UPDATE_STORY_PROPERTY\', \'update_story_property\');\noppia.constant(\'CMD_UPDATE_STORY_NODE_PROPERTY\', \'update_story_node_property\');\noppia.constant(\n  \'CMD_UPDATE_STORY_CONTENTS_PROPERTY\', \'update_story_contents_property\');\n\noppia.constant(\'STORY_PROPERTY_TITLE\', \'title\');\noppia.constant(\'STORY_PROPERTY_DESCRIPTION\', \'description\');\noppia.constant(\'STORY_PROPERTY_NOTES\', \'notes\');\noppia.constant(\'STORY_PROPERTY_LANGUAGE_CODE\', \'language_code\');\n\noppia.constant(\'INITIAL_NODE_ID\', \'initial_node_id\');\n\noppia.constant(\'STORY_NODE_PROPERTY_OUTLINE\', \'outline\');\noppia.constant(\'STORY_NODE_PROPERTY_EXPLORATION_ID\', \'exploration_id\');\noppia.constant(\n  \'STORY_NODE_PROPERTY_DESTINATION_NODE_IDS\', \'destination_node_ids\');\noppia.constant(\'STORY_NODE_PROPERTY_ACQUIRED_SKILL_IDS\', \'acquired_skill_ids\');\noppia.constant(\n  \'STORY_NODE_PROPERTY_PREREQUISITE_SKILL_IDS\', \'prerequisite_skill_ids\');\n\noppia.factory(\'StoryUpdateService\', [\n  \'ChangeObjectFactory\', \'UndoRedoService\',\n  \'CMD_ADD_STORY_NODE\', \'CMD_DELETE_STORY_NODE\',\n  \'CMD_UPDATE_STORY_NODE_OUTLINE_STATUS\', \'CMD_UPDATE_STORY_PROPERTY\',\n  \'CMD_UPDATE_STORY_NODE_PROPERTY\', \'CMD_UPDATE_STORY_CONTENTS_PROPERTY\',\n  \'STORY_PROPERTY_TITLE\', \'STORY_PROPERTY_DESCRIPTION\',\n  \'STORY_PROPERTY_NOTES\', \'STORY_PROPERTY_LANGUAGE_CODE\',\n  \'INITIAL_NODE_ID\', \'STORY_NODE_PROPERTY_OUTLINE\',\n  \'STORY_NODE_PROPERTY_EXPLORATION_ID\',\n  \'STORY_NODE_PROPERTY_DESTINATION_NODE_IDS\',\n  \'STORY_NODE_PROPERTY_ACQUIRED_SKILL_IDS\',\n  \'STORY_NODE_PROPERTY_PREREQUISITE_SKILL_IDS\', function(\n      ChangeObjectFactory, UndoRedoService,\n      CMD_ADD_STORY_NODE, CMD_DELETE_STORY_NODE,\n      CMD_UPDATE_STORY_NODE_OUTLINE_STATUS, CMD_UPDATE_STORY_PROPERTY,\n      CMD_UPDATE_STORY_NODE_PROPERTY, CMD_UPDATE_STORY_CONTENTS_PROPERTY,\n      STORY_PROPERTY_TITLE, STORY_PROPERTY_DESCRIPTION,\n      STORY_PROPERTY_NOTES, STORY_PROPERTY_LANGUAGE_CODE,\n      INITIAL_NODE_ID, STORY_NODE_PROPERTY_OUTLINE,\n      STORY_NODE_PROPERTY_EXPLORATION_ID,\n      STORY_NODE_PROPERTY_DESTINATION_NODE_IDS,\n      STORY_NODE_PROPERTY_ACQUIRED_SKILL_IDS,\n      STORY_NODE_PROPERTY_PREREQUISITE_SKILL_IDS) {\n    // Creates a change using an apply function, reverse function, a change\n    // command and related parameters. The change is applied to a given\n    // story.\n    var _applyChange = function(story, command, params, apply, reverse) {\n      var changeDict = angular.copy(params);\n      changeDict.cmd = command;\n      var changeObj = ChangeObjectFactory.create(changeDict, apply, reverse);\n      UndoRedoService.applyChange(changeObj, story);\n    };\n\n    var _getParameterFromChangeDict = function(changeDict, paramName) {\n      return changeDict[paramName];\n    };\n\n    var _getNodeIdFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'node_id\');\n    };\n\n    var _getStoryNode = function(storyContents, nodeId) {\n      var storyNodeIndex = storyContents.getNodeIndex(nodeId);\n      if (storyNodeIndex === -1) {\n        throw Error(\'The given node doesn\\\'t exist\');\n      }\n      return storyContents.getNodes()[storyNodeIndex];\n    };\n\n    // Applies a story property change, specifically. See _applyChange()\n    // for details on the other behavior of this function.\n    var _applyStoryPropertyChange = function(\n        story, propertyName, oldValue, newValue, apply, reverse) {\n      _applyChange(story, CMD_UPDATE_STORY_PROPERTY, {\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue)\n      }, apply, reverse);\n    };\n\n    var _applyStoryContentsPropertyChange = function(\n        story, propertyName, oldValue, newValue, apply, reverse) {\n      _applyChange(story, CMD_UPDATE_STORY_CONTENTS_PROPERTY, {\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue)\n      }, apply, reverse);\n    };\n\n    var _applyStoryNodePropertyChange = function(\n        story, propertyName, nodeId, oldValue, newValue, apply, reverse) {\n      _applyChange(story, CMD_UPDATE_STORY_NODE_PROPERTY, {\n        node_id: nodeId,\n        property_name: propertyName,\n        new_value: angular.copy(newValue),\n        old_value: angular.copy(oldValue)\n      }, apply, reverse);\n    };\n\n    var _getNewPropertyValueFromChangeDict = function(changeDict) {\n      return _getParameterFromChangeDict(changeDict, \'new_value\');\n    };\n\n    // These functions are associated with updates available in\n    // core.domain.story_services.apply_change_list.\n    return {\n      /**\n       * Changes the title of a story and records the change in the\n       * undo/redo service.\n       */\n      setStoryTitle: function(story, title) {\n        var oldTitle = angular.copy(story.getTitle());\n        _applyStoryPropertyChange(\n          story, STORY_PROPERTY_TITLE, oldTitle, title,\n          function(changeDict, story) {\n            // Apply\n            var title = _getNewPropertyValueFromChangeDict(changeDict);\n            story.setTitle(title);\n          }, function(changeDict, story) {\n            // Undo.\n            story.setTitle(oldTitle);\n          });\n      },\n\n      /**\n       * Changes the description of a story and records the change in the\n       * undo/redo service.\n       */\n      setStoryDescription: function(story, description) {\n        var oldDescription = angular.copy(story.getDescription());\n        _applyStoryPropertyChange(\n          story, STORY_PROPERTY_DESCRIPTION, oldDescription, description,\n          function(changeDict, story) {\n            // Apply\n            var description = _getNewPropertyValueFromChangeDict(changeDict);\n            story.setDescription(description);\n          }, function(changeDict, story) {\n            // Undo.\n            story.setDescription(oldDescription);\n          });\n      },\n\n      /**\n       * Changes the notes for a story and records the change in the\n       * undo/redo service.\n       */\n      setStoryNotes: function(story, notes) {\n        var oldNotes = angular.copy(story.getNotes());\n        _applyStoryPropertyChange(\n          story, STORY_PROPERTY_NOTES, oldNotes, notes,\n          function(changeDict, story) {\n            // Apply\n            var notes = _getNewPropertyValueFromChangeDict(changeDict);\n            story.setNotes(notes);\n          }, function(changeDict, story) {\n            // Undo.\n            story.setNotes(oldNotes);\n          });\n      },\n\n      /**\n       * Changes the language code of a story and records the change in\n       * the undo/redo service.\n       */\n      setStoryLanguageCode: function(story, languageCode) {\n        var oldLanguageCode = angular.copy(story.getLanguageCode());\n        _applyStoryPropertyChange(\n          story, STORY_PROPERTY_LANGUAGE_CODE, oldLanguageCode, languageCode,\n          function(changeDict, story) {\n            // Apply.\n            var languageCode = _getNewPropertyValueFromChangeDict(changeDict);\n            story.setLanguageCode(languageCode);\n          }, function(changeDict, story) {\n            // Undo.\n            story.setLanguageCode(oldLanguageCode);\n          });\n      },\n\n      /**\n       * Sets the initial node of the story and records the change in\n       * the undo/redo service.\n       */\n      setInitialNodeId: function(story, newInitialNodeId) {\n        var oldInitialNodeId =\n          angular.copy(story.getStoryContents().getInitialNodeId());\n        _applyStoryContentsPropertyChange(\n          story, INITIAL_NODE_ID, oldInitialNodeId,\n          newInitialNodeId,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().setInitialNodeId(newInitialNodeId);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().setInitialNodeId(oldInitialNodeId);\n          });\n      },\n\n      /**\n       * Creates a story node, adds it to the story and records the change in\n       * the undo/redo service.\n       */\n      addStoryNode: function(story) {\n        var nextNodeId = story.getStoryContents().getNextNodeId();\n        _applyChange(story, CMD_ADD_STORY_NODE, {\n          node_id: nextNodeId\n        }, function(changeDict, story) {\n          // Apply.\n          story.getStoryContents().addNode();\n        }, function(changeDict, story) {\n          // Undo.\n          var nodeId = _getNodeIdFromChangeDict(changeDict);\n          story.getStoryContents().deleteNode(nodeId);\n        });\n      },\n\n      /**\n       * Removes a story node, and records the change in the undo/redo service.\n       */\n      deleteStoryNode: function(story, nodeId) {\n        var nodeIndex = story.getStoryContents().getNodeIndex(nodeId);\n        _applyChange(story, CMD_DELETE_STORY_NODE, {\n          node_id: nodeId\n        }, function(changeDict, story) {\n          // Apply.\n          story.getStoryContents().deleteNode(nodeId);\n        }, function(changeDict, story) {\n          // Undo.\n          throw Error(\'A deleted story node cannot be restored.\');\n        });\n      },\n\n      /**\n       * Marks the node outline of a node as finalized and records the change\n       * in the undo/redo service.\n       */\n      finalizeStoryNodeOutline: function(story, nodeId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        if (storyNode.getOutlineStatus()) {\n          throw Error(\'Node outline is already finalized.\');\n        }\n        _applyChange(story, CMD_UPDATE_STORY_NODE_OUTLINE_STATUS, {\n          node_id: nodeId,\n          old_value: false,\n          new_value: true\n        }, function(changeDict, story) {\n          // Apply.\n          story.getStoryContents().markNodeOutlineAsFinalized(nodeId);\n        }, function(changeDict, story) {\n          // Undo.\n          story.getStoryContents().markNodeOutlineAsNotFinalized(nodeId);\n        });\n      },\n\n      /**\n       * Marks the node outline of a node as not finalized and records the\n       * change in the undo/redo service.\n       */\n      unfinalizeStoryNodeOutline: function(story, nodeId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        if (!storyNode.getOutlineStatus()) {\n          throw Error(\'Node outline is already not finalized.\');\n        }\n        _applyChange(story, CMD_UPDATE_STORY_NODE_OUTLINE_STATUS, {\n          node_id: nodeId,\n          old_value: true,\n          new_value: false\n        }, function(changeDict, story) {\n          // Apply.\n          story.getStoryContents().markNodeOutlineAsNotFinalized(nodeId);\n        }, function(changeDict, story) {\n          // Undo.\n          story.getStoryContents().markNodeOutlineAsFinalized(nodeId);\n        });\n      },\n\n      /**\n       * Sets the outline of a node of the story and records the change\n       * in the undo/redo service.\n       */\n      setStoryNodeOutline: function(story, nodeId, newOutline) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        var oldOutline = storyNode.getOutline();\n\n        _applyStoryNodePropertyChange(\n          story, STORY_NODE_PROPERTY_OUTLINE, nodeId,\n          oldOutline, newOutline,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().setNodeOutline(nodeId, newOutline);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().setNodeOutline(\n              nodeId, oldOutline);\n          });\n      },\n\n      /**\n       * Sets the id of the exploration that of a node of the story is linked\n       * to and records the change in the undo/redo service.\n       */\n      setStoryNodeExplorationId: function(story, nodeId, newExplorationId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        var oldExplorationId = storyNode.getExplorationId();\n\n        _applyStoryNodePropertyChange(\n          story, STORY_NODE_PROPERTY_EXPLORATION_ID, nodeId,\n          oldExplorationId, newExplorationId,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().setNodeExplorationId(\n              nodeId, newExplorationId);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().setNodeExplorationId(\n              nodeId, oldExplorationId);\n          });\n      },\n\n      /**\n       * Adds a destination node id to a node of a story and records the change\n       * in the undo/redo service.\n       */\n      addDestinationNodeIdToNode: function(story, nodeId, destinationNodeId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        var oldDestinationNodeIds = angular.copy(\n          storyNode.getDestinationNodeIds());\n        var newDestinationNodeIds = angular.copy(oldDestinationNodeIds);\n        newDestinationNodeIds.push(destinationNodeId);\n\n        _applyStoryNodePropertyChange(\n          story, STORY_NODE_PROPERTY_DESTINATION_NODE_IDS, nodeId,\n          oldDestinationNodeIds, newDestinationNodeIds,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().addDestinationNodeIdToNode(\n              nodeId, destinationNodeId);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().removeDestinationNodeIdFromNode(\n              nodeId, destinationNodeId);\n          });\n      },\n\n      /**\n       * Removes a destination node id from a node of a story and records the\n       * change in the undo/redo service.\n       */\n      removeDestinationNodeIdFromNode: function(\n          story, nodeId, destinationNodeId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        var oldDestinationNodeIds = angular.copy(\n          storyNode.getDestinationNodeIds());\n        var newDestinationNodeIds = angular.copy(oldDestinationNodeIds);\n        var index = newDestinationNodeIds.indexOf(destinationNodeId);\n        if (index === -1) {\n          throw Error(\'The given destination node is not part of the node\');\n        }\n        newDestinationNodeIds.splice(index, 1);\n\n        _applyStoryNodePropertyChange(\n          story, STORY_NODE_PROPERTY_DESTINATION_NODE_IDS, nodeId,\n          oldDestinationNodeIds, newDestinationNodeIds,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().removeDestinationNodeIdFromNode(\n              nodeId, destinationNodeId);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().addDestinationNodeIdToNode(\n              nodeId, destinationNodeId);\n          });\n      },\n\n      /**\n       * Adds a prerequisite skill id to a node of a story and records the\n       * change in the undo/redo service.\n       */\n      addPrerequisiteSkillIdToNode: function(story, nodeId, skillId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        var oldPrerequisiteSkillIds = angular.copy(\n          storyNode.getPrerequisiteSkillIds());\n        var newPrerequisiteSkillIds = angular.copy(oldPrerequisiteSkillIds);\n        newPrerequisiteSkillIds.push(skillId);\n        _applyStoryNodePropertyChange(\n          story, STORY_NODE_PROPERTY_PREREQUISITE_SKILL_IDS, nodeId,\n          oldPrerequisiteSkillIds, newPrerequisiteSkillIds,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().addPrerequisiteSkillIdToNode(\n              nodeId, skillId);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().removePrerequisiteSkillIdFromNode(\n              nodeId, skillId);\n          });\n      },\n\n      /**\n       * Removes a prerequisite skill id from a node of a story and records the\n       * change in the undo/redo service.\n       */\n      removePrerequisiteSkillIdFromNode: function(story, nodeId, skillId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        var oldPrerequisiteSkillIds = angular.copy(\n          storyNode.getPrerequisiteSkillIds());\n        var newPrerequisiteSkillIds = angular.copy(oldPrerequisiteSkillIds);\n        var index = newPrerequisiteSkillIds.indexOf(skillId);\n        if (index === -1) {\n          throw Error(\'The given prerequisite skill is not part of the node\');\n        }\n        newPrerequisiteSkillIds.splice(index, 1);\n\n        _applyStoryNodePropertyChange(\n          story, STORY_NODE_PROPERTY_PREREQUISITE_SKILL_IDS, nodeId,\n          oldPrerequisiteSkillIds, newPrerequisiteSkillIds,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().removePrerequisiteSkillIdFromNode(\n              nodeId, skillId);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().addPrerequisiteSkillIdToNode(\n              nodeId, skillId);\n          });\n      },\n\n      /**\n       * Adds an acquired skill id to a node of a story and records the change\n       * in the undo/redo service.\n       */\n      addAcquiredSkillIdToNode: function(story, nodeId, skillId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        var oldAcquiredSkillIds = angular.copy(\n          storyNode.getAcquiredSkillIds());\n        var newAcquiredSkillIds = angular.copy(oldAcquiredSkillIds);\n        newAcquiredSkillIds.push(skillId);\n\n        _applyStoryNodePropertyChange(\n          story, STORY_NODE_PROPERTY_ACQUIRED_SKILL_IDS, nodeId,\n          oldAcquiredSkillIds, newAcquiredSkillIds,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().addAcquiredSkillIdToNode(\n              nodeId, skillId);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().removeAcquiredSkillIdFromNode(\n              nodeId, skillId);\n          });\n      },\n\n      /**\n       * Removes an acquired skill id from a node of a story and records the\n       * change in the undo/redo service.\n       */\n      removeAcquiredSkillIdFromNode: function(story, nodeId, skillId) {\n        var storyNode = _getStoryNode(story.getStoryContents(), nodeId);\n        var oldAcquiredSkillIds = angular.copy(\n          storyNode.getAcquiredSkillIds());\n        var newAcquiredSkillIds = angular.copy(oldAcquiredSkillIds);\n        var index = newAcquiredSkillIds.indexOf(skillId);\n        if (index === -1) {\n          throw Error(\'The given acquired skill id is not part of the node\');\n        }\n        newAcquiredSkillIds.splice(index, 1);\n\n        _applyStoryNodePropertyChange(\n          story, STORY_NODE_PROPERTY_ACQUIRED_SKILL_IDS, nodeId,\n          oldAcquiredSkillIds, newAcquiredSkillIds,\n          function(changeDict, story) {\n            // Apply.\n            story.getStoryContents().removeAcquiredSkillIdFromNode(\n              nodeId, skillId);\n          }, function(changeDict, story) {\n            // Undo.\n            story.getStoryContents().addAcquiredSkillIdToNode(\n              nodeId, skillId);\n          });\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
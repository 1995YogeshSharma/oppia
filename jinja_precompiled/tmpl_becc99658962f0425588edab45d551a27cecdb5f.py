from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/history_tab/CompareVersionsService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to compare versions of explorations.\n */\n\noppia.factory(\'CompareVersionsService\', [\n  \'$http\', \'$q\', \'VersionTreeService\', \'ExplorationDataService\',\n  \'ExplorationDiffService\', \'StateObjectFactory\', \'StatesObjectFactory\',\n  \'ReadOnlyExplorationBackendApiService\',\n  function(\n      $http, $q, VersionTreeService, ExplorationDataService,\n      ExplorationDiffService, StateObjectFactory, StatesObjectFactory,\n      ReadOnlyExplorationBackendApiService) {\n    /**\n     * Constructs the combined list of changes needed to get from v1 to v2.\n     *\n     * v1, v2 are version numbers. v1 must be an ancestor of v2.\n     * directionForwards is true if changes are compared in increasing version\n     * number, and false if changes are compared in decreasing version number.\n     */\n    var _getCombinedChangeList = function(v1, v2, directionForwards) {\n      var _treeParents = VersionTreeService.getVersionTree();\n\n      // Stores the path of version numbers from v1 to v2.\n      var versionPath = [];\n      while (v2 !== v1) {\n        versionPath.push(v2);\n        v2 = _treeParents[v2];\n      }\n      if (directionForwards) {\n        versionPath.reverse();\n      }\n\n      // The full changelist that is applied to go from v1 to v2.\n      var combinedChangeList = [];\n      versionPath.forEach(function(version) {\n        var changeListForVersion = VersionTreeService.getChangeList(version);\n        if (!directionForwards) {\n          changeListForVersion.reverse();\n        }\n        combinedChangeList = combinedChangeList.concat(changeListForVersion);\n      });\n\n      return combinedChangeList;\n    };\n\n    return {\n      /**\n       * Summarize changes to states and rules between v1 and v2.\n       * Returns a promise for an object whose keys are \'initStateName\',\n       * \'v2InitStateName\', \'finalStateName\', \'nodes\', \'nodeList\' and \'links\'.\n       *\n       * \'initStateName\' and \'v2InitStateName\' are the IDs of the initial states\n       * of v1 and v2 respectively. \'finalStateName\' is the ID of the final\n       * state.\n       *\n       * \'nodes\' is an object whose keys are state IDs (assigned\n       * within the function) and whose value is an object with these keys:\n       *  - \'newestStateName\': the latest name of the state\n       *  - \'originalStateName\': the first encountered name for the state\n       *  - \'stateProperty\': \'changed\', \'unchanged\', \'added\' or \'deleted\'\n       *\n       * \'links\' is a list of objects representing rules. The objects have keys:\n       *  - \'source\': source state of link\n       *  - \'target\': target state of link\n       *  - \'linkProperty\': \'added\', \'deleted\' or \'unchanged\'\n       *\n       * Should be called after VersionTreeService.init() is called.\n       * Should satisfy v1 < v2.\n       */\n      getDiffGraphData: function(v1, v2) {\n        if (v1 > v2) {\n          throw new Error(\'Tried to compare v1 > v2.\');\n        }\n        return $q.all({\n          v1Data: ReadOnlyExplorationBackendApiService.loadExploration(\n            ExplorationDataService.explorationId, v1),\n          v2Data: ReadOnlyExplorationBackendApiService.loadExploration(\n            ExplorationDataService.explorationId, v2)\n        }).then(function(response) {\n          var v1StatesDict = response.v1Data.exploration.states;\n          var v2StatesDict = response.v2Data.exploration.states;\n\n          // Track changes from v1 to LCA, and then from LCA to v2.\n          var lca = VersionTreeService.findLCA(v1, v2);\n\n          var v1States = StatesObjectFactory.createFromBackendDict(\n            v1StatesDict).getStateObjects();\n          var v2States = StatesObjectFactory.createFromBackendDict(\n            v2StatesDict).getStateObjects();\n\n          var diffGraphData = ExplorationDiffService.getDiffGraphData(\n            v1States, v2States, [{\n              changeList: _getCombinedChangeList(lca, v1, false),\n              directionForwards: false\n            }, {\n              changeList: _getCombinedChangeList(lca, v2, true),\n              directionForwards: true\n            }]\n          );\n          return {\n            nodes: diffGraphData.nodes,\n            links: diffGraphData.links,\n            finalStateIds: diffGraphData.finalStateIds,\n            v1InitStateId: diffGraphData.originalStateIds[\n              response.v1Data.exploration.init_state_name],\n            v2InitStateId: diffGraphData.stateIds[\n              response.v2Data.exploration.init_state_name],\n            v1States: v1States,\n            v2States: v2States\n          };\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
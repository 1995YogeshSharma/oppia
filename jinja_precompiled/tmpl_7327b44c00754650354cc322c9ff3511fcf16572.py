from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/state_editor/StateInteractionEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the interaction editor section in the state\n * editor.\n */\noppia.directive(\'stateInteractionEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      link: function(scope, element) {\n        // This allows the scope to be retrievable during Karma unit testing.\n        // See http://stackoverflow.com/a/29833832 for more details.\n        element[0].getControllerScope = function() {\n          return scope;\n        };\n      },\n      scope: {\n        onSaveContentIdsToAudioTranslations: \'=\',\n        onSaveInteractionCustomizationArgs: \'=\',\n        onSaveInteractionId: \'=\',\n        onSaveSolution: \'=\',\n        onSaveStateContent: \'=\',\n        recomputeGraph: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/state_editor/state_interaction_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$http\', \'$rootScope\', \'$uibModal\', \'$injector\', \'$filter\',\n        \'AlertsService\', \'HtmlEscaperService\',\n        \'INTERACTION_SPECS\', \'StateInteractionIdService\',\n        \'GenerateContentIdService\', \'StateCustomizationArgsService\',\n        \'EditabilityService\',\n        \'InteractionDetailsCacheService\', \'UrlInterpolationService\',\n        \'StateContentIdsToAudioTranslationsService\',\n        \'ExplorationHtmlFormatterService\', \'SubtitledHtmlObjectFactory\',\n        \'StateSolutionService\', \'StateHintsService\',\n        \'StateContentService\', function(\n            $scope, $http, $rootScope, $uibModal, $injector, $filter,\n            AlertsService, HtmlEscaperService,\n            INTERACTION_SPECS, StateInteractionIdService,\n            GenerateContentIdService, StateCustomizationArgsService,\n            EditabilityService,\n            InteractionDetailsCacheService, UrlInterpolationService,\n            StateContentIdsToAudioTranslationsService,\n            ExplorationHtmlFormatterService, SubtitledHtmlObjectFactory,\n            StateSolutionService, StateHintsService,\n            StateContentService) {\n          var DEFAULT_TERMINAL_STATE_CONTENT =\n            \'Congratulations, you have finished!\';\n\n          // Declare dummy submitAnswer() and adjustPageHeight() methods for the\n          // interaction preview.\n          $scope.submitAnswer = function() {};\n          $scope.adjustPageHeight = function() {};\n          $scope.EditabilityService = EditabilityService;\n\n          $scope.StateInteractionIdService = StateInteractionIdService;\n          $scope.hasLoaded = false;\n          $scope.customizationModalReopened = false;\n\n          $scope.userBlueImgUrl = UrlInterpolationService.getStaticImageUrl(\n            \'/avatar/user_blue_72px.png\');\n          $scope.userBlackImgUrl = UrlInterpolationService.getStaticImageUrl(\n            \'/avatar/user_black_72px.png\');\n\n          $scope.getCurrentInteractionName = function() {\n            return (\n              StateInteractionIdService.savedMemento ?\n                INTERACTION_SPECS[StateInteractionIdService.savedMemento].name :\n                \'\');\n          };\n          $scope.doesCurrentInteractionHaveCustomizations = function() {\n            var interactionSpec = INTERACTION_SPECS[\n              StateInteractionIdService.savedMemento];\n            return (\n              interactionSpec &&\n              interactionSpec.customization_arg_specs.length > 0);\n          };\n\n          var _getInteractionPreviewTag = function(\n              interactionCustomizationArgs) {\n            if (!StateInteractionIdService.savedMemento) {\n              return \'\';\n            }\n            return ExplorationHtmlFormatterService.getInteractionHtml(\n              StateInteractionIdService.savedMemento,\n              interactionCustomizationArgs, false);\n          };\n\n          $scope.$on(\'stateEditorInitialized\', function(evt, stateData) {\n            $scope.hasLoaded = false;\n            InteractionDetailsCacheService.reset();\n\n            $rootScope.$broadcast(\'initializeAnswerGroups\', {\n              interactionId: stateData.interaction.id,\n              answerGroups: stateData.interaction.answerGroups,\n              defaultOutcome: stateData.interaction.defaultOutcome,\n              confirmedUnclassifiedAnswers: (\n                stateData.interaction.confirmedUnclassifiedAnswers)\n            });\n\n            _updateInteractionPreviewAndAnswerChoices();\n            $scope.hasLoaded = true;\n          });\n\n          // If a terminal interaction is selected for a state with no content,\n          // this function sets the content to DEFAULT_TERMINAL_STATE_CONTENT.\n          // NOTE TO DEVELOPERS: Callers of this function must ensure that the\n          // current active state is a terminal one.\n          var updateDefaultTerminalStateContentIfEmpty = function() {\n            // Check if the content is currently empty, as expected.\n            var previousContent = StateContentService.savedMemento;\n            if (!previousContent.isEmpty()) {\n              return;\n            }\n            // Update the state\'s content.\n            StateContentService.displayed.setHtml(\n              DEFAULT_TERMINAL_STATE_CONTENT);\n            StateContentService.saveDisplayedValue();\n            $scope.onSaveStateContent(StateContentService.displayed);\n          };\n\n          $scope.onCustomizationModalSavePostHook = function() {\n            var hasInteractionIdChanged = (\n              StateInteractionIdService.displayed !==\n              StateInteractionIdService.savedMemento);\n            if (hasInteractionIdChanged) {\n              if (INTERACTION_SPECS[StateInteractionIdService.displayed]\n                .is_terminal) {\n                updateDefaultTerminalStateContentIfEmpty();\n              }\n              StateInteractionIdService.saveDisplayedValue();\n              $scope.onSaveInteractionId(StateInteractionIdService.displayed);\n            }\n\n            StateCustomizationArgsService.saveDisplayedValue();\n            $scope.onSaveInteractionCustomizationArgs(\n              StateCustomizationArgsService.displayed\n            );\n\n            InteractionDetailsCacheService.set(\n              StateInteractionIdService.savedMemento,\n              StateCustomizationArgsService.savedMemento);\n\n            // This must be called here so that the rules are updated before the\n            // state graph is recomputed.\n            if (hasInteractionIdChanged) {\n              $rootScope.$broadcast(\n                \'onInteractionIdChanged\',\n                StateInteractionIdService.savedMemento);\n            }\n\n            $scope.recomputeGraph();\n            _updateInteractionPreviewAndAnswerChoices();\n          };\n\n          $scope.openInteractionCustomizerModal = function() {\n            if (EditabilityService.isEditable()) {\n              AlertsService.clearWarnings();\n\n              $uibModal.open({\n                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                  \'/pages/exploration_editor/editor_tab/\' +\n                  \'customize_interaction_modal_directive.html\'),\n                backdrop: true,\n                resolve: {},\n                controller: [\n                  \'$scope\', \'$uibModalInstance\', \'$injector\',\n                  \'StateSolutionService\', \'StateInteractionIdService\',\n                  \'StateCustomizationArgsService\',\n                  \'InteractionDetailsCacheService\', \'INTERACTION_SPECS\',\n                  \'UrlInterpolationService\', \'EditorFirstTimeEventsService\',\n                  function(\n                      $scope, $uibModalInstance, $injector,\n                      StateSolutionService, StateInteractionIdService,\n                      StateCustomizationArgsService,\n                      InteractionDetailsCacheService, INTERACTION_SPECS,\n                      UrlInterpolationService, EditorFirstTimeEventsService) {\n                    EditorFirstTimeEventsService\n                      .registerFirstClickAddInteractionEvent();\n\n                    // This binds the services to the HTML template, so that\n                    // their displayed values can be used in the HTML.\n                    $scope.StateInteractionIdService =\n                      StateInteractionIdService;\n                    $scope.StateCustomizationArgsService = (\n                      StateCustomizationArgsService);\n\n                    $scope.getInteractionThumbnailImageUrl = (\n                      UrlInterpolationService.getInteractionThumbnailImageUrl);\n\n                    $scope.INTERACTION_SPECS = INTERACTION_SPECS;\n                    $scope.ALLOWED_INTERACTION_CATEGORIES = (\n                      GLOBALS.ALLOWED_INTERACTION_CATEGORIES);\n\n                    if (StateInteractionIdService.savedMemento) {\n                      $scope.customizationModalReopened = true;\n                      var interactionSpec = INTERACTION_SPECS[\n                        StateInteractionIdService.savedMemento];\n                      $scope.customizationArgSpecs = (\n                        interactionSpec.customization_arg_specs);\n\n                      StateInteractionIdService.displayed = angular.copy(\n                        StateInteractionIdService.savedMemento);\n                      StateCustomizationArgsService.displayed = {};\n                      // Ensure that StateCustomizationArgsService.displayed is\n                      // fully populated.\n                      for (\n                        var i = 0; i < $scope.customizationArgSpecs.length;\n                        i++) {\n                        var argName = $scope.customizationArgSpecs[i].name;\n                        StateCustomizationArgsService.displayed[argName] = {\n                          value: (\n                            StateCustomizationArgsService.savedMemento\n                              .hasOwnProperty(argName) ?\n                              angular.copy(\n                                StateCustomizationArgsService.savedMemento[\n                                  argName].value) :\n                              angular.copy(\n                                $scope.customizationArgSpecs[i].default_value)\n                          )\n                        };\n                      }\n\n                      $scope.$broadcast(\'schemaBasedFormsShown\');\n                      $scope.form = {};\n                      $scope.hasCustomizationArgs = (Object.keys(\n                        StateCustomizationArgsService.displayed).length > 0);\n                    }\n\n                    $scope.getCustomizationArgsWarningsList = function() {\n                      var validationServiceName =\n                        INTERACTION_SPECS[\n                          $scope.StateInteractionIdService.displayed].id +\n                        \'ValidationService\';\n                      var validationService = $injector.get(\n                        validationServiceName);\n                      var warningsList =\n                        validationService.getCustomizationArgsWarnings(\n                          StateCustomizationArgsService.displayed);\n                      return warningsList;\n                    };\n\n                    $scope.onChangeInteractionId = function(newInteractionId) {\n                      EditorFirstTimeEventsService\n                        .registerFirstSelectInteractionTypeEvent();\n\n                      var interactionSpec = INTERACTION_SPECS[newInteractionId];\n                      $scope.customizationArgSpecs = (\n                        interactionSpec.customization_arg_specs);\n\n                      StateInteractionIdService.displayed = newInteractionId;\n                      StateCustomizationArgsService.displayed = {};\n                      if (\n                        InteractionDetailsCacheService.contains(\n                          newInteractionId)) {\n                        StateCustomizationArgsService.displayed = (\n                          InteractionDetailsCacheService.get(\n                            newInteractionId).customization);\n                      } else {\n                        $scope.customizationArgSpecs.forEach(function(caSpec) {\n                          StateCustomizationArgsService.displayed[caSpec.name] =\n                            {\n                              value: angular.copy(caSpec.default_value)\n                            };\n                        });\n                      }\n\n                      if (Object.keys(\n                        StateCustomizationArgsService.displayed).length === 0) {\n                        $scope.save();\n                        $scope.hasCustomizationArgs = false;\n                      } else {\n                        $scope.hasCustomizationArgs = true;\n                      }\n\n                      $scope.$broadcast(\'schemaBasedFormsShown\');\n                      $scope.form = {};\n                    };\n\n                    $scope.returnToInteractionSelector = function() {\n                      InteractionDetailsCacheService.set(\n                        StateInteractionIdService.displayed,\n                        StateCustomizationArgsService.displayed);\n\n                      StateInteractionIdService.displayed = null;\n                      StateCustomizationArgsService.displayed = {};\n                    };\n\n                    $scope.isSaveInteractionButtonEnabled = function() {\n                      return $scope.hasCustomizationArgs &&\n                        $scope.StateInteractionIdService.displayed &&\n                        $scope.form.schemaForm.$valid &&\n                        $scope.getCustomizationArgsWarningsList().length === 0;\n                    };\n\n                    $scope.getSaveInteractionButtonTooltip = function() {\n                      if (!$scope.hasCustomizationArgs) {\n                        return \'No customization arguments\';\n                      }\n                      if (!$scope.StateInteractionIdService.displayed) {\n                        return \'No interaction being displayed\';\n                      }\n\n                      var warningsList =\n                        $scope.getCustomizationArgsWarningsList();\n                      var warningMessages = warningsList.map(function(warning) {\n                        return warning.message;\n                      });\n\n                      if (warningMessages.length === 0) {\n                        if ($scope.form.schemaForm.$invalid) {\n                          return \'Some of the form entries are invalid.\';\n                        } else {\n                          return \'\';\n                        }\n                      } else {\n                        return warningMessages.join(\' \');\n                      }\n                    };\n\n                    $scope.save = function() {\n                      EditorFirstTimeEventsService\n                        .registerFirstSaveInteractionEvent();\n                      $uibModalInstance.close();\n                    };\n\n                    $scope.okay = function() {\n                      $uibModalInstance.close(\'okay\');\n                    };\n\n                    $scope.cancel = function() {\n                      $uibModalInstance.dismiss(\'cancel\');\n                    };\n                  }\n                ]\n              }).result.then(\n                $scope.onCustomizationModalSavePostHook, function() {\n                  StateInteractionIdService.restoreFromMemento();\n                  StateCustomizationArgsService.restoreFromMemento();\n                  StateContentIdsToAudioTranslationsService\n                    .restoreFromMemento();\n                });\n            }\n          };\n\n          $scope.deleteInteraction = function() {\n            AlertsService.clearWarnings();\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/editor_tab/\' +\n                \'delete_interaction_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\', function(\n                    $scope, $uibModalInstance) {\n                  $scope.reallyDelete = function() {\n                    $uibModalInstance.close();\n                  };\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                    AlertsService.clearWarnings();\n                  };\n                }\n              ]\n            }).result.then(function() {\n              StateInteractionIdService.displayed = null;\n              StateCustomizationArgsService.displayed = {};\n              if (StateSolutionService.displayed) {\n                var solutionContentId =\n                  StateSolutionService.displayed.explanation.getContentId();\n                StateContentIdsToAudioTranslationsService.displayed\n                  .deleteContentId(solutionContentId);\n              }\n              StateSolutionService.displayed = null;\n              InteractionDetailsCacheService.removeDetails(\n                StateInteractionIdService.savedMemento);\n              StateInteractionIdService.saveDisplayedValue();\n              $scope.onSaveInteractionId(StateInteractionIdService.displayed);\n\n              StateCustomizationArgsService.saveDisplayedValue();\n              $scope.onSaveInteractionCustomizationArgs(\n                StateCustomizationArgsService.displayed\n              );\n\n              StateSolutionService.saveDisplayedValue();\n              $scope.onSaveSolution(StateSolutionService.displayed);\n\n              StateContentIdsToAudioTranslationsService.saveDisplayedValue();\n              $scope.onSaveContentIdsToAudioTranslations(\n                StateContentIdsToAudioTranslationsService.displayed\n              );\n\n              $rootScope.$broadcast(\n                \'onInteractionIdChanged\',\n                StateInteractionIdService.savedMemento);\n              $scope.recomputeGraph();\n              _updateInteractionPreviewAndAnswerChoices();\n            });\n          };\n\n          var _updateInteractionPreviewAndAnswerChoices = function() {\n            $scope.interactionId = StateInteractionIdService.savedMemento;\n\n            var currentCustomizationArgs =\n              StateCustomizationArgsService.savedMemento;\n            $scope.interactionPreviewHtml = _getInteractionPreviewTag(\n              currentCustomizationArgs);\n\n            // Special cases for multiple choice input and image click input.\n            if ($scope.interactionId === \'MultipleChoiceInput\') {\n              $rootScope.$broadcast(\n                \'updateAnswerChoices\',\n                currentCustomizationArgs.choices.value.map(function(val, ind) {\n                  return {\n                    val: ind,\n                    label: val\n                  };\n                })\n              );\n            } else if ($scope.interactionId === \'ImageClickInput\') {\n              var _answerChoices = [];\n              var imageWithRegions =\n                currentCustomizationArgs.imageAndRegions.value;\n              for (var j = 0; j < imageWithRegions.labeledRegions.length; j++) {\n                _answerChoices.push({\n                  val: imageWithRegions.labeledRegions[j].label,\n                  label: imageWithRegions.labeledRegions[j].label\n                });\n              }\n\n              $rootScope.$broadcast(\'updateAnswerChoices\', _answerChoices);\n            } else if ($scope.interactionId === \'ItemSelectionInput\' ||\n                $scope.interactionId === \'DragAndDropSortInput\') {\n              $rootScope.$broadcast(\n                \'updateAnswerChoices\',\n                currentCustomizationArgs.choices.value.map(function(val) {\n                  return {\n                    val: val,\n                    label: val\n                  };\n                })\n              );\n            } else {\n              $rootScope.$broadcast(\'updateAnswerChoices\', null);\n            }\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
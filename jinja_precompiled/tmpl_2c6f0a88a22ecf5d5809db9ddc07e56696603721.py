from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/SubtitledHtmlObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the SubtitledHtml object factory.\n */\n\ndescribe(\'SubtitledHtml object factory\', function() {\n  beforeEach(module(\'oppia\', function($provide) {\n    $provide.value(\'LanguageUtilService\', {\n      getAudioLanguagesCount: function() {\n        return 2;\n      }\n    });\n  }));\n\n  describe(\'SubtitledHtmlObjectFactory\', function() {\n    var scope, shof, lus, subtitledHtml;\n\n    beforeEach(inject(function($injector, $rootScope) {\n      scope = $rootScope.$new();\n      shof = $injector.get(\'SubtitledHtmlObjectFactory\');\n\n      subtitledHtml = shof.createFromBackendDict({\n        html: \'<p>some html</p>\',\n        audio_translations: {\n          en: {\n            filename: \'a.mp3\',\n            file_size_bytes: 20,\n            needs_update: false\n          },\n          hi: {\n            filename: \'b.mp3\',\n            file_size_bytes: 30,\n            needs_update: false\n          }\n        }\n      });\n    }));\n\n    it(\'should get and set HTML correctly\', inject(function() {\n      expect(subtitledHtml.getHtml()).toEqual(\'<p>some html</p>\');\n      subtitledHtml.setHtml(\'new html\');\n      expect(subtitledHtml.getHtml()).toEqual(\'new html\');\n    }));\n\n    it(\'should correctly check existence of HTML\', inject(function() {\n      expect(subtitledHtml.hasNoHtml()).toBe(false);\n      subtitledHtml.setHtml(\'\');\n      expect(subtitledHtml.hasNoHtml()).toBe(true);\n    }));\n\n    it(\'should mark all audio as needing update\', inject(function() {\n      expect(subtitledHtml.getAudioTranslation(\'en\').needsUpdate).toBe(false);\n      expect(subtitledHtml.getAudioTranslation(\'hi\').needsUpdate).toBe(false);\n      subtitledHtml.markAllAudioAsNeedingUpdate();\n      expect(subtitledHtml.getAudioTranslation(\'en\').needsUpdate).toBe(true);\n      expect(subtitledHtml.getAudioTranslation(\'hi\').needsUpdate).toBe(true);\n    }));\n\n    it(\'should get all audio language codes\', inject(function() {\n      expect(subtitledHtml.getAudioLanguageCodes()).toEqual([\'en\', \'hi\']);\n    }));\n\n    it(\'should check existence of audio translations\', inject(function() {\n      expect(subtitledHtml.hasAudioTranslations()).toBe(true);\n      subtitledHtml.deleteAudioTranslation(\'en\');\n      expect(subtitledHtml.hasAudioTranslations()).toBe(true);\n      subtitledHtml.deleteAudioTranslation(\'hi\');\n      expect(subtitledHtml.hasAudioTranslations()).toBe(false);\n    }));\n\n    it(\'should check existence of unflagged audio translations\',\n      inject(function() {\n        expect(subtitledHtml.hasUnflaggedAudioTranslations()).toBe(true);\n        subtitledHtml.getAudioTranslation(\'en\').needsUpdate = true;\n        expect(subtitledHtml.hasUnflaggedAudioTranslations()).toBe(true);\n        subtitledHtml.getAudioTranslation(\'hi\').needsUpdate = true;\n        expect(subtitledHtml.hasUnflaggedAudioTranslations()).toBe(false);\n\n        subtitledHtml.deleteAudioTranslation(\'en\');\n        subtitledHtml.deleteAudioTranslation(\'hi\');\n        expect(subtitledHtml.hasUnflaggedAudioTranslations()).toBe(false);\n      }));\n\n    it(\'should check whether the text is fully translated\', inject(function() {\n      expect(subtitledHtml.isFullyTranslated()).toBe(true);\n      subtitledHtml.deleteAudioTranslation(\'en\');\n      expect(subtitledHtml.isFullyTranslated()).toBe(false);\n      subtitledHtml.deleteAudioTranslation(\'hi\');\n      expect(subtitledHtml.isFullyTranslated()).toBe(false);\n    }));\n\n    it(\'should add an audio translation\', inject(function() {\n      expect(function() {\n        subtitledHtml.addAudioTranslation(\'en\', \'c.mp3\', 300);\n      }).toThrowError(\'Trying to add duplicate language code.\');\n      subtitledHtml.deleteAudioTranslation(\'en\');\n      expect(subtitledHtml.getAudioLanguageCodes()).toEqual([\'hi\']);\n      subtitledHtml.addAudioTranslation(\'en\', \'c.mp3\', 300);\n      expect(subtitledHtml.getAudioLanguageCodes()).toEqual([\'hi\', \'en\']);\n    }));\n\n    it(\'should delete an audio translation\', inject(function() {\n      expect(subtitledHtml.hasAudioTranslations()).toBe(true);\n      subtitledHtml.deleteAudioTranslation(\'en\');\n      subtitledHtml.deleteAudioTranslation(\'hi\');\n      expect(subtitledHtml.hasAudioTranslations()).toBe(false);\n      expect(function() {\n        subtitledHtml.deleteAudioTranslation(\'en\');\n      }).toThrowError(\n        \'Trying to remove non-existing translation for language code en\');\n    }));\n\n    it(\'should toggle needs-update attribute\', inject(function() {\n      expect(subtitledHtml.getAudioTranslation(\'en\').needsUpdate).toBe(false);\n      subtitledHtml.toggleNeedsUpdateAttribute(\'en\');\n      expect(subtitledHtml.getAudioTranslation(\'en\').needsUpdate).toBe(true);\n    }));\n\n    it(\'should correctly check emptiness\', inject(function() {\n      expect(subtitledHtml.isEmpty()).toBe(false);\n\n      // If there are translations but no content, it is not empty.\n      subtitledHtml.setHtml(\'\');\n      expect(subtitledHtml.isEmpty()).toBe(false);\n\n      // If there is content but no translations, it is not empty.\n      subtitledHtml.setHtml(\'hello\');\n      subtitledHtml.deleteAudioTranslation(\'en\');\n      subtitledHtml.deleteAudioTranslation(\'hi\');\n      expect(subtitledHtml.isEmpty()).toBe(false);\n\n      // If both content and translations are empty, the whole thing is empty.\n      subtitledHtml.setHtml(\'\');\n      expect(subtitledHtml.isEmpty()).toBe(true);\n    }));\n\n    it(\'should convert to backend dict correctly\', inject(function() {\n      expect(subtitledHtml.toBackendDict()).toEqual({\n        html: \'<p>some html</p>\',\n        audio_translations: {\n          en: {\n            filename: \'a.mp3\',\n            file_size_bytes: 20,\n            needs_update: false\n          },\n          hi: {\n            filename: \'b.mp3\',\n            file_size_bytes: 30,\n            needs_update: false\n          }\n        }\n      });\n    }));\n\n    it(\'should create default object\', inject(function() {\n      var defaultSubtitledHtml = shof.createDefault(\'test html\');\n      expect(defaultSubtitledHtml.getHtml()).toEqual(\'test html\');\n      expect(defaultSubtitledHtml.getBindableAudioTranslations()).toEqual({});\n    }));\n  });\n});'

blocks = {}
debug_info = ''
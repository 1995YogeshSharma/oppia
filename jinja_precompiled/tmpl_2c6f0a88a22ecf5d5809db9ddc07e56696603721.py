from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/SubtitledHtmlObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the SubtitledHtml object factory.\n */\n\ndescribe(\'SubtitledHtml object factory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'SubtitledHtmlObjectFactory\', function() {\n    var scope, shof, lus, subtitledHtml;\n\n    beforeEach(inject(function($injector, $rootScope) {\n      scope = $rootScope.$new();\n      shof = $injector.get(\'SubtitledHtmlObjectFactory\');\n\n      subtitledHtml = shof.createFromBackendDict({\n        content_id: \'content_id\',\n        html: \'<p>some html</p>\'\n      });\n    }));\n\n    it(\'should get and set HTML correctly\', inject(function() {\n      expect(subtitledHtml.getHtml()).toEqual(\'<p>some html</p>\');\n      subtitledHtml.setHtml(\'new html\');\n      expect(subtitledHtml.getHtml()).toEqual(\'new html\');\n    }));\n\n    it(\'should get contentId correctly\', inject(function() {\n      expect(subtitledHtml.getContentId()).toEqual(\'content_id\');\n    }));\n\n    it(\'should correctly check existence of HTML\', inject(function() {\n      expect(subtitledHtml.hasNoHtml()).toBe(false);\n      subtitledHtml.setHtml(\'\');\n      expect(subtitledHtml.hasNoHtml()).toBe(true);\n    }));\n\n    it(\'should correctly check emptiness\', inject(function() {\n      expect(subtitledHtml.isEmpty()).toBe(false);\n\n      subtitledHtml.setHtml(\'\');\n      expect(subtitledHtml.isEmpty()).toBe(true);\n\n      subtitledHtml.setHtml(\'hello\');\n      expect(subtitledHtml.isEmpty()).toBe(false);\n    }));\n\n    it(\'should convert to backend dict correctly\', inject(function() {\n      expect(subtitledHtml.toBackendDict()).toEqual({\n        content_id: \'content_id\',\n        html: \'<p>some html</p>\'\n      });\n    }));\n\n    it(\'should create default object\', inject(function() {\n      var defaultSubtitledHtml = shof.createDefault(\'test html\', \'content_id\');\n      expect(defaultSubtitledHtml.getHtml()).toEqual(\'test html\');\n      expect(defaultSubtitledHtml.getContentId()).toEqual(\'content_id\');\n    }));\n  });\n});'

blocks = {}
debug_info = ''
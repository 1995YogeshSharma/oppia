from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/ExplorationContextServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the services and controllers of the exploration\n *   editor page.\n */\n\ndescribe(\'Exploration context service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'behavior in the learner view\', function() {\n    var ecs = null;\n\n    beforeEach(function() {\n      module(function($provide) {\n        $provide.value(\'UrlService\', {\n          getPathname: function() {\n            return \'/explore/123\';\n          }\n        });\n      });\n    });\n\n    beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n    beforeEach(inject(function($injector) {\n      ecs = $injector.get(\'ExplorationContextService\');\n    }));\n\n    it(\'should correctly retrieve the exploration id\', function() {\n      expect(ecs.getExplorationId()).toBe(\'123\');\n    });\n\n    it(\'should correctly retrieve the page context\', function() {\n      expect(ecs.getPageContext()).toBe(\'learner\');\n    });\n  });\n\n  describe(\'behavior in the editor view\', function() {\n    var ecs = null;\n\n    beforeEach(function() {\n      module(function($provide) {\n        $provide.value(\'UrlService\', {\n          getPathname: function() {\n            return \'/create/123\';\n          }\n        });\n      });\n    });\n\n    beforeEach(inject(function($injector) {\n      ecs = $injector.get(\'ExplorationContextService\');\n    }));\n\n    it(\'should correctly retrieve the exploration id\', function() {\n      expect(ecs.getExplorationId()).toBe(\'123\');\n    });\n\n    it(\'should correctly retrieve the page context\', function() {\n      expect(ecs.getPageContext()).toBe(\'editor\');\n    });\n  });\n\n  describe(\'behavior in other pages\', function() {\n    var ecs = null;\n\n    beforeEach(function() {\n      module(function($provide) {\n        $provide.value(\'UrlService\', {\n          getPathname: function() {\n            return \'/about\';\n          }\n        });\n      });\n    });\n\n    beforeEach(inject(function($injector) {\n      ecs = $injector.get(\'ExplorationContextService\');\n    }));\n\n    it(\'should throw an error when trying to retrieve the exploration id\',\n      function() {\n        expect(ecs.getExplorationId).toThrow();\n      }\n    );\n\n    it(\'should retrieve other as page context\',\n      function() {\n        expect(ecs.getPageContext()).toBe(\'other\');\n      }\n    );\n  });\n});'

blocks = {}
debug_info = ''
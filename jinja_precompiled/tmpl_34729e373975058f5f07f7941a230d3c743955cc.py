from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'expressions/ExpressionTypeParserServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ndescribe(\'Expression type parser service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  var etps = null;\n  var eps = null;\n  var ests = null;\n  var isString = null;\n  beforeEach(inject(function($injector) {\n    etps = $injector.get(\'ExpressionTypeParserService\');\n    eps = $injector.get(\'ExpressionParserService\');\n    ests = $injector.get(\'ExpressionSyntaxTreeService\');\n    isString = $injector.get(\'UtilsService\').isString;\n  }));\n\n  var ENVS = [\n    {\n      numZero: \'Real\',\n      boolTrue: \'UnicodeString\',\n      strXYZ: \'UnicodeString\',\n      num100_001: \'Real\',\n      boolFalse: \'UnicodeString\',\n      strNull: \'UnicodeString\'\n    }\n  ];\n\n  it(\'should determine the correct types for the expressions\', function() {\n    [\n      [\'2\', \'Real\'],\n      [\'numZero\', \'Real\'],\n      [\'boolTrue\', \'UnicodeString\'],\n      [\'+10\', \'Real\'],\n      [\'2   + 10\', \'Real\'],\n      [\'num100_001   + numZero\', \'Real\'],\n      [\'20 - num100_001\', \'Real\'],\n      [\'0x100 - 256\', \'Real\'],\n      [\'!strNull\', \'UnicodeString\'],\n      [\'1 - 2 * 3\', \'Real\'],\n      [\'num100_001 / 0.1\', \'Real\'],\n      [\'floor((numZero + num100_001)/2)\', \'Real\'],\n      [\'23 % 5\', \'Real\'],\n      [\'1 <= numZero || 1 >= numZero\', \'UnicodeString\'],\n      [\'100 < num100_001 && 1 > num100_001\', \'UnicodeString\'],\n      [\'boolTrue == boolFalse\', \'UnicodeString\'],\n      [\'strNull != strXYZ\', \'UnicodeString\'],\n      [\'if boolFalse then 8 else numZero\', \'Real\'],\n      [\'if boolFalse then 8 else strXYZ\', ests.ExprWrongArgTypeError,\n        \'ExprWrongArgTypeError: Type Real does not match expected type \' +\n       \'UnicodeString\'],\n      [\'strXYZ * 2\', ests.ExprWrongArgTypeError,\n        \'ExprWrongArgTypeError: Type UnicodeString does not match expected \' +\n       \'type Real\'],\n      [\'num100_001 / 0\', \'Real\'],\n      [\'abs(-3)\', \'Real\'],\n      [\'pow(num100_001, numZero)\', \'Real\'],\n      [\'log(9, 3)\', \'Real\']\n    ].forEach(function(test) {\n      var expression = test[0];\n      var expected = test[1];\n      if (test.length > 2) {\n        var errorString = test[2];\n      }\n\n      // \'expected\' should be either a JavaScript primitive value that would be\n      // the result of evaluation \'expression\', or an exception that is\n      // expected to be thrown.\n      // \'expression\' is either a string (in which case parsed) or an array\n      // (representing a parse tree).\n      var parsed = isString(expression) ? eps.parse(expression) : expression;\n      var parsedJson = JSON.stringify(parsed);\n      var failed = false;\n\n      var recordFailure = function(result, exception) {\n        console.error(\'input     : \' + expression);\n        console.error(\'parsed    : \' + parsedJson);\n        if (result !== undefined) {\n          console.error(\'evaluated : \' + result);\n          console.error(\'expected  : \' + expected);\n        }\n        if (exception !== undefined) {\n          console.error(\'exception : \' + exception);\n          console.error(\'expected  : (exception)\');\n        }\n        failed = true;\n      };\n\n      try {\n        var evaled = ests.applyFunctionToParseTree(\n          parsed, ENVS, etps.getType);\n        if (expected instanceof Error || evaled !== expected) {\n          recordFailure(evaled, undefined);\n        }\n      } catch (e) {\n        if (!(e instanceof expected)) {\n          // Wrong or unexpected exception.\n          recordFailure(undefined, e);\n        } else {\n          if (errorString !== e.toString()) {\n            // Wrong error string.\n            recordFailure(errorString, e.toString());\n          }\n        }\n      }\n      expect(failed).toBe(false);\n\n      if (typeof (expression) !== \'string\') {\n        return;\n      }\n\n      failed = false;\n      try {\n        evaled = etps.getExpressionOutputType(expression, ENVS);\n        if (expected instanceof Error || evaled !== expected) {\n          recordFailure(evaled, undefined);\n        }\n      } catch (e) {\n        if (!(e instanceof expected)) {\n          // Wrong or unexpected exception.\n          recordFailure(undefined, e);\n        }\n      }\n      expect(failed).toBe(false);\n    });\n  });\n});'

blocks = {}
debug_info = ''
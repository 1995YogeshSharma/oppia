from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/IssuesBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the issues backend api service.\n */\n\ndescribe(\'IssuesBackendApiService\', function() {\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    this.IssuesBackendApiService = $injector.get(\'IssuesBackendApiService\');\n    this.$httpBackend = $injector.get(\'$httpBackend\');\n    this.eif = $injector.get(\'ExplorationIssueObjectFactory\');\n    this.pof = $injector.get(\'PlaythroughObjectFactory\');\n  }));\n\n  afterEach(function() {\n    this.$httpBackend.verifyNoOutstandingExpectation();\n    this.$httpBackend.verifyNoOutstandingRequest();\n  });\n\n  describe(\'.fetch\', function() {\n    it(\'returns the issues data provided by the backend\', function() {\n      var backendIssues = [{\n        issue_type: \'EarlyQuit\',\n        issue_customization_args: {\n          state_name: {\n            value: \'state_name1\'\n          },\n          time_spent_in_exp_in_msecs: {\n            value: 200\n          }\n        },\n        playthrough_ids: [\'playthrough_id1\'],\n        schema_version: 1,\n        is_valid: true\n      }, {\n        issue_type: \'MultipleIncorrectSubmissions\',\n        issue_customization_args: {\n          state_name: {\n            value: \'state_name1\'\n          },\n          num_times_answered_incorrectly: {\n            value: 7\n          }\n        },\n        playthrough_ids: [\'playthrough_id2\'],\n        schema_version: 1,\n        is_valid: true\n      }];\n\n      var successHandler = jasmine.createSpy(\'success\');\n      var failureHandler = jasmine.createSpy(\'failure\');\n      this.$httpBackend.expectGET(\n        \'/issuesdatahandler/7?exp_version=1\'\n      ).respond(backendIssues);\n\n      this.IssuesBackendApiService.fetchIssues(\'7\', 1).then(\n        successHandler, failureHandler);\n      this.$httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(\n        backendIssues.map(this.eif.createFromBackendDict));\n      expect(failureHandler).not.toHaveBeenCalled();\n    });\n\n    it(\'returns the playthrough data provided by the backend\', function() {\n      var backendPlaythrough = {\n        exp_id: \'exp_id1\',\n        exp_version: 1,\n        issue_type: \'EarlyQuit\',\n        issue_customization_args: {\n          state_name: {\n            value: \'state_name1\'\n          },\n          time_spent_in_exp_in_msecs: {\n            value: 200\n          }\n        },\n        actions: [{\n          action_type: \'ExplorationStart\',\n          action_customization_args: {\n            state_name: {\n              value: \'state_name1\'\n            }\n          },\n          schema_version: 1\n        }]\n      };\n\n      var successHandler = jasmine.createSpy(\'success\');\n      var failureHandler = jasmine.createSpy(\'failure\');\n      this.$httpBackend.expectGET(\n        \'/playthroughdatahandler/7/1\'\n      ).respond(backendPlaythrough);\n\n      this.IssuesBackendApiService.fetchPlaythrough(\'7\', \'1\').then(\n        successHandler, failureHandler);\n      this.$httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(\n        this.pof.createFromBackendDict(backendPlaythrough));\n      expect(failureHandler).not.toHaveBeenCalled();\n    });\n  });\n});'

blocks = {}
debug_info = ''
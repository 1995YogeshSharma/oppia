from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/state_editor/StateContentEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the state content editor.\n */\n\noppia.directive(\'stateContentEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      link: function(scope, element) {\n        // This allows the scope to be retrievable during Karma unit testing.\n        // See http://stackoverflow.com/a/29833832 for more details.\n        element[0].getControllerScope = function() {\n          return scope;\n        };\n      },\n      scope: {\n        getStateContentPlaceholder: \'&stateContentPlaceholder\',\n        onSaveStateContent: \'=\',\n        onSaveContentIdsToAudioTranslations: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/state_editor/state_content_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$uibModal\', \'StateContentService\', \'EditabilityService\',\n        \'EditorFirstTimeEventsService\',\n        \'StateContentIdsToAudioTranslationsService\',\n        function(\n            $scope, $uibModal, StateContentService, EditabilityService,\n            EditorFirstTimeEventsService,\n            StateContentIdsToAudioTranslationsService) {\n          $scope.HTML_SCHEMA = {\n            type: \'html\'\n          };\n          $scope.contentId = null;\n          $scope.StateContentService = StateContentService;\n          if (StateContentService.displayed) {\n            $scope.contentId = StateContentService.displayed.getContentId();\n          }\n\n          $scope.contentEditorIsOpen = false;\n          $scope.isEditable = EditabilityService.isEditable;\n\n          var saveContent = function() {\n            StateContentService.saveDisplayedValue();\n            $scope.onSaveStateContent(StateContentService.displayed);\n            $scope.contentEditorIsOpen = false;\n          };\n\n          var openMarkAllAudioAsNeedingUpdateModal = function() {\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/components/forms/\' +\n                \'mark_all_audio_as_needing_update_modal_directive.html\'),\n              backdrop: true,\n              resolve: {},\n              controller: \'MarkAllAudioAsNeedingUpdateController\'\n            }).result.then(function() {\n              var contentId = StateContentService.displayed.getContentId();\n              StateContentIdsToAudioTranslationsService.displayed\n                .markAllAudioAsNeedingUpdate(contentId);\n              StateContentIdsToAudioTranslationsService.saveDisplayedValue();\n              $scope.onSaveContentIdsToAudioTranslations(\n                StateContentIdsToAudioTranslationsService.displayed\n              );\n            });\n          };\n\n          $scope.$on(\'externalSave\', function() {\n            if ($scope.contentEditorIsOpen) {\n              saveContent();\n            }\n          });\n\n          $scope.openStateContentEditor = function() {\n            if ($scope.isEditable()) {\n              EditorFirstTimeEventsService.registerFirstOpenContentBoxEvent();\n              $scope.contentEditorIsOpen = true;\n            }\n          };\n\n          $scope.onSaveContentButtonClicked = function() {\n            EditorFirstTimeEventsService.registerFirstSaveContentEvent();\n            var savedContent = StateContentService.savedMemento;\n            var contentHasChanged = (\n              savedContent.getHtml() !==\n              StateContentService.displayed.getHtml());\n            if (StateContentIdsToAudioTranslationsService.displayed\n              .hasUnflaggedAudioTranslations(savedContent.getContentId()) &&\n              contentHasChanged) {\n              openMarkAllAudioAsNeedingUpdateModal();\n            }\n            saveContent();\n          };\n\n          $scope.cancelEdit = function() {\n            StateContentService.restoreFromMemento();\n            $scope.contentEditorIsOpen = false;\n          };\n        }\n      ]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
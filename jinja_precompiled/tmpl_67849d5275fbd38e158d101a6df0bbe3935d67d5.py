from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/SubtopicObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for SubtopicObjectFactory.\n */\n\ndescribe(\'Subtopic object factory\', function() {\n  var SubtopicObjectFactory = null;\n  var _sampleSubtopic = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    SubtopicObjectFactory = $injector.get(\'SubtopicObjectFactory\');\n\n    var sampleSubtopicBackendObject = {\n      id: 1,\n      title: \'Title\',\n      skill_ids: [\'skill_1\', \'skill_2\']\n    };\n    var sampleSkillIdToDesriptionMap = {\n      skill_1: \'Description 1\',\n      skill_2: \'Description 2\'\n    };\n    _sampleSubtopic = SubtopicObjectFactory.create(\n      sampleSubtopicBackendObject, sampleSkillIdToDesriptionMap);\n  }));\n\n  it(\'should not find issues with a valid subtopic\', function() {\n    expect(_sampleSubtopic.validate()).toEqual([]);\n  });\n\n  it(\'should validate the subtopic\', function() {\n    _sampleSubtopic.setTitle(\'\');\n\n    expect(\n      _sampleSubtopic.validate()\n    ).toEqual([\'Subtopic title should not be empty\']);\n  });\n\n  it(\'should be able to create a subtopic object with given title and id\',\n    function() {\n      var subtopic = SubtopicObjectFactory.createFromTitle(2, \'Title2\');\n      expect(subtopic.getId()).toBe(2);\n      expect(subtopic.getTitle()).toBe(\'Title2\');\n      expect(subtopic.getSkillSummaries()).toEqual([]);\n    });\n\n  it(\'should not add duplicate elements to skill ids list\', function() {\n    expect(_sampleSubtopic.addSkill(\'skill_1\', \'Description 1\')).toEqual(false);\n  });\n\n  it(\'should correctly remove a skill id\', function() {\n    _sampleSubtopic.removeSkill(\'skill_1\');\n    expect(_sampleSubtopic.getSkillSummaries().length).toEqual(1);\n    expect(_sampleSubtopic.getSkillSummaries()[0].getId()).toEqual(\'skill_2\');\n    expect(\n      _sampleSubtopic.getSkillSummaries()[0].getDescription()\n    ).toEqual(\'Description 2\');\n  });\n});'

blocks = {}
debug_info = ''
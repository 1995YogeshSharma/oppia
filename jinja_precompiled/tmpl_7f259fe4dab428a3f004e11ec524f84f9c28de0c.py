from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/library/SearchBarDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the Search Bar.\n */\n\noppia.directive(\'searchBar\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/library/\' +\n        \'search_bar_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'$timeout\', \'$window\', \'$location\',\n        \'$translate\', \'SearchService\', \'DebouncerService\', \'HtmlEscaperService\',\n        \'UrlService\', \'ConstructTranslationIdsService\',\n        function(\n            $scope, $rootScope, $timeout, $window, $location, $translate,\n            SearchService, DebouncerService, HtmlEscaperService, UrlService,\n            ConstructTranslationIdsService) {\n          $scope.isSearchInProgress = SearchService.isSearchInProgress;\n          $scope.SEARCH_DROPDOWN_CATEGORIES = (\n            GLOBALS.SEARCH_DROPDOWN_CATEGORIES.map(\n              function(categoryName) {\n                return {\n                  id: categoryName,\n                  text: ConstructTranslationIdsService.getLibraryId(\n                    \'categories\', categoryName)\n                };\n              }\n            )\n          );\n          // TODO(sll): Remove the filter once the App Engine Search API\n          // supports 3-letter language codes.\n          $scope.ALL_LANGUAGE_CODES = GLOBALS.LANGUAGE_CODES_AND_NAMES.filter(\n            function(languageItem) {\n              return languageItem.code.length === 2;\n            }\n          ).map(function(languageItem) {\n            return {\n              id: languageItem.code,\n              text: languageItem.name\n            };\n          });\n\n          $scope.searchQuery = \'\';\n          $scope.selectionDetails = {\n            categories: {\n              description: \'\',\n              itemsName: \'categories\',\n              masterList: $scope.SEARCH_DROPDOWN_CATEGORIES,\n              numSelections: 0,\n              selections: {},\n              summary: \'\'\n            },\n            languageCodes: {\n              description: \'\',\n              itemsName: \'languages\',\n              masterList: $scope.ALL_LANGUAGE_CODES,\n              numSelections: 0,\n              selections: {},\n              summary: \'\'\n            }\n          };\n\n          // Non-translatable parts of the html strings, like numbers or user\n          // names.\n          $scope.translationData = {};\n\n          // Update the description, numSelections and summary fields of the\n          // relevant entry of $scope.selectionDetails.\n          var updateSelectionDetails = function(itemsType) {\n            var itemsName = $scope.selectionDetails[itemsType].itemsName;\n            var masterList = $scope.selectionDetails[itemsType].masterList;\n\n            var selectedItems = [];\n            for (var i = 0; i < masterList.length; i++) {\n              if ($scope.selectionDetails[itemsType]\n                .selections[masterList[i].id]) {\n                selectedItems.push(masterList[i].text);\n              }\n            }\n\n            var totalCount = selectedItems.length;\n            $scope.selectionDetails[itemsType].numSelections = totalCount;\n\n            $scope.selectionDetails[itemsType].summary = (\n              totalCount === 0 ? \'I18N_LIBRARY_ALL_\' + itemsName.toUpperCase() :\n              totalCount === 1 ? selectedItems[0] :\n              \'I18N_LIBRARY_N_\' + itemsName.toUpperCase());\n            $scope.translationData[itemsName + \'Count\'] = totalCount;\n\n            // TODO(milit): When the language changes, the translations won\'t\n            // change until the user changes the selection and this function is\n            // re-executed.\n            if (selectedItems.length > 0) {\n              var translatedItems = [];\n              for (var i = 0; i < selectedItems.length; i++) {\n                translatedItems.push($translate.instant(selectedItems[i]));\n              }\n              $scope.selectionDetails[itemsType].description = (\n                translatedItems.join(\', \'));\n            } else {\n              $scope.selectionDetails[itemsType].description = (\n                \'I18N_LIBRARY_ALL_\' + itemsName.toUpperCase() + \'_SELECTED\');\n            }\n          };\n\n          $scope.toggleSelection = function(itemsType, optionName) {\n            var selections = $scope.selectionDetails[itemsType].selections;\n            if (!selections.hasOwnProperty(optionName)) {\n              selections[optionName] = true;\n            } else {\n              selections[optionName] = !selections[optionName];\n            }\n\n            updateSelectionDetails(itemsType);\n            onSearchQueryChangeExec();\n          };\n\n          $scope.deselectAll = function(itemsType) {\n            $scope.selectionDetails[itemsType].selections = {};\n            updateSelectionDetails(itemsType);\n            onSearchQueryChangeExec();\n          };\n\n          $scope.$watch(\'searchQuery\', function(newQuery, oldQuery) {\n            // Run only if the query has changed.\n            if (newQuery !== oldQuery) {\n              onSearchQueryChangeExec();\n            }\n          });\n\n          var onSearchQueryChangeExec = function() {\n            SearchService.executeSearchQuery(\n              $scope.searchQuery, $scope.selectionDetails.categories.selections,\n              $scope.selectionDetails.languageCodes.selections);\n\n            var searchUrlQueryString = SearchService.getSearchUrlQueryString(\n              $scope.searchQuery, $scope.selectionDetails.categories.selections,\n              $scope.selectionDetails.languageCodes.selections\n            );\n            if ($window.location.pathname === \'/search/find\') {\n              $location.url(\'/find?q=\' + searchUrlQueryString);\n            } else {\n              $window.location.href = \'/search/find?q=\' + searchUrlQueryString;\n            }\n          };\n\n          // Initialize the selection descriptions and summaries.\n          for (var itemsType in $scope.selectionDetails) {\n            updateSelectionDetails(itemsType);\n          }\n\n          var updateSearchFieldsBasedOnUrlQuery = function() {\n            var oldQueryString = SearchService.getCurrentUrlQueryString();\n\n            $scope.selectionDetails.categories.selections = {};\n            $scope.selectionDetails.languageCodes.selections = {};\n\n            $scope.searchQuery =\n             SearchService.updateSearchFieldsBasedOnUrlQuery(\n               $window.location.search, $scope.selectionDetails);\n\n            updateSelectionDetails(\'categories\');\n            updateSelectionDetails(\'languageCodes\');\n\n            var newQueryString = SearchService.getCurrentUrlQueryString();\n\n            if (oldQueryString !== newQueryString) {\n              onSearchQueryChangeExec();\n            }\n          };\n\n          $scope.$on(\'$locationChangeSuccess\', function() {\n            if (UrlService.getUrlParams().hasOwnProperty(\'q\')) {\n              updateSearchFieldsBasedOnUrlQuery();\n            }\n          });\n\n          $scope.$on(\n            \'preferredLanguageCodesLoaded\',\n            function(evt, preferredLanguageCodesList) {\n              preferredLanguageCodesList.forEach(function(languageCode) {\n                var selections =\n                 $scope.selectionDetails.languageCodes.selections;\n                if (!selections.hasOwnProperty(languageCode)) {\n                  selections[languageCode] = true;\n                } else {\n                  selections[languageCode] = !selections[languageCode];\n                }\n              });\n\n              updateSelectionDetails(\'languageCodes\');\n\n              if (UrlService.getUrlParams().hasOwnProperty(\'q\')) {\n                updateSearchFieldsBasedOnUrlQuery();\n              }\n\n              if ($window.location.pathname === \'/search/find\') {\n                onSearchQueryChangeExec();\n              }\n\n              refreshSearchBarLabels();\n\n              // Notify the function that handles overflow in case the search\n              // elements load after it has already been run.\n              $rootScope.$broadcast(\'searchBarLoaded\', true);\n            }\n          );\n\n          var refreshSearchBarLabels = function() {\n            // If you translate these strings in the html, then you must use a\n            // filter because only the first 14 characters are displayed. That\n            // would generate FOUC for languages other than English. As an\n            // exception, we translate them here and update the translation\n            // every time the language is changed.\n            $scope.searchBarPlaceholder = $translate.instant(\n              \'I18N_LIBRARY_SEARCH_PLACEHOLDER\');\n            // \'messageformat\' is the interpolation method for plural forms.\n            // http://angular-translate.github.io/docs/#/guide/14_pluralization.\n            $scope.categoryButtonText = $translate.instant(\n              $scope.selectionDetails.categories.summary,\n              $scope.translationData, \'messageformat\');\n            $scope.languageButtonText = $translate.instant(\n              $scope.selectionDetails.languageCodes.summary,\n              $scope.translationData, \'messageformat\');\n          };\n\n          $rootScope.$on(\'$translateChangeSuccess\', refreshSearchBarLabels);\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
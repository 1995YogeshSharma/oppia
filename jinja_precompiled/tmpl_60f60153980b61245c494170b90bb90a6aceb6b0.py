from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/topic_editor/main_editor/TopicEditorTabDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the main topic editor.\n */\noppia.directive(\'topicMainEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {},\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/topic_editor/main_editor/topic_editor_tab_directive.html\'),\n      controller: [\n        \'$scope\', \'$uibModal\', \'TopicEditorStateService\', \'TopicUpdateService\',\n        \'UndoRedoService\', \'UrlInterpolationService\', \'StoryCreationService\',\n        \'EVENT_STORY_SUMMARIES_INITIALIZED\', \'EVENT_TOPIC_INITIALIZED\',\n        \'EVENT_TOPIC_REINITIALIZED\',\n        function(\n            $scope, $uibModal, TopicEditorStateService, TopicUpdateService,\n            UndoRedoService, UrlInterpolationService, StoryCreationService,\n            EVENT_STORY_SUMMARIES_INITIALIZED, EVENT_TOPIC_INITIALIZED,\n            EVENT_TOPIC_REINITIALIZED) {\n          var _initEditor = function() {\n            $scope.topic = TopicEditorStateService.getTopic();\n            $scope.topicRights = TopicEditorStateService.getTopicRights();\n            $scope.topicNameEditorIsShown = false;\n            $scope.editableName = $scope.topic.getName();\n            $scope.editableDescription = $scope.topic.getDescription();\n            $scope.editableDescriptionIsEmpty = (\n              $scope.editableDescription === \'\');\n            $scope.topicDescriptionChanged = false;\n          };\n\n          var _initStorySummaries = function() {\n            $scope.canonicalStorySummaries =\n              TopicEditorStateService.getCanonicalStorySummaries();\n          };\n\n          $scope.createCanonicalStory = function() {\n            if (UndoRedoService.getChangeCount() > 0) {\n              $uibModal.open({\n                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                  \'/pages/topic_editor/main_editor/\' +\n                  \'save_pending_changes_modal_directive.html\'),\n                backdrop: true,\n                controller: [\n                  \'$scope\', \'$uibModalInstance\',\n                  function($scope, $uibModalInstance) {\n                    $scope.cancel = function() {\n                      $uibModalInstance.dismiss(\'cancel\');\n                    };\n                  }\n                ]\n              });\n            } else {\n              StoryCreationService.createNewCanonicalStory(\n                $scope.topic.getId());\n            }\n          };\n\n          $scope.updateTopicDescriptionStatus = function(description) {\n            $scope.editableDescriptionIsEmpty = (description === \'\');\n            $scope.topicDescriptionChanged = true;\n          };\n\n          $scope.openTopicNameEditor = function() {\n            if (!$scope.topicRights.canEditName()) {\n              return;\n            }\n            $scope.topicNameEditorIsShown = true;\n            $scope.editableName = $scope.topic.getName();\n          };\n\n          $scope.closeTopicNameEditor = function() {\n            if (!$scope.topicRights.canEditName()) {\n              return;\n            }\n            $scope.topicNameEditorIsShown = false;\n            $scope.editableName = $scope.topic.getName();\n          };\n\n          $scope.updateTopicName = function(newName) {\n            TopicUpdateService.setTopicName($scope.topic, newName);\n            $scope.topicNameEditorIsShown = false;\n          };\n\n          $scope.updateTopicDescription = function(newDescription) {\n            if (newDescription !== $scope.topic.getDescription()) {\n              TopicUpdateService.setTopicDescription(\n                $scope.topic, newDescription);\n            }\n          };\n\n          $scope.$on(EVENT_TOPIC_INITIALIZED, _initEditor);\n          $scope.$on(EVENT_TOPIC_REINITIALIZED, _initEditor);\n          $scope.$on(EVENT_STORY_SUMMARIES_INITIALIZED, _initStorySummaries);\n\n          _initEditor();\n          _initStorySummaries();\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
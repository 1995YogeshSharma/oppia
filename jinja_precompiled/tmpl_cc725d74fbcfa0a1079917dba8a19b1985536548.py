from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'i18n.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Translation functions for Oppia.\n *\n * @author milagro.teruel@gmail.com (Milagro Teruel)\n */\n\n// Translations of strings that are loaded in the front page. They are listed\n// here to be loaded synchronously with the script to prevent a FOUC or\n// Flash of Untranslated Content.\n// See http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\noppia.constant(\'DEFAULT_TRANSLATIONS\', {\n  I18N_LIBRARY_PAGE_TITLE: \'Library\',\n  I18N_LIBRARY_LOADING: \'Loading\',\n  I18N_SIGNUP_PAGE_SUBTITLE: \'Registration\',\n  I18N_SIGNUP_PAGE_TITLE: \'Oppia\',\n  I18N_LIBRARY_SEARCH_PLACEHOLDER: \'What are you curious about?\',\n  I18N_LIBRARY_ALL_LANGUAGES: \'All Languages\',\n  I18N_LIBRARY_LANGUAGES_EN: \'English\',\n  I18N_LIBRARY_ALL_CATEGORIES: \'All Categories\',\n  I18N_TOPNAV_SIGN_IN: \'Sign in\',\n  I18N_SPLASH_PAGE_TITLE: \'Oppia: Teach, Learn, Explore\',\n  I18N_SIGNUP_REGISTRATION: \'Registration\',\n  I18N_SIGNUP_LOADING: \'Loading\'\n});\n\noppia.controller(\'I18nFooter\', [\n  \'$http\', \'$rootScope\', \'$scope\', \'$translate\', \'$timeout\', \'$cookies\',\n  function($http, $rootScope, $scope, $translate, $timeout, $cookies) {\n    // Changes the language of the translations.\n    var preferencesDataUrl = \'/preferenceshandler/data\';\n    var siteLanguageUrl = \'/save_site_language\';\n    $scope.supportedSiteLanguages = constants.SUPPORTED_SITE_LANGUAGES;\n\n    // The $timeout seems to be necessary for the dropdown to show anything\n    // at the outset, if the default language is not English.\n    $timeout(function() {\n      // $translate.use() returns undefined until the language file is fully\n      // loaded, which causes a blank field in the dropdown, hence we use\n      // $translate.proposedLanguage() as suggested in\n      // http://stackoverflow.com/a/28903658\n      $scope.currentLanguageCode = $translate.use() ||\n        $translate.proposedLanguage();\n    }, 50);\n\n    $scope.changeLanguage = function() {\n      $translate.use($scope.currentLanguageCode);\n      if (GLOBALS.userIsLoggedIn) {\n        $http.put(siteLanguageUrl, {\n          site_language_code: $scope.currentLanguageCode\n        });\n      }\n    };\n  }\n]);\n\noppia.config([\n  \'$translateProvider\', \'DEFAULT_TRANSLATIONS\',\n  function($translateProvider, DEFAULT_TRANSLATIONS) {\n    var availableLanguageKeys = [];\n    var availableLanguageKeysMap = {};\n    constants.SUPPORTED_SITE_LANGUAGES.forEach(function(language) {\n      availableLanguageKeys.push(language.id);\n      availableLanguageKeysMap[language.id + \'*\'] = language.id;\n    });\n    availableLanguageKeysMap[\'*\'] = \'en\';\n\n    $translateProvider\n      .registerAvailableLanguageKeys(\n        availableLanguageKeys, availableLanguageKeysMap)\n      .useLoader(\'TranslationFileHashLoaderService\', {\n        prefix: \'/i18n/\',\n        suffix: \'.json\'\n      })\n      // The use of default translation improves the loading time when English\n      // is selected\n      .translations(\'en\', DEFAULT_TRANSLATIONS)\n      .fallbackLanguage(\'en\')\n      .determinePreferredLanguage()\n      .useCookieStorage()\n      // The messageformat interpolation method is necessary for pluralization.\n      // Is optional and should be passed as argument to the translate call. See\n      // https://angular-translate.github.io/docs/#/guide/14_pluralization\n      .addInterpolation(\'$translateMessageFormatInterpolation\')\n      // The strategy \'sanitize\' does not support utf-8 encoding.\n      // https://github.com/angular-translate/angular-translate/issues/1131\n      // The strategy \'escape\' will brake strings with raw html, like hyperlinks\n      .useSanitizeValueStrategy(\'sanitizeParameters\')\n      .forceAsyncReload(true);\n  }\n]);'

blocks = {}
debug_info = ''
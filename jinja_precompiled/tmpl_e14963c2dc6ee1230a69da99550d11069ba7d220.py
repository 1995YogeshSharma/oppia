from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/learner_dashboard/LearnerPlaylistServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for LearnerPlaylistService.js.\n */\n\ndescribe(\'Learner playlist service factory\', function() {\n  var LearnerPlaylistService = null;\n  var $httpBackend = null;\n  var $rootScope = null;\n  var activityType = constants.ACTIVITY_TYPE_EXPLORATION;\n  var UrlInterpolationService = null;\n  var activityId = \'1\';\n  var addToLearnerPlaylistUrl = \'\';\n  var AlertsService = null;\n  var spyInfoMessage = null;\n  var spySuccessMessage = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    $httpBackend = $injector.get(\'$httpBackend\');\n    LearnerPlaylistService = $injector.get(\n      \'LearnerPlaylistService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    UrlInterpolationService = $injector.get(\'UrlInterpolationService\');\n    AlertsService = $injector.get(\'AlertsService\');\n    spyOn(AlertsService, \'addInfoMessage\').and.callThrough();\n    spyOn(AlertsService, \'addSuccessMessage\').and.callThrough();\n  }));\n\n  beforeEach(function(){\n    addToLearnerPlaylistUrl = (\n      UrlInterpolationService.interpolateUrl(\n        \'/learnerplaylistactivityhandler/<activityType>/<activityId>\', {\n          activityType: activityType,\n          activityId: activityId\n        }));\n  });\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully add playlist to play later list\', function(){\n    var response = {\n      belongs_to_completed_or_incomplete_list: false,\n      belongs_to_subscribed_activities: false,\n      playlist_limit_exceeded: false\n    };\n    $httpBackend.expectPOST(addToLearnerPlaylistUrl).respond(\n      JSON.stringify(response));\n    LearnerPlaylistService.addToLearnerPlaylist(activityId, activityType);\n\n    $httpBackend.flush();\n    $rootScope.$digest();\n    expect(AlertsService.addSuccessMessage).toHaveBeenCalledWith(\n      \'Successfully added to your \\\'Play Later\\\' list.\');\n    expect(AlertsService.addInfoMessage).not.toHaveBeenCalled();\n  });\n\n  it(\'should not add playlist to play later list\' +\n    \'and show belongs to completed or incomplete list\', function(){\n    var response = {\n      belongs_to_completed_or_incomplete_list: true,\n      belongs_to_subscribed_activities: false,\n      playlist_limit_exceeded: false\n    };\n    $httpBackend.expectPOST(addToLearnerPlaylistUrl).respond(\n      JSON.stringify(response));\n    LearnerPlaylistService.addToLearnerPlaylist(activityId, activityType);\n\n    $httpBackend.flush();\n    $rootScope.$digest();\n    expect(AlertsService.addInfoMessage).toHaveBeenCalledWith(\n      \'You have already completed or are completing this activity.\');\n    expect(AlertsService.addSuccessMessage).not.toHaveBeenCalled();\n  });\n\n  it(\'should not add playlist to play later list\' +\n    \'and show belongs to subscribed activities\', function(){\n    var response = {\n      belongs_to_completed_or_incomplete_list: false,\n      belongs_to_subscribed_activities: true,\n      playlist_limit_exceeded: false\n    };\n    $httpBackend.expectPOST(addToLearnerPlaylistUrl).respond(\n      JSON.stringify(response));\n    LearnerPlaylistService.addToLearnerPlaylist(activityId, activityType);\n\n    $httpBackend.flush();\n    $rootScope.$digest();\n    expect(AlertsService.addInfoMessage).toHaveBeenCalledWith(\n      \'This is present in your creator dashboard\');\n    expect(AlertsService.addSuccessMessage).not.toHaveBeenCalled();\n  });\n\n  it(\'should not add playlist to play later list\' +\n    \'and show playlist limit exceeded\', function(){\n    var response = {\n      belongs_to_completed_or_incomplete_list: false,\n      belongs_to_subscribed_activities: false,\n      playlist_limit_exceeded: true\n    };\n    $httpBackend.expectPOST(addToLearnerPlaylistUrl).respond(\n      JSON.stringify(response));\n    LearnerPlaylistService.addToLearnerPlaylist(activityId, activityType);\n\n    $httpBackend.flush();\n    $rootScope.$digest();\n    expect(AlertsService.addInfoMessage).toHaveBeenCalledWith(\n      \'Your \\\'Play Later\\\' list is full!  Either you can \' +\n      \'complete some or you can head to the learner dashboard \' +\n      \'and remove some.\');\n    expect(AlertsService.addSuccessMessage).not.toHaveBeenCalled();\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/AutosaveInfoModalsService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for displaying different types of modals depending\n * on the type of response received as a result of the autosaving request.\n */\n\noppia.factory(\'AutosaveInfoModalsService\', [\n  \'$log\', \'$uibModal\', \'$timeout\', \'$window\',\n  \'ExplorationDataService\', \'LocalStorageService\',\n  \'ChangesInHumanReadableFormService\', \'UrlInterpolationService\',\n  function(\n      $log, $uibModal, $timeout, $window,\n      ExplorationDataService, LocalStorageService,\n      ChangesInHumanReadableFormService, UrlInterpolationService) {\n    var _isModalOpen = false;\n    var _refreshPage = function(delay) {\n      $timeout(function() {\n        $window.location.reload();\n      }, delay);\n    };\n\n    return {\n      showNonStrictValidationFailModal: function() {\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_editor/\' +\n            \'save_validation_fail_modal_directive.html\'),\n          // Prevent modal from closing when the user clicks outside it.\n          backdrop: \'static\',\n          controller: [\n            \'$scope\', \'$uibModalInstance\', function($scope, $uibModalInstance) {\n              $scope.closeAndRefresh = function() {\n                $uibModalInstance.dismiss(\'cancel\');\n                _refreshPage(20);\n              };\n            }\n          ]\n        }).result.then(function() {\n          _isModalOpen = false;\n        }, function() {\n          _isModalOpen = false;\n        });\n\n        _isModalOpen = true;\n      },\n      isModalOpen: function() {\n        return _isModalOpen;\n      },\n      showVersionMismatchModal: function(lostChanges) {\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_editor/\' +\n            \'save_version_mismatch_modal_directive.html\'),\n          // Prevent modal from closing when the user clicks outside it.\n          backdrop: \'static\',\n          controller: [\'$scope\', function($scope) {\n            // When the user clicks on discard changes button, signal backend\n            // to discard the draft and reload the page thereafter.\n            $scope.discardChanges = function() {\n              ExplorationDataService.discardDraft(function() {\n                _refreshPage(20);\n              });\n            };\n\n            $scope.hasLostChanges = (lostChanges && lostChanges.length > 0);\n            if ($scope.hasLostChanges) {\n              // TODO(sll): This should also include changes to exploration\n              // properties (such as the exploration title, category, etc.).\n              $scope.lostChangesHtml = (\n                ChangesInHumanReadableFormService.makeHumanReadable(\n                  lostChanges).html());\n              $log.error(\'Lost changes: \' + JSON.stringify(lostChanges));\n            }\n          }],\n          windowClass: \'oppia-autosave-version-mismatch-modal\'\n        }).result.then(function() {\n          _isModalOpen = false;\n        }, function() {\n          _isModalOpen = false;\n        });\n\n        _isModalOpen = true;\n      },\n      showLostChangesModal: function(lostChanges, explorationId) {\n        $uibModal.open({\n          templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n            \'/pages/exploration_editor/lost_changes_modal_directive.html\'),\n          // Prevent modal from closing when the user clicks outside it.\n          backdrop: \'static\',\n          controller: [\'$scope\', \'$uibModalInstance\', function(\n              $scope, $uibModalInstance) {\n            // When the user clicks on discard changes button, signal backend\n            // to discard the draft and reload the page thereafter.\n            $scope.close = function() {\n              LocalStorageService.removeExplorationDraft(explorationId);\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n\n            $scope.lostChangesHtml = (\n              ChangesInHumanReadableFormService.makeHumanReadable(\n                lostChanges).html());\n            $log.error(\'Lost changes: \' + JSON.stringify(lostChanges));\n          }],\n          windowClass: \'oppia-lost-changes-modal\'\n        }).result.then(function() {\n          _isModalOpen = false;\n        }, function() {\n          _isModalOpen = false;\n        });\n\n        _isModalOpen = true;\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/utilities/LanguageUtilServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for LanguageUtilService\n */\n\ndescribe(\'Language util service\', function() {\n  var lus = null;\n\n  beforeEach(function() {\n    module(\'oppia\', function($provide) {\n      var mockSupportedAudioLanguages = [{\n        id: \'en\',\n        text: \'English\',\n        related_languages: [\'en\']\n      }, {\n        id: \'hi-en\',\n        text: \'Hinglish\',\n        related_languages: [\'hi\', \'en\']\n      }, {\n        id: \'es\',\n        text: \'Spanish\',\n        related_languages: [\'es\']\n      }];\n      $provide.constant(\'SUPPORTED_AUDIO_LANGUAGES\',\n        mockSupportedAudioLanguages);\n    });\n  });\n\n  beforeEach(inject(function($injector) {\n    lus = $injector.get(\'LanguageUtilService\');\n  }));\n\n  it(\'should get the correct language count\', function() {\n    expect(lus.getAudioLanguagesCount()).toEqual(3);\n  });\n\n  it(\'should get the correct description given an audio language code\',\n    function() {\n      expect(lus.getAudioLanguageDescription(\'en\')).toEqual(\'English\');\n      expect(lus.getAudioLanguageDescription(\'hi-en\')).toEqual(\'Hinglish\');\n      expect(lus.getAudioLanguageDescription(\'es\')).toEqual(\'Spanish\');\n    }\n  );\n\n  it(\'should correctly compute the complement languages\', function() {\n    expect(lus.getComplementAudioLanguageCodes([]))\n      .toEqual([\'en\', \'hi-en\', \'es\']);\n    expect(lus.getComplementAudioLanguageCodes([\'en\']))\n      .toEqual([\'hi-en\', \'es\']);\n    expect(lus.getComplementAudioLanguageCodes([\'hi-en\']))\n      .toEqual([\'en\', \'es\']);\n    expect(lus.getComplementAudioLanguageCodes([\'hi-en\', \'en\']))\n      .toEqual([\'es\']);\n    expect(lus.getComplementAudioLanguageCodes([\'abcdefg\'])).toEqual([\n      \'en\', \'hi-en\', \'es\']);\n  });\n});'

blocks = {}
debug_info = ''
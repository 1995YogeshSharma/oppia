from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/skill/SkillObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating frontend\n * instances of Skill objects.\n */\n\noppia.factory(\'SkillObjectFactory\', [\n  \'ConceptCardObjectFactory\', \'MisconceptionObjectFactory\', \'ValidatorsService\',\n  function(\n      ConceptCardObjectFactory, MisconceptionObjectFactory, ValidatorsService) {\n    var Skill = function(\n        id, description, misconceptions, conceptCard, languageCode, version,\n        nextMisconceptionId) {\n      this._id = id;\n      this._description = description;\n      this._misconceptions = misconceptions;\n      this._conceptCard = conceptCard;\n      this._languageCode = languageCode;\n      this._version = version;\n      this._nextMisconceptionId = nextMisconceptionId;\n    };\n\n    Skill.hasValidDescription = function(description) {\n      var allowDescriptionToBeBlank = false;\n      var showWarnings = true;\n      return ValidatorsService.isValidEntityName(\n        description, showWarnings, allowDescriptionToBeBlank);\n    };\n\n    Skill.prototype.getValidationIssues = function() {\n      var issues = [];\n      if (this.getConceptCard().getExplanation() === \'\') {\n        issues.push(\n          \'There should be review material in the concept card.\');\n      }\n      return issues;\n    };\n\n    Skill.prototype.toBackendDict = function() {\n      return {\n        id: this._id,\n        description: this._description,\n        misconceptions: this._misconceptions.map(function(misconception) {\n          return misconception.toBackendDict();\n        }),\n        skill_contents: this._conceptCard.toBackendDict(),\n        language_code: this._languageCode,\n        version: this._version,\n        next_misconception_id: this._nextMisconceptionId\n      };\n    };\n\n    Skill.prototype.copyFromSkill = function(skill) {\n      this._id = skill.getId();\n      this._description = skill.getDescription();\n      this._misconceptions = skill.getMisconceptions();\n      this._conceptCard = skill.getConceptCard();\n      this._languageCode = skill.getLanguageCode();\n      this._version = skill.getVersion();\n      this._nextMisconceptionId = skill.getNextMisconceptionId();\n    };\n\n    Skill.createFromBackendDict = function(skillBackendDict) {\n      return new Skill(\n        skillBackendDict.id,\n        skillBackendDict.description,\n        generateMisconceptionsFromBackendDict(skillBackendDict.misconceptions),\n        ConceptCardObjectFactory.createFromBackendDict(\n          skillBackendDict.skill_contents),\n        skillBackendDict.language_code,\n        skillBackendDict.version,\n        skillBackendDict.next_misconception_id);\n    };\n\n\n    // Create an interstitial skill that would be displayed in the editor until\n    // the actual skill is fetched from the backend.\n    Skill.createInterstitialSkill = function() {\n      return new Skill(null, \'Skill description loading\',\n        [], ConceptCardObjectFactory.createInterstitialConceptCard(), \'en\', 1,\n        0);\n    };\n\n    var generateMisconceptionsFromBackendDict = function(\n        misconceptionsBackendDicts) {\n      return misconceptionsBackendDicts.map(function(\n          misconceptionsBackendDict) {\n        return MisconceptionObjectFactory.createFromBackendDict(\n          misconceptionsBackendDict);\n      });\n    };\n\n    Skill.prototype.setDescription = function(description) {\n      this._description = description;\n    };\n\n    Skill.prototype.getDescription = function() {\n      return this._description;\n    };\n\n    Skill.prototype.getId = function() {\n      return this._id;\n    };\n\n    Skill.prototype.getConceptCard = function() {\n      return this._conceptCard;\n    };\n\n    Skill.prototype.getMisconceptions = function() {\n      return this._misconceptions.slice();\n    };\n\n    Skill.prototype.appendMisconception = function(newMisconception) {\n      this._misconceptions.push(newMisconception);\n      this._nextMisconceptionId = this.getIncrementedMisconceptionId(\n        newMisconception.getId());\n    };\n\n    Skill.prototype.getLanguageCode = function() {\n      return this._languageCode;\n    };\n\n    Skill.prototype.getVersion = function() {\n      return this._version;\n    };\n\n    Skill.prototype.getNextMisconceptionId = function() {\n      return this._nextMisconceptionId;\n    };\n\n    Skill.prototype.getIncrementedMisconceptionId = function(id) {\n      return id + 1;\n    };\n\n    Skill.prototype.findMisconceptionById = function(id) {\n      for (var idx in this._misconceptions) {\n        if (this._misconceptions[idx].getId() === id) {\n          return this._misconceptions[idx];\n        }\n      }\n      throw Error(\'Could not find misconception with ID: \' + id);\n    };\n\n    Skill.prototype.deleteMisconception = function(id) {\n      for (var idx in this._misconceptions) {\n        if (this._misconceptions[idx].getId() === id) {\n          this._misconceptions.splice(idx, 1);\n        }\n      }\n    };\n\n    Skill.prototype.getMisconceptionAtIndex = function(idx) {\n      return this._misconceptions[idx];\n    };\n\n    return Skill;\n  }\n]);'

blocks = {}
debug_info = ''
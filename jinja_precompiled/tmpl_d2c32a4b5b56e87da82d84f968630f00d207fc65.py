from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/state_editor/StatePropertyServicesSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the services and controllers of the exploration\n *   editor page.\n */\n\ndescribe(\'Change list service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'change list service\', function() {\n    var cls = null;\n    var $httpBackend = null;\n    var mockWarningsData;\n    var mockExplorationData;\n\n    var autosaveDraftUrl = \'createhandler/autosave_draft/0\';\n    var validAutosaveResponse = {\n      is_version_of_draft_valid: true\n    };\n\n    beforeEach(function() {\n      mockWarningsData = {\n        addWarning: function() {}\n      };\n      module(function($provide) {\n        $provide.value(\'AlertsService\', [mockWarningsData][0]);\n      });\n      spyOn(mockWarningsData, \'addWarning\');\n      mockExplorationData = {\n        explorationId: 0,\n        autosaveChangeList: function() {},\n        discardDraft: function() {}\n      };\n      module(function($provide) {\n        $provide.value(\'ExplorationDataService\', [mockExplorationData][0]);\n      });\n      spyOn(mockExplorationData, \'autosaveChangeList\');\n    });\n\n    beforeEach(inject(function($injector) {\n      cls = $injector.get(\'ChangeListService\');\n      $httpBackend = $injector.get(\'$httpBackend\');\n    }));\n\n    it(\'should correctly get and save changes\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.addState(\'newState\');\n      expect(cls.getChangeList()).not.toBe([]);\n      expect(mockWarningsData.addWarning).not.toHaveBeenCalled();\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'should correctly add a new state\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.addState(\'newState\');\n      expect(cls.getChangeList()).toEqual([{\n        cmd: \'add_state\',\n        state_name: \'newState\'\n      }]);\n      expect(mockWarningsData.addWarning).not.toHaveBeenCalled();\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'should correctly rename a state\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.renameState(\'newName\', \'oldName\');\n      expect(cls.getChangeList()).toEqual([{\n        cmd: \'rename_state\',\n        old_state_name: \'oldName\',\n        new_state_name: \'newName\'\n      }]);\n      expect(mockWarningsData.addWarning).not.toHaveBeenCalled();\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'should correctly delete a state\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.deleteState(\'deletedState\');\n      expect(cls.getChangeList()).toEqual([{\n        cmd: \'delete_state\',\n        state_name: \'deletedState\'\n      }]);\n      expect(mockWarningsData.addWarning).not.toHaveBeenCalled();\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'should correctly edit an exploration property\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.editExplorationProperty(\'title\', \'newTitle\', \'oldTitle\');\n      expect(cls.getChangeList()).toEqual([{\n        cmd: \'edit_exploration_property\',\n        property_name: \'title\',\n        new_value: \'newTitle\',\n        old_value: \'oldTitle\'\n      }]);\n      expect(mockWarningsData.addWarning).not.toHaveBeenCalled();\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'should detect invalid exploration properties\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.editExplorationProperty(\'fake_property\', \'newThing\', \'oldThing\');\n      expect(mockWarningsData.addWarning).toHaveBeenCalledWith(\n        \'Invalid exploration property: fake_property\');\n      expect(mockExplorationData.autosaveChangeList).not.toHaveBeenCalled();\n    });\n\n    it(\'should correctly edit a state property\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.editStateProperty(\'stateName\', \'content\', \'newC\', \'oldC\');\n      expect(cls.getChangeList()).toEqual([{\n        cmd: \'edit_state_property\',\n        state_name: \'stateName\',\n        property_name: \'content\',\n        new_value: \'newC\',\n        old_value: \'oldC\'\n      }]);\n      expect(mockWarningsData.addWarning).not.toHaveBeenCalled();\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'should detect invalid exploration properties\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.editStateProperty(\n        \'stateName\', \'fake_property\', \'newThing\', \'oldThing\');\n      expect(mockWarningsData.addWarning).toHaveBeenCalledWith(\n        \'Invalid state property: fake_property\');\n      expect(mockExplorationData.autosaveChangeList).not.toHaveBeenCalled();\n    });\n\n    it(\'should correctly discard all changes\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n      cls.addState(\'newState\');\n      expect(cls.getChangeList()).not.toBe([]);\n      cls.discardAllChanges();\n      expect(cls.getChangeList()).toEqual([]);\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'should correctly handle multiple changes in succession\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n\n      cls.addState(\'newState1\');\n      cls.addState(\'newState2\');\n      expect(cls.getChangeList()).toEqual([{\n        cmd: \'add_state\',\n        state_name: \'newState1\'\n      }, {\n        cmd: \'add_state\',\n        state_name: \'newState2\'\n      }]);\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'should correctly undo changes\', function() {\n      expect(cls.getChangeList()).toEqual([]);\n\n      cls.addState(\'newState1\');\n      cls.addState(\'newState2\');\n      expect(cls.getChangeList()).toEqual([{\n        cmd: \'add_state\',\n        state_name: \'newState1\'\n      }, {\n        cmd: \'add_state\',\n        state_name: \'newState2\'\n      }]);\n\n      cls.undoLastChange();\n      expect(cls.getChangeList()).toEqual([{\n        cmd: \'add_state\',\n        state_name: \'newState1\'\n      }]);\n\n      cls.undoLastChange();\n      expect(cls.getChangeList()).toEqual([]);\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n  });\n});\n\ndescribe(\'Exploration title service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'exploration title service\', function() {\n    var ets = null;\n    var $httpBackend = null;\n    var mockExplorationData;\n\n    var autosaveDraftUrl = \'createhandler/autosave_draft/0\';\n    var validAutosaveResponse = {\n      is_version_of_draft_valid: true\n    };\n\n    beforeEach(function() {\n      mockExplorationData = {\n        explorationId: 0,\n        autosaveChangeList: function() {}\n      };\n      module(function($provide) {\n        $provide.value(\'ExplorationDataService\', [mockExplorationData][0]);\n        $provide.constant(\'INVALID_NAME_CHARS\', \'#@&^%$\');\n      });\n      spyOn(mockExplorationData, \'autosaveChangeList\');\n    });\n\n    beforeEach(inject(function($injector) {\n      ets = $injector.get(\'ExplorationTitleService\');\n      $httpBackend = $injector.get(\'$httpBackend\');\n    }));\n\n    it(\'correctly initializes the service\', function() {\n      expect(ets.displayed).toBeUndefined();\n      expect(ets.savedMemento).toBeUndefined();\n      ets.init(\'A title\');\n      expect(ets.displayed).toEqual(\'A title\');\n      expect(ets.savedMemento).toEqual(\'A title\');\n    });\n\n    it(\'updates only the title and not the memento\', function() {\n      ets.init(\'A title\');\n      ets.displayed = \'New title\';\n      expect(ets.displayed).toEqual(\'New title\');\n      expect(ets.savedMemento).toEqual(\'A title\');\n      expect(mockExplorationData.autosaveChangeList).not.toHaveBeenCalled();\n    });\n\n    it(\'restores correctly from the memento\', function() {\n      ets.init(\'A title\');\n      ets.displayed = \'New title\';\n      ets.restoreFromMemento();\n      expect(ets.displayed).toEqual(\'A title\');\n      expect(ets.savedMemento).toEqual(\'A title\');\n    });\n\n    it(\'updates the memento with the displayed title\', function() {\n      ets.init(\'A title\');\n      ets.displayed = \'New title\';\n      expect(ets.savedMemento).toEqual(\'A title\');\n      ets.saveDisplayedValue();\n      expect(ets.savedMemento).toEqual(\'New title\');\n      expect(mockExplorationData.autosaveChangeList).toHaveBeenCalled();\n      $httpBackend.expectPUT(autosaveDraftUrl).respond(validAutosaveResponse);\n    });\n\n    it(\'reports whether the title has changed since it was saved\', function() {\n      ets.init(\'A title\');\n      expect(ets.hasChanged()).toBe(false);\n      ets.displayed = \'A title\';\n      expect(ets.hasChanged()).toBe(false);\n      ets.displayed = \'New title\';\n      expect(ets.hasChanged()).toBe(true);\n      ets.displayed = \'A title\';\n      expect(ets.hasChanged()).toBe(false);\n\n      ets.saveDisplayedValue();\n      expect(mockExplorationData.autosaveChangeList).not.toHaveBeenCalled();\n      expect(ets.hasChanged()).toBe(false);\n    });\n  });\n});'

blocks = {}
debug_info = ''
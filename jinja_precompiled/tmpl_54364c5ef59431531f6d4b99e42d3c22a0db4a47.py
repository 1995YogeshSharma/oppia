from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/LocalStorageService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utility service for saving data locally on the client machine.\n */\n\n// Service for saving exploration draft changes to local storage.\n//\n// Note that the draft is only saved if localStorage exists and works\n// (i.e. has storage capacity).\noppia.factory(\'LocalStorageService\', [\n  \'ExplorationDraftObjectFactory\',\n  function(ExplorationDraftObjectFactory) {\n    // Check that local storage exists and works as expected.\n    // If it does storage stores the localStorage object,\n    // else storage is undefined or false.\n    var storage = (function() {\n      var test = \'test\';\n      var result;\n      try {\n        localStorage.setItem(test, test);\n        result = localStorage.getItem(test) === test;\n        localStorage.removeItem(test);\n        return result && localStorage;\n      } catch (exception) {}\n    }());\n\n    /**\n     * Create the key to access the changeList in localStorage\n     * @param {String} explorationId - The exploration id of the changeList\n     *   to be accessed.\n     */\n    var _createExplorationDraftKey = function(explorationId) {\n      return \'draft_\' + explorationId;\n    };\n\n    return {\n      /**\n       * Check that localStorage is available to the client.\n       * @returns {boolean} true iff the client has access to localStorage.\n       */\n      isStorageAvailable: function() {\n        return Boolean(storage);\n      },\n      /**\n       * Save the given changeList to localStorage along with its\n       * draftChangeListId\n       * @param {String} explorationId - The id of the exploration\n       *   associated with the changeList to be saved.\n       * @param {List} changeList - The exploration change list to be saved.\n       * @param {Integer} draftChangeListId - The id of the draft to be saved.\n       */\n      saveExplorationDraft: function(\n          explorationId, changeList, draftChangeListId) {\n        var localSaveKey = _createExplorationDraftKey(explorationId);\n        if (storage) {\n          var draftDict = ExplorationDraftObjectFactory.toLocalStorageDict(\n            changeList, draftChangeListId);\n          storage.setItem(localSaveKey, JSON.stringify(draftDict));\n        }\n      },\n      /**\n       * Retrieve the local save of the changeList associated with the given\n       * exploration id.\n       * @param {String} explorationId - The exploration id of the change list\n       *   to be retrieved.\n       * @returns {Object} The local save draft object if it exists,\n       *   else null.\n       */\n      getExplorationDraft: function(explorationId) {\n        if (storage) {\n          var draftDict = JSON.parse(\n            storage.getItem(_createExplorationDraftKey(explorationId)));\n          if (draftDict) {\n            return ExplorationDraftObjectFactory.createFromLocalStorageDict(\n              draftDict);\n          }\n        }\n        return null;\n      },\n      /**\n       * Remove the local save of the changeList associated with the given\n       * exploration id.\n       * @param {String} explorationId - The exploration id of the change list\n       *   to be removed.\n       */\n      removeExplorationDraft: function(explorationId) {\n        if (storage) {\n          storage.removeItem(_createExplorationDraftKey(explorationId));\n        }\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
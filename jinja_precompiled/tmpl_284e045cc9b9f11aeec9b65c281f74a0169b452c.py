from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/CollectionNodeObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for CollectionNodeObjectFactory.\n */\n\ndescribe(\'Collection node object factory\', function() {\n  var CollectionNodeObjectFactory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    CollectionNodeObjectFactory = $injector.get(\'CollectionNodeObjectFactory\');\n  }));\n\n  var _createEmptyCollectionNode = function(explorationId) {\n    return CollectionNodeObjectFactory.create({\n      exploration_id: explorationId,\n      exploration_summary: {\n        title: \'Title\',\n        status: \'private\'\n      }\n    });\n  };\n\n  it(\'should provide an immutable exploration summary\', function() {\n    var explorationSummaryBackendObject = {\n      title: \'exp title\',\n      category: \'exp category\',\n      objective: \'exp objective\'\n    };\n    var collectionNodeBackendObject = {\n      exploration_id: \'exp_id0\',\n      exploration_summary: explorationSummaryBackendObject\n    };\n\n    var collectionNode = CollectionNodeObjectFactory.create(\n      collectionNodeBackendObject);\n    expect(collectionNode.getExplorationId()).toEqual(\'exp_id0\');\n    expect(collectionNode.getExplorationTitle()).toEqual(\'exp title\');\n\n    var summaryObject = collectionNode.getExplorationSummaryObject();\n    expect(summaryObject).toEqual(explorationSummaryBackendObject);\n\n    delete summaryObject.category;\n    expect(summaryObject).not.toEqual(\n      collectionNode.getExplorationSummaryObject());\n  });\n\n  it(\'should be able to create a new collection node by exploration ID\',\n    function() {\n      var collectionNode = CollectionNodeObjectFactory.createFromExplorationId(\n        \'exp_id0\');\n      expect(collectionNode.getExplorationId()).toEqual(\'exp_id0\');\n      expect(collectionNode.doesExplorationExist()).toBe(false);\n    }\n  );\n});'

blocks = {}
debug_info = ''
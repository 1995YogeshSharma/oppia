from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/OutcomeObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of Outcome\n * domain objects.\n */\n\noppia.factory(\'OutcomeObjectFactory\', [\n  \'SubtitledHtmlObjectFactory\',\n  function(SubtitledHtmlObjectFactory) {\n    var Outcome = function(\n        dest, feedback, labelledAsCorrect, paramChanges,\n        refresherExplorationId, missingPrerequisiteSkillId) {\n      this.dest = dest;\n      this.feedback = feedback;\n      this.labelledAsCorrect = labelledAsCorrect;\n      this.paramChanges = paramChanges;\n      this.refresherExplorationId = refresherExplorationId;\n      this.missingPrerequisiteSkillId = missingPrerequisiteSkillId;\n    };\n\n    Outcome.prototype.setDestination = function(newValue) {\n      this.dest = newValue;\n    };\n\n    Outcome.prototype.toBackendDict = function() {\n      return {\n        dest: this.dest,\n        feedback: this.feedback.toBackendDict(),\n        labelled_as_correct: this.labelledAsCorrect,\n        param_changes: this.paramChanges,\n        refresher_exploration_id: this.refresherExplorationId,\n        missing_prerequisite_skill_id: this.missingPrerequisiteSkillId\n      };\n    };\n    /**\n     * Returns true iff an outcome has a self-loop, no feedback, and no\n     * refresher exploration.\n     */\n    Outcome.prototype.isConfusing = function(currentStateName) {\n      return (\n        this.dest === currentStateName &&\n        !this.hasNonemptyFeedback() &&\n        this.refresherExplorationId === null\n      );\n    };\n\n    Outcome.prototype.hasNonemptyFeedback = function() {\n      return this.feedback.getHtml().trim() !== \'\';\n    };\n\n    Outcome.createNew = function(dest, feedbackTextId, feedbackText,\n        paramChanges) {\n      return new Outcome(\n        dest,\n        SubtitledHtmlObjectFactory.createDefault(feedbackText, feedbackTextId),\n        false,\n        paramChanges,\n        null,\n        null);\n    };\n\n    Outcome.createFromBackendDict = function(outcomeDict) {\n      return new Outcome(\n        outcomeDict.dest,\n        SubtitledHtmlObjectFactory.createFromBackendDict(outcomeDict.feedback),\n        outcomeDict.labelled_as_correct,\n        outcomeDict.param_changes,\n        outcomeDict.refresher_exploration_id,\n        outcomeDict.missing_prerequisite_skill_id);\n    };\n\n    return Outcome;\n  }\n]);'

blocks = {}
debug_info = ''
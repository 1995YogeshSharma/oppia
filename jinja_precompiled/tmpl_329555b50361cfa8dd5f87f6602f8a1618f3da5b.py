from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/LearnerViewInfo.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the learner view info section of the\n * footer.\n */\n\noppia.controller(\'LearnerViewInfo\', [\n  \'$scope\', \'$uibModal\', \'$http\', \'$log\', \'ExplorationContextService\',\n  \'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE\', \'UrlInterpolationService\',\n  function($scope, $uibModal, $http, $log, ExplorationContextService,\n      EXPLORATION_SUMMARY_DATA_URL_TEMPLATE, UrlInterpolationService) {\n    var explorationId = ExplorationContextService.getExplorationId();\n    var expInfo = null;\n\n    $scope.showInformationCard = function() {\n      if (expInfo) {\n        openInformationCardModal();\n      } else {\n        $http.get(EXPLORATION_SUMMARY_DATA_URL_TEMPLATE, {\n          params: {\n            stringified_exp_ids: JSON.stringify([explorationId]),\n            include_private_explorations: JSON.stringify(\n              true)\n          }\n        }).then(function(response) {\n          expInfo = response.data.summaries[0];\n          openInformationCardModal();\n        }, function() {\n          $log.error(\n            \'Information card failed to load for exploration \' + explorationId);\n        });\n      }\n    };\n\n    var openInformationCardModal = function() {\n      $uibModal.open({\n        animation: true,\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_player/information_card_modal_directive.html\'),\n        windowClass: \'oppia-modal-information-card\',\n        resolve: {\n          expInfo: function() {\n            return expInfo;\n          }\n        },\n        controller: [\n          \'$scope\', \'$window\', \'$uibModalInstance\', \'DateTimeFormatService\',\n          \'RatingComputationService\', \'expInfo\', \'UrlInterpolationService\',\n          function($scope, $window, $uibModalInstance, DateTimeFormatService,\n              RatingComputationService, expInfo, UrlInterpolationService) {\n            var getExplorationTagsSummary = function(arrayOfTags) {\n              var tagsToShow = [];\n              var tagsInTooltip = [];\n              var MAX_CHARS_TO_SHOW = 45;\n\n              for (var i = 0; i < arrayOfTags.length; i++) {\n                var newLength = (\n                  tagsToShow.toString() + arrayOfTags[i]).length;\n\n                if (newLength < MAX_CHARS_TO_SHOW) {\n                  tagsToShow.push(arrayOfTags[i]);\n                } else {\n                  tagsInTooltip.push(arrayOfTags[i]);\n                }\n              }\n\n              return {\n                tagsToShow: tagsToShow,\n                tagsInTooltip: tagsInTooltip\n              };\n            };\n\n            var getLastUpdatedString = function(millisSinceEpoch) {\n              return DateTimeFormatService.getLocaleAbbreviatedDatetimeString(\n                millisSinceEpoch);\n            };\n\n            $scope.DEFAULT_TWITTER_SHARE_MESSAGE_PLAYER = (\n              GLOBALS.DEFAULT_TWITTER_SHARE_MESSAGE_PLAYER);\n            $scope.averageRating = (\n              RatingComputationService.computeAverageRating(expInfo.ratings));\n            var contributorsSummary = (\n              expInfo.human_readable_contributors_summary || {});\n            $scope.contributorNames = Object.keys(contributorsSummary).sort(\n              function(contributorUsername1, contributorUsername2) {\n                var commitsOfContributor1 = contributorsSummary[\n                  contributorUsername1].num_commits;\n                var commitsOfContributor2 = contributorsSummary[\n                  contributorUsername2].num_commits;\n                return commitsOfContributor2 - commitsOfContributor1;\n              }\n            );\n            $scope.explorationId = expInfo.id;\n            $scope.explorationTags = getExplorationTagsSummary(expInfo.tags);\n            $scope.explorationTitle = expInfo.title;\n            $scope.infoCardBackgroundCss = {\n              \'background-color\': expInfo.thumbnail_bg_color\n            };\n            $scope.infoCardBackgroundImageUrl = expInfo.thumbnail_icon_url;\n            $scope.getStaticImageUrl = (\n              UrlInterpolationService.getStaticImageUrl);\n            $scope.lastUpdatedString = getLastUpdatedString(\n              expInfo.last_updated_msec);\n            $scope.numViews = expInfo.num_views;\n            $scope.objective = expInfo.objective;\n            $scope.explorationIsPrivate = (expInfo.status === \'private\');\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss();\n            };\n          }\n        ]\n      });\n    };\n  }\n]);'

blocks = {}
debug_info = ''
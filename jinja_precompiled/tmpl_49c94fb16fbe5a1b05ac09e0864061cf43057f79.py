from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/state_card/StateCardObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for StateCardObjectFactory.\n */\n\ndescribe(\'State card object factory\', function() {\n  var StateCardObjectFactory = null;\n  var InteractionObjectFactory = null;\n  var _sampleCard = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    StateCardObjectFactory = $injector.get(\'StateCardObjectFactory\');\n    InteractionObjectFactory = $injector.get(\'InteractionObjectFactory\');\n\n    var interactionDict = {\n      answer_groups: [],\n      confirmed_unclassified_answers: [],\n      customization_args: {\n        rows: {\n          value: 1\n        },\n        placeholder: {\n          value: \'Type your answer here.\'\n        }\n      },\n      default_outcome: {\n        dest: \'(untitled state)\',\n        feedback: {\n          content_id: \'default_outcome\',\n          html: \'\'\n        },\n        param_changes: []\n      },\n      hints: [],\n      id: \'TextInput\'\n    };\n    _sampleCard = StateCardObjectFactory.createNewCard(\n      \'State 1\', {}, \'<p>Content</p>\', \'<interaction></interaction>\',\n      InteractionObjectFactory.createFromBackendDict(interactionDict),\n      false);\n  }));\n\n  it(\'should be able to get the various fields\', function() {\n    expect(_sampleCard.getStateName()).toEqual(\'State 1\');\n    expect(_sampleCard.getCurrentParams()).toEqual({});\n    expect(_sampleCard.getContentHtml()).toEqual(\'<p>Content</p>\');\n    expect(_sampleCard.getInteraction().id).toEqual(\'TextInput\');\n    expect(_sampleCard.getInteractionHtml()).toEqual(\n      \'<interaction></interaction>\');\n    expect(_sampleCard.getInputResponsePairs()).toEqual([]);\n    expect(_sampleCard.getLastInputResponsePair()).toEqual(null);\n    expect(_sampleCard.getLastOppiaResponse()).toEqual(null);\n    expect(_sampleCard.getDestStateName()).toEqual(null);\n    expect(_sampleCard.getLeadsToConceptCard()).toEqual(false);\n\n    _sampleCard.addInputResponsePair({\n      oppiaResponse: \'response\'\n    });\n\n    expect(_sampleCard.getOppiaResponse(0)).toEqual(\'response\');\n    expect(_sampleCard.getLastOppiaResponse()).toEqual(\'response\');\n    expect(_sampleCard.getLastInputResponsePair()).toEqual({\n      oppiaResponse: \'response\'\n    });\n  });\n\n  it(\'should add input response pair\', function() {\n    _sampleCard.addInputResponsePair(\'pair 1\');\n    expect(_sampleCard.getInputResponsePairs()).toEqual([\'pair 1\']);\n  });\n\n  it(\'should be able to set the various fields\', function() {\n    _sampleCard.setInteractionHtml(\'<interaction_2></interaction_2>\');\n    expect(_sampleCard.getInteractionHtml()).toEqual(\n      \'<interaction_2></interaction_2>\');\n    _sampleCard.setDestStateName(\'state 2\');\n    expect(_sampleCard.getDestStateName()).toEqual(\'state 2\');\n    _sampleCard.setLeadsToConceptCard(true);\n    expect(_sampleCard.getLeadsToConceptCard()).toEqual(true);\n\n    _sampleCard.addInputResponsePair({\n      oppiaResponse: \'response\'\n    });\n    _sampleCard.setOppiaResponse(0, \'response_2\');\n    expect(_sampleCard.getOppiaResponse(0)).toEqual(\'response_2\');\n\n    _sampleCard.setLastOppiaResponse(\'response_3\');\n    expect(_sampleCard.getLastOppiaResponse()).toEqual(\'response_3\');\n  });\n});'

blocks = {}
debug_info = ''
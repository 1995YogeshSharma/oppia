from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/StateRulesStatsService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for calculating the statistics of a particular state.\n */\n\noppia.factory(\'StateRulesStatsService\', [\n  \'$http\', \'$injector\', \'AngularNameService\', \'AnswerClassificationService\',\n  \'ExplorationContextService\', \'UrlInterpolationService\',\n  function(\n      $http, $injector, AngularNameService, AnswerClassificationService,\n      ExplorationContextService, UrlInterpolationService) {\n    return {\n      /**\n       * TODO(brianrodri): Consider moving this into a visualization domain\n       * object.\n       *\n       * @param {Object!} state\n       * @return {Boolean} whether given state has an implementation for\n       *     displaying the issues overview tab in the State Editor.\n       */\n      stateSupportsIssuesOverview: function(state) {\n        return state.interaction.id === \'TextInput\';\n      },\n\n      /**\n       * Returns a promise which will provide details of the given state\'s\n       * answer-statistics.\n       *\n       * @param {Object!} state\n       */\n      computeStateRulesStats: function(state) {\n        var interactionRulesService = $injector.get(\n          AngularNameService.getNameOfInteractionRulesService(\n            state.interaction.id));\n        var explorationId = ExplorationContextService.getExplorationId();\n\n        return $http.get(\n          UrlInterpolationService.interpolateUrl(\n            \'/createhandler/state_rules_stats/<exploration_id>/<state_name>\',\n            {exploration_id: explorationId, state_name: state.name})\n        ).then(function(response) {\n          return {\n            state_name: state.name,\n            exploration_id: explorationId,\n            visualizations_info: response.data.visualizations_info.map(\n              function(vizInfo) {\n                var vizInfoDataWithAddressedInfo = {};\n                if (vizInfo.addressed_info_is_supported) {\n                  vizInfoDataWithAddressedInfo = {\n                    data: vizInfo.data.map(function(vizInfoDatum) {\n                      return Object.assign({\n                        is_addressed: (\n                          AnswerClassificationService\n                            .isClassifiedExplicitlyOrGoesToNewState(\n                              explorationId, state.name, state,\n                              vizInfoDatum.answer, interactionRulesService))\n                      }, vizInfoDatum);\n                    })\n                  };\n                }\n\n                return Object.assign({}, vizInfo, vizInfoDataWithAddressedInfo);\n              })\n          };\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/email_dashboard/EmailDashboardDataServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the email dashboard page.\n */\n\ndescribe(\'Email Dashboard Services\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'Email Dashboard Services\', function() {\n    var service, $httpBackend, recentQueries;\n\n    beforeEach(inject(function($injector) {\n      $httpBackend = $injector.get(\'$httpBackend\');\n      service = $injector.get(\'EmailDashboardDataService\');\n    }));\n\n    it(\'should fetch correct data from backend\', function() {\n      var recentQueries = [{\n        id: \'q123\',\n        status: \'processing\'\n      },\n      {\n        id: \'q456\',\n        status: \'processing\'\n      }];\n      $httpBackend.expectGET(/.*?emaildashboarddatahandler?.*/g).respond({\n        recent_queries: recentQueries,\n        cursor: null\n      });\n      service.getNextQueries();\n      $httpBackend.flush();\n      expect(service.getQueries().length).toEqual(2);\n      expect(service.getQueries()).toEqual(recentQueries);\n      expect(service.getCurrentPageIndex()).toEqual(0);\n      expect(service.getLatestCursor()).toBe(null);\n    });\n\n    it(\'should post correct data to backend\', function() {\n      var data = {\n        param1: \'value1\',\n        param2: \'value2\'\n      };\n      var queryData = {\n        id: \'qnew\',\n        status: \'processing\'\n      };\n      var expectedQueries = [queryData];\n\n      $httpBackend.expectPOST(\'/emaildashboarddatahandler\').respond({\n        query: queryData\n      });\n      service.submitQuery(data);\n      $httpBackend.flush();\n      expect(service.getQueries().length).toEqual(1);\n      expect(service.getQueries()).toEqual(expectedQueries);\n    });\n\n    it(\'should replace correct query in queries list\', function() {\n      var recentQueries = [{\n        id: \'q123\',\n        status: \'processing\'\n      },\n      {\n        id: \'q456\',\n        status: \'processing\'\n      }];\n      var expectedQueries = [{\n        id: \'q123\',\n        status: \'completed\'\n      },\n      {\n        id: \'q456\',\n        status: \'processing\'\n      }];\n\n      $httpBackend.expectGET(/.*?emaildashboarddatahandler?.*/g).respond({\n        recent_queries: recentQueries,\n        cursor: null\n      });\n      service.getNextQueries();\n      $httpBackend.flush();\n      expect(service.getQueries().length).toEqual(2);\n      expect(service.getQueries()).toEqual(recentQueries);\n\n      $httpBackend.expectGET(/.*?querystatuscheck?.*/g).respond({\n        query: {\n          id: \'q123\',\n          status: \'completed\'\n        }\n      });\n      service.fetchQuery(\'q123\').then(function(query) {\n        expect(query.id).toEqual(\'q123\');\n        expect(query.status).toEqual(\'completed\');\n      });\n      $httpBackend.flush();\n\n      expect(service.getQueries().length).toEqual(2);\n      expect(service.getQueries()).toEqual(expectedQueries);\n    });\n\n    it(\'should check simulation\', function() {\n      // Get next page of queries.\n      $httpBackend.expectGET(/.*?emaildashboarddatahandler?.*/g).respond({\n        recent_queries: [],\n        cursor: null\n      });\n      service.getNextQueries();\n      $httpBackend.flush();\n      expect(service.getQueries().length).toEqual(0);\n      expect(service.getQueries()).toEqual([]);\n      expect(service.getCurrentPageIndex()).toEqual(0);\n\n      var data = {\n        param1: \'value1\',\n        param2: \'value2\'\n      };\n      // Maintain list of all submitted queries for cross checking.\n      var totalQueries = [];\n      // Submit 25 new queries.\n      for (var i = 0; i < 25; i++) {\n        var queryData = {\n          id: \'q\' + i,\n          status: \'processing\'\n        };\n        $httpBackend.expectPOST(\'/emaildashboarddatahandler\').respond({\n          query: queryData\n        });\n        service.submitQuery(data);\n        totalQueries.unshift(queryData);\n        $httpBackend.flush();\n      }\n      expect(service.getQueries().length).toEqual(25);\n      expect(service.getCurrentPageIndex()).toEqual(0);\n      expect(service.getQueries()).toEqual(totalQueries);\n\n      // Check that queries on page 1 are correct.\n      service.getNextQueries().then(function(queries) {\n        expect(queries.length).toEqual(10);\n        except(queries).toEqual(totalQueries.slice(10, 20));\n      });\n      expect(service.getCurrentPageIndex()).toEqual(1);\n\n      // Check that queries on page 2 are correct.\n      service.getNextQueries().then(function(queries) {\n        expect(queries.length).toEqual(5);\n        except(queries).toEqual(totalQueries.slice(20, 25));\n      });\n      expect(service.getCurrentPageIndex()).toEqual(2);\n\n      // Go back to page 1 and check again.\n      expect(service.getPreviousQueries()).toEqual(totalQueries.slice(10, 20));\n      expect(service.getCurrentPageIndex()).toEqual(1);\n\n      // Submit a new query.\n      var queryData = {\n        id: \'q25\',\n        status: \'processing\'\n      };\n      $httpBackend.expectPOST(\'/emaildashboarddatahandler\').respond({\n        query: queryData\n      });\n      service.submitQuery(data);\n      $httpBackend.flush();\n      totalQueries.unshift(queryData);\n      expect(service.getQueries().length).toEqual(26);\n      expect(service.getQueries()).toEqual(totalQueries);\n\n      // Check that new query is added on the top of fetched queries.\n      expect(service.getQueries()[0]).toEqual(queryData);\n\n      // Check queries on page 2.\n      service.getNextQueries().then(function(queries) {\n        expect(queries.length).toEqual(6);\n        except(queries).toEqual(totalQueries.slice(20, 26));\n      });\n      expect(service.getCurrentPageIndex()).toEqual(2);\n\n      // Check queries on page 1.\n      expect(service.getPreviousQueries()).toEqual(totalQueries.slice(10, 20));\n      expect(service.getCurrentPageIndex()).toEqual(1);\n\n      // Check queries on page 0.\n      expect(service.getPreviousQueries()).toEqual(totalQueries.slice(0, 10));\n      expect(service.getCurrentPageIndex()).toEqual(0);\n    });\n  });\n});'

blocks = {}
debug_info = ''
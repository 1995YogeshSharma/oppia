from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/story_editor/StoryEditorStateServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for StoryEditorStateService.\n */\n\ndescribe(\'Story editor state service\', function() {\n  var StoryEditorStateService = null;\n  var StoryObjectFactory = null;\n  var StoryUpdateService = null;\n  var fakeEditableStoryBackendApiService = null;\n\n  var FakeEditableStoryBackendApiService = function() {\n    var self = {};\n\n    var _fetchOrUpdateStory = function() {\n      return $q(function(resolve, reject) {\n        if (!self.failure) {\n          resolve(self.newBackendStoryObject);\n        } else {\n          reject();\n        }\n      });\n    };\n\n    self.newBackendStoryObject = {};\n    self.failure = null;\n    self.fetchStory = _fetchOrUpdateStory;\n    self.updateStory = _fetchOrUpdateStory;\n    return self;\n  };\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n  beforeEach(module(\'oppia\', function($provide) {\n    fakeEditableStoryBackendApiService = (\n      new FakeEditableStoryBackendApiService());\n    $provide.value(\n      \'EditableStoryBackendApiService\',\n      [fakeEditableStoryBackendApiService][0]);\n  }));\n\n  beforeEach(inject(function($injector) {\n    StoryEditorStateService = $injector.get(\n      \'StoryEditorStateService\');\n    StoryObjectFactory = $injector.get(\'StoryObjectFactory\');\n    StoryUpdateService = $injector.get(\'StoryUpdateService\');\n    $q = $injector.get(\'$q\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n\n    fakeEditableStoryBackendApiService.newBackendStoryObject = {\n      id: \'storyId_0\',\n      title: \'Story title\',\n      description: \'Story Description\',\n      notes: \'<p>Notes/p>\',\n      story_contents: {\n        initial_node_id: \'node_1\',\n        next_node_id: \'node_2\',\n        nodes: []\n      },\n      language_code: \'en\',\n      schema_version: \'1\',\n      version: \'1\'\n    };\n\n    secondBackendStoryObject = {\n      id: \'storyId_1\',\n      title: \'Story title  2\',\n      description: \'Story Description 2\',\n      notes: \'<p>Notes 2/p>\',\n      story_contents: {\n        initial_node_id: \'node_2\',\n        next_node_id: \'node_1\',\n        nodes: []\n      },\n      language_code: \'en\',\n      schema_version: \'1\',\n      version: \'1\'\n    };\n  }));\n\n  it(\'should request to load the story from the backend\', function() {\n    spyOn(\n      fakeEditableStoryBackendApiService, \'fetchStory\').and.callThrough();\n\n    StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n    expect(fakeEditableStoryBackendApiService.fetchStory).toHaveBeenCalled();\n  });\n\n  it(\'should fire an init event after loading the first story\',\n    function() {\n      spyOn($rootScope, \'$broadcast\').and.callThrough();\n\n      StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n      $rootScope.$apply();\n\n      expect($rootScope.$broadcast).toHaveBeenCalledWith(\'storyInitialized\');\n    }\n  );\n\n  it(\'should fire an update event after loading more stories\', function() {\n    // Load initial story.\n    StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n    $rootScope.$apply();\n\n    spyOn($rootScope, \'$broadcast\').and.callThrough();\n\n    // Load a second story.\n    StoryEditorStateService.loadStory(\'topicId\', \'storyId_1\');\n    $rootScope.$apply();\n\n    expect($rootScope.$broadcast).toHaveBeenCalledWith(\'storyReinitialized\');\n  });\n\n  it(\'should track whether it is currently loading the story\', function() {\n    expect(StoryEditorStateService.isLoadingStory()).toBe(false);\n\n    StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n    expect(StoryEditorStateService.isLoadingStory()).toBe(true);\n\n    $rootScope.$apply();\n    expect(StoryEditorStateService.isLoadingStory()).toBe(false);\n  });\n\n  it(\'should indicate a story is no longer loading after an error\',\n    function() {\n      expect(StoryEditorStateService.isLoadingStory()).toBe(false);\n      fakeEditableStoryBackendApiService.failure = \'Internal 500 error\';\n\n      StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n      expect(StoryEditorStateService.isLoadingStory()).toBe(true);\n\n      $rootScope.$apply();\n      expect(StoryEditorStateService.isLoadingStory()).toBe(false);\n    }\n  );\n\n  it(\'it should report that a story has loaded through loadStory()\',\n    function() {\n      expect(StoryEditorStateService.hasLoadedStory()).toBe(false);\n\n      StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n      expect(StoryEditorStateService.hasLoadedStory()).toBe(false);\n\n      $rootScope.$apply();\n      expect(StoryEditorStateService.hasLoadedStory()).toBe(true);\n    }\n  );\n\n  it(\'it should report that a story has loaded through setStory()\',\n    function() {\n      expect(StoryEditorStateService.hasLoadedStory()).toBe(false);\n\n      var newStory = StoryObjectFactory.createFromBackendDict(\n        secondBackendStoryObject);\n      StoryEditorStateService.setStory(newStory);\n      expect(StoryEditorStateService.hasLoadedStory()).toBe(true);\n    }\n  );\n\n  it(\'should initially return an interstitial story\', function() {\n    var story = StoryEditorStateService.getStory();\n    expect(story.getId()).toEqual(null);\n    expect(story.getTitle()).toEqual(\'Story title loading\');\n    expect(story.getDescription()).toEqual(\'Story description loading\');\n    expect(story.getNotes()).toEqual(\'Story notes loading\');\n    expect(story.getStoryContents()).toEqual(null);\n  });\n\n  it(\'should be able to set a new story with an in-place copy\',\n    function() {\n      var previousStory = StoryEditorStateService.getStory();\n      var expectedStory = StoryObjectFactory.createFromBackendDict(\n        secondBackendStoryObject);\n      expect(previousStory).not.toEqual(expectedStory);\n\n      StoryEditorStateService.setStory(expectedStory);\n\n      var actualStory = StoryEditorStateService.getStory();\n      expect(actualStory).toEqual(expectedStory);\n\n      expect(actualStory).toBe(previousStory);\n      expect(actualStory).not.toBe(expectedStory);\n    }\n  );\n\n  it(\'should fail to save the story without first loading one\',\n    function() {\n      expect(function() {\n        StoryEditorStateService.saveStory(\'topicId\', \'Commit message\');\n      }).toThrow();\n    }\n  );\n\n  it(\'should not save the story if there are no pending changes\',\n    function() {\n      StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n      $rootScope.$apply();\n\n      spyOn($rootScope, \'$broadcast\').and.callThrough();\n      expect(StoryEditorStateService.saveStory(\'topicId\',\n        \'Commit message\')).toBe(false);\n      expect($rootScope.$broadcast).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should be able to save the story and pending changes\', function() {\n    spyOn(\n      fakeEditableStoryBackendApiService,\n      \'updateStory\').and.callThrough();\n\n    StoryEditorStateService.loadStory(\'topicId_1\', \'storyId_0\');\n    StoryUpdateService.setStoryTitle(\n      StoryEditorStateService.getStory(), \'New title\');\n    $rootScope.$apply();\n\n    expect(\n      StoryEditorStateService.saveStory(\'topicId_1\', \'Commit message\')\n    ).toBe(true);\n    $rootScope.$apply();\n\n    var expectedId = \'storyId_0\';\n    var expectedTopicId = \'topicId_1\';\n    var expectedVersion = \'1\';\n    var expectedCommitMessage = \'Commit message\';\n    var updateStorySpy = (\n      fakeEditableStoryBackendApiService.updateStory);\n    expect(updateStorySpy).toHaveBeenCalledWith(\n      expectedTopicId, expectedId, expectedVersion,\n      expectedCommitMessage, jasmine.any(Object));\n  });\n\n  it(\'should fire an update event after saving the story\', function() {\n    StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n    StoryUpdateService.setStoryTitle(\n      StoryEditorStateService.getStory(), \'New title\');\n    $rootScope.$apply();\n\n    spyOn($rootScope, \'$broadcast\').and.callThrough();\n    StoryEditorStateService.saveStory(\'topicId\', \'Commit message\');\n    $rootScope.$apply();\n\n    expect($rootScope.$broadcast).toHaveBeenCalledWith(\n      \'storyReinitialized\');\n  });\n\n  it(\'should track whether it is currently saving the story\', function() {\n    StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n    StoryUpdateService.setStoryTitle(\n      StoryEditorStateService.getStory(), \'New title\');\n    $rootScope.$apply();\n\n    expect(StoryEditorStateService.isSavingStory()).toBe(false);\n    StoryEditorStateService.saveStory(\'topicId\', \'Commit message\');\n    expect(StoryEditorStateService.isSavingStory()).toBe(true);\n\n    $rootScope.$apply();\n    expect(StoryEditorStateService.isSavingStory()).toBe(false);\n  });\n\n  it(\'should indicate a story is no longer saving after an error\',\n    function() {\n      StoryEditorStateService.loadStory(\'topicId\', \'storyId_0\');\n      StoryUpdateService.setStoryTitle(\n        StoryEditorStateService.getStory(), \'New title\');\n      $rootScope.$apply();\n\n      expect(StoryEditorStateService.isSavingStory()).toBe(false);\n      fakeEditableStoryBackendApiService.failure = \'Internal 500 error\';\n\n      StoryEditorStateService.saveStory(\'topicId\', \'Commit message\');\n      expect(StoryEditorStateService.isSavingStory()).toBe(true);\n\n      $rootScope.$apply();\n      expect(StoryEditorStateService.isSavingStory()).toBe(false);\n    }\n  );\n});'

blocks = {}
debug_info = ''
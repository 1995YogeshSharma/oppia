from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/feedback_thread/FeedbackThreadSummaryObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of feedback thread\n   domain objects.\n */\n\noppia.factory(\'FeedbackThreadSummaryObjectFactory\', [function() {\n  var FeedbackThreadSummary = function(\n      status, originalAuthorId, lastUpdated, lastMessageText, totalMessageCount,\n      lastMessageRead, secondLastMessageRead, authorLastMessage,\n      authorSecondLastMessage, explorationTitle, explorationId, threadId) {\n    this.status = status;\n    this.originalAuthorId = originalAuthorId;\n    this.lastUpdated = lastUpdated;\n    this.lastMessageText = lastMessageText;\n    this.totalMessageCount = totalMessageCount;\n    this.lastMessageRead = lastMessageRead;\n    this.secondLastMessageRead = secondLastMessageRead;\n    this.authorLastMessage = authorLastMessage;\n    this.authorSecondLastMessage = authorSecondLastMessage;\n    this.explorationTitle = explorationTitle;\n    this.explorationId = explorationId;\n    this.threadId = threadId;\n  };\n\n  FeedbackThreadSummary.prototype.markTheLastTwoMessagesAsRead = function() {\n    if (this.authorSecondLastMessage) {\n      this.secondLastMessageRead = true;\n    }\n    this.lastMessageRead = true;\n  };\n\n  FeedbackThreadSummary.prototype.appendNewMessage = function(\n      lastMessageText, authorLastMessage) {\n    this.lastMessageText = lastMessageText;\n    this.lastUpdated = new Date();\n    this.authorSecondLastMessage = this.authorLastMessage;\n    this.authorLastMessage = authorLastMessage;\n    this.totalMessageCount += 1;\n    this.lastMessageRead = true;\n    this.secondLastMessageRead = true;\n  };\n\n  FeedbackThreadSummary.create = function(\n      status, originalAuthorId, lastUpdated, lastMessageText, totalMessageCount,\n      lastMessageRead, secondLastMessageRead, authorLastMessage,\n      authorSecondLastMessage, explorationTitle, explorationId, threadId) {\n    return new FeedbackThreadSummary(status, originalAuthorId, lastUpdated,\n      lastMessageText, totalMessageCount, lastMessageRead,\n      secondLastMessageRead, authorLastMessage, authorSecondLastMessage,\n      explorationTitle, explorationId, threadId);\n  };\n\n  FeedbackThreadSummary.createFromBackendDict = function(\n      feedbackThreadSummaryBackendDict) {\n    return new FeedbackThreadSummary(\n      feedbackThreadSummaryBackendDict.status,\n      feedbackThreadSummaryBackendDict.original_author_id,\n      feedbackThreadSummaryBackendDict.last_updated,\n      feedbackThreadSummaryBackendDict.last_message_text,\n      feedbackThreadSummaryBackendDict.total_message_count,\n      feedbackThreadSummaryBackendDict.last_message_read,\n      feedbackThreadSummaryBackendDict.second_last_message_read,\n      feedbackThreadSummaryBackendDict.author_last_message,\n      feedbackThreadSummaryBackendDict.author_second_last_message,\n      feedbackThreadSummaryBackendDict.exploration_title,\n      feedbackThreadSummaryBackendDict.exploration_id,\n      feedbackThreadSummaryBackendDict.thread_id);\n  };\n\n  return FeedbackThreadSummary;\n}]);'

blocks = {}
debug_info = ''
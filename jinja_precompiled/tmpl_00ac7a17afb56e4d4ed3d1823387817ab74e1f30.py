from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/CollectionUpdateServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for ChangeObjectFactory.\n */\n\ndescribe(\'Collection update service\', function() {\n  var CollectionUpdateService = null;\n  var CollectionObjectFactory = null;\n  var UndoRedoService = null;\n  var _sampleCollection = null;\n  var _sampleExplorationSummaryBackendObject = {\n    title: \'Title\',\n    status: \'public\'\n  };\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    CollectionUpdateService = $injector.get(\'CollectionUpdateService\');\n    CollectionObjectFactory = $injector.get(\'CollectionObjectFactory\');\n    UndoRedoService = $injector.get(\'UndoRedoService\');\n\n    var sampleCollectionBackendObject = {\n      id: \'collection_id\',\n      title: \'a title\',\n      objective: \'an objective\',\n      language_code: \'en\',\n      tags: [],\n      category: \'a category\',\n      version: \'1\',\n      nodes: [{\n        exploration_id: \'exp_id0\',\n        exploration: {}\n      }]\n    };\n    _sampleCollection = CollectionObjectFactory.create(\n      sampleCollectionBackendObject);\n  }));\n\n  var _getCollectionNode = function(expId) {\n    return _sampleCollection.getCollectionNodeByExplorationId(expId);\n  };\n\n  it(\'should add/remove a new collection node to/from a collection\',\n    function() {\n      expect(_sampleCollection.getExplorationIds()).toEqual([\'exp_id0\']);\n      CollectionUpdateService.addCollectionNode(\n        _sampleCollection, \'exp_id1\', _sampleExplorationSummaryBackendObject);\n      expect(_sampleCollection.getExplorationIds()).toEqual([\n        \'exp_id0\', \'exp_id1\'\n      ]);\n\n      UndoRedoService.undoChange(_sampleCollection);\n      expect(_sampleCollection.getExplorationIds()).toEqual([\'exp_id0\']);\n    }\n  );\n\n  it(\'should create a proper backend change dict for adding collection nodes\',\n    function() {\n      CollectionUpdateService.addCollectionNode(\n        _sampleCollection, \'exp_id1\', _sampleExplorationSummaryBackendObject);\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'add_collection_node\',\n        exploration_id: \'exp_id1\'\n      }]);\n    }\n  );\n\n  it(\'should remove/add a collection node from/to a collection\', function() {\n    expect(_sampleCollection.getExplorationIds()).toEqual([\'exp_id0\']);\n    CollectionUpdateService.deleteCollectionNode(_sampleCollection, \'exp_id0\');\n    expect(_sampleCollection.getExplorationIds()).toEqual([]);\n\n    UndoRedoService.undoChange(_sampleCollection);\n    expect(_sampleCollection.getExplorationIds()).toEqual([\'exp_id0\']);\n  });\n\n  it(\'should create a proper backend change dict for deleting collection nodes\',\n    function() {\n      CollectionUpdateService\n        .deleteCollectionNode(_sampleCollection, \'exp_id0\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'delete_collection_node\',\n        exploration_id: \'exp_id0\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a collection\\\'s title\', function() {\n    expect(_sampleCollection.getTitle()).toEqual(\'a title\');\n    CollectionUpdateService.setCollectionTitle(_sampleCollection, \'new title\');\n    expect(_sampleCollection.getTitle()).toEqual(\'new title\');\n\n    UndoRedoService.undoChange(_sampleCollection);\n    expect(_sampleCollection.getTitle()).toEqual(\'a title\');\n  });\n\n  it(\'should create a proper backend change dict for changing titles\',\n    function() {\n      CollectionUpdateService\n        .setCollectionTitle(_sampleCollection, \'new title\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'edit_collection_property\',\n        property_name: \'title\',\n        new_value: \'new title\',\n        old_value: \'a title\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a collection\\\'s category\', function() {\n    expect(_sampleCollection.getCategory()).toEqual(\'a category\');\n    CollectionUpdateService.setCollectionCategory(\n      _sampleCollection, \'new category\');\n    expect(_sampleCollection.getCategory()).toEqual(\'new category\');\n\n    UndoRedoService.undoChange(_sampleCollection);\n    expect(_sampleCollection.getCategory()).toEqual(\'a category\');\n  });\n\n  it(\'should create a proper backend change dict for changing categories\',\n    function() {\n      CollectionUpdateService.setCollectionCategory(\n        _sampleCollection, \'new category\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'edit_collection_property\',\n        property_name: \'category\',\n        new_value: \'new category\',\n        old_value: \'a category\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a collection\\\'s objective\', function() {\n    expect(_sampleCollection.getObjective()).toEqual(\'an objective\');\n    CollectionUpdateService.setCollectionObjective(\n      _sampleCollection, \'new objective\');\n    expect(_sampleCollection.getObjective()).toEqual(\'new objective\');\n\n    UndoRedoService.undoChange(_sampleCollection);\n    expect(_sampleCollection.getObjective()).toEqual(\'an objective\');\n  });\n\n  it(\'should create a proper backend change dict for changing objectives\',\n    function() {\n      CollectionUpdateService.setCollectionObjective(\n        _sampleCollection, \'new objective\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'edit_collection_property\',\n        property_name: \'objective\',\n        new_value: \'new objective\',\n        old_value: \'an objective\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a collection\\\'s language code\', function() {\n    expect(_sampleCollection.getLanguageCode()).toEqual(\'en\');\n    CollectionUpdateService.setCollectionLanguageCode(_sampleCollection, \'fi\');\n    expect(_sampleCollection.getLanguageCode()).toEqual(\'fi\');\n\n    UndoRedoService.undoChange(_sampleCollection);\n    expect(_sampleCollection.getLanguageCode()).toEqual(\'en\');\n  });\n\n  it(\'should create a proper backend change dict for changing language codes\',\n    function() {\n      CollectionUpdateService\n        .setCollectionLanguageCode(_sampleCollection, \'fi\');\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'edit_collection_property\',\n        property_name: \'language_code\',\n        new_value: \'fi\',\n        old_value: \'en\'\n      }]);\n    }\n  );\n\n  it(\'should set/unset changes to a collection\\\'s tags\', function() {\n    expect(_sampleCollection.getTags()).toEqual([]);\n    CollectionUpdateService.setCollectionTags(_sampleCollection, [\'test\']);\n    expect(_sampleCollection.getTags()).toEqual([\'test\']);\n\n    UndoRedoService.undoChange(_sampleCollection);\n    expect(_sampleCollection.getTags()).toEqual([]);\n  });\n\n  it(\'should create a proper backend change dict for changing tags\',\n    function() {\n      CollectionUpdateService.setCollectionTags(_sampleCollection, [\'test\']);\n      expect(UndoRedoService.getCommittableChangeList()).toEqual([{\n        cmd: \'edit_collection_property\',\n        property_name: \'tags\',\n        new_value: [\'test\'],\n        old_value: []\n      }]);\n    });\n});'

blocks = {}
debug_info = ''
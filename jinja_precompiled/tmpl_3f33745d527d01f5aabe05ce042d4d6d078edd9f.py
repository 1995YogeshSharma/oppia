from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/admin/config_tab/AdminConfigTabDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the configuration tab in the admin panel.\n */\n\noppia.directive(\'adminConfigTab\', [\n  \'$http\', \'AdminTaskManagerService\', \'ADMIN_HANDLER_URL\',\n  \'UrlInterpolationService\', function($http, AdminTaskManagerService,\n      ADMIN_HANDLER_URL, UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        setStatusMessage: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/admin/config_tab/\' +\n        \'admin_config_tab_directive.html\'),\n      controller: [\'$scope\', function($scope) {\n        $scope.configProperties = {};\n\n        $scope.isNonemptyObject = function(object) {\n          var hasAtLeastOneElement = false;\n          for (var property in object) {\n            hasAtLeastOneElement = true;\n          }\n          return hasAtLeastOneElement;\n        };\n\n        $scope.reloadConfigProperties = function() {\n          $http.get(ADMIN_HANDLER_URL).then(function(response) {\n            $scope.configProperties = response.data.config_properties;\n          });\n        };\n\n        $scope.revertToDefaultConfigPropertyValue = function(configPropertyId) {\n          if (!confirm(\'This action is irreversible. Are you sure?\')) {\n            return;\n          }\n\n          $http.post(ADMIN_HANDLER_URL, {\n            action: \'revert_config_property\',\n            config_property_id: configPropertyId\n          }).then(function() {\n            $scope.setStatusMessage(\'Config property reverted successfully.\');\n            $scope.reloadConfigProperties();\n          }, function(errorResponse) {\n            $scope.setStatusMessage(\n              \'Server error: \' + errorResponse.data.error);\n          });\n        };\n\n        $scope.saveConfigProperties = function() {\n          if (AdminTaskManagerService.isTaskRunning()) {\n            return;\n          }\n          if (!confirm(\'This action is irreversible. Are you sure?\')) {\n            return;\n          }\n\n          $scope.setStatusMessage(\'Saving...\');\n\n          AdminTaskManagerService.startTask();\n          var newConfigPropertyValues = {};\n          for (var property in $scope.configProperties) {\n            newConfigPropertyValues[property] = (\n              $scope.configProperties[property].value);\n          }\n\n          $http.post(ADMIN_HANDLER_URL, {\n            action: \'save_config_properties\',\n            new_config_property_values: newConfigPropertyValues\n          }).then(function() {\n            $scope.setStatusMessage(\'Data saved successfully.\');\n            AdminTaskManagerService.finishTask();\n          }, function(errorResponse) {\n            $scope.setStatusMessage(\n              \'Server error: \' + errorResponse.data.error);\n            AdminTaskManagerService.finishTask();\n          });\n        };\n\n        $scope.reloadConfigProperties();\n      }]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
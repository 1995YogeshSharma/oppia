from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/statistics/PlaythroughObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the PlaythroughObjectFactory.\n */\n\ndescribe(\'Playthrough Object Factory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    this.pof = $injector.get(\'PlaythroughObjectFactory\');\n    this.laof = $injector.get(\'LearnerActionObjectFactory\');\n  }));\n\n  it(\'should create a new playthrough\', function() {\n    var actions = [this.laof.createNew(\'AnswerSubmit\', {}, 1)];\n    var playthroughObject = this.pof.createNew(\n      \'playthroughId1\', \'expId1\', 1, \'EarlyQuit\', {}, actions);\n\n    expect(playthroughObject.playthroughId).toEqual(\'playthroughId1\');\n    expect(playthroughObject.expId).toEqual(\'expId1\');\n    expect(playthroughObject.expVersion).toEqual(1);\n    expect(playthroughObject.issueType).toEqual(\'EarlyQuit\');\n    expect(playthroughObject.issueCustomizationArgs).toEqual({});\n    expect(playthroughObject.actions).toEqual(actions);\n  });\n\n  it(\'should create a new playthrough from a backend dict\', function() {\n    var playthroughObject = this.pof.createFromBackendDict(\n      {\n        playthrough_id: \'playthroughId1\',\n        exp_id: \'expId1\',\n        exp_version: 1,\n        issue_type: \'EarlyQuit\',\n        issue_customization_args: {},\n        actions: [{\n          action_type: \'AnswerSubmit\',\n          action_customization_args: {},\n          schema_version: 1\n        }]\n      }\n    );\n\n    expect(playthroughObject.playthroughId).toEqual(\'playthroughId1\');\n    expect(playthroughObject.expId).toEqual(\'expId1\');\n    expect(playthroughObject.expVersion).toEqual(1);\n    expect(playthroughObject.issueType).toEqual(\'EarlyQuit\');\n    expect(playthroughObject.issueCustomizationArgs).toEqual({});\n    expect(playthroughObject.actions).toEqual([this.laof.createNew(\n      \'AnswerSubmit\', {}, 1)]);\n  });\n\n  it(\'should convert a playthrough to a backend dict\', function() {\n    var actions = [this.laof.createNew(\'AnswerSubmit\', {}, 1)];\n    var playthroughObject = this.pof.createNew(\n      \'playthroughId1\', \'expId1\', 1, \'EarlyQuit\', {}, actions);\n\n    var playthroughDict = playthroughObject.toBackendDict();\n    expect(playthroughDict).toEqual({\n      id: \'playthroughId1\',\n      exp_id: \'expId1\',\n      exp_version: 1,\n      issue_type: \'EarlyQuit\',\n      issue_customization_args: {},\n      actions: [{\n        action_type: \'AnswerSubmit\',\n        action_customization_args: {},\n        schema_version: 1\n      }]\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/IssuesService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for retrieving issues and playthroughs.\n */\n\noppia.factory(\'IssuesService\', [\n  \'$sce\', \'IssuesBackendApiService\', \'ISSUE_TYPE_EARLY_QUIT\',\n  \'ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS\',\n  \'ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS\',\n  function(\n      $sce, IssuesBackendApiService, ISSUE_TYPE_EARLY_QUIT,\n      ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS,\n      ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS) {\n    var issues = null;\n    var explorationId = null;\n    var explorationVersion = null;\n    var currentPlaythrough = null;\n\n    var renderEarlyQuitIssueStatement = function() {\n      return \'Several learners exited the exploration in less than a minute.\';\n    };\n\n    var renderMultipleIncorrectIssueStatement = function(stateName) {\n      var statement =\n        \'Several learners submitted answers to card "\' + stateName +\n        \'" several times, then gave up and quit.\';\n      return statement;\n    };\n\n    var renderCyclicTransitionsIssueStatement = function(stateName) {\n      return (\n        \'Several learners ended up in a cyclic loop revisiting card "\' +\n        stateName + \'" many times.\');\n    };\n\n    var renderEarlyQuitIssueSuggestions = function(issue) {\n      var suggestions = [$sce.trustAsHtml(\n        \'Review the cards up to and including <span class="state_link">\' +\n        \'"\' + issue.issueCustomizationArgs.state_name.value + \'"</span> for\' +\n        \' errors, ambiguities or insufficient motivation.\'\n      )];\n      return suggestions;\n    };\n\n    var renderMultipleIncorrectIssueSuggestions = function(stateName) {\n      var suggestions = [$sce.trustAsHtml(\n        \'Check the wording of the card <span class="state_link">"\' +\n        stateName + \'</span> to ensure it is not confusing.\'\n      ), $sce.trustAsHtml(\n        \'Consider addressing the answers submitted in the sample playthroughs\' +\n        \' explicitly, using answer groups.\'\n      )];\n      return suggestions;\n    };\n\n    var renderCyclicTransitionsIssueSuggestions = function(issue) {\n      var stateNames = issue.issueCustomizationArgs.state_names.value;\n      var finalIndex = stateNames.length - 1;\n      var suggestions = [$sce.trustAsHtml(\n        \'Check that the concept presented in <span class="state_link">"\' +\n        stateNames[0] + \'"</span> has been reinforced sufficiently by the \' +\n        \'time the learner gets to <span class="state_link">"\' +\n        stateNames[finalIndex] + \'</span>.\'\n      )];\n      return suggestions;\n    };\n\n    return {\n      initSession: function(newExplorationId, newExplorationVersion) {\n        explorationId = newExplorationId;\n        explorationVersion = newExplorationVersion;\n      },\n      getIssues: function() {\n        return IssuesBackendApiService.fetchIssues(\n          explorationId, explorationVersion).then(function(issues) {\n          return issues;\n        });\n      },\n      getPlaythrough: function(playthroughId) {\n        return IssuesBackendApiService.fetchPlaythrough(\n          explorationId, playthroughId).then(function(playthrough) {\n          return playthrough;\n        });\n      },\n      renderIssueStatement: function(issue) {\n        var issueType = issue.issueType;\n        if (issueType === ISSUE_TYPE_EARLY_QUIT) {\n          return renderEarlyQuitIssueStatement();\n        } else if (issueType === ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS) {\n          return renderMultipleIncorrectIssueStatement(\n            issue.issueCustomizationArgs.state_name.value);\n        } else if (issueType === ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS) {\n          return renderCyclicTransitionsIssueStatement(\n            issue.issueCustomizationArgs.state_names.value[0]);\n        }\n      },\n      renderIssueSuggestions: function(issue) {\n        var issueType = issue.issueType;\n        if (issueType === ISSUE_TYPE_EARLY_QUIT) {\n          return renderEarlyQuitIssueSuggestions(issue);\n        } else if (issueType === ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS) {\n          return renderMultipleIncorrectIssueSuggestions(\n            issue.issueCustomizationArgs.state_name.value);\n        } else if (issueType === ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS) {\n          return renderCyclicTransitionsIssueSuggestions(issue);\n        }\n      },\n      resolveIssue: function(issue) {\n        IssuesBackendApiService.resolveIssue(\n          issue, explorationId, explorationVersion);\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
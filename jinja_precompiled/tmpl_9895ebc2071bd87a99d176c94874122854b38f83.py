from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/TutorCardDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the Tutor Card.\n */\n\noppia.animation(\'.conversation-skin-responses-animate-slide\', function() {\n  return {\n    removeClass: function(element, className, done) {\n      if (className !== \'ng-hide\') {\n        done();\n        return;\n      }\n      element.hide().slideDown(400, done);\n    },\n    addClass: function(element, className, done) {\n      if (className !== \'ng-hide\') {\n        done();\n        return;\n      }\n      element.slideUp(400, done);\n    }\n  };\n});\n\noppia.directive(\'tutorCard\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        onSubmitAnswer: \'&\',\n        isLearnAgainButton: \'&\',\n        onDismiss: \'&\',\n        startCardChangeAnimation: \'=\',\n        onChangeInteractionAnswerValidity: \'&\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_player/\' +\n        \'tutor_card_directive.html\'),\n      controller: [\n        \'$scope\', \'$timeout\', \'$rootScope\', \'$anchorScroll\', \'$location\',\n        \'ExplorationPlayerService\', \'PlayerPositionService\', \'UrlService\',\n        \'PlayerTranscriptService\', \'ExplorationPlayerStateService\',\n        \'WindowDimensionsService\', \'DeviceInfoService\', \'AudioPlayerService\',\n        \'AutogeneratedAudioPlayerService\', \'AudioPreloaderService\',\n        \'AudioTranslationManagerService\', \'TWO_CARD_THRESHOLD_PX\',\n        \'CONTENT_FOCUS_LABEL_PREFIX\', \'CONTINUE_BUTTON_FOCUS_LABEL\',\n        \'EVENT_ACTIVE_CARD_CHANGED\', \'EVENT_NEW_CARD_AVAILABLE\',\n        \'COMPONENT_NAME_CONTENT\', \'AUDIO_HIGHLIGHT_CSS_CLASS\',\n        function(\n            $scope, $timeout, $rootScope, $anchorScroll, $location,\n            ExplorationPlayerService, PlayerPositionService, UrlService,\n            PlayerTranscriptService, ExplorationPlayerStateService,\n            WindowDimensionsService, DeviceInfoService, AudioPlayerService,\n            AutogeneratedAudioPlayerService, AudioPreloaderService,\n            AudioTranslationManagerService, TWO_CARD_THRESHOLD_PX,\n            CONTENT_FOCUS_LABEL_PREFIX, CONTINUE_BUTTON_FOCUS_LABEL,\n            EVENT_ACTIVE_CARD_CHANGED, EVENT_NEW_CARD_AVAILABLE,\n            COMPONENT_NAME_CONTENT, AUDIO_HIGHLIGHT_CSS_CLASS) {\n          var updateActiveCard = function() {\n            var index = PlayerPositionService.getActiveCardIndex();\n            if (index === null) {\n              return;\n            }\n\n            $scope.arePreviousResponsesShown = false;\n            $scope.activeCard = PlayerTranscriptService.getCard(index);\n            $scope.interactionIsActive =\n              PlayerTranscriptService.isLastCard(index);\n            $scope.$on(EVENT_NEW_CARD_AVAILABLE, function(evt, data) {\n              $scope.interactionIsActive = false;\n            });\n            $scope.isInteractionInline = (\n              ExplorationPlayerStateService.isInteractionInline(\n                $scope.activeCard.stateName));\n            $scope.lastAnswer =\n              PlayerTranscriptService.getLastAnswerOnActiveCard(index);\n            $scope.interactionInstructions = (\n              ExplorationPlayerStateService.getInteractionInstructions(\n                $scope.activeCard.stateName));\n            $scope.contentAudioTranslations = (\n              ExplorationPlayerService.getStateContentAudioTranslations(\n                $scope.activeCard.stateName));\n            AudioTranslationManagerService.clearSecondaryAudioTranslations();\n            AudioTranslationManagerService.setContentAudioTranslations(\n              angular.copy($scope.contentAudioTranslations),\n              $scope.activeCard.contentHtml,\n              COMPONENT_NAME_CONTENT);\n            AudioPlayerService.stop();\n            AudioPreloaderService.clearMostRecentlyRequestedAudioFilename();\n            AutogeneratedAudioPlayerService.cancel();\n          };\n\n          $scope.getContentAudioHighlightClass = function() {\n            if (AudioTranslationManagerService\n              .getCurrentComponentName() ===\n              COMPONENT_NAME_CONTENT &&\n              (AudioPlayerService.isPlaying() ||\n              AutogeneratedAudioPlayerService.isPlaying())) {\n              return AUDIO_HIGHLIGHT_CSS_CLASS;\n            }\n          };\n\n          $scope.arePreviousResponsesShown = false;\n\n          $scope.waitingForOppiaFeedback = false;\n\n          $scope.windowDimensionsService = WindowDimensionsService;\n\n          $scope.isIframed = UrlService.isIframed();\n\n          $scope.OPPIA_AVATAR_IMAGE_URL = (\n            UrlInterpolationService.getStaticImageUrl(\n              \'/avatar/oppia_avatar_100px.svg\'));\n\n          $scope.profilePicture = UrlInterpolationService.getStaticImageUrl(\n            \'/avatar/user_blue_72px.png\');\n\n          ExplorationPlayerService.getUserProfileImage().then(function(result) {\n            $scope.profilePicture = result;\n          });\n\n          $scope.getContentFocusLabel = function(index) {\n            return CONTENT_FOCUS_LABEL_PREFIX + index;\n          };\n\n          $scope.toggleShowPreviousResponses = function() {\n            $scope.arePreviousResponsesShown =\n             !$scope.arePreviousResponsesShown;\n          };\n\n          $scope.isWindowNarrow = function() {\n            return WindowDimensionsService.isWindowNarrow();\n          };\n\n          $scope.canWindowShowTwoCards = function() {\n            return ExplorationPlayerService.canWindowShowTwoCards();\n          };\n\n          $scope.submitAnswer = function(answer, interactionRulesService) {\n            $scope.waitingForOppiaFeedback = true;\n            $scope.onSubmitAnswer({\n              answer: answer,\n              rulesService: interactionRulesService\n            });\n          };\n\n          $scope.setInteractionAnswerValidity = function(answerValidity) {\n            $scope.onChangeInteractionAnswerValidity({\n              answerValidity: answerValidity\n            });\n          };\n\n          $scope.isContentAudioTranslationAvailable = function() {\n            return ExplorationPlayerService.isContentAudioTranslationAvailable(\n              $scope.activeCard.stateName);\n          };\n\n          $scope.isCurrentCardAtEndOfTranscript = function() {\n            return PlayerTranscriptService.isLastCard(\n              PlayerPositionService.getActiveCardIndex());\n          };\n\n          $scope.isOnTerminalCard = function() {\n            return $scope.activeCard &&\n              ExplorationPlayerStateService.isStateTerminal(\n                $scope.activeCard.stateName);\n          };\n\n          $scope.getInputResponsePairId = function(index) {\n            return \'input-response-pair-\' + index;\n          };\n\n          $scope.$on(EVENT_ACTIVE_CARD_CHANGED, function() {\n            updateActiveCard();\n          });\n\n          $scope.$on(\'oppiaFeedbackAvailable\', function() {\n            $scope.waitingForOppiaFeedback = false;\n\n            // Auto scroll to the new feedback on mobile device.\n            if (DeviceInfoService.isMobileDevice()) {\n              var index = PlayerPositionService.getActiveCardIndex();\n              var activeCard = PlayerTranscriptService.getCard(index);\n              var latestFeedbackIndex = (\n                activeCard.inputResponsePairs.length - 1);\n              /* Reference: https://stackoverflow.com/questions/40134381\n                 $anchorScroll() without changing actual hash value of url works\n                 only when written inside a timeout of 0 ms. */\n              $anchorScroll.yOffset = 80;\n              $location.hash(\n                $scope.getInputResponsePairId(latestFeedbackIndex));\n              $anchorScroll();\n            }\n          });\n\n          updateActiveCard();\n        }\n      ]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
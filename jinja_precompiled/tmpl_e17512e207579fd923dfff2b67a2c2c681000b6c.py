from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/learner_dashboard/LearnerDashboardIconsDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for showing learner dashboard icons.\n */\n\noppia.directive(\'learnerDashboardIcons\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        getActivityType: \'&activityType\',\n        getActivityId: \'&activityId\',\n        getActivityTitle: \'&activityTitle\',\n        activityActive: \'=activityActive\',\n        isContainerNarrow: \'&containerIsNarrow\',\n        isAddToPlaylistIconShown: \'&addToPlaylistIconIsShown\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/domain/learner_dashboard/\' +\n        \'learner_dashboard_icons_directive.html\'),\n      controller: [\n        \'$scope\', \'LearnerDashboardIdsBackendApiService\',\n        \'LearnerDashboardActivityIdsObjectFactory\',\n        \'LearnerPlaylistService\',\n        function(\n            $scope, LearnerDashboardIdsBackendApiService,\n            LearnerDashboardActivityIdsObjectFactory,\n            LearnerPlaylistService) {\n          $scope.activityIsCurrentlyHoveredOver = true;\n          $scope.playlistTooltipIsEnabled = false;\n          $scope.enablePlaylistTooltip = function() {\n            $scope.playlistTooltipIsEnabled = true;\n          };\n\n          $scope.disablePlaylistTooltip = function() {\n            $scope.playlistTooltipIsEnabled = false;\n          };\n\n          $scope.$watch(\'activityActive\', function(value) {\n            $scope.activityIsCurrentlyHoveredOver = $scope.activityActive;\n          });\n\n          LearnerDashboardIdsBackendApiService.fetchLearnerDashboardIds().then(\n            function(response) {\n              $scope.learnerDashboardActivityIds = (\n                LearnerDashboardActivityIdsObjectFactory.createFromBackendDict(\n                  response.data.learner_dashboard_activity_ids));\n            }\n          );\n\n          $scope.setHoverState = function(hoverState) {\n            $scope.activityIsCurrentlyHoveredOver = hoverState;\n          };\n\n          $scope.canActivityBeAddedToLearnerPlaylist = function(activityId) {\n            if ($scope.learnerDashboardActivityIds) {\n              if ($scope.learnerDashboardActivityIds.includesActivity(\n                activityId)) {\n                return false;\n              } else {\n                if ($scope.isContainerNarrow()) {\n                  return true;\n                } else {\n                  return $scope.activityIsCurrentlyHoveredOver;\n                }\n              }\n            }\n          };\n\n          $scope.belongsToLearnerPlaylist = function() {\n            var activityType = $scope.getActivityType();\n            if ($scope.learnerDashboardActivityIds) {\n              /* eslint-disable max-len */\n              if (activityType === constants.ACTIVITY_TYPE_EXPLORATION) {\n                return (\n                  $scope.learnerDashboardActivityIds.belongsToExplorationPlaylist(\n                    $scope.getActivityId()));\n              } else if (activityType === constants.ACTIVITY_TYPE_COLLECTION) {\n                return (\n                  $scope.learnerDashboardActivityIds.belongsToCollectionPlaylist(\n                    $scope.getActivityId()));\n              }\n              /* eslint-enable max-len */\n            }\n          };\n\n          $scope.belongsToCompletedActivities = function() {\n            var activityType = $scope.getActivityType();\n            if ($scope.learnerDashboardActivityIds) {\n              /* eslint-disable max-len */\n              if (activityType === constants.ACTIVITY_TYPE_EXPLORATION) {\n                return (\n                  $scope.learnerDashboardActivityIds.belongsToCompletedExplorations(\n                    $scope.getActivityId()));\n              } else if (activityType === constants.ACTIVITY_TYPE_COLLECTION) {\n                return (\n                  $scope.learnerDashboardActivityIds.belongsToCompletedCollections(\n                    $scope.getActivityId()));\n              }\n              /* eslint-enable max-len */\n            }\n          };\n\n          $scope.belongsToIncompleteActivities = function() {\n            var activityType = $scope.getActivityType();\n            if ($scope.learnerDashboardActivityIds) {\n              /* eslint-disable max-len */\n              if (activityType === constants.ACTIVITY_TYPE_EXPLORATION) {\n                return (\n                  $scope.learnerDashboardActivityIds.belongsToIncompleteExplorations(\n                    $scope.getActivityId()));\n              } else if (activityType === constants.ACTIVITY_TYPE_COLLECTION) {\n                return (\n                  $scope.learnerDashboardActivityIds.belongsToIncompleteCollections(\n                    $scope.getActivityId()));\n              }\n              /* eslint-enable max-len */\n            }\n          };\n\n          $scope.addToLearnerPlaylist = function(activityId, activityType) {\n            var isSuccessfullyAdded = (\n              LearnerPlaylistService.addToLearnerPlaylist(\n                activityId, activityType));\n            if (isSuccessfullyAdded) {\n              if (activityType === constants.ACTIVITY_TYPE_EXPLORATION) {\n                /* eslint-disable max-len */\n                $scope.learnerDashboardActivityIds.addToExplorationLearnerPlaylist(\n                  activityId);\n                /* eslint-enable max-len */\n              } else if (activityType === constants.ACTIVITY_TYPE_COLLECTION) {\n                /* eslint-disable max-len */\n                $scope.learnerDashboardActivityIds.addToCollectionLearnerPlaylist(\n                  activityId);\n                /* eslint-enable max-len */\n              }\n              $scope.disablePlaylistTooltip();\n            }\n          };\n\n          $scope.removeFromLearnerPlaylist = function(\n              activityId, activityTitle, activityType) {\n            var isSuccessfullyRemoved = (\n              LearnerPlaylistService.removeFromLearnerPlaylist(\n                activityId, activityTitle, activityType,\n                $scope.learnerDashboardActivityIds));\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
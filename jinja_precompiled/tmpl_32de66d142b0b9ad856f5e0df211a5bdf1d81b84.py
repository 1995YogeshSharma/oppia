from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/ClassifierRulePanelDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the classifier panel.\n */\n\noppia.directive(\'classifierRulePanel\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        onTrainingDataDeletion: \'&\',\n        ruleInputs: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/\' +\n        \'classifier_panel_directive.html\'),\n      controller: [\n        \'$scope\', \'$uibModal\', \'ExplorationHtmlFormatterService\',\n        \'stateInteractionIdService\', \'stateCustomizationArgsService\',\n        \'TrainingModalService\',\n        function($scope, $uibModal, ExplorationHtmlFormatterService,\n            stateInteractionIdService, stateCustomizationArgsService,\n            TrainingModalService) {\n          $scope.trainingDataHtmlList = [];\n          var trainingData = $scope.ruleInputs.training_data;\n          for (var i = 0; i < trainingData.length; i++) {\n            $scope.trainingDataHtmlList.push(\n              ExplorationHtmlFormatterService.getShortAnswerHtml(\n                trainingData[i], stateInteractionIdService.savedMemento,\n                stateCustomizationArgsService.savedMemento));\n          }\n\n          $scope.openRetrainAnswerModal = function(trainingDataIndex) {\n            TrainingModalService.openTrainUnresolvedAnswerModal(\n              trainingData[trainingDataIndex], false);\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
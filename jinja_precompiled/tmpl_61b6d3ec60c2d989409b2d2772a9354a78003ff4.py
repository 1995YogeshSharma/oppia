from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/TopicObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for TopicObjectFactory.\n */\n\ndescribe(\'Topic object factory\', function() {\n  var TopicObjectFactory = null;\n  var _sampleTopic = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    TopicObjectFactory = $injector.get(\'TopicObjectFactory\');\n\n    var sampleTopicBackendObject = {\n      id: \'sample_topic_id\',\n      name: \'Topic name\',\n      description: \'Topic description\',\n      version: 1,\n      uncategorized_skill_ids: [\'skill_1\', \'skill_2\'],\n      canonical_story_ids: [\'story_1\', \'story_4\'],\n      additional_story_ids: [\'story_2\', \'story_3\'],\n      subtopics: [{\n        id: 1,\n        title: \'Title\',\n        skill_ids: [\'skill_3\']\n      }],\n      next_subtopic_id: 1,\n      language_code: \'en\'\n    };\n    var skillIdToDescriptionDict = {\n      skill_1: \'Description 1\',\n      skill_2: \'Description 2\',\n      skill_3: \'Description 3\'\n    };\n    _sampleTopic = TopicObjectFactory.create(\n      sampleTopicBackendObject, skillIdToDescriptionDict);\n  }));\n\n  it(\'should not find issues with a valid topic\', function() {\n    expect(_sampleTopic.validate()).toEqual([]);\n  });\n\n  it(\'should validate the topic\', function() {\n    _sampleTopic.setName(\'\');\n    _sampleTopic.addCanonicalStoryId(\'story_2\');\n    _sampleTopic.getSubtopics()[0].addSkill(\'skill_1\');\n\n    expect(_sampleTopic.validate()).toEqual([\n      \'Topic name should not be empty.\',\n      \'The story with id story_2 is present in both canonical \' +\n      \'and additional stories.\',\n      \'The skill with id skill_1 is duplicated in the topic\'\n    ]);\n  });\n\n  it(\'should be able to create an interstitial topic object\', function() {\n    var topic = TopicObjectFactory.createInterstitialTopic();\n    expect(topic.getId()).toEqual(null);\n    expect(topic.getName()).toEqual(\'Topic name loading\');\n    expect(topic.getDescription()).toEqual(\'Topic description loading\');\n    expect(topic.getLanguageCode()).toBe(\'en\');\n    expect(topic.getSubtopics()).toEqual([]);\n    expect(topic.getAdditionalStoryIds()).toEqual([]);\n    expect(topic.getCanonicalStoryIds()).toEqual([]);\n    expect(topic.getUncategorizedSkillSummaries()).toEqual([]);\n  });\n\n  it(\'should correctly remove the various array elements\', function() {\n    _sampleTopic.removeCanonicalStoryId(\'story_1\');\n    _sampleTopic.removeAdditionalStoryId(\'story_2\');\n    _sampleTopic.removeUncategorizedSkill(\'skill_1\');\n    expect(_sampleTopic.getAdditionalStoryIds()).toEqual([\'story_3\']);\n    expect(_sampleTopic.getCanonicalStoryIds()).toEqual([\'story_4\']);\n    expect(_sampleTopic.getUncategorizedSkillSummaries().length).toEqual(1);\n    expect(\n      _sampleTopic.getUncategorizedSkillSummaries()[0].getId()\n    ).toEqual(\'skill_2\');\n    expect(\n      _sampleTopic.getUncategorizedSkillSummaries()[0].getDescription()\n    ).toEqual(\'Description 2\');\n  });\n\n  it(\'should be able to copy from another topic\', function() {\n    var secondTopic = TopicObjectFactory.create({\n      id: \'topic_id_2\',\n      name: \'Another name\',\n      description: \'Another description\',\n      language_code: \'en\',\n      version: \'15\',\n      additional_story_ids: [\'story_10\'],\n      canonical_story_ids: [\'story_5\'],\n      uncategorized_skill_ids: [\'skill_2\', \'skill_3\'],\n      next_subtopic_id: 2,\n      subtopics: [{\n        id: 1,\n        title: \'Title\',\n        skill_ids: [\'skill_1\']\n      }]\n    }, {\n      skill_1: \'Description 1\',\n      skill_2: \'Description 2\',\n      skill_3: \'Description 3\'\n    });\n\n    expect(_sampleTopic).not.toBe(secondTopic);\n    expect(_sampleTopic).not.toEqual(secondTopic);\n\n    _sampleTopic.copyFromTopic(secondTopic);\n    expect(_sampleTopic).not.toBe(secondTopic);\n    expect(_sampleTopic).toEqual(secondTopic);\n  });\n});'

blocks = {}
debug_info = ''
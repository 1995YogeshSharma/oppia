from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/CodeNormalizerServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the Code Normalizer Service.\n */\n\ndescribe(\'Code Normalization\', function() {\n  beforeEach(module(\'oppia\'));\n\n  var cns = null;\n  beforeEach(inject(function($injector) {\n    cns = $injector.get(\'CodeNormalizerService\');\n  }));\n\n  it(\'should not modify contents of code\', function() {\n    expect(cns.getNormalizedCode(\n      \'def x():\\n\' +\n      \'    y = 345\'\n    )).toBe(\n      \'def x():\\n\' +\n      \'    y = 345\'\n    );\n  });\n\n  it(\'should convert indentation to 4 spaces, remove trailing whitespace \' +\n      \'and empty lines\', function() {\n    expect(cns.getNormalizedCode(\n      \'def x():         \\n\' +\n      \'    \\n\' +\n      \'  y = 345\\n\' +\n      \'            \\n\' +\n      \'       \'\n    )).toBe(\n      \'def x():\\n\' +\n      \'    y = 345\'\n    );\n  });\n\n  it(\'should remove full-line comments, but not comments in the middle \' +\n     \'of a line\', function() {\n    expect(cns.getNormalizedCode(\n      \'# This is a comment.\\n\' +\n      \'  # This is a comment with some spaces before it.\\n\' +\n      \'def x():   # And a comment with some code before it.\\n\' +\n      \'  y = \\\'#string with hashes#\\\'\'\n    )).toBe(\n      \'def x(): # And a comment with some code before it.\\n\' +\n      \'    y = \\\'#string with hashes#\\\'\'\n    );\n  });\n\n  it(\'should handle complex indentation\', function() {\n    expect(cns.getNormalizedCode(\n      \'abcdefg\\n\' +\n      \'    hij\\n\' +\n      \'              ppppp\\n\' +\n      \'x\\n\' +\n      \'  abc\\n\' +\n      \'  abc\\n\' +\n      \'    bcd\\n\' +\n      \'  cde\\n\' +\n      \'              xxxxx\\n\' +\n      \'  y\\n\' +\n      \' z\'\n    )).toBe(\n      \'abcdefg\\n\' +\n      \'    hij\\n\' +\n      \'        ppppp\\n\' +\n      \'x\\n\' +\n      \'    abc\\n\' +\n      \'    abc\\n\' +\n      \'        bcd\\n\' +\n      \'    cde\\n\' +\n      \'        xxxxx\\n\' +\n      \'    y\\n\' +\n      \'z\'\n    );\n  });\n\n  it(\'should handle shortfall lines\', function() {\n    expect(cns.getNormalizedCode(\n      \'abcdefg\\n\' +\n      \'    hij\\n\' +\n      \'              ppppp\\n\' +\n      \'      x\\n\' +\n      \'  abc\\n\' +\n      \'    bcd\\n\' +\n      \'  cde\'\n    )).toBe(\n      \'abcdefg\\n\' +\n      \'    hij\\n\' +\n      \'        ppppp\\n\' +\n      \'    x\\n\' +\n      \'abc\\n\' +\n      \'    bcd\\n\' +\n      \'cde\'\n    );\n  });\n\n  it(\'should normalize multiple spaces within a line\', function() {\n    expect(cns.getNormalizedCode(\n      \'abcdefg\\n\' +\n      \'    hij    klm\\n\' +\n      \'    ab "cde fgh"\\n\'\n    )).toBe(\n      \'abcdefg\\n\' +\n      \'    hij klm\\n\' +\n      \'    ab "cde fgh"\'\n    );\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/ReadOnlyCollectionBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to retrieve read only information\n * about collections from the backend.\n */\n\n// TODO(bhenning): For preview mode, this service should be replaced by a\n// separate CollectionDataService implementation which returns a local copy of\n// the collection instead. This file should not be included on the page in that\n// scenario.\noppia.factory(\'ReadOnlyCollectionBackendApiService\', [\n  \'$http\', \'$q\', \'COLLECTION_DATA_URL_TEMPLATE\', \'UrlInterpolationService\',\n  function($http, $q, COLLECTION_DATA_URL_TEMPLATE, UrlInterpolationService) {\n    // Maps previously loaded collections to their IDs.\n    var _collectionCache = [];\n\n    var _fetchCollection = function(\n        collectionId, successCallback, errorCallback) {\n      var collectionDataUrl = UrlInterpolationService.interpolateUrl(\n        COLLECTION_DATA_URL_TEMPLATE, {\n          collection_id: collectionId\n        });\n\n      $http.get(collectionDataUrl).then(function(response) {\n        var collection = angular.copy(response.data.collection);\n        if (successCallback) {\n          successCallback(collection);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _isCached = function(collectionId) {\n      return _collectionCache.hasOwnProperty(collectionId);\n    };\n\n    return {\n      /**\n       * Retrieves a collection from the backend given a collection ID. This\n       * returns a promise object that allows a success and rejection callbacks\n       * to be registered. If the collection is successfully loaded and a\n       * success callback function is provided to the promise object, the\n       * success callback is called with the collection passed in as a\n       * parameter. If something goes wrong while trying to fetch the\n       * collection, the rejection callback is called instead, if present. The\n       * rejection callback function is passed the error that occurred and the\n       * collection ID.\n       */\n      fetchCollection: function(collectionId) {\n        return $q(function(resolve, reject) {\n          _fetchCollection(collectionId, resolve, reject);\n        });\n      },\n\n      /**\n       * Behaves in the exact same way as fetchCollection (including callback\n       * behavior and returning a promise object), except this function will\n       * attempt to see whether the given collection has already been loaded. If\n       * it has not yet been loaded, it will fetch the collection from the\n       * backend. If it successfully retrieves the collection from the backend,\n       * it will store it in the cache to avoid requests from the backend in\n       * further function calls.\n       */\n      loadCollection: function(collectionId) {\n        return $q(function(resolve, reject) {\n          if (_isCached(collectionId)) {\n            if (resolve) {\n              resolve(angular.copy(_collectionCache[collectionId]));\n            }\n          } else {\n            _fetchCollection(collectionId, function(collection) {\n              // Save the fetched collection to avoid future fetches.\n              _collectionCache[collectionId] = collection;\n              if (resolve) {\n                resolve(angular.copy(collection));\n              }\n            }, reject);\n          }\n        });\n      },\n\n      /**\n       * Returns whether the given collection is stored within the local data\n       * cache or if it needs to be retrieved from the backend upon a laod.\n       */\n      isCached: function(collectionId) {\n        return _isCached(collectionId);\n      },\n\n      /**\n       * Replaces the current collection in the cache given by the specified\n       * collection ID with a new collection object.\n       */\n      cacheCollection: function(collectionId, collection) {\n        _collectionCache[collectionId] = angular.copy(collection);\n      },\n\n      /**\n       * Clears the local collection data cache, forcing all future loads to\n       * re-request the previously loaded collections from the backend.\n       */\n      clearCollectionCache: function() {\n        _collectionCache = [];\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
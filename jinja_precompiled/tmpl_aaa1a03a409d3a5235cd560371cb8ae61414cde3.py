from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ParamMetadataObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of ParamMetadata\n * domain objects.\n */\n\noppia.factory(\'ParamMetadataObjectFactory\', [\n  \'PARAM_ACTION_GET\', \'PARAM_ACTION_SET\',\n  function(PARAM_ACTION_GET, PARAM_ACTION_SET) {\n    /**\n     * @private @constructor\n     * Provide metadata when a parameter is changed by a GET or SET action\n     * @param {String} action - set or get\n     * @param {String} paramName - parameter\'s name\n     * @param {String} source - location where the parameter was defined\n     * e.g. answer, content, feedback or param_changes (changing value of param)\n     * @param {String} sourceInd - index of this parameter in a set of changes\n     */\n    var ParamMetadata = function(action, paramName, source, sourceInd) {\n      this.action = action;\n      this.paramName = paramName;\n      this.source = source;\n      this.sourceInd = sourceInd;\n    };\n\n    /**\n     * Metadata about the SET action of a parameter\n     * @param {String} paramName - parameter\'s name\n     * @param {String} source - location where the parameter was defined\n     * e.g. answer, content, feedback or param_changes (changing value of param)\n     * @param {String} sourceInd - index of this parameter in a set of changes\n     * @returns {ParamMetadata} - A new ParamMetadata instance\n     */\n    ParamMetadata.createWithSetAction = function(paramName, source, sourceInd) {\n      return new ParamMetadata(PARAM_ACTION_SET, paramName, source, sourceInd);\n    };\n\n    /**\n     * Metadata about the GET action of a parameter\n     * @param {String} paramName - parameter\'s name\n     * @param {String} source - location where the parameter was defined\n     * e.g. answer, content, feedback or param_changes (changing value of param)\n     * @param {String} sourceInd - index of this parameter in a set of changes\n     * @returns {ParamMetadata} - A new ParamMetadata instance\n     */\n    ParamMetadata.createWithGetAction = function(paramName, source, sourceInd) {\n      return new ParamMetadata(PARAM_ACTION_GET, paramName, source, sourceInd);\n    };\n\n    return ParamMetadata;\n  }]);'

blocks = {}
debug_info = ''
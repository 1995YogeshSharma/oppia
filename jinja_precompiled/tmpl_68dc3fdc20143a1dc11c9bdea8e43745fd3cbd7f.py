from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/AudioTranslationLanguageServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the audio translation language service.\n */\n\ndescribe(\'Audio translation language service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  var atls;\n  beforeEach(inject(function($injector) {\n    atls = $injector.get(\'AudioTranslationLanguageService\');\n  }));\n\n  it(\'should properly initialize the current audio language when \' +\n     \'a preferred language is set\', function() {\n    var allAudioLanguageCodesInExploration = [\'hi-en\', \'en\'];\n    var preferredLanguageCode = \'hi-en\';\n    var explorationLanguageCode = \'hi\';\n    atls.init(allAudioLanguageCodesInExploration, preferredLanguageCode,\n      explorationLanguageCode);\n    expect(atls.getCurrentAudioLanguageCode()).toEqual(\'hi-en\');\n    atls.clearCurrentAudioLanguageCode();\n\n    allAudioLanguageCodesInExploration = [\'hi-en\', \'en\'];\n    preferredLanguageCode = \'en\';\n    explorationLanguageCode = \'hi\';\n    atls.init(allAudioLanguageCodesInExploration, preferredLanguageCode,\n      explorationLanguageCode);\n    expect(atls.getCurrentAudioLanguageCode()).toEqual(\'en\');\n    atls.clearCurrentAudioLanguageCode();\n\n    allAudioLanguageCodesInExploration = [\'hi-en\'];\n    preferredLanguageCode = \'en\';\n    explorationLanguageCode = \'hi\';\n    atls.init([\'hi-en\'], preferredLanguageCode,\n      explorationLanguageCode);\n    expect(atls.getCurrentAudioLanguageCode()).toEqual(\'hi-en\');\n  });\n\n  it(\'should initialize the current audio language when \' +\n     \'no preferred language is set and the exploration contains an audio \' +\n     \'language that is related to the exploration language\', function() {\n    var allAudioLanguageCodesInExploration = [\'hi-en\', \'en\'];\n    var preferredLanguageCode = null;\n    var explorationLanguageCode = \'hi\';\n    atls.init(allAudioLanguageCodesInExploration, preferredLanguageCode,\n      explorationLanguageCode);\n    expect(atls.getCurrentAudioLanguageCode()).toEqual(\'hi-en\');\n  });\n\n  it(\'should initialize the current audio language to the most \' +\n     \'relevant language when multiple audio languages are related \' +\n     \'to the exploration language\', function() {\n    var allAudioLanguageCodesInExploration = [\'hi-en\', \'en\'];\n    var preferredLanguageCode = null;\n    var explorationLanguageCode = \'en\';\n    atls.init(allAudioLanguageCodesInExploration, preferredLanguageCode,\n      explorationLanguageCode);\n    expect(atls.getCurrentAudioLanguageCode()).toEqual(\'en\');\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/EditableCollectionBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to send changes to a collection to the backend.\n */\n\n// TODO(bhenning): I think that this might be better merged with the\n// CollectionBackendApiService. However, that violates the principle of a\n// backend API service being available for exactly one URL. To fix this, the\n// backend controller could support both get and put and be pulled out of the\n// collection learner and moved into its own controller. This is a new pattern\n// for the backend, but it makes sense based on the usage of the get HTTP\n// request by both the learner and editor views. This would result in one\n// backend controller (file and class) for handling retrieving and changing\n// collection data, as well as one frontend service for interfacing with it.\n// Discuss and decide whether this is a good approach and then remove this TODO\n// after deciding and acting upon the decision (which would mean implementing\n// it if it\'s agreed upon).\noppia.factory(\'EditableCollectionBackendApiService\', [\n  \'$http\', \'$q\', \'COLLECTION_DATA_URL_TEMPLATE\',\n  \'EDITABLE_COLLECTION_DATA_URL_TEMPLATE\', \'UrlInterpolationService\',\n  \'ReadOnlyCollectionBackendApiService\',\n  function($http, $q, COLLECTION_DATA_URL_TEMPLATE,\n      EDITABLE_COLLECTION_DATA_URL_TEMPLATE, UrlInterpolationService,\n      ReadOnlyCollectionBackendApiService) {\n    var _fetchCollection = function(\n        collectionId, successCallback, errorCallback) {\n      var collectionDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_COLLECTION_DATA_URL_TEMPLATE, {\n          collection_id: collectionId\n        });\n\n      $http.get(collectionDataUrl).then(function(response) {\n        var collection = angular.copy(response.data.collection);\n        if (successCallback) {\n          successCallback(collection);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _updateCollection = function(\n        collectionId, collectionVersion, commitMessage, changeList,\n        successCallback, errorCallback) {\n      var editableCollectionDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_COLLECTION_DATA_URL_TEMPLATE, {\n          collection_id: collectionId\n        });\n\n      var putData = {\n        version: collectionVersion,\n        commit_message: commitMessage,\n        change_list: changeList\n      };\n      $http.put(editableCollectionDataUrl, putData).then(function(response) {\n        // The returned data is an updated collection dict.\n        var collection = angular.copy(response.data.collection);\n\n        // Update the ReadOnlyCollectionBackendApiService\'s cache with the new\n        // collection.\n        ReadOnlyCollectionBackendApiService.cacheCollection(\n          collectionId, collection);\n\n        if (successCallback) {\n          successCallback(collection);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    return {\n      fetchCollection: function(collectionId) {\n        return $q(function(resolve, reject) {\n          _fetchCollection(collectionId, resolve, reject);\n        });\n      },\n\n      /**\n       * Updates a collection in the backend with the provided collection ID.\n       * The changes only apply to the collection of the given version and the\n       * request to update the collection will fail if the provided collection\n       * version is older than the current version stored in the backend. Both\n       * the changes and the message to associate with those changes are used\n       * to commit a change to the collection. The new collection is passed to\n       * the success callback, if one is provided to the returned promise\n       * object. Errors are passed to the error callback, if one is provided.\n       * Finally, if the update is successful, the returned collection will be\n       * cached within the CollectionBackendApiService to ensure the cache is\n       * not out-of-date with any updates made by this backend API service.\n       */\n      updateCollection: function(\n          collectionId, collectionVersion, commitMessage, changeList) {\n        return $q(function(resolve, reject) {\n          _updateCollection(\n            collectionId, collectionVersion, commitMessage, changeList,\n            resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/statistics/PlaythroughObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of Playthrough\n *     domain objects.\n */\n\noppia.factory(\'PlaythroughObjectFactory\', [\n  \'LearnerActionObjectFactory\', function(LearnerActionObjectFactory) {\n    /**\n     * @constructor\n     * @param {string} playthroughId - ID of a playthrough.\n     * @param {string} expId - ID of an exploration.\n     * @param {number} expVersion - Version of an exploration.\n     * @param {string} issueType - type of an issue.\n     * @param {Object.<string, *>} issueCustomizationArgs - customization dict\n     *   for an issue.\n     * @param {LearnerAction[]} actions - list of learner actions.\n     */\n    var Playthrough = function(\n        playthroughId, expId, expVersion, issueType, issueCustomizationArgs,\n        actions) {\n      /** @type {string} */\n      this.playthroughId = playthroughId;\n      /** @type {string} */\n      this.expId = expId;\n      /** @type {number} */\n      this.expVersion = expVersion;\n      /** @type {string} */\n      this.issueType = issueType;\n      /** @type {Object.<string, *>} */\n      this.issueCustomizationArgs = issueCustomizationArgs;\n      /** @type {LearnerAction[]} */\n      this.actions = actions;\n    };\n\n    /**\n     * @param {string} playthroughId - ID of a playthrough.\n     * @param {string} expId - ID of an exploration.\n     * @param {number} expVersion - Version of an exploration.\n     * @param {string} issueType - type of an issue.\n     * @param {Object.<string, *>} issueCustomizationArgs - customization dict\n     *   for an issue.\n     * @param {LearnerAction[]} actions - list of learner actions.\n     * @returns {Playthrough}\n     */\n    Playthrough.createNew = function(\n        playthroughId, expId, expVersion, issueType, issueCustomizationArgs,\n        actions) {\n      return new Playthrough(\n        playthroughId, expId, expVersion, issueType, issueCustomizationArgs,\n        actions);\n    };\n\n    /**\n     * @typedef PlaythroughBackendDict\n     * @property {string} playthroughId - ID of a playthrough.\n     * @property {string} expId - ID of an exploration.\n     * @property {number} expVersion - Version of an exploration.\n     * @property {string} issueType - type of an issue.\n     * @property {Object.<string, *>} issueCustomizationArgs - customization\n     *   dict for an issue.\n     * @property {LearnerAction[]} actions - list of learner actions.\n     */\n    /**\n     * @typedef\n     * @param {PlaythroughBackendDict} playthroughBackendDict\n     * @returns {Playthrough}\n     */\n    Playthrough.createFromBackendDict = function(playthroughBackendDict) {\n      var actions = playthroughBackendDict.actions.map(\n        LearnerActionObjectFactory.createFromBackendDict);\n\n      return new Playthrough(\n        playthroughBackendDict.playthrough_id, playthroughBackendDict.exp_id,\n        playthroughBackendDict.exp_version, playthroughBackendDict.issue_type,\n        playthroughBackendDict.issue_customization_args, actions);\n    };\n\n    /** @returns {PlaythroughBackendDict} */\n    Playthrough.prototype.toBackendDict = function() {\n      var actionDicts = this.actions.map(function(action) {\n        return action.toBackendDict();\n      });\n      return {\n        id: this.playthroughId,\n        exp_id: this.expId,\n        exp_version: this.expVersion,\n        issue_type: this.issueType,\n        issue_customization_args: this.issueCustomizationArgs,\n        actions: actionDicts\n      };\n    };\n\n    return Playthrough;\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/StateTopAnswersStatsServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for domain object which holds the list of top answer\n * statistics for a particular state.\n */\n\nvar joC = jasmine.objectContaining;\n\ndescribe(\'StateTopAnswersStatsService\', function() {\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    this.stass = $injector.get(\'StateTopAnswersStatsService\');\n    this.ess = $injector.get(\'ExplorationStatesService\');\n\n    this.ess.init({\n      Hola: {\n        content: \'\',\n        param_changes: [],\n        interaction: {\n          answer_groups: [{\n            rule_specs: [{rule_type: \'Contains\', inputs: {x: \'hola\'}}],\n            outcome: {\n              dest: \'Me Llamo\',\n              feedback: {html: \'buen trabajo!\'},\n              labelled_as_correct: true\n            }\n          }],\n          default_outcome: {\n            dest: \'Hola\',\n            feedback: {html: \'try again!\'},\n            labelled_as_correct: false\n          },\n          hints: [],\n          id: \'TextInput\',\n        },\n        classifier_model_id: 0,\n        content_ids_to_audio_translations: {}\n      }\n    });\n\n    spyOn($injector.get(\'ContextService\'), \'getExplorationId\')\n      .and.returnValue(\'7\');\n  }));\n\n  describe(\'.isInitialized\', function() {\n    it(\'begins uninitialized\', function() {\n      expect(this.stass.isInitialized()).toBe(false);\n    });\n\n    it(\'is true after call to .init\', function() {\n      this.stass.init({answers: {}});\n\n      expect(this.stass.isInitialized()).toBe(true);\n    });\n  });\n\n  describe(\'.init\', function() {\n    it(\'correctly identifies unaddressed issues\', function() {\n      this.stass.init({\n        answers: {\n          Hola: [\n            {answer: \'hola\', frequency: 7},\n            {answer: \'adios\', frequency: 4},\n            {answer: \'que?\', frequency: 2},\n          ]\n        }\n      });\n\n      var stateStats = this.stass.getStateStats(\'Hola\');\n      expect(stateStats).toContain(joC({answer: \'hola\', isAddressed: true}));\n      expect(stateStats).toContain(joC({answer: \'adios\', isAddressed: false}));\n      expect(stateStats).toContain(joC({answer: \'que?\', isAddressed: false}));\n    });\n\n    it(\'maintains frequency in order\', function() {\n      this.stass.init({\n        answers: {\n          Hola: [\n            {answer: \'hola\', frequency: 7},\n            {answer: \'adios\', frequency: 4},\n            {answer: \'que?\', frequency: 2},\n          ]\n        }\n      });\n\n      expect(this.stass.getStateStats(\'Hola\')).toEqual([\n        joC({answer: \'hola\', frequency: 7}),\n        joC({answer: \'adios\', frequency: 4}),\n        joC({answer: \'que?\', frequency: 2}),\n      ]);\n    });\n\n    it(\'throws when fetching stats about non-existent states\', function() {\n      expect(function() {\n        this.stass.getStateStats(\'Me Llamo\');\n      }).toThrow();\n      expect(function() {\n        this.stass.getUnresolvedStateStats(\'Me Llamo\');\n      }).toThrow();\n    });\n\n    it(\'registers handlers to ExplorationStatesService\', function() {\n      var expectedRegistrationFunctions = [\n        spyOn(this.ess, \'registerOnStateAddedCallback\'),\n        spyOn(this.ess, \'registerOnStateDeletedCallback\'),\n        spyOn(this.ess, \'registerOnStateRenamedCallback\'),\n        spyOn(this.ess, \'registerOnStateAnswerGroupsSavedCallback\')\n      ];\n\n      this.stass.init({answers: {}});\n\n      expectedRegistrationFunctions.forEach(function(registrationFunction) {\n        expect(registrationFunction).toHaveBeenCalled();\n      });\n    });\n\n    it(\'does not register duplicate handlers if called again\', function() {\n      var expectedRegistrationFunctions = [\n        spyOn(this.ess, \'registerOnStateAddedCallback\'),\n        spyOn(this.ess, \'registerOnStateDeletedCallback\'),\n        spyOn(this.ess, \'registerOnStateRenamedCallback\'),\n        spyOn(this.ess, \'registerOnStateAnswerGroupsSavedCallback\')\n      ];\n\n      this.stass.init({answers: {}});\n      // Second call should not add more callbacks.\n      this.stass.init({answers: {}});\n\n      expectedRegistrationFunctions.forEach(function(registrationFunction) {\n        expect(registrationFunction.calls.count()).toEqual(1);\n      });\n    });\n  });\n\n  describe(\'.hasStateStats\', function() {\n    it(\'is false when uninitialized\', function() {\n      expect(this.stass.isInitialized()).toBe(false);\n      expect(this.stass.hasStateStats(\'Hola\')).toBe(false);\n    });\n\n    it(\'is true when the state contains answers\', function() {\n      this.stass.init({answers: {Hola: [{answer: \'hola\', frequency: 3}]}});\n\n      expect(this.stass.hasStateStats(\'Hola\')).toBe(true);\n    });\n\n    it(\'is true even when the state contains no answers\', function() {\n      this.stass.init({answers: {Hola: []}});\n\n      expect(this.stass.hasStateStats(\'Hola\')).toBe(true);\n    });\n\n    it(\'is false when the state does not exist\', function() {\n      this.stass.init({answers: {Hola: [{answer: \'hola\', frequency: 3}]}});\n\n      expect(this.stass.hasStateStats(\'Me Llamo\')).toBe(false);\n    });\n  });\n\n  describe(\'.getStateNamesWithStats\', function() {\n    it(\'only returns state names that have stats\', function() {\n      this.stass.init({answers: {Hola: [{answer: \'hola\', frequency: 3}]}});\n\n      expect(this.stass.getStateNamesWithStats()).toEqual([\'Hola\']);\n    });\n  });\n\n  describe(\'Cache Maintenance\', function() {\n    beforeEach(inject(function($injector) {\n      // ChangeListService will need its calls mocked out since it isn\'t\n      // configured correctly in, or interesting to, the tests of this block.\n      this.cls = $injector.get(\'ChangeListService\');\n    }));\n    beforeEach(function() {\n      this.stass.init({\n        answers: {\n          Hola: [\n            {answer: \'hola\', frequency: 7},\n            {answer: \'adios\', frequency: 4},\n            {answer: \'que?\', frequency: 2},\n          ]\n        }\n      });\n    });\n\n    describe(\'State Addition\', function() {\n      beforeEach(function() {\n        // Disable ChangeListService.addState.\n        spyOn(this.cls, \'addState\');\n      });\n\n      it(\'creates a new empty list of stats for the new state\', function() {\n        expect(function() {\n          this.stass.getStateStats(\'Me Llamo\');\n        }).toThrow();\n        expect(function() {\n          this.stass.getUnresolvedStateStats(\'Me Llamo\');\n        }).toThrow();\n\n        this.ess.addState(\'Me Llamo\');\n\n        expect(this.stass.getStateStats(\'Me Llamo\')).toEqual([]);\n        expect(this.stass.getUnresolvedStateStats(\'Me Llamo\')).toEqual([]);\n      });\n    });\n\n    describe(\'State Deletion\', function() {\n      beforeEach(function() {\n        // Disable ChangeListService.deleteState.\n        spyOn(this.cls, \'deleteState\');\n      });\n\n      it(\'throws an error after deleting the stats\', function() {\n        this.ess.deleteState(\'Hola\');\n\n        expect(function() {\n          this.stass.getStateStats(\'Hola\');\n        }).toThrow();\n        expect(function() {\n          this.stass.getUnresolvedStateStats(\'Hola\');\n        }).toThrow();\n      });\n    });\n\n    describe(\'State Renaming\', function() {\n      beforeEach(function() {\n        // Disable ChangeListService.renameState.\n        spyOn(this.cls, \'renameState\');\n      });\n\n      it(\'only recognizes the renamed state\', function() {\n        var oldStats = this.stass.getStateStats(\'Hola\');\n        var oldUnresolvedStats = this.stass.getUnresolvedStateStats(\'Hola\');\n\n        this.ess.renameState(\'Hola\', \'Bonjour\');\n\n        expect(this.stass.getStateStats(\'Bonjour\')).toBe(oldStats);\n        expect(this.stass.getUnresolvedStateStats(\'Bonjour\'))\n          .toBe(oldUnresolvedStats);\n\n        expect(function() {\n          this.stass.getStateStats(\'Hola\');\n        }).toThrow();\n        expect(function() {\n          this.stass.getUnresolvedStateStats(\'Hola\');\n        }).toThrow();\n      });\n    });\n\n    describe(\'State Answer Groups Changes\', function() {\n      beforeEach(function() {\n        // Disable ChangeListService.editStateProperty.\n        spyOn(this.cls, \'editStateProperty\');\n      });\n      beforeEach(inject(function($injector) {\n        this.rof = $injector.get(\'RuleObjectFactory\');\n      }));\n\n      it(\'recognizes newly resolved answers\', function() {\n        expect(this.stass.getUnresolvedStateStats(\'Hola\'))\n          .toContain(joC({answer: \'adios\'}));\n\n        var newAnswerGroups = angular.copy(\n          this.ess.getState(\'Hola\').interaction.answerGroups);\n        newAnswerGroups[0].rules = [\n          this.rof.createNew(\'Contains\', {x: \'adios\'})\n        ];\n        this.ess.saveInteractionAnswerGroups(\'Hola\', newAnswerGroups);\n\n        expect(this.stass.getUnresolvedStateStats(\'Hola\'))\n          .not.toContain(joC({answer: \'adios\'}));\n      });\n\n      it(\'recognizes newly unresolved answers\', function() {\n        expect(this.stass.getUnresolvedStateStats(\'Hola\'))\n          .not.toContain(joC({answer: \'hola\'}));\n\n        var newAnswerGroups = angular.copy(\n          this.ess.getState(\'Hola\').interaction.answerGroups);\n        newAnswerGroups[0].rules = [\n          this.rof.createNew(\'Contains\', {x: \'bonjour\'})\n        ];\n        this.ess.saveInteractionAnswerGroups(\'Hola\', newAnswerGroups);\n\n        expect(this.stass.getUnresolvedStateStats(\'Hola\'))\n          .toContain(joC({answer: \'hola\'}));\n      });\n    });\n  });\n});'

blocks = {}
debug_info = ''
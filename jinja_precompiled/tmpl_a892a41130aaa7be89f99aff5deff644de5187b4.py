from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/question_editor/QuestionEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the questions editor directive.\n */\noppia.constant(\'INTERACTION_SPECS\', GLOBALS.INTERACTION_SPECS);\noppia.constant(\'EVENT_PROGRESS_NAV_SUBMITTED\', \'progress-nav-submit\');\n\noppia.directive(\'questionEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        getQuestionId: \'&questionId\',\n        getMisconceptions: \'&misconceptions\',\n        canEditQuestion: \'&\',\n        questionStateData: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/question_editor/question_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'AlertsService\', \'QuestionCreationService\',\n        \'EditabilityService\', \'EditableQuestionBackendApiService\',\n        \'QuestionObjectFactory\', \'EVENT_QUESTION_SUMMARIES_INITIALIZED\',\n        \'StateContentService\', \'StateContentIdsToAudioTranslationsService\',\n        \'INTERACTION_SPECS\', \'StateEditorService\', \'ResponsesService\',\n        \'SolutionValidityService\',\n        function(\n            $scope, $rootScope, AlertsService, QuestionCreationService,\n            EditabilityService, EditableQuestionBackendApiService,\n            QuestionObjectFactory, EVENT_QUESTION_SUMMARIES_INITIALIZED,\n            StateContentService, StateContentIdsToAudioTranslationsService,\n            INTERACTION_SPECS, StateEditorService, ResponsesService,\n            SolutionValidityService) {\n          if ($scope.canEditQuestion()) {\n            EditabilityService.markEditable();\n          } else {\n            EditabilityService.markNotEditable();\n          }\n          StateEditorService.setActiveStateName(\'question\');\n          StateEditorService.setMisconceptions($scope.getMisconceptions());\n          $scope.oppiaBlackImgUrl = UrlInterpolationService.getStaticImageUrl(\n            \'/avatar/oppia_avatar_100px.svg\');\n\n          $scope.interactionIsShown = false;\n\n          $scope.stateEditorInitialized = false;\n\n          $scope.getStateContentPlaceholder = function() {\n            return (\n              \'You can speak to the learner here, then ask them a question.\');\n          };\n\n          $scope.navigateToState = function() {\n            return;\n          };\n\n          $scope.addState = function() {\n            return;\n          };\n\n          $scope.recomputeGraph = function() {\n            return;\n          };\n\n          $scope.refreshWarnings = function() {\n            return;\n          };\n\n          var _init = function() {\n            StateEditorService.setStateNames([]);\n            StateEditorService.setCorrectnessFeedbackEnabled(true);\n            StateEditorService.setInQuestionMode(true);\n            SolutionValidityService.init([\'question\']);\n            var stateData = $scope.questionStateData;\n            stateData.interaction.defaultOutcome.setDestination(null);\n            if (stateData) {\n              $rootScope.$broadcast(\'stateEditorInitialized\', stateData);\n\n              if (stateData.content.getHtml() || stateData.interaction.id) {\n                $scope.interactionIsShown = true;\n              }\n\n              $rootScope.loadingMessage = \'\';\n            }\n            $scope.stateEditorInitialized = true;\n          };\n\n          $scope.saveStateContent = function(displayedValue) {\n            // Show the interaction when the text content is saved, even if no\n            // content is entered.\n            $scope.questionStateData.content = angular.copy(displayedValue);\n            $scope.interactionIsShown = true;\n          };\n\n          $scope.saveInteractionId = function(displayedValue) {\n            StateEditorService.setInteractionId(angular.copy(displayedValue));\n          };\n\n          $scope.saveInteractionAnswerGroups = function(newAnswerGroups) {\n            StateEditorService.setInteractionAnswerGroups(\n              angular.copy(newAnswerGroups));\n          };\n\n          $scope.saveInteractionDefaultOutcome = function(newOutcome) {\n            StateEditorService.setInteractionDefaultOutcome(\n              angular.copy(newOutcome));\n          };\n\n          $scope.saveInteractionCustomizationArgs = function(displayedValue) {\n            StateEditorService.setInteractionCustomizationArgs(\n              angular.copy(displayedValue));\n          };\n\n          $scope.saveSolution = function(displayedValue) {\n            StateEditorService.setInteractionSolution(\n              angular.copy(displayedValue));\n          };\n\n          $scope.saveHints = function(displayedValue) {\n            StateEditorService.setInteractionHints(\n              angular.copy(displayedValue));\n          };\n\n          $scope.saveContentIdsToAudioTranslations = function(displayedValue) {\n            $scope.questionStateData.contentIdsToAudioTranslations =\n              angular.copy(displayedValue);\n          };\n\n          $scope.$on(\'stateEditorDirectiveInitialized\', function(evt) {\n            _init();\n          });\n\n          $scope.$on(\'onInteractionIdChanged\', function(evt) {\n            _init();\n          });\n\n          _init();\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
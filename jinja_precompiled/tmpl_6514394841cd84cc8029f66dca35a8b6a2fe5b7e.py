from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/StoryObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating instances of frontend\n * story domain objects.\n */\n\noppia.factory(\'StoryObjectFactory\', [\'StoryContentsObjectFactory\',\n  function(StoryContentsObjectFactory) {\n    var Story = function(\n        id, title, description, notes, storyContents, languageCode, version) {\n      this._id = id;\n      this._title = title;\n      this._description = description;\n      this._notes = notes;\n      this._storyContents = storyContents;\n      this._languageCode = languageCode;\n      this._version = version;\n    };\n\n    // Instance methods\n\n    Story.prototype.getId = function() {\n      return this._id;\n    };\n\n    Story.prototype.getTitle = function() {\n      return this._title;\n    };\n\n    Story.prototype.setTitle = function(title) {\n      this._title = title;\n    };\n\n    Story.prototype.getDescription = function() {\n      return this._description;\n    };\n\n    Story.prototype.setDescription = function(description) {\n      this._description = description;\n    };\n\n    Story.prototype.getNotes = function() {\n      return this._notes;\n    };\n\n    Story.prototype.setNotes = function(notes) {\n      this._notes = notes;\n    };\n\n    Story.prototype.getLanguageCode = function() {\n      return this._languageCode;\n    };\n\n    Story.prototype.setLanguageCode = function(languageCode) {\n      this._languageCode = languageCode;\n    };\n\n    Story.prototype.getVersion = function() {\n      return this._version;\n    };\n\n    Story.prototype.getStoryContents = function() {\n      return this._storyContents;\n    };\n\n    Story.prototype.validate = function() {\n      var issues = [];\n      if (this._title === \'\') {\n        issues.push(\'Story title should not be empty\');\n      }\n      issues = issues.concat(this._storyContents.validate());\n      return issues;\n    };\n\n    // Reassigns all values within this story to match the existing\n    // story. This is performed as a deep copy such that none of the\n    // internal, bindable objects are changed within this story.\n    Story.prototype.copyFromStory = function(otherStory) {\n      this._id = otherStory.getId();\n      this.setTitle(otherStory.getTitle());\n      this.setDescription(otherStory.getDescription());\n      this.setNotes(otherStory.getNotes());\n      this.setLanguageCode(otherStory.getLanguageCode());\n      this._version = otherStory.getVersion();\n      this._storyContents = otherStory.getStoryContents();\n    };\n\n    // Static class methods. Note that "this" is not available in static\n    // contexts. This function takes a JSON object which represents a backend\n    // story python dict.\n    Story.createFromBackendDict = function(storyBackendDict) {\n      return new Story(\n        storyBackendDict.id, storyBackendDict.title,\n        storyBackendDict.description, storyBackendDict.notes,\n        StoryContentsObjectFactory.createFromBackendDict(\n          storyBackendDict.story_contents),\n        storyBackendDict.language_code,\n        storyBackendDict.version\n      );\n    };\n\n    // Create an interstitial story that would be displayed in the editor until\n    // the actual story is fetched from the backend.\n    Story.createInterstitialStory = function() {\n      return new Story(\n        null, \'Story title loading\', \'Story description loading\',\n        \'Story notes loading\', null, \'en\', 1\n      );\n    };\n    return Story;\n  }\n]);'

blocks = {}
debug_info = ''
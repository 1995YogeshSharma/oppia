from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/EditorStateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A service that maintains a record of which state\n * in the exploration is currently active.\n */\n\noppia.factory(\'StateEditorService\', [\n  \'$log\', \'SolutionValidityService\',\n  function(\n      $log, SolutionValidityService) {\n    var activeStateName = null;\n    var stateNames = [];\n    var correctnessFeedbackEnabled = null;\n    var inQuestionMode = null;\n    // Currently, the only place where this is used in the state editor\n    // is in solution verification. So, once the interaction is set in this\n    // service, the given solutions would be automatically verified for the set\n    // interaction.\n    var interaction = null;\n\n    return {\n      getActiveStateName: function() {\n        return activeStateName;\n      },\n      setActiveStateName: function(newActiveStateName) {\n        if (newActiveStateName === \'\' || newActiveStateName === null) {\n          $log.error(\'Invalid active state name: \' + newActiveStateName);\n          return;\n        }\n        activeStateName = newActiveStateName;\n      },\n      setInteraction: function(newInteraction) {\n        interaction = newInteraction;\n      },\n      setInteractionId: function(newId) {\n        interaction.setId(newId);\n      },\n      setInteractionAnswerGroups: function(newAnswerGroups) {\n        interaction.setAnswerGroups(newAnswerGroups);\n      },\n      setInteractionDefaultOutcome: function(newOutcome) {\n        interaction.setDefaultOutcome(newOutcome);\n      },\n      setInteractionCustomizationArgs: function(newArgs) {\n        interaction.setCustomizationArgs(newArgs);\n      },\n      setInteractionSolution: function(solution) {\n        interaction.setSolution(solution);\n      },\n      setInteractionHints: function(hints) {\n        interaction.setHints(hints);\n      },\n      getInteraction: function() {\n        return interaction;\n      },\n      setInQuestionMode: function(newModeValue) {\n        inQuestionMode = newModeValue;\n      },\n      isInQuestionMode: function() {\n        return inQuestionMode;\n      },\n      setCorrectnessFeedbackEnabled: function(newCorrectnessFeedbackEnabled) {\n        correctnessFeedbackEnabled = newCorrectnessFeedbackEnabled;\n      },\n      getCorrectnessFeedbackEnabled: function() {\n        return correctnessFeedbackEnabled;\n      },\n      setStateNames: function(newStateNames) {\n        stateNames = newStateNames;\n      },\n      getStateNames: function() {\n        return stateNames;\n      },\n      isCurrentSolutionValid: function() {\n        return SolutionValidityService.isSolutionValid(activeStateName);\n      },\n      deleteCurrentSolutionValidity: function() {\n        SolutionValidityService.deleteSolutionValidity(activeStateName);\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
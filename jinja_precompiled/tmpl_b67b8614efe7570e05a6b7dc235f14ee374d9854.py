from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/StateObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of State\n * domain objects.\n */\n\noppia.factory(\'StateObjectFactory\', [\n  \'AnswerGroupObjectFactory\', \'InteractionObjectFactory\',\n  \'SubtitledHtmlObjectFactory\', \'ParamChangesObjectFactory\',\n  function(AnswerGroupObjectFactory, InteractionObjectFactory,\n      SubtitledHtmlObjectFactory, ParamChangesObjectFactory) {\n    var State = function(name, classifierModelId, content, interaction,\n        paramChanges) {\n      this.name = name;\n      this.classifierModelId = classifierModelId;\n      this.content = content;\n      this.interaction = interaction;\n      this.paramChanges = paramChanges;\n    };\n\n    // Instance methods.\n    State.prototype.toBackendDict = function() {\n      return {\n        content: this.content.toBackendDict(),\n        classifier_model_id: this.classifierModelId,\n        interaction: this.interaction.toBackendDict(),\n        param_changes: this.paramChanges.map(function(paramChange) {\n          return paramChange.toBackendDict();\n        })\n      };\n    };\n\n    // Static class methods. Note that "this" is not available in\n    // static contexts.\n    State.createFromBackendDict = function(stateName, stateDict) {\n      return new State(\n        stateName,\n        stateDict.classifier_model_id,\n        SubtitledHtmlObjectFactory.createFromBackendDict(stateDict.content),\n        InteractionObjectFactory.createFromBackendDict(stateDict.interaction),\n        ParamChangesObjectFactory.createFromBackendList(\n          stateDict.param_changes));\n    };\n\n    return State;\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/translation_tab/TranslationStatusService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A service that provides the translation status of state and\n * its components.\n */\n\noppia.factory(\'TranslationStatusService\', [\n  \'StateContentIdsToAudioTranslationsService\', \'ExplorationStatesService\',\n  \'TranslationLanguageService\', \'INTERACTION_SPECS\', function(\n      StateContentIdsToAudioTranslationsService, ExplorationStatesService,\n      TranslationLanguageService, INTERACTION_SPECS) {\n    var NEEDS_UPDATE_MESSAGE = [\'Audio needs update!\'];\n    var ALL_AUDIO_AVAILABLE_COLOR = \'#16A765\';\n    var FEW_AUDIO_AVAILABLE_COLOR = \'#E9B330\';\n    var NO_AUDIO_AVAILABLE_COLOR = \'#D14836\';\n\n    var langCode = TranslationLanguageService.getActiveLanguageCode();\n    var stateNeedsUpdateWarnings = {};\n    var stateWiseStatusColor = {};\n    var explorationAudioRequiredCount = 0;\n    var explorationAudioNotAvailableCount = 0;\n    var contentIdsToAudioTranslations =\n        StateContentIdsToAudioTranslationsService.displayed;\n    var _computeAllStatesStatus = function() {\n      langCode = TranslationLanguageService.getActiveLanguageCode();\n      stateNeedsUpdateWarnings = {};\n      stateWiseStatusColor = {};\n      explorationAudioRequiredCount = 0;\n      explorationAudioNotAvailableCount = 0;\n      if (ExplorationStatesService.isInitialized()) {\n        ExplorationStatesService.getStateNames().forEach(function(stateName) {\n          var noTranslationCount = 0;\n          var contentIdsToAudioTranslations = ExplorationStatesService\n            .getContentIdsToAudioTranslationsMemento(stateName);\n          var allContentId = contentIdsToAudioTranslations.getAllContentId();\n          var interactionId = ExplorationStatesService\n            .getInteractionIdMemento(stateName);\n          // This is used to prevent users from adding unwanted hints audio, as\n          // of now we do not delete interaction.hints when a user deletes\n          // interaction, so these hints audio are not counted in checking\n          // status of a state.\n          if (!interactionId ||\n            INTERACTION_SPECS[interactionId].is_linear ||\n            INTERACTION_SPECS[interactionId].is_terminal) {\n            allContentId = [\'content\'];\n          }\n          explorationAudioRequiredCount += allContentId.length;\n          allContentId.forEach(function(contentId) {\n            availableTranslationLanguageCodes = contentIdsToAudioTranslations\n              .getAudioLanguageCodes(contentId);\n            if (availableTranslationLanguageCodes.indexOf(langCode) > -1) {\n              var audioTranslation = contentIdsToAudioTranslations\n                .getAudioTranslation(contentId, langCode);\n              if (audioTranslation.needsUpdate) {\n                stateNeedsUpdateWarnings[stateName] = NEEDS_UPDATE_MESSAGE;\n              }\n            } else {\n              noTranslationCount++;\n            }\n          });\n          explorationAudioNotAvailableCount += noTranslationCount;\n          if (noTranslationCount === 0) {\n            stateWiseStatusColor[stateName] = ALL_AUDIO_AVAILABLE_COLOR;\n          } else if (noTranslationCount === allContentId.length) {\n            stateWiseStatusColor[stateName] = NO_AUDIO_AVAILABLE_COLOR;\n          } else {\n            stateWiseStatusColor[stateName] = FEW_AUDIO_AVAILABLE_COLOR;\n          }\n        });\n      }\n    };\n\n    var _getContentIdListRelatedToComponent = function(componentName) {\n      contentIdsToAudioTranslations =\n        StateContentIdsToAudioTranslationsService.displayed;\n      if (contentIdsToAudioTranslations) {\n        var contentIdList = [];\n        if (componentName === \'solution\' || componentName === \'content\') {\n          contentIdList.push(componentName);\n        } else {\n          var searchKey = componentName + \'_\';\n          contentIdsToAudioTranslations.getAllContentId().forEach(\n            function(contentId) {\n              if (contentId.indexOf(searchKey) > -1) {\n                contentIdList.push(contentId);\n              }\n            }\n          );\n          if (componentName === \'feedback\') {\n            contentIdList.push(\'default_outcome\');\n          }\n        }\n        return contentIdList;\n      } else {\n        return null;\n      }\n    };\n\n    var _getActiveStateComponentStatus = function(componentName) {\n      var contentIdList = _getContentIdListRelatedToComponent(componentName);\n      var availableAudioCount = 0;\n      if (contentIdList) {\n        contentIdList.forEach(function(contentId) {\n          if (contentIdsToAudioTranslations\n            .getAudioLanguageCodes(contentId).indexOf(langCode) > -1) {\n            availableAudioCount++;\n          }\n        });\n        if (contentIdList.length === availableAudioCount) {\n          return ALL_AUDIO_AVAILABLE_COLOR;\n        } else if (availableAudioCount === 0) {\n          return NO_AUDIO_AVAILABLE_COLOR;\n        } else {\n          return FEW_AUDIO_AVAILABLE_COLOR;\n        }\n      }\n    };\n\n    var _getActiveStateComponentNeedsUpdateStatus = function(componentName) {\n      var contentIdList = _getContentIdListRelatedToComponent(componentName);\n      var contentId = null;\n      if (contentIdList) {\n        for (index in contentIdList) {\n          contentId = contentIdList[index];\n          if (contentIdsToAudioTranslations\n            .getAudioLanguageCodes(contentId).indexOf(langCode) > -1) {\n            var audioTranslation = contentIdsToAudioTranslations\n              .getAudioTranslation(contentId, langCode);\n            if (audioTranslation.needsUpdate) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    };\n\n    var _getActiveStateContentIdStatusColor = function(contentId) {\n      contentIdsToAudioTranslations =\n        StateContentIdsToAudioTranslationsService.displayed;\n      if (contentIdsToAudioTranslations) {\n        if (contentIdsToAudioTranslations\n          .getAudioLanguageCodes(contentId).indexOf(langCode) > -1) {\n          return ALL_AUDIO_AVAILABLE_COLOR;\n        } else {\n          return NO_AUDIO_AVAILABLE_COLOR;\n        }\n      }\n    };\n\n    var _getActiveStateContentIdNeedsUpdateStatus = function(contentId) {\n      contentIdsToAudioTranslations =\n        StateContentIdsToAudioTranslationsService.displayed;\n      if (contentIdsToAudioTranslations) {\n        if (contentIdsToAudioTranslations\n          .getAudioLanguageCodes(contentId).indexOf(langCode) > -1) {\n          var audioTranslation = contentIdsToAudioTranslations\n            .getAudioTranslation(contentId, langCode);\n          if (audioTranslation.needsUpdate) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    };\n\n    return {\n      getAllStatesNeedUpdatewarning: function() {\n        return stateNeedsUpdateWarnings;\n      },\n      getExplorationAudioRequiredCount: function() {\n        return explorationAudioRequiredCount;\n      },\n      getExplorationAudioNotAvailableCount: function() {\n        return explorationAudioNotAvailableCount;\n      },\n      getAllStateStatusColors: function() {\n        _computeAllStatesStatus();\n        return stateWiseStatusColor;\n      },\n      getActiveStateComponentStatusColor: function(componentName) {\n        return _getActiveStateComponentStatus(componentName);\n      },\n      getActiveStateComponentNeedsUpdateStatus: function(componentName) {\n        return _getActiveStateComponentNeedsUpdateStatus(componentName);\n      },\n      getActiveStateContentIdStatusColor: function(contentId) {\n        return _getActiveStateContentIdStatusColor(contentId);\n      },\n      getActiveStateContentIdNeedsUpdateStatus: function(contentId) {\n        return _getActiveStateContentIdNeedsUpdateStatus(contentId);\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
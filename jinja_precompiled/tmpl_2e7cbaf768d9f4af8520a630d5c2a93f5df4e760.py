from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/ExplorationStatesServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for ExplorationStatesService.\n */\n\ndescribe(\'ExplorationStatesService\', function() {\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    this.ess = $injector.get(\'ExplorationStatesService\');\n\n    spyOn($injector.get(\'ContextService\'), \'getExplorationId\')\n      .and.returnValue(\'7\');\n  }));\n\n  describe(\'Callback Registration\', function() {\n    beforeEach(function() {\n      this.ess.init({\n        Hola: {\n          content: \'\',\n          param_changes: [],\n          interaction: {\n            answer_groups: [{\n              rule_specs: [{rule_type: \'Contains\', inputs: {x: \'hola\'}}],\n              outcome: {\n                dest: \'Me Llamo\',\n                feedback: {html: \'buen trabajo!\'},\n                labelled_as_correct: true\n              }\n            }],\n            default_outcome: {\n              dest: \'Hola\',\n              feedback: {html: \'try again!\'},\n              labelled_as_correct: false\n            },\n            hints: [],\n            id: \'TextInput\',\n          },\n          classifier_model_id: 0,\n          content_ids_to_audio_translations: {}\n        }\n      });\n    });\n    beforeEach(inject(function($injector) {\n      // ChangeListService will need its calls mocked out since it isn\'t\n      // configured correctly in, or interesting to, the tests of this block.\n      this.cls = $injector.get(\'ChangeListService\');\n    }));\n\n    describe(\'.registerOnStateAddedCallback\', function() {\n      beforeEach(function() {\n        spyOn(this.cls, \'addState\');\n      });\n\n      it(\'callsback when a new state is added\', function() {\n        var callbackSpy = jasmine.createSpy(\'callback\');\n\n        this.ess.registerOnStateAddedCallback(callbackSpy);\n        this.ess.addState(\'Me Llamo\');\n\n        expect(callbackSpy).toHaveBeenCalledWith(\'Me Llamo\');\n      });\n    });\n\n    describe(\'.registerOnStateDeletedCallback\', function() {\n      var STATE_NAME = \'Hola\';\n\n      beforeEach(inject(function($injector) {\n        spyOn(this.cls, \'deleteState\');\n\n        var modalArgs = {\n          resolve: {\n            deleteStateName: function() {\n              return STATE_NAME;\n            }\n          }\n        };\n\n        // When ExplorationStatesService tries to show the confirm-delete\n        // modal, have it immediately confirm.\n        spyOn($injector.get(\'$uibModal\'), \'open\').and.callFake(\n          function(modalArgs) {\n            return {\n              result: Promise.resolve(STATE_NAME)\n            };\n          }\n        );\n      }));\n\n      it(\'callsback when a state is deleted\', function(done) {\n        var callbackSpy = jasmine.createSpy(\'callback\');\n\n        this.ess.registerOnStateDeletedCallback(callbackSpy);\n\n        this.ess.deleteState(STATE_NAME).then(function() {\n          expect(callbackSpy).toHaveBeenCalledWith(STATE_NAME);\n          done();\n        });\n      });\n    });\n\n    describe(\'.registerOnStateRenamedCallback\', function() {\n      beforeEach(function() {\n        spyOn(this.cls, \'renameState\');\n      });\n\n      it(\'callsback when a state is renamed\', function() {\n        var callbackSpy = jasmine.createSpy(\'callback\');\n\n        this.ess.registerOnStateRenamedCallback(callbackSpy);\n        this.ess.renameState(\'Hola\', \'Bonjour\');\n\n        expect(callbackSpy).toHaveBeenCalledWith(\'Hola\', \'Bonjour\');\n      });\n    });\n\n    describe(\'.registerOnStateAnswerGroupsSaved\', function() {\n      beforeEach(function() {\n        spyOn(this.cls, \'editStateProperty\');\n      });\n\n      it(\'callsback when answer groups of a state are saved\', function() {\n        var callbackSpy = jasmine.createSpy(\'callback\');\n\n        this.ess.registerOnStateAnswerGroupsSavedCallback(callbackSpy);\n        this.ess.saveInteractionAnswerGroups(\'Hola\', []);\n\n        expect(callbackSpy).toHaveBeenCalledWith(\'Hola\');\n      });\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/RouterService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service that handles routing for the exploration editor page.\n */\n\noppia.factory(\'RouterService\', [\n  \'$rootScope\', \'$location\', \'$window\', \'$timeout\', \'$interval\',\n  \'ExplorationInitStateNameService\', \'EditorStateService\',\n  \'ExplorationStatesService\',\n  function(\n      $rootScope, $location, $window, $timeout, $interval,\n      ExplorationInitStateNameService, EditorStateService,\n      ExplorationStatesService) {\n    var MAIN_TAB = \'main\';\n    var PREVIEW_TAB = \'preview\';\n    var SETTINGS_TAB = \'settings\';\n    var STATS_TAB = \'stats\';\n    var HISTORY_TAB = \'history\';\n    var FEEDBACK_TAB = \'feedback\';\n\n    var SLUG_GUI = \'gui\';\n    var SLUG_PREVIEW = \'preview\';\n\n    var _tabs = {\n      active: MAIN_TAB\n    };\n\n    // When the URL path changes, reroute to the appropriate tab in the\n    // exploration editor page.\n    $rootScope.$watch(function() {\n      return $location.path();\n    }, function(newPath, oldPath) {\n      if (newPath === \'\') {\n        $location.path(oldPath);\n        return;\n      }\n\n      if (!oldPath) {\n        // This can happen when clicking on links whose href is "#".\n        return;\n      }\n\n      // TODO(oparry): Determine whether this is necessary, since\n      // _savePendingChanges() is called by each of the navigateTo... functions\n      $rootScope.$broadcast(\'externalSave\');\n\n      if (newPath.indexOf(\'/preview/\') === 0) {\n        _tabs.active = PREVIEW_TAB;\n        _doNavigationWithState(newPath, SLUG_PREVIEW);\n      } else if (newPath === \'/settings\') {\n        _tabs.active = SETTINGS_TAB;\n        $rootScope.$broadcast(\'refreshSettingsTab\');\n      } else if (newPath === \'/stats\') {\n        _tabs.active = STATS_TAB;\n        $rootScope.$broadcast(\'refreshStatisticsTab\');\n      } else if (newPath === \'/history\') {\n        // TODO(sll): Do this on-hover rather than on-click.\n        $rootScope.$broadcast(\'refreshVersionHistory\', {\n          forceRefresh: false\n        });\n        _tabs.active = HISTORY_TAB;\n      } else if (newPath === \'/feedback\') {\n        _tabs.active = FEEDBACK_TAB;\n      } else if (newPath.indexOf(\'/gui/\') === 0) {\n        _tabs.active = MAIN_TAB;\n        _doNavigationWithState(newPath, SLUG_GUI);\n      } else {\n        if (ExplorationInitStateNameService.savedMemento) {\n          $location.path(\n            \'/gui/\' + ExplorationInitStateNameService.savedMemento);\n        }\n      }\n    });\n\n    var _doNavigationWithState = function(path, pathType) {\n      var pathBase = \'/\' + pathType + \'/\';\n      var putativeStateName = path.substring(pathBase.length);\n      var waitForStatesToLoad = $interval(function() {\n        if (ExplorationStatesService.isInitialized()) {\n          $interval.cancel(waitForStatesToLoad);\n          if (ExplorationStatesService.hasState(putativeStateName)) {\n            EditorStateService.setActiveStateName(putativeStateName);\n            if (pathType === SLUG_GUI) {\n              $rootScope.$broadcast(\'refreshStateEditor\');\n            }\n            // TODO(sll): Fire an event to center the graph, in the case\n            // where another tab is loaded first and then the user switches\n            // to the editor tab. We used to redraw the graph completely but\n            // this is taking lots of time and is probably not worth it.\n          } else {\n            $location.path(pathBase +\n                           ExplorationInitStateNameService.savedMemento);\n          }\n        }\n      }, 300);\n    };\n\n    var _savePendingChanges = function() {\n      try {\n        $rootScope.$broadcast(\'externalSave\');\n      } catch (e) {\n        // Sometimes, AngularJS throws a "Cannot read property $$nextSibling of\n        // null" error. To get around this we must use $apply().\n        $rootScope.$apply(function() {\n          $rootScope.$broadcast(\'externalSave\');\n        });\n      }\n    };\n\n    var _getCurrentStateFromLocationPath = function() {\n      if ($location.path().indexOf(\'/gui/\') !== -1) {\n        return $location.path().substring(\'/gui/\'.length);\n      } else {\n        return null;\n      }\n    };\n\n    var _actuallyNavigate = function(pathType, newStateName) {\n      if (pathType !== SLUG_GUI && pathType !== SLUG_PREVIEW) {\n        return;\n      }\n      if (newStateName) {\n        EditorStateService.setActiveStateName(newStateName);\n      }\n      $location.path(\'/\' + pathType + \'/\' +\n                     EditorStateService.getActiveStateName());\n      $window.scrollTo(0, 0);\n    };\n\n    var RouterService = {\n      savePendingChanges: function() {\n        _savePendingChanges();\n      },\n      getTabStatuses: function() {\n        return _tabs;\n      },\n      isLocationSetToNonStateEditorTab: function() {\n        var currentPath = $location.path();\n        return (\n          currentPath === \'/preview\' || currentPath === \'/stats\' ||\n          currentPath === \'/settings\' || currentPath === \'/history\' ||\n          currentPath === \'/feedback\');\n      },\n      getCurrentStateFromLocationPath: function() {\n        return _getCurrentStateFromLocationPath();\n      },\n      navigateToMainTab: function(stateName) {\n        _savePendingChanges();\n        if (_getCurrentStateFromLocationPath() === stateName) {\n          return;\n        }\n\n        if (_tabs.active === MAIN_TAB) {\n          $(\'.oppia-editor-cards-container\').fadeOut(function() {\n            _actuallyNavigate(SLUG_GUI, stateName);\n            // We need to use $apply to update all our bindings. However we\n            // can\'t directly use $apply, as there is already another $apply in\n            // progress, the one which angular itself has called at the start.\n            // So we use $applyAsync to ensure that this $apply is called just\n            // after the previous $apply is finished executing. Refer to this\n            // link for more information -\n            // http://blog.theodybrothers.com/2015/08/getting-inside-angular-scopeapplyasync.html\n            $rootScope.$applyAsync();\n            $timeout(function() {\n              $(\'.oppia-editor-cards-container\').fadeIn();\n            }, 150);\n          });\n        } else {\n          _actuallyNavigate(SLUG_GUI, stateName);\n        }\n      },\n      navigateToPreviewTab: function() {\n        if (_tabs.active !== PREVIEW_TAB) {\n          _savePendingChanges();\n          _actuallyNavigate(SLUG_PREVIEW, null);\n        }\n      },\n      navigateToStatsTab: function() {\n        _savePendingChanges();\n        $location.path(\'/stats\');\n      },\n      navigateToSettingsTab: function() {\n        _savePendingChanges();\n        $location.path(\'/settings\');\n      },\n      navigateToHistoryTab: function() {\n        _savePendingChanges();\n        $location.path(\'/history\');\n      },\n      navigateToFeedbackTab: function() {\n        _savePendingChanges();\n        $location.path(\'/feedback\');\n      }\n    };\n\n    return RouterService;\n  }\n]);'

blocks = {}
debug_info = ''
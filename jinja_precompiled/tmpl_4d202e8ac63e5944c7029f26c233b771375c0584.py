from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/state_editor/StateEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the state editor directive.\n */\noppia.directive(\'stateEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        addState: \'=\',\n        getStateContentPlaceholder: \'&stateContentPlaceholder\',\n        isInteractionShown: \'&interactionIsShown\',\n        navigateToState: \'=\',\n        onSaveContentIdsToAudioTranslations: \'=\',\n        onSaveHints: \'=\',\n        onSaveInteractionAnswerGroups: \'=\',\n        onSaveInteractionId: \'=\',\n        onSaveInteractionCustomizationArgs: \'=\',\n        onSaveInteractionDefaultOutcome: \'=\',\n        onSaveSolution: \'=\',\n        onSaveStateContent: \'=\',\n        recomputeGraph: \'=\',\n        refreshWarnings: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/state_editor/state_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'INTERACTION_SPECS\', \'StateEditorService\',\n        \'StateContentService\', \'StateHintsService\', \'StateSolutionService\',\n        \'StateContentIdsToAudioTranslationsService\',\n        \'StateInteractionIdService\', \'StateCustomizationArgsService\',\n        function(\n            $scope, $rootScope, INTERACTION_SPECS, StateEditorService,\n            StateContentService, StateHintsService, StateSolutionService,\n            StateContentIdsToAudioTranslationsService,\n            StateInteractionIdService, StateCustomizationArgsService) {\n          $scope.oppiaBlackImgUrl = UrlInterpolationService.getStaticImageUrl(\n            \'/avatar/oppia_avatar_100px.svg\');\n          $scope.currentStateIsTerminal = false;\n          $scope.interactionIdIsSet = false;\n          $scope.servicesInitialized = false;\n          $scope.stateName = StateEditorService.getActiveStateName();\n          var updateInteractionVisibility = function(newInteractionId) {\n            $scope.interactionIdIsSet = Boolean(newInteractionId);\n            $scope.currentInteractionCanHaveSolution = Boolean(\n              $scope.interactionIdIsSet &&\n              INTERACTION_SPECS[newInteractionId].can_have_solution);\n            $scope.currentStateIsTerminal = Boolean(\n              $scope.interactionIdIsSet && INTERACTION_SPECS[\n                newInteractionId].is_terminal);\n          };\n\n          $scope.reinitializeEditor = function() {\n            $rootScope.$broadcast(\'stateEditorInitialized\', $scope.stateData);\n          };\n\n          $scope.$on(\'onInteractionIdChanged\', function(evt, newInteractionId) {\n            updateInteractionVisibility(newInteractionId);\n          });\n\n          $scope.$on(\'stateEditorInitialized\', function(evt, stateData) {\n            $scope.stateData = stateData;\n            $scope.stateName = StateEditorService.getActiveStateName();\n            StateEditorService.setInteraction(stateData.interaction);\n            StateContentService.init(\n              $scope.stateName, stateData.content);\n            StateContentIdsToAudioTranslationsService.init(\n              $scope.stateName,\n              stateData.contentIdsToAudioTranslations);\n            StateHintsService.init(\n              $scope.stateName, stateData.interaction.hints);\n            StateInteractionIdService.init(\n              $scope.stateName, stateData.interaction.id);\n            StateCustomizationArgsService.init(\n              $scope.stateName, stateData.interaction.customizationArgs);\n            StateSolutionService.init(\n              $scope.stateName, stateData.interaction.solution);\n            updateInteractionVisibility(stateData.interaction.id);\n            $scope.servicesInitialized = true;\n          });\n\n          $rootScope.$broadcast(\'stateEditorDirectiveInitialized\');\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
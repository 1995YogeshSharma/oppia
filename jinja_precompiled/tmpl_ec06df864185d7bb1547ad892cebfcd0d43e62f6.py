from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/statistics/ExplorationIssueObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of Exploration\n *     Issue domain objects.\n */\n\noppia.factory(\'ExplorationIssueObjectFactory\', [function() {\n  /**\n   * @constructor\n   * @param {string} issueType - type of an issue.\n   * @param {Object.<string, *>} issueCustomizationArgs - customization dict for\n   *   an issue.\n   * @param {string[]} playthroughIds - list of playthrough IDs.\n   * @param {number} schemaVersion - schema version of the class instance.\n   * @param {boolean} isValid - whether the issue is valid.\n   */\n  var ExplorationIssue = function(\n      issueType, issueCustomizationArgs, playthroughIds, schemaVersion,\n      isValid) {\n    /** @type {string} */\n    this.issueType = issueType;\n    /** @type {Object.<string, *>} */\n    this.issueCustomizationArgs = issueCustomizationArgs;\n    /** @type {string[]} */\n    this.playthroughIds = playthroughIds;\n    /** @type {number} */\n    this.schemaVersion = schemaVersion;\n    /** @type {boolean} */\n    this.isValid = isValid;\n  };\n\n  /**\n   * @typedef ExplorationIssueBackendDict\n   * @property {string} issueType - type of an issue.\n   * @property {Object.<string, *>} issueCustomizationArgs - customization dict\n   *   for an issue.\n   * @property {string[]} playthroughIds - list of playthrough IDs.\n   * @property {number} schemaVersion - schema version of the class instance.\n   * @property {boolean} isValid - whether the issue is valid.\n   */\n  /**\n   * @param {ExplorationIssueBackendDict} explorationIssueBackendDict\n   * @returns {ExplorationIssue}\n   */\n  ExplorationIssue.createFromBackendDict = function(\n      explorationIssueBackendDict) {\n    return new ExplorationIssue(\n      explorationIssueBackendDict.issue_type,\n      explorationIssueBackendDict.issue_customization_args,\n      explorationIssueBackendDict.playthrough_ids,\n      explorationIssueBackendDict.schema_version,\n      explorationIssueBackendDict.is_valid);\n  };\n\n  /**\n   * @returns {ExplorationIssueBackendDict}\n   */\n  ExplorationIssue.prototype.toBackendDict = function() {\n    return {\n      issue_type: this.issueType,\n      issue_customization_args: this.issueCustomizationArgs,\n      playthrough_ids: this.playthroughIds,\n      schema_version: this.schemaVersion,\n      is_valid: this.isValid\n    };\n  };\n\n  return ExplorationIssue;\n}]);'

blocks = {}
debug_info = ''
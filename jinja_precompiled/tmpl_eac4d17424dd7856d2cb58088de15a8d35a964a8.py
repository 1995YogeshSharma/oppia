from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/translation_tab/AudioTranslationBarDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the audio translation bar.\n */\n// Constant for audio recording time limit.\noppia.constant(\'RECORDING_TIME_LIMIT\', 300);\n\noppia.directive(\'audioTranslationBar\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        contentId: \'=\',\n        isTranslationTabBusy: \'=\'\n      },\n      link: function(scope, elm) {\n        scope.getRecorderController();\n\n        $(\'.oppia-translation-tab\').on(\'dragover\', function(evt) {\n          evt.preventDefault();\n          if (!scope.showDropArea) {\n            scope.showDropArea = true;\n            scope.$digest();\n          }\n          return false;\n        });\n\n        $(\'.oppia-main-body\').on(\'dragleave\', function(evt) {\n          evt.preventDefault();\n          if (evt.pageX === 0 || evt.pageY === 0) {\n            scope.showDropArea = false;\n            scope.$digest();\n          }\n          return false;\n        });\n\n        $(\'.oppia-translation-tab\').on(\'drop\', function(evt) {\n          evt.preventDefault();\n          if (evt.target.classList.contains(\'oppia-drop-area-message\')) {\n            files = evt.originalEvent.dataTransfer.files;\n            scope.openAddAudioTranslationModal(files);\n          }\n          scope.showDropArea = false;\n          scope.$digest();\n          return false;\n        });\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/translation_tab/\' +\n        \'audio_translation_bar_directive.html\'),\n      controller: [\n        \'$scope\', \'$filter\', \'$timeout\', \'$uibModal\', \'$rootScope\',\n        \'StateContentIdsToAudioTranslationsService\', \'IdGenerationService\',\n        \'AudioPlayerService\', \'TranslationLanguageService\', \'AlertsService\',\n        \'StateEditorService\', \'ExplorationStatesService\', \'EditabilityService\',\n        \'AssetsBackendApiService\', \'recorderService\', \'ContextService\',\n        \'RECORDING_TIME_LIMIT\',\n        function(\n            $scope, $filter, $timeout, $uibModal, $rootScope,\n            StateContentIdsToAudioTranslationsService, IdGenerationService,\n            AudioPlayerService, TranslationLanguageService, AlertsService,\n            StateEditorService, ExplorationStatesService, EditabilityService,\n            AssetsBackendApiService, recorderService, ContextService,\n            RECORDING_TIME_LIMIT) {\n          $scope.RECORDER_ID = \'recorderId\';\n          $scope.recordingTimeLimit = RECORDING_TIME_LIMIT;\n          $scope.audioBlob = null;\n          $scope.recorder = null;\n          $scope.unsupportedBrowser = false;\n          $scope.selectedRecording = false;\n          $scope.isAudioAvailable = false;\n          $scope.audioIsUpdating = false;\n          $scope.languageCode = null;\n          $scope.cannotRecord = false;\n          $scope.audioNeedsUpdate = false;\n          $scope.canTranslate = false;\n          $scope.showRecorderWarning = false;\n          $scope.audioLoadingIndicatorIsShown = false;\n          $scope.checkingMicrophonePermission = false;\n\n          var saveContentIdsToAudioTranslationChanges = function() {\n            StateContentIdsToAudioTranslationsService.saveDisplayedValue();\n            var stateName = StateEditorService.getActiveStateName();\n            var value = StateContentIdsToAudioTranslationsService.displayed;\n            ExplorationStatesService.saveContentIdsToAudioTranslations(\n              stateName, value);\n          };\n\n          var getAvailableAudio = function(contentId, languageCode) {\n            if ($scope.contentId) {\n              return StateContentIdsToAudioTranslationsService\n                .displayed.getAudioTranslation(contentId, languageCode);\n            }\n          };\n\n          var generateNewFilename = function() {\n            return $scope.contentId + \'-\' +\n              $scope.languageCode + \'-\' +\n              IdGenerationService.generateNewId() + \'.mp3\';\n          };\n\n          $scope.onRecordStart = function() {\n            $scope.showRecorderWarning = true;\n            $scope.isTranslationTabBusy = true;\n          };\n\n          $scope.onConversionComplete = function() {\n            $rootScope.loadingMessage = \'\';\n          };\n\n          var getTranslationTabBusyMessage = function() {\n            var message = \'\';\n            if ($scope.recorder.status.isRecording) {\n              message = \'You haven\\\'t finished recording. Please stop \' +\n                \'recording and either save or cancel the recording.\';\n            } else if ($scope.recorder.status.isConverting) {\n              message = \'It seems like recorded audio is still getting \' +\n                \'converted into mp3. Please wait until the audio has finished\' +\n                \' processing.\';\n            } else if ($scope.showRecorderWarning) {\n              message = \'You haven\\\'t saved your recording. Please save or \' +\n                \'cancel the recording.\';\n            }\n            return message;\n          };\n          var showPermissionAndStartRecording = function() {\n            $scope.checkingMicrophonePermission = true;\n            recorderService.showPermission({\n              onDenied: function() {\n                $scope.recordingPermissionDenied = true;\n                $scope.cannotRecord = true;\n                $scope.checkingMicrophonePermission = false;\n              },\n              onAllowed: function() {\n                $scope.recordingPermissionDenied = false;\n                $scope.cannotRecord = false;\n                $scope.recorder.startRecord();\n                $scope.selectedRecording = true;\n                $scope.checkingMicrophonePermission = false;\n              },\n              onClosed: function() {\n                $scope.recordingPermissionDenied = true;\n                $scope.cannotRecord = true;\n                $scope.checkingMicrophonePermission = false;\n              },\n            });\n          };\n\n          $scope.checkAndStartRecording = function() {\n            if (!$scope.recorder.isAvailable) {\n              $scope.unsupportedBrowser = true;\n              $scope.cannotRecord = true;\n            } else {\n              $scope.unsupportedBrowser = false;\n              showPermissionAndStartRecording();\n            }\n          };\n\n          $scope.toggleAudioNeedsUpdate = function() {\n            StateContentIdsToAudioTranslationsService.displayed\n              .toggleNeedsUpdateAttribute(\n                $scope.contentId, $scope.languageCode);\n            saveContentIdsToAudioTranslationChanges();\n            $scope.audioNeedsUpdate = !$scope.audioNeedsUpdate;\n          };\n\n          $scope.getRecorderController = function() {\n            $scope.recorder = recorderService.controller($scope.RECORDER_ID);\n          };\n\n          $scope.reRecord = function() {\n            $scope.initAudioBar();\n            $scope.selectedRecording = false;\n            showPermissionAndStartRecording();\n          };\n\n          $scope.cancelRecording = function() {\n            $scope.initAudioBar();\n            $scope.selectedRecording = false;\n            $scope.audioIsUpdating = false;\n            $scope.audioBlob = null;\n            $scope.showRecorderWarning = false;\n          };\n\n          $scope.updateAudio = function() {\n            AudioPlayerService.stop();\n            AudioPlayerService.clear();\n            $scope.audioBlob = null;\n            $scope.audioIsUpdating = true;\n            $scope.selectedRecording = false;\n            showPermissionAndStartRecording();\n          };\n\n          $scope.saveRecordedAudio = function() {\n            var filename = generateNewFilename();\n            var fileType = \'audio/mp3\';\n            var contentId = $scope.contentId;\n            var languageCode = $scope.languageCode;\n            var recordedAudioFile = new File(\n              [$scope.audioBlob], filename, {type: fileType});\n            $scope.showRecorderWarning = false;\n            AssetsBackendApiService.saveAudio(\n              ContextService.getExplorationId(), filename,\n              recordedAudioFile).then(function() {\n              if ($scope.audioIsUpdating) {\n                StateContentIdsToAudioTranslationsService.displayed\n                  .deleteAudioTranslation(contentId, languageCode);\n                $scope.audioIsUpdating = false;\n              }\n              StateContentIdsToAudioTranslationsService.displayed\n                .addAudioTranslation(contentId, languageCode,\n                  filename, recordedAudioFile.size);\n              saveContentIdsToAudioTranslationChanges();\n              AlertsService.addSuccessMessage(\n                \'Succesfuly uploaded recorded audio.\');\n              $scope.initAudioBar();\n            }, function(errorResponse) {\n              AlertsService.addWarning(errorResponse.error);\n              $scope.initAudioBar();\n            });\n          };\n\n          $scope.$on(\'externalSave\', function() {\n            if ($scope.recorder && $scope.recorder.status.isPlaying) {\n              $scope.recorder.playbackPause();\n            }\n            if (recorderService.getHandler()) {\n              recorderService.getHandler().clear();\n            }\n            AudioPlayerService.stop();\n            AudioPlayerService.clear();\n            $scope.audioBlob = null;\n          });\n\n          $scope.$watch(\'contentId\', function() {\n            $scope.initAudioBar();\n          });\n\n          $scope.$on(\'refreshAudioTranslationBar\', function() {\n            $scope.initAudioBar();\n          });\n\n          $scope.$on(\'showTranslationTabBusyModal\', function() {\n            $scope.openTranslationTabBusyModal();\n          });\n\n          $scope.openTranslationTabBusyModal = function() {\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/translation_tab/\' +\n                \'translation_tab_busy_modal_directive.html\'),\n              backdrop: true,\n              resolve: {\n                message: function() {\n                  return getTranslationTabBusyMessage();\n                }\n              },\n              controller: [\n                \'$scope\', \'$uibModalInstance\', \'message\',\n                function( $scope, $uibModalInstance, message) {\n                  $scope.busyMessage = message;\n                  $scope.gotIt = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                  };\n                }\n              ]\n            });\n          };\n\n          $scope.playPauseUploadedAudioTranslation = function(languageCode) {\n            if (!AudioPlayerService.isPlaying()) {\n              if (AudioPlayerService.isTrackLoaded()) {\n                AudioPlayerService.play();\n              } else {\n                loadAndPlayAudioTranslation();\n              }\n            } else {\n              AudioPlayerService.pause();\n            }\n          };\n\n\n          var isCached = function(audioTranslation) {\n            return AssetsBackendApiService.isCached(audioTranslation.filename);\n          };\n\n          $scope.getUploadedAudioTimer = function() {\n            if (AudioPlayerService.isTrackLoaded()) {\n              var currentTime = $filter(\'formatTimer\')(AudioPlayerService\n                .getCurrentTime());\n              var duration = $filter(\'formatTimer\')(AudioPlayerService\n                .getAudioDuration());\n              return currentTime + \' / \' + duration;\n            } else {\n              return \'--:-- / --:--\';\n            }\n          };\n\n          $scope.isPlayingUploadedAudio = function() {\n            return AudioPlayerService.isPlaying();\n          };\n\n          var loadAndPlayAudioTranslation = function() {\n            $scope.audioLoadingIndicatorIsShown = true;\n            var audioTranslation = getAvailableAudio(\n              $scope.contentId, $scope.languageCode);\n            if (audioTranslation) {\n              AudioPlayerService.load(audioTranslation.filename)\n                .then(function() {\n                  $scope.audioLoadingIndicatorIsShown = false;\n                  AudioPlayerService.play();\n                });\n            }\n          };\n\n          $scope.initAudioBar = function() {\n            // This stops angular-recorder when user navigate while recording.\n            if ($scope.recorder) {\n              if ($scope.recorder.status.isPlaying) {\n                $scope.recorder.playbackPause();\n              }\n              if ($scope.recorder.status.isRecording &&\n                $scope.showRecorderWarning) {\n                $scope.recorder.stopRecord();\n                $rootScope.loadingMessage = \'loading\';\n              }\n              if ($scope.recorder.status.isConverting) {\n                $rootScope.loadingMessage = \'loading\';\n              }\n              if (recorderService && recorderService.getHandler()) {\n                recorderService.getHandler().stop();\n                recorderService.getHandler().clear();\n              }\n            }\n            $scope.isTranslationTabBusy = false;\n            AudioPlayerService.stop();\n            AudioPlayerService.clear();\n            $scope.showRecorderWarning = false;\n            $scope.languageCode = TranslationLanguageService\n              .getActiveLanguageCode();\n            $scope.canTranslate = EditabilityService.isTranslatable();\n            var audioTranslationObject = getAvailableAudio(\n              $scope.contentId, $scope.languageCode);\n            if (audioTranslationObject) {\n              $scope.isAudioAvailable = true;\n              $scope.isLoadingAudio = true;\n              $scope.selectedRecording = false;\n              $scope.audioNeedsUpdate = audioTranslationObject.needsUpdate;\n            } else {\n              $scope.isAudioAvailable = false;\n              $scope.audioBlob = null;\n              $scope.selectedRecording = false;\n            }\n          };\n\n          $scope.track = {\n            progress: function(progressPercentage) {\n              if (angular.isDefined(progressPercentage)) {\n                AudioPlayerService.setProgress(progressPercentage / 100);\n              }\n              return AudioPlayerService.getProgress() * 100;\n            }\n          };\n\n          $scope.openDeleteAudioTranslationModal = function() {\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/translation_tab/\' +\n                \'delete_audio_translation_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\',\n                function( $scope, $uibModalInstance) {\n                  $scope.reallyDelete = function() {\n                    $uibModalInstance.close();\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                  };\n                }\n              ]\n            }).result.then(function(result) {\n              StateContentIdsToAudioTranslationsService.displayed\n                .deleteAudioTranslation($scope.contentId, $scope.languageCode);\n              saveContentIdsToAudioTranslationChanges();\n              $scope.initAudioBar();\n            });\n          };\n\n          $scope.openAddAudioTranslationModal = function(audioFile) {\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/translation_tab/\' +\n                \'add_audio_translation_modal_directive.html\'),\n              backdrop: \'static\',\n              resolve: {\n                audioFile: function() {\n                  return audioFile;\n                },\n                generatedFilename: function() {\n                  return generateNewFilename();\n                },\n                languageCode: function() {\n                  return $scope.languageCode;\n                },\n                isAudioAvailable: function() {\n                  return $scope.isAudioAvailable;\n                }\n              },\n              controller: [\n                \'$scope\', \'$uibModalInstance\', \'AlertsService\', \'languageCode\',\n                \'ContextService\', \'generatedFilename\', \'isAudioAvailable\',\n                \'audioFile\',\n                function(\n                    $scope, $uibModalInstance, AlertsService, languageCode,\n                    ContextService, generatedFilename, isAudioAvailable,\n                    audioFile) {\n                  var ERROR_MESSAGE_BAD_FILE_UPLOAD = (\n                    \'There was an error uploading the audio file.\');\n                  var BUTTON_TEXT_SAVE = \'Save\';\n                  var BUTTON_TEXT_SAVING = \'Saving...\';\n\n                  // Whether there was an error uploading the audio file.\n                  $scope.errorMessage = null;\n                  $scope.saveButtonText = BUTTON_TEXT_SAVE;\n                  $scope.saveInProgress = false;\n                  $scope.isAudioAvailable = isAudioAvailable;\n                  var uploadedFile = null;\n                  $scope.droppedFile = audioFile;\n\n                  $scope.isAudioTranslationValid = function() {\n                    return (\n                      uploadedFile !== null &&\n                      uploadedFile.size !== null &&\n                      uploadedFile.size > 0);\n                  };\n\n                  $scope.updateUploadedFile = function(file) {\n                    $scope.errorMessage = null;\n                    uploadedFile = file;\n                  };\n\n                  $scope.clearUploadedFile = function() {\n                    $scope.errorMessage = null;\n                    uploadedFile = null;\n                  };\n\n                  $scope.save = function() {\n                    if ($scope.isAudioTranslationValid()) {\n                      $scope.saveButtonText = BUTTON_TEXT_SAVING;\n                      $scope.saveInProgress = true;\n                      var explorationId = (\n                        ContextService.getExplorationId());\n                      AssetsBackendApiService.saveAudio(\n                        explorationId, generatedFilename, uploadedFile\n                      ).then(function() {\n                        $uibModalInstance.close({\n                          languageCode: languageCode,\n                          filename: generatedFilename,\n                          fileSizeBytes: uploadedFile.size\n                        });\n                      }, function(errorResponse) {\n                        $scope.errorMessage = (\n                          errorResponse.error || ERROR_MESSAGE_BAD_FILE_UPLOAD);\n                        uploadedFile = null;\n                        $scope.saveButtonText = BUTTON_TEXT_SAVE;\n                        $scope.saveInProgress = false;\n                      });\n                    }\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                    AlertsService.clearWarnings();\n                  };\n                }\n              ]\n            }).result.then(function(result) {\n              if ($scope.isAudioAvailable) {\n                StateContentIdsToAudioTranslationsService.displayed\n                  .deleteAudioTranslation(\n                    $scope.contentId, $scope.languageCode);\n              }\n              StateContentIdsToAudioTranslationsService.displayed\n                .addAudioTranslation(\n                  $scope.contentId, $scope.languageCode, result.filename,\n                  result.fileSizeBytes);\n              saveContentIdsToAudioTranslationChanges();\n              $scope.initAudioBar();\n            });\n          };\n\n          $scope.initAudioBar();\n        }]\n    };\n  }]);'

blocks = {}
debug_info = ''
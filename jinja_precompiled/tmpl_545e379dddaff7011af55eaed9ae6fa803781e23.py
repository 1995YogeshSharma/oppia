from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/LearnerActionRenderService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    l_0_answer = resolve('answer')
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for rendering learner action HTML strings.\n *\n * The service should be used in the following way:\n *\n * 1. All learner actions for the playthrough should be passed as an arg to the\n *  function that splits them up into Display blocks. Display blocks are the\n *  blocks in which learner actions will be displayed in their modal.\n * 2. Now, to render one Display block\'s HTML equivalent, we would pass it to\n *  the renderDisplayBlockHTML() function. This function converts each learner\n *  action in the block to its corresponding HTML string and joins all such\n * learner actions and then returns a giant HTML string.\n */\n\noppia.factory(\'LearnerActionRenderService\', [\n  \'$sce\', \'ACTION_TYPE_ANSWER_SUBMIT\', \'ACTION_TYPE_EXPLORATION_START\',\n  \'ACTION_TYPE_EXPLORATION_QUIT\', \'ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS\',\n  function(\n      $sce, ACTION_TYPE_ANSWER_SUBMIT, ACTION_TYPE_EXPLORATION_START,\n      ACTION_TYPE_EXPLORATION_QUIT, ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS) {\n    var renderExplorationStartActionHTML = function(stateName, actionIndex) {\n      var htmlString =\n        \'<span class="oppia-issues-learner-action">\' + actionIndex +\n        \'. Started exploration at card "\' + stateName + \'".</span>\';\n      return htmlString;\n    };\n\n    var renderExplorationQuitActionHTML = function(\n        stateName, timeSpentInStateSecs, actionIndex) {\n      var htmlString =\n        \'<span class="oppia-issues-learner-action">\' + actionIndex +\n        \'. Left the exploration after spending a \' + \'total of \' +\n        timeSpentInStateSecs + \' seconds on card "\' + stateName + \'".</span>\';\n      return htmlString;\n    };\n\n    var renderContinueButtonSubmitActionHTML = function(\n        stateName, timeSpentInStateSecs, actionIndex) {\n      var htmlString =\n        \'<span class="oppia-issues-learner-action">\' + actionIndex +\n        \'. Pressed "Continue" to move to card "\' + stateName + \'" after \' +\n        timeSpentInStateSecs + \' seconds.</span>\';\n      return htmlString;\n    };\n\n    /**\n     * Renders the correct HTML for AnswerSubmit action after checking for a\n     * change in state.\n     * @param {string} answer.\n     * @param {string} destStateName.\n     * @param {int} timeSpentInStateSecs.\n     * @param {string} currentStateName.\n     * @param {int} actionIndex.\n     * @returns {string}\n     */\n    var renderAnswerSubmitActionHTML = function(\n        answer, destStateName, timeSpentInStateSecs, currentStateName,\n        actionIndex) {\n      var htmlString;\n      if (currentStateName === destStateName) {\n        htmlString =\n          \'<span class="oppia-issues-learner-action">\' + actionIndex +\n          \'. Submitted answer "\' + answer + \'" in card "\' + currentStateName +\n          \'".</span>\';\n      } else {\n        htmlString =\n          \'<span class="oppia-issues-learner-action">\' + actionIndex +\n          \'. Submitted answer "\' + answer + \'" and moved to card "\' +\n          destStateName + \'" after spending \' + timeSpentInStateSecs +\n          \' seconds on card "\' + currentStateName + \'".</span>\';\n      }\n      return htmlString;\n    };\n\n    /**\n     * Renders the correct HTML for the table display for MultipleIncorrect\n     * issue.\n     * @param {LearnerAction[]} finalBlock.\n     * @returns {string}\n     */\n    var renderLearnerActionsTableForMultipleIncorrectIssue = function(\n        finalBlock) {\n      var index = finalBlock.length - 1;\n      var stateName =\n        finalBlock[index].actionCustomizationArgs.state_name.value;\n\n      var tableHTML =\n        \'<table class="oppia-issues-learner-action-table"><tr><th>Answer</th>\' +\n        \'<th>Feedback</th></tr>\';\n      for (var i = 0; i < index; i++) {\n        if (finalBlock[i].actionType !== ACTION_TYPE_ANSWER_SUBMIT) {\n          continue;\n        }\n        var answer =\n          finalBlock[i].actionCustomizationArgs.submitted_answer.value;\n        var feedback =\n          finalBlock[i].actionCustomizationArgs.feedback.value._html;\n        feedback = feedback.replace(\'%s\', answer);\n        tableHTML +=\n          \'<tr><td>\' + answer + \'</td><td>\' + feedback + \'</td></tr>\';\n      }\n      tableHTML += \'</table>\';\n      return tableHTML;\n    };\n\n    /**\n     * Renders the correct HTML for the learner action.\n     * @param {LearnerAction} learnerAction.\n     * @param {int} actionIndex.\n     * @returns {string}\n     */\n    var renderLearnerActionHTML = function(learnerAction, actionIndex) {\n      var actionType = learnerAction.actionType;\n      var custArgs = learnerAction.actionCustomizationArgs;\n      if (actionType === ACTION_TYPE_EXPLORATION_START) {\n        return renderExplorationStartActionHTML(\n          custArgs.state_name.value, actionIndex);\n      } else if (actionType === ACTION_TYPE_EXPLORATION_QUIT) {\n        return renderExplorationQuitActionHTML(\n          custArgs.state_name.value,\n          custArgs.time_spent_in_state_in_msecs.value, actionIndex);\n      } else if (actionType === ACTION_TYPE_ANSWER_SUBMIT) {\n        interactionId = custArgs.interaction_id.value;\n        if (interactionId === \'Continue\') {\n          return renderContinueButtonSubmitActionHTML(\n            custArgs.dest_state_name.value,\n            custArgs.time_spent_state_in_msecs.value, actionIndex);\n        } else {\n          return renderAnswerSubmitActionHTML(\n            custArgs.submitted_answer.value, custArgs.dest_state_name.value,\n            custArgs.time_spent_state_in_msecs.value, custArgs.state_name.value,\n            actionIndex);\n        }\n      }\n    };\n\n    /**\n     * Checks whether the block length is less than an explicit maximum value.\n     * The block is limitied to a maximum number of learner actions so that the\n     * display modal is cleaner. When this bound is exceeded, actions are added\n     * to the next block which can be accessed by an \'extend\' button.\n     */\n    var withinBlockUpperBound = function(blockLength) {\n      return blockLength < 4;\n    };\n\n    /**\n     * Helper object to maintain the status of different display blocks while\n     * splitting up learner actions. This object will be updated as learner\n     * actions are inserted.\n     */\n    var groupedDisplayBlocks = {\n      displayBlocks: null,\n      localBlock: null,\n      latestStateName: null,\n      /**\n       * Inserts new learner action into existing block or creates a new block\n       * correctly, following a change in state.\n       */\n      handleChangeInState: function(action) {\n        this.latestStateName = action.actionCustomizationArgs.state_name.value;\n        if (withinBlockUpperBound(this.localBlock.length)) {\n          // Add action to block.\n          this.localBlock.unshift(action);\n          return;\n        }\n        // Push current block to list of blocks and action into new block.\n        this.displayBlocks.push(this.localBlock);\n        this.localBlock = [action];\n      },\n      handleSameState: function(action) {\n        this.localBlock.unshift(action);\n      }\n    };\n\n    return {\n      /**\n       * Returns the HTML for the final display block in a MultipleIncorrect\n       * issue. This accounts for the table to be displayed.\n       * @param {LearnerAction[]} block.\n       * @param {int} actionStartIndex.\n       * @returns {string}\n       */\n      renderFinalDisplayBlockForMISIssueHTML: function(\n          block, actionStartIndex) {\n        var index = block.length - 1;\n        var stateName = block[index].actionCustomizationArgs.state_name.value;\n        var htmlString = \'\';\n        for (\n          var i = 0; block[i].actionType !== ACTION_TYPE_ANSWER_SUBMIT; i++) {\n          htmlString += renderLearnerActionHTML(block[i], actionStartIndex + i);\n        }\n        htmlString +=\n          \'<span class="oppia-issues-learner-action">\' +\n          (actionStartIndex + i).toString() +\n          \'. Submitted the following answers in card "\' + stateName +\n          \'"</span>\';\n        htmlString += renderLearnerActionsTableForMultipleIncorrectIssue(block);\n        htmlString += renderLearnerActionHTML(\n          block[index], actionStartIndex + i + 1);\n        return $sce.trustAsHtml(htmlString);\n      },\n      renderDisplayBlockHTML: function(block, actionStartIndex) {\n        var htmlString = \'\';\n        for (var i = 0; i < block.length; i++) {\n          htmlString += renderLearnerActionHTML(block[i], actionStartIndex + i);\n        }\n        return $sce.trustAsHtml(htmlString);\n      },\n      /**\n       * Splits up the entire set of learner actions into correct display blocks\n       * to be displayed in sequence in the playthroughs modal.\n       * @param {LearnerActions[]} learnerActions.\n       * @returns {LearnerActions[][]}\n       */\n      getDisplayBlocks: function(learnerActions) {\n        var lastIndex = learnerActions.length - 1;\n        groupedDisplayBlocks.displayBlocks = [];\n        groupedDisplayBlocks.localBlock = [learnerActions[lastIndex]];\n        groupedDisplayBlocks.latestStateName =\n          learnerActions[lastIndex].actionCustomizationArgs.state_name.value;\n        for (var i = lastIndex - 1; i >= 0; i--) {\n          var action = learnerActions[i];\n          var currentStateName =\n            action.actionCustomizationArgs.state_name.value;\n          if (currentStateName !== groupedDisplayBlocks.latestStateName) {\n            groupedDisplayBlocks.handleChangeInState(action);\n          } else {\n            groupedDisplayBlocks.handleSameState(action);\n          }\n        }\n        // If there is a local block with actions at the end, push it.\n        if (groupedDisplayBlocks.localBlock) {\n          groupedDisplayBlocks.displayBlocks.push(\n            groupedDisplayBlocks.localBlock);\n        }\n        return groupedDisplayBlocks.displayBlocks;\n      }\n    };\n  }]);' % (
        escape((undefined(name='answer') if l_0_answer is missing else l_0_answer)), 
    )

blocks = {}
debug_info = '112=12'
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/ExplorationDataServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the Exploration data service.\n */\n\ndescribe(\'Exploration data service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'getData local save\', function() {\n    var eds = null;\n    var mockBackendApiService = null;\n    var mockLocalStorageService = null;\n    var mockUrlService = null;\n    var responseWhenDraftChangesAreValid = null;\n    var responseWhenDraftChangesAreInvalid = null;\n    var $q = null;\n\n    beforeEach(function() {\n      module(function($provide) {\n        $provide.value(\n          \'LocalStorageService\', [mockLocalStorageService][0]);\n      });\n      module(function($provide) {\n        $provide.value(\n          \'EditableExplorationBackendApiService\', [mockBackendApiService][0]);\n      });\n      module(function($provide) {\n        $provide.value(\n          \'UrlService\', [mockUrlService][0]);\n      });\n    });\n\n    beforeEach(function() {\n      mockUrlService = {\n        getPathname: function() {}\n      };\n\n      mockBackendApiService = {\n        fetchApplyDraftExploration: function() {}\n      };\n\n      mockLocalStorageService = {\n        getExplorationDraft: function() {},\n        removeExplorationDraft: function() {}\n      };\n      spyOn(mockUrlService, \'getPathname\').and.returnValue(\'/create/exp_id\');\n    });\n\n    beforeEach(inject(function($injector) {\n      eds = $injector.get(\'ExplorationDataService\');\n      $q = $injector.get(\'$q\');\n    }));\n\n    beforeEach(function() {\n      expDataResponse = {\n        draft_change_list_id: 3,\n      };\n\n      responseWhenDraftChangesAreValid = {\n        isValid: function() {\n          return true;\n        },\n        getChanges: function() {\n          return [];\n        }\n      };\n\n      responseWhenDraftChangesAreInvalid = {\n        isValid: function() {\n          return false;\n        },\n        getChanges: function() {\n          return [];\n        }\n      };\n\n      spyOn(mockBackendApiService, \'fetchApplyDraftExploration\').\n        and.returnValue($q.when(expDataResponse));\n      spyOn(eds, \'autosaveChangeList\');\n    });\n\n\n    it(\'should autosave draft changes when draft ids match\', function() {\n      errorCallback = function() {};\n      spyOn(mockLocalStorageService, \'getExplorationDraft\').\n        and.returnValue(responseWhenDraftChangesAreValid);\n      eds.getData(errorCallback).then(function(data) {\n        expect(eds.autosaveChangeList()).toHaveBeenCalled();\n      });\n    });\n\n    it(\'should call error callback when draft ids do not match\', function() {\n      errorCallback = function() {};\n      spyOn(mockLocalStorageService, \'getExplorationDraft\').\n        and.returnValue(responseWhenDraftChangesAreInvalid);\n      spyOn(window, \'errorCallback\');\n      eds.getData(errorCallback).then(function(data) {\n        expect(errorCallback()).toHaveBeenCalled();\n      });\n    });\n  });\n});'

blocks = {}
debug_info = ''
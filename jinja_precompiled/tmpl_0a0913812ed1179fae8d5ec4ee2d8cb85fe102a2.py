from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/SolutionEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the solution editor.\n */\n\noppia.directive(\'solutionEditor\', [\n  \'$uibModal\', \'UrlInterpolationService\', \'stateSolutionService\',\n  \'EditorStateService\', \'ExplorationStatesService\',\n  \'ExplorationWarningsService\', \'AlertsService\',\n  \'SolutionObjectFactory\', \'SolutionVerificationService\',\n  \'ExplorationContextService\', \'ExplorationHtmlFormatterService\',\n  \'stateInteractionIdService\', \'stateCustomizationArgsService\',\n  \'INFO_MESSAGE_SOLUTION_IS_INVALID\',\n  function($uibModal, UrlInterpolationService, stateSolutionService,\n      EditorStateService, ExplorationStatesService,\n      ExplorationWarningsService, AlertsService,\n      SolutionObjectFactory, SolutionVerificationService,\n      ExplorationContextService, ExplorationHtmlFormatterService,\n      stateInteractionIdService, stateCustomizationArgsService,\n      INFO_MESSAGE_SOLUTION_IS_INVALID) {\n    return {\n      restrict: \'E\',\n      scope: {\n        getInteractionId: \'&interactionId\',\n        correctAnswerEditorHtml: \'=\',\n        onOpenSolutionEditor: \'&\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/solution_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'stateSolutionService\',\n        function($scope, stateSolutionService) {\n          $scope.stateSolutionService = stateSolutionService;\n\n          $scope.EXPLANATION_FORM_SCHEMA = {\n            type: \'html\',\n            ui_config: {}\n          };\n\n          $scope.getAnswerHtml = function () {\n            return ExplorationHtmlFormatterService.getAnswerHtml(\n              stateSolutionService.savedMemento.correctAnswer,\n              stateInteractionIdService.savedMemento,\n              stateCustomizationArgsService.savedMemento);\n          };\n        }\n      ]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
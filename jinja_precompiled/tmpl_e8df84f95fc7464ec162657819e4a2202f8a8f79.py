from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/GuestCollectionProgressObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for GuestCollectionProgressObjectFactory.\n */\n\ndescribe(\'Guest collection progress object factory\', function() {\n  var GuestCollectionProgressObjectFactory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    GuestCollectionProgressObjectFactory = (\n      $injector.get(\'GuestCollectionProgressObjectFactory\'));\n\n    _collectionId0 = \'collection_id0\';\n    _collectionId1 = \'collection_id1\';\n    _expId0 = \'exploration_id0\';\n    _expId1 = \'exploration_id1\';\n  }));\n\n  var _createEmptyProgressObject = function() {\n    return GuestCollectionProgressObjectFactory.createFromJson(null);\n  };\n\n  describe(\'hasCompletionProgress\', function() {\n    it(\'should initially have no progress\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      expect(guestCollectionProgress.hasCompletionProgress(\n        _collectionId0)).toBe(false);\n    });\n\n    it(\'should have progress after recording an exploration\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0);\n      expect(guestCollectionProgress.hasCompletionProgress(\n        _collectionId0)).toBe(true);\n    });\n\n    it(\'should have no progress for an unknown exploration\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId1, _expId0);\n      expect(guestCollectionProgress.hasCompletionProgress(\n        _collectionId0)).toBe(false);\n    });\n  });\n\n  describe(\'getCompletedExplorationIds\', function() {\n    it(\'should initially have no completed exploration IDs\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      expect(guestCollectionProgress.getCompletedExplorationIds(\n        _collectionId0)).toEqual([]);\n    });\n\n    it(\'should provide completed exploration ID\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0);\n      expect(guestCollectionProgress.getCompletedExplorationIds(\n        _collectionId0)).toEqual([_expId0]);\n    });\n\n    it(\'should not provide completed exp ID for other collection\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId1, _expId0);\n      expect(guestCollectionProgress.getCompletedExplorationIds(\n        _collectionId0)).toEqual([]);\n    });\n\n    it(\'should provide all completed exploration IDs in order\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId1);\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId1, _expId0);\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0);\n      expect(guestCollectionProgress.getCompletedExplorationIds(\n        _collectionId0)).toEqual([_expId1, _expId0]);\n    });\n  });\n\n  describe(\'addCompletedExplorationId\', function() {\n    it(\'should successfully add exploration to empty collection\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      expect(guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0)).toBe(true);\n    });\n\n    it(\'should fail to re-add exploration to collection\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0);\n      expect(guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0)).toBe(false);\n    });\n\n    it(\'should successfully add exploration to second collection\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0);\n      expect(guestCollectionProgress.addCompletedExplorationId(\n        _collectionId1, _expId0)).toBe(true);\n    });\n  });\n\n  describe(\'toJson\', function() {\n    it(\'should convert an empty progress object to simple JSON\', function() {\n      expect(_createEmptyProgressObject().toJson()).toEqual(\'{}\');\n    });\n\n    it(\'should convert progress for one collection to JSON\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0);\n\n      expect(guestCollectionProgress.toJson()).toEqual(\n        \'{"collection_id0":["exploration_id0"]}\');\n    });\n\n    it(\'should convert progress for multiple collections to JSON\', function() {\n      var guestCollectionProgress = _createEmptyProgressObject();\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId1, _expId1);\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId1);\n      guestCollectionProgress.addCompletedExplorationId(\n        _collectionId1, _expId0);\n\n      expect(guestCollectionProgress.toJson()).toEqual(\n        \'{"collection_id1":["exploration_id1","exploration_id0"],\' +\n        \'"collection_id0":["exploration_id1"]}\');\n    });\n  });\n\n  describe(\'createFromJson\', function() {\n    it(\'should create a new empty progress object from JSON\', function() {\n      var guestCollectionProgress = (\n        GuestCollectionProgressObjectFactory.createFromJson(\'{}\'));\n      expect(guestCollectionProgress).toEqual(_createEmptyProgressObject());\n    });\n\n    it(\'should create a progress object from some progress JSON\', function() {\n      var expectedCollectionProgress = _createEmptyProgressObject();\n      expectedCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId0);\n\n      var guestCollectionProgress = (\n        GuestCollectionProgressObjectFactory.createFromJson(\n          \'{"collection_id0": ["exploration_id0"]}\'));\n\n      expect(guestCollectionProgress).toEqual(expectedCollectionProgress);\n    });\n\n    it(\'should create a progress object for multiple collections\', function() {\n      var expectedCollectionProgress = _createEmptyProgressObject();\n      expectedCollectionProgress.addCompletedExplorationId(\n        _collectionId1, _expId1);\n      expectedCollectionProgress.addCompletedExplorationId(\n        _collectionId0, _expId1);\n      expectedCollectionProgress.addCompletedExplorationId(\n        _collectionId1, _expId0);\n\n      var guestCollectionProgress = (\n        GuestCollectionProgressObjectFactory.createFromJson(\n          \'{"collection_id1": ["exploration_id1", "exploration_id0"], \' +\n          \'"collection_id0": ["exploration_id1"]}\'));\n\n      expect(guestCollectionProgress).toEqual(expectedCollectionProgress);\n    });\n  });\n});'

blocks = {}
debug_info = ''
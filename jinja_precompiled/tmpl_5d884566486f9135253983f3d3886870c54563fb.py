from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/PlayerServices.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utility service for the learner\'s view of an exploration.\n */\n\noppia.constant(\'INTERACTION_SPECS\', GLOBALS.INTERACTION_SPECS);\n\n// A service that provides a number of utility functions for JS used by\n// the player skin.\n// Note that this service is used both in the learner and the editor views.\n// The URL determines which of these it is. Some methods may need to be\n// implemented differently depending on whether the skin is being played\n// in the learner view, or whether it is being previewed in the editor view.\noppia.factory(\'ExplorationPlayerService\', [\n  \'$http\', \'$rootScope\', \'$q\', \'LearnerParamsService\',\n  \'AlertsService\', \'AnswerClassificationService\', \'ExplorationContextService\',\n  \'PAGE_CONTEXT\', \'ExplorationHtmlFormatterService\',\n  \'PlayerTranscriptService\', \'ExplorationObjectFactory\',\n  \'ExpressionInterpolationService\', \'StateClassifierMappingService\',\n  \'StatsReportingService\', \'UrlInterpolationService\',\n  \'ReadOnlyExplorationBackendApiService\',\n  \'EditableExplorationBackendApiService\', \'AudioTranslationLanguageService\',\n  \'LanguageUtilService\', \'NumberAttemptsService\', \'AudioPreloaderService\',\n  \'WindowDimensionsService\', \'TWO_CARD_THRESHOLD_PX\',\n  \'PlayerCorrectnessFeedbackEnabledService\',\n  \'GuestCollectionProgressService\',\n  \'WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS\',\n  function(\n      $http, $rootScope, $q, LearnerParamsService,\n      AlertsService, AnswerClassificationService, ExplorationContextService,\n      PAGE_CONTEXT, ExplorationHtmlFormatterService,\n      PlayerTranscriptService, ExplorationObjectFactory,\n      ExpressionInterpolationService, StateClassifierMappingService,\n      StatsReportingService, UrlInterpolationService,\n      ReadOnlyExplorationBackendApiService,\n      EditableExplorationBackendApiService, AudioTranslationLanguageService,\n      LanguageUtilService, NumberAttemptsService, AudioPreloaderService,\n      WindowDimensionsService, TWO_CARD_THRESHOLD_PX,\n      PlayerCorrectnessFeedbackEnabledService,\n      GuestCollectionProgressService,\n      WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS) {\n    var _explorationId = ExplorationContextService.getExplorationId();\n    var _editorPreviewMode = (\n      ExplorationContextService.getPageContext() === PAGE_CONTEXT.EDITOR);\n    var _isLoggedIn = GLOBALS.userIsLoggedIn;\n    var answerIsBeingProcessed = false;\n\n    var exploration = null;\n\n    // This list may contain duplicates. A state name is added to it each time\n    // the learner moves to a new card.\n    var visitedStateNames = [];\n\n    var explorationActuallyStarted = false;\n\n    // Param changes to be used ONLY in editor preview mode.\n    var manualParamChanges = null;\n    var initialStateName = null;\n    var version = GLOBALS.explorationVersion;\n\n    var randomFromArray = function(arr) {\n      return arr[Math.floor(Math.random() * arr.length)];\n    };\n\n    // Evaluate feedback.\n    var makeFeedback = function(feedbackHtml, envs) {\n      return ExpressionInterpolationService.processHtml(feedbackHtml, envs);\n    };\n\n    // Evaluate parameters. Returns null if any evaluation fails.\n    var makeParams = function(oldParams, paramChanges, envs) {\n      var newParams = angular.copy(oldParams);\n      if (paramChanges.every(function(pc) {\n        if (pc.generatorId === \'Copier\') {\n          if (!pc.customizationArgs.parse_with_jinja) {\n            newParams[pc.name] = pc.customizationArgs.value;\n          } else {\n            var paramValue = ExpressionInterpolationService.processUnicode(\n              pc.customizationArgs.value, [newParams].concat(envs));\n            if (paramValue === null) {\n              return false;\n            }\n            newParams[pc.name] = paramValue;\n          }\n        } else {\n          // RandomSelector.\n          newParams[pc.name] = randomFromArray(\n            pc.customizationArgs.list_of_values);\n        }\n        return true;\n      })) {\n        // All parameters were evaluated successfully.\n        return newParams;\n      }\n      // Evaluation of some parameter failed.\n      return null;\n    };\n\n    // Evaluate question string.\n    var makeQuestion = function(newState, envs) {\n      return ExpressionInterpolationService.processHtml(\n        newState.content.getHtml(), envs);\n    };\n\n    // This should only be called when \'exploration\' is non-null.\n    var _loadInitialState = function(successCallback) {\n      var initialState = exploration.getInitialState();\n      var oldParams = LearnerParamsService.getAllParams();\n      var newParams = makeParams(\n        oldParams, initialState.paramChanges, [oldParams]);\n      if (newParams === null) {\n        AlertsService.addWarning(\'Expression parsing error.\');\n        return;\n      }\n\n      var questionHtml = makeQuestion(initialState, [newParams]);\n      if (questionHtml === null) {\n        AlertsService.addWarning(\'Expression parsing error.\');\n        return;\n      }\n\n      if (!_editorPreviewMode) {\n        StatsReportingService.recordExplorationStarted(\n          exploration.initStateName, newParams);\n        visitedStateNames.push(exploration.initStateName);\n      }\n\n      $rootScope.$broadcast(\'playerStateChange\', initialState.name);\n      successCallback(exploration, questionHtml, newParams);\n    };\n\n    // Initialize the parameters in the exploration as specified in the\n    // exploration-level initial parameter changes list, followed by any\n    // manual parameter changes (in editor preview mode).\n    var initParams = function(manualParamChanges) {\n      var baseParams = {};\n      exploration.paramSpecs.forEach(function(paramName, paramSpec) {\n        baseParams[paramName] = paramSpec.getType().createDefaultValue();\n      });\n\n      var startingParams = makeParams(\n        baseParams,\n        exploration.paramChanges.concat(manualParamChanges),\n        [baseParams]);\n\n      LearnerParamsService.init(startingParams);\n    };\n\n    // Ensure the transition to a terminal state properly logs the end of the\n    // exploration.\n    $rootScope.$on(\'playerStateChange\', function(evt, newStateName) {\n      if (!_editorPreviewMode && exploration.isStateTerminal(newStateName)) {\n        StatsReportingService.recordExplorationCompleted(\n          newStateName, LearnerParamsService.getAllParams());\n\n        // If the user is a guest, has completed this exploration within the\n        // context of a collection, and the collection is whitelisted, record\n        // their temporary progress.\n        var collectionAllowsGuestProgress = (\n          WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS.indexOf(\n            GLOBALS.collectionId) !== -1);\n        if (collectionAllowsGuestProgress && !_isLoggedIn) {\n          GuestCollectionProgressService.recordExplorationCompletedInCollection(\n            GLOBALS.collectionId, _explorationId);\n        }\n\n        // For single state explorations, when the exploration reaches the\n        // terminal state and explorationActuallyStarted is false, record\n        // exploration actual start event.\n        if (!explorationActuallyStarted) {\n          StatsReportingService.recordExplorationActuallyStarted(\n            newStateName);\n          explorationActuallyStarted = true;\n        }\n      }\n    });\n\n    return {\n      // This should only be used in editor preview mode. It sets the\n      // exploration data from what\'s currently specified in the editor, and\n      // also initializes the parameters to empty strings.\n      initSettingsFromEditor: function(activeStateNameFromPreviewTab,\n          manualParamChangesToInit) {\n        if (_editorPreviewMode) {\n          manualParamChanges = manualParamChangesToInit;\n          initStateName = activeStateNameFromPreviewTab;\n        } else {\n          throw \'Error: cannot populate exploration in learner mode.\';\n        }\n      },\n      /**\n       * Initializes an exploration, passing the data for the first state to\n       * successCallback.\n       *\n       * In editor preview mode, populateExploration() must be called before\n       * calling init().\n       *\n       * @param {function} successCallback - The function to execute after the\n       *   initial exploration data is successfully loaded. This function will\n       *   be passed two arguments:\n       *   - stateName {string}, the name of the first state\n       *   - initHtml {string}, an HTML string representing the content of the\n       *       first state.\n       */\n      init: function(successCallback) {\n        answerIsBeingProcessed = false;\n        PlayerTranscriptService.init();\n\n        if (_editorPreviewMode) {\n          EditableExplorationBackendApiService.fetchApplyDraftExploration(\n            _explorationId).then(function(data) {\n            exploration = ExplorationObjectFactory.createFromBackendDict(\n              data);\n            exploration.setInitialStateName(initStateName);\n            initParams(manualParamChanges);\n            AudioTranslationLanguageService.init(\n              exploration.getAllAudioLanguageCodes(),\n              null,\n              exploration.getLanguageCode(),\n              data.auto_tts_enabled);\n            AudioPreloaderService.init(exploration);\n            AudioPreloaderService.kickOffAudioPreloader(initStateName);\n            PlayerCorrectnessFeedbackEnabledService.init(\n              data.correctness_feedback_enabled);\n            _loadInitialState(successCallback);\n            NumberAttemptsService.reset();\n          });\n        } else {\n          var loadedExploration = null;\n          if (version) {\n            loadedExploration = (\n              ReadOnlyExplorationBackendApiService.loadExploration(\n                _explorationId, version));\n          } else {\n            loadedExploration = (\n              ReadOnlyExplorationBackendApiService.loadLatestExploration(\n                _explorationId));\n          }\n          loadedExploration.then(function(data) {\n            exploration = ExplorationObjectFactory.createFromBackendDict(\n              data.exploration);\n            version = data.version;\n            initParams([]);\n\n            StateClassifierMappingService.init(data.state_classifier_mapping);\n\n            StatsReportingService.initSession(\n              _explorationId, exploration.title,\n              version, data.session_id, GLOBALS.collectionId);\n            AudioTranslationLanguageService.init(\n              exploration.getAllAudioLanguageCodes(),\n              data.preferred_audio_language_code,\n              exploration.getLanguageCode(),\n              data.auto_tts_enabled);\n            AudioPreloaderService.init(exploration);\n            AudioPreloaderService.kickOffAudioPreloader(\n              exploration.getInitialState().name);\n            PlayerCorrectnessFeedbackEnabledService.init(\n              data.correctness_feedback_enabled);\n            _loadInitialState(successCallback);\n            $rootScope.$broadcast(\'playerServiceInitialized\');\n          });\n        }\n      },\n      getExplorationId: function() {\n        return _explorationId;\n      },\n      getExplorationTitle: function() {\n        return exploration.title;\n      },\n      getExplorationVersion: function() {\n        return version;\n      },\n      getExplorationLanguageCode: function() {\n        return exploration.languageCode;\n      },\n      getStateContentHtml: function(stateName) {\n        return exploration.getUninterpolatedContentHtml(stateName);\n      },\n      getStateContentAudioTranslations: function(stateName) {\n        return exploration.getAudioTranslations(stateName);\n      },\n      getStateContentAudioTranslation: function(stateName, languageCode) {\n        return exploration.getAudioTranslation(stateName, languageCode);\n      },\n      isContentAudioTranslationAvailable: function(stateName) {\n        return Object.keys(\n          exploration.getAudioTranslations(stateName)).length > 0 ||\n          AudioTranslationLanguageService.isAutogeneratedAudioAllowed();\n      },\n      getInteractionHtml: function(stateName, labelForFocusTarget) {\n        var interactionId = exploration.getInteractionId(stateName);\n        if (!interactionId) {\n          return null;\n        }\n\n        return ExplorationHtmlFormatterService.getInteractionHtml(\n          interactionId,\n          exploration.getInteractionCustomizationArgs(stateName),\n          true,\n          labelForFocusTarget);\n      },\n      getInteraction: function(stateName) {\n        return exploration.getInteraction(stateName);\n      },\n      getRandomSuffix: function() {\n        // This is a bit of a hack. When a refresh to a $scope variable happens,\n        // AngularJS compares the new value of the variable to its previous\n        // value. If they are the same, then the variable is not updated.\n        // Appending a random suffix makes the new value different from the\n        // previous one, and thus indirectly forces a refresh.\n        var randomSuffix = \'\';\n        var N = Math.round(Math.random() * 1000);\n        for (var i = 0; i < N; i++) {\n          randomSuffix += \' \';\n        }\n        return randomSuffix;\n      },\n      getHints: function(stateName) {\n        return exploration.getInteraction(stateName).hints;\n      },\n      getSolution: function(stateName) {\n        return exploration.getInteraction(stateName).solution;\n      },\n      isLoggedIn: function() {\n        return _isLoggedIn;\n      },\n      isInPreviewMode: function() {\n        return !!_editorPreviewMode;\n      },\n      submitAnswer: function(answer, interactionRulesService, successCallback) {\n        if (answerIsBeingProcessed) {\n          return;\n        }\n\n        answerIsBeingProcessed = true;\n        var oldStateName = PlayerTranscriptService.getLastStateName();\n        var oldState = exploration.getState(oldStateName);\n        var classificationResult = (\n          AnswerClassificationService.getMatchingClassificationResult(\n            _explorationId, oldStateName, oldState, answer,\n            interactionRulesService));\n        var answerIsCorrect = classificationResult.outcome.labelledAsCorrect;\n\n        if (!_editorPreviewMode) {\n          var feedbackIsUseful = (\n            AnswerClassificationService.isClassifiedExplicitlyOrGoesToNewState(\n              _explorationId, oldStateName, oldState, answer,\n              interactionRulesService));\n          StatsReportingService.recordAnswerSubmitted(\n            oldStateName,\n            LearnerParamsService.getAllParams(),\n            answer,\n            classificationResult.answerGroupIndex,\n            classificationResult.ruleIndex,\n            classificationResult.classificationCategorization,\n            feedbackIsUseful);\n        }\n\n        // Use angular.copy() to clone the object\n        // since classificationResult.outcome points\n        // at oldState.interaction.default_outcome\n        var outcome = angular.copy(classificationResult.outcome);\n        var newStateName = outcome.dest;\n        var refresherExplorationId = outcome.refresherExplorationId;\n        var newState = exploration.getState(newStateName);\n\n        // Compute the data for the next state.\n        var oldParams = LearnerParamsService.getAllParams();\n        oldParams.answer = answer;\n        var feedbackHtml =\n          makeFeedback(outcome.feedback.getHtml(), [oldParams]);\n        var feedbackAudioTranslations =\n          outcome.feedback.getBindableAudioTranslations();\n        if (feedbackHtml === null) {\n          answerIsBeingProcessed = false;\n          AlertsService.addWarning(\'Expression parsing error.\');\n          return;\n        }\n\n        var newParams = (\n          newState ? makeParams(\n            oldParams, newState.paramChanges, [oldParams]) : oldParams);\n        if (newParams === null) {\n          answerIsBeingProcessed = false;\n          AlertsService.addWarning(\'Expression parsing error.\');\n          return;\n        }\n\n        var questionHtml = makeQuestion(newState, [newParams, {\n          answer: \'answer\'\n        }]);\n        if (questionHtml === null) {\n          answerIsBeingProcessed = false;\n          AlertsService.addWarning(\'Expression parsing error.\');\n          return;\n        }\n\n        // TODO(sll): Remove the \'answer\' key from newParams.\n        newParams.answer = answer;\n\n        answerIsBeingProcessed = false;\n\n        oldStateName = PlayerTranscriptService.getLastStateName();\n        var refreshInteraction = (\n          oldStateName !== newStateName ||\n          exploration.isInteractionInline(oldStateName));\n\n        if (!_editorPreviewMode) {\n          var isFirstHit = Boolean(visitedStateNames.indexOf(\n            newStateName) === -1);\n          if (newStateName !== oldStateName) {\n            StatsReportingService.recordStateTransition(\n              oldStateName, newStateName, answer,\n              LearnerParamsService.getAllParams(), isFirstHit);\n\n            StatsReportingService.recordStateCompleted(oldStateName);\n            visitedStateNames.push(newStateName);\n\n            if (oldStateName === exploration.initStateName && (\n              !explorationActuallyStarted)) {\n              StatsReportingService.recordExplorationActuallyStarted(\n                oldStateName);\n              explorationActuallyStarted = true;\n            }\n          }\n          if (exploration.isStateTerminal(newStateName)) {\n            StatsReportingService.recordStateCompleted(newStateName);\n          }\n        }\n\n        $rootScope.$broadcast(\'updateActiveStateIfInEditor\', newStateName);\n        $rootScope.$broadcast(\'playerStateChange\', newStateName);\n        successCallback(\n          newStateName, refreshInteraction, feedbackHtml,\n          feedbackAudioTranslations, questionHtml, newParams,\n          refresherExplorationId);\n        return answerIsCorrect;\n      },\n      isAnswerBeingProcessed: function() {\n        return answerIsBeingProcessed;\n      },\n      // Returns a promise for the user profile picture, or the default image if\n      // user is not logged in or has not uploaded a profile picture, or the\n      // player is in preview mode.\n      getUserProfileImage: function() {\n        var DEFAULT_PROFILE_IMAGE_PATH = (\n          UrlInterpolationService.getStaticImageUrl(\n            \'/avatar/user_blue_72px.png\'));\n\n        if (_isLoggedIn && !_editorPreviewMode) {\n          return $http.get(\n            \'/preferenceshandler/profile_picture\'\n          ).then(function(response) {\n            var profilePictureDataUrl = response.data.profile_picture_data_url;\n            return (\n              profilePictureDataUrl ? profilePictureDataUrl :\n              DEFAULT_PROFILE_IMAGE_PATH);\n          });\n        } else {\n          return $q.resolve(DEFAULT_PROFILE_IMAGE_PATH);\n        }\n      },\n      recordSolutionHit: function(stateName) {\n        if (!_editorPreviewMode) {\n          StatsReportingService.recordSolutionHit(stateName);\n        }\n      },\n      recordLeaveForRefresherExp: function(stateName, refresherExpId) {\n        if (!_editorPreviewMode) {\n          StatsReportingService.recordLeaveForRefresherExp(\n            stateName, refresherExpId);\n        }\n      },\n      // Returns whether the screen is wide enough to fit two\n      // cards (e.g., the tutor and supplemental cards) side-by-side.\n      canWindowShowTwoCards: function() {\n        return WindowDimensionsService.getWidth() > TWO_CARD_THRESHOLD_PX;\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
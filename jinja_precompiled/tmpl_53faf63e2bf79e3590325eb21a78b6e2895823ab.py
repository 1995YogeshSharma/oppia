from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/state_editor/StateSolutionEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the solution viewer and editor section in the\n * state editor.\n */\noppia.directive(\'stateSolutionEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        onSaveContentIdsToAudioTranslations: \'=\',\n        onSaveSolution: \'=\',\n        refreshWarnings: \'&\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/state_editor/state_solution_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'$uibModal\', \'$filter\', \'StateEditorService\',\n        \'AlertsService\', \'INTERACTION_SPECS\', \'StateSolutionService\',\n        \'SolutionVerificationService\', \'SolutionValidityService\',\n        \'ExplorationHtmlFormatterService\', \'StateInteractionIdService\',\n        \'StateHintsService\', \'UrlInterpolationService\', \'SolutionObjectFactory\',\n        \'ContextService\', \'StateCustomizationArgsService\',\n        \'EditabilityService\', \'StateContentIdsToAudioTranslationsService\',\n        \'INFO_MESSAGE_SOLUTION_IS_INVALID\',\n        function(\n            $scope, $rootScope, $uibModal, $filter, StateEditorService,\n            AlertsService, INTERACTION_SPECS, StateSolutionService,\n            SolutionVerificationService, SolutionValidityService,\n            ExplorationHtmlFormatterService, StateInteractionIdService,\n            StateHintsService, UrlInterpolationService, SolutionObjectFactory,\n            ContextService, StateCustomizationArgsService,\n            EditabilityService, StateContentIdsToAudioTranslationsService,\n            INFO_MESSAGE_SOLUTION_IS_INVALID) {\n          $scope.EditabilityService = EditabilityService;\n          $scope.correctAnswer = null;\n          $scope.correctAnswerEditorHtml = \'\';\n          $scope.inlineSolutionEditorIsActive = false;\n          $scope.SOLUTION_EDITOR_FOCUS_LABEL = (\n            \'currentCorrectAnswerEditorHtmlForSolutionEditor\');\n          $scope.StateHintsService = StateHintsService;\n          $scope.StateInteractionIdService = StateInteractionIdService;\n          $scope.StateSolutionService = StateSolutionService;\n\n\n          $scope.refreshWarnings()();\n\n          $scope.isSolutionValid = function() {\n            return StateEditorService.isCurrentSolutionValid();\n          };\n\n          $scope.correctAnswerEditorHtml = (\n            ExplorationHtmlFormatterService.getInteractionHtml(\n              StateInteractionIdService.savedMemento,\n              StateCustomizationArgsService.savedMemento,\n              false,\n              $scope.SOLUTION_EDITOR_FOCUS_LABEL));\n\n          $scope.toggleInlineSolutionEditorIsActive = function() {\n            $scope.inlineSolutionEditorIsActive = (\n              !$scope.inlineSolutionEditorIsActive);\n          };\n\n          $scope.getSolutionSummary = function() {\n            var solution = StateSolutionService.savedMemento;\n            var solutionAsPlainText =\n              solution.getSummary(StateInteractionIdService.savedMemento);\n            solutionAsPlainText =\n              $filter(\'convertToPlainText\')(solutionAsPlainText);\n            return solutionAsPlainText;\n          };\n\n          // This returns false if the current interaction ID is null.\n          $scope.isCurrentInteractionLinear = function() {\n            return (\n              StateInteractionIdService.savedMemento &&\n              INTERACTION_SPECS[\n                StateInteractionIdService.savedMemento\n              ].is_linear);\n          };\n\n          $scope.openAddOrUpdateSolutionModal = function() {\n            AlertsService.clearWarnings();\n            $rootScope.$broadcast(\'externalSave\');\n            $scope.inlineSolutionEditorIsActive = false;\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/editor_tab/\' +\n                \'add_or_update_solution_modal_directive.html\'),\n              backdrop: \'static\',\n              controller: [\n                \'$scope\', \'$uibModalInstance\', \'StateSolutionService\',\n                \'StateCustomizationArgsService\',\n                \'EVENT_PROGRESS_NAV_SUBMITTED\', \'INTERACTION_SPECS\',\n                \'COMPONENT_NAME_SOLUTION\', \'GenerateContentIdService\', function(\n                    $scope, $uibModalInstance, StateSolutionService,\n                    StateCustomizationArgsService,\n                    EVENT_PROGRESS_NAV_SUBMITTED, INTERACTION_SPECS,\n                    COMPONENT_NAME_SOLUTION, GenerateContentIdService) {\n                  $scope.StateSolutionService = StateSolutionService;\n                  $scope.correctAnswerEditorHtml = (\n                    ExplorationHtmlFormatterService.getInteractionHtml(\n                      StateInteractionIdService.savedMemento,\n                      StateCustomizationArgsService.savedMemento,\n                      false,\n                      $scope.SOLUTION_EDITOR_FOCUS_LABEL));\n                  $scope.EXPLANATION_FORM_SCHEMA = {\n                    type: \'html\',\n                    ui_config: {}\n                  };\n\n                  $scope.answerIsValid = false;\n\n                  var EMPTY_SOLUTION_DATA = {\n                    answerIsExclusive: false,\n                    correctAnswer: null,\n                    explanationHtml: \'\',\n                    explanationContentId: COMPONENT_NAME_SOLUTION\n                  };\n\n                  $scope.data = StateSolutionService.savedMemento ? {\n                    answerIsExclusive: (\n                      StateSolutionService.savedMemento.answerIsExclusive),\n                    correctAnswer: null,\n                    explanationHtml: (\n                      StateSolutionService.savedMemento.explanation.getHtml()),\n                    explanationContentId: (\n                      StateSolutionService.savedMemento.explanation\n                        .getContentId())\n                  } : angular.copy(EMPTY_SOLUTION_DATA);\n\n                  $scope.onSubmitFromSubmitButton = function() {\n                    $scope.$broadcast(EVENT_PROGRESS_NAV_SUBMITTED);\n                  };\n\n                  $scope.submitAnswer = function(answer) {\n                    $scope.data.correctAnswer = answer;\n                  };\n\n                  $scope.setInteractionAnswerValidity = function(\n                      answerValidity) {\n                    $scope.answerIsValid = answerValidity;\n                  };\n\n                  $scope.shouldAdditionalSubmitButtonBeShown = function() {\n                    var interactionSpecs = INTERACTION_SPECS[\n                      StateInteractionIdService.savedMemento];\n                    return interactionSpecs.show_generic_submit_button;\n                  };\n\n                  $scope.saveSolution = function() {\n                    if (typeof $scope.data.answerIsExclusive === \'boolean\' &&\n                        $scope.data.correctAnswer !== null &&\n                        $scope.data.explanation !== \'\') {\n                      $uibModalInstance.close({\n                        solution: SolutionObjectFactory.createNew(\n                          $scope.data.answerIsExclusive,\n                          $scope.data.correctAnswer,\n                          $scope.data.explanationHtml,\n                          $scope.data.explanationContentId)\n                      });\n                    } else {\n                      throw Error(\'Cannot save invalid solution\');\n                    }\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                    AlertsService.clearWarnings();\n                  };\n                }\n              ]\n            }).result.then(function(result) {\n              StateSolutionService.displayed = result.solution;\n\n              if (!StateSolutionService.savedMemento) {\n                var explanationContentId =\n                  result.solution.explanation.getContentId();\n                StateContentIdsToAudioTranslationsService.displayed\n                  .addContentId(explanationContentId);\n                StateContentIdsToAudioTranslationsService.saveDisplayedValue();\n                $scope.onSaveContentIdsToAudioTranslations(\n                  StateContentIdsToAudioTranslationsService.displayed\n                );\n              }\n              StateSolutionService.saveDisplayedValue();\n              $scope.onSaveSolution(StateSolutionService.displayed);\n              var solutionIsValid = SolutionVerificationService.verifySolution(\n                StateEditorService.getActiveStateName(),\n                StateEditorService.getInteraction(),\n                StateSolutionService.savedMemento.correctAnswer\n              );\n\n              SolutionValidityService.updateValidity(\n                StateEditorService.getActiveStateName(), solutionIsValid);\n              $scope.refreshWarnings()();\n              if (!solutionIsValid) {\n                AlertsService.addInfoMessage(\n                  INFO_MESSAGE_SOLUTION_IS_INVALID, 4000);\n              }\n            });\n          };\n\n          $scope.deleteSolution = function(index, evt) {\n            evt.stopPropagation();\n\n            AlertsService.clearWarnings();\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/editor_tab/\' +\n                \'delete_solution_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\',\n                function($scope, $uibModalInstance) {\n                  $scope.reallyDelete = function() {\n                    $uibModalInstance.close();\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                    AlertsService.clearWarnings();\n                  };\n                }\n              ]\n            }).result.then(function() {\n              var explanationContentId = StateSolutionService.displayed\n                .explanation.getContentId();\n              StateContentIdsToAudioTranslationsService.displayed\n                .deleteContentId(explanationContentId);\n              StateSolutionService.displayed = null;\n              StateSolutionService.saveDisplayedValue();\n              $scope.onSaveSolution(StateSolutionService.displayed);\n              StateContentIdsToAudioTranslationsService.saveDisplayedValue();\n              $scope.onSaveContentIdsToAudioTranslations(\n                StateContentIdsToAudioTranslationsService.displayed\n              );\n              StateEditorService.deleteCurrentSolutionValidity();\n            });\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
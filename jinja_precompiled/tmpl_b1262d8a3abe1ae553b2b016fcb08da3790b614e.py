from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ParamTypeObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Description of this file.\n */\n\ndescribe(\'ParamType objects\', function() {\n  var ParamType = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(inject(function($injector) {\n    ParamType = $injector.get(\'ParamTypeObjectFactory\');\n  }));\n\n  it(\'should have its registry frozen\', function() {\n    expect(Object.isFrozen(ParamType.registry)).toBe(true);\n  });\n\n  it(\'should use UnicodeString as default type\', function() {\n    expect(ParamType.getDefaultType()).toBe(ParamType.registry.UnicodeString);\n  });\n\n  it(\'should throw for non-existant types\', function() {\n    expect(function() {\n      ParamType.getTypeFromBackendName(\'MissingType\');\n    })\n      .toThrowError(/not a registered parameter type/);\n  });\n\n  it(\'should not allow invalid default values\', function() {\n    expect(function() {\n      // Defines a "Natural Number" type but gives it a negative default value.\n      new ParamType({\n        validate: function(v) {\n          return v >= 0;\n        },\n        default_value: -1,\n      });\n    }).toThrowError(/default value is invalid/);\n  });\n\n  describe(\'UnicodeString\', function() {\n    var UnicodeString = null;\n\n    beforeEach(function() {\n      UnicodeString = ParamType.registry.UnicodeString;\n    });\n\n    it(\'should be frozen\', function() {\n      expect(Object.isFrozen(UnicodeString)).toBe(true);\n    });\n\n    it(\'should give an empty string by default\', function() {\n      expect(UnicodeString.createDefaultValue()).toEqual(\'\');\n    });\n\n    it(\'should be named correctly\', function() {\n      expect(UnicodeString.getName()).toEqual(\'UnicodeString\');\n    });\n\n    it(\'should be able to tell whether or not values are strings\', function() {\n      expect(UnicodeString.valueIsValid(\'abc\')).toBe(true);\n      expect(UnicodeString.valueIsValid(3)).toBe(false);\n      expect(UnicodeString.valueIsValid([1, 2])).toBe(false);\n    });\n  });\n});'

blocks = {}
debug_info = ''
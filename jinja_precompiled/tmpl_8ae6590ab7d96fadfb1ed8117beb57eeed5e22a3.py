from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ExplorationObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating new frontend instances of Exploration\n * domain objects.\n */\n\noppia.factory(\'ExplorationObjectFactory\', [\n  \'INTERACTION_SPECS\', \'INTERACTION_DISPLAY_MODE_INLINE\', \'StateObjectFactory\',\n  \'StatesObjectFactory\', \'ParamChangesObjectFactory\', \'ParamSpecsObjectFactory\',\n  \'UrlInterpolationService\',\n  function(\n      INTERACTION_SPECS, INTERACTION_DISPLAY_MODE_INLINE, StateObjectFactory,\n      StatesObjectFactory, ParamChangesObjectFactory, ParamSpecsObjectFactory,\n      UrlInterpolationService) {\n    var Exploration = function(\n        initStateName, paramChanges, paramSpecs, states, title, languageCode) {\n      this.initStateName = initStateName;\n      this.paramChanges = paramChanges;\n      this.paramSpecs = paramSpecs;\n      this.states = states;\n      this.title = title;\n      this.languageCode = languageCode;\n    };\n\n    // Instance methods\n    Exploration.prototype.isStateTerminal = function(stateName) {\n      return (\n        stateName && this.getInteractionId(stateName) &&\n        INTERACTION_SPECS[this.getInteractionId(stateName)].is_terminal);\n    };\n\n    Exploration.prototype.getAuthorRecommendedExpIds = function(stateName) {\n      if (!this.isStateTerminal(stateName)) {\n        throw Error(\n          \'Tried to get recommendations for a non-terminal state: \' +\n          stateName);\n      }\n\n      return this.getInteractionCustomizationArgs(\n        stateName).recommendedExplorationIds.value;\n    };\n\n    Exploration.prototype.getInteraction = function(stateName) {\n      return this.states.getState(stateName).interaction;\n    };\n\n    Exploration.prototype.getInteractionId = function(stateName) {\n      return this.states.getState(stateName).interaction.id;\n    };\n\n    Exploration.prototype.getInteractionCustomizationArgs =\n      function(stateName) {\n        return this.states.getState(stateName).interaction.customizationArgs;\n      };\n\n    Exploration.prototype.getInteractionInstructions = function(stateName) {\n      var interactionId = this.getInteractionId(stateName);\n      return interactionId ? INTERACTION_SPECS[interactionId].instructions : \'\';\n    };\n\n    Exploration.prototype.getNarrowInstructions = function(stateName) {\n      var interactionId = this.getInteractionId(stateName);\n      return (\n        interactionId ?\n          INTERACTION_SPECS[interactionId].narrow_instructions :\n          \'\');\n    };\n\n    Exploration.prototype.getInteractionThumbnailSrc = function(stateName) {\n      // TODO(sll): unify this with the \'choose interaction\' modal in\n      // state_editor_interaction.html.\n      var interactionId = this.getInteractionId(stateName);\n      return interactionId ? (\n        UrlInterpolationService\n          .getInteractionThumbnailImageUrl(interactionId)) : \'\';\n    };\n\n    Exploration.prototype.isInteractionInline = function(stateName) {\n      var interactionId = this.getInteractionId(stateName);\n\n      // Note that we treat a null interaction as an inline one, so that the\n      // error message associated with it is displayed in the most compact way\n      // possible in the learner view.\n      return (\n        !interactionId ||\n        INTERACTION_SPECS[interactionId].display_mode ===\n          INTERACTION_DISPLAY_MODE_INLINE);\n    };\n\n    Exploration.prototype.getStates = function() {\n      return angular.copy(this.states);\n    };\n\n    Exploration.prototype.getState = function(stateName) {\n      return this.states.getState(stateName);\n    };\n\n    Exploration.prototype.getInitialState = function() {\n      return this.getState(this.initStateName);\n    };\n\n    Exploration.prototype.setInitialStateName = function(stateName) {\n      this.initStateName = stateName;\n    };\n\n    Exploration.prototype.getUninterpolatedContentHtml = function(stateName) {\n      return this.getState(stateName).content.getHtml();\n    };\n\n    Exploration.prototype.getAudioTranslations = function(stateName) {\n      return this.getState(stateName).content.getBindableAudioTranslations();\n    };\n\n    Exploration.prototype.getAudioTranslation = function(\n        stateName, languageCode) {\n      return this.getState(stateName).content.getAudioTranslation(\n        languageCode);\n    };\n\n    Exploration.prototype.getAllAudioTranslations = function(languageCode) {\n      return this.states.getAllAudioTranslations(languageCode);\n    };\n\n    Exploration.prototype.getLanguageCode = function() {\n      return this.languageCode;\n    };\n\n    Exploration.prototype.getAllAudioLanguageCodes = function() {\n      return this.states.getAllAudioLanguageCodes();\n    };\n\n    // Static class methods. Note that "this" is not available in\n    // static contexts.\n    Exploration.createFromBackendDict = function(explorationBackendDict) {\n      return new Exploration(\n        explorationBackendDict.init_state_name,\n        ParamChangesObjectFactory.createFromBackendList(\n          explorationBackendDict.param_changes),\n        ParamSpecsObjectFactory.createFromBackendDict(\n          explorationBackendDict.param_specs),\n        StatesObjectFactory.createFromBackendDict(\n          explorationBackendDict.states),\n        explorationBackendDict.title,\n        explorationBackendDict.language_code);\n    };\n\n    return Exploration;\n  }\n]);'

blocks = {}
debug_info = ''
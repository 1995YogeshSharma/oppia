from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/learner_dashboard/LearnerDashboard.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the creator dashboard.\n */\n\noppia.constant(\'LEARNER_DASHBOARD_SECTION_I18N_IDS\', {\n  INCOMPLETE: \'I18N_LEARNER_DASHBOARD_INCOMPLETE_SECTION\',\n  COMPLETED: \'I18N_LEARNER_DASHBOARD_COMPLETED_SECTION\',\n  SUBSCRIPTIONS: \'I18N_LEARNER_DASHBOARD_SUBSCRIPTIONS_SECTION\',\n  FEEDBACK: \'I18N_LEARNER_DASHBOARD_FEEDBACK_SECTION\',\n  PLAYLIST: \'I18N_LEARNER_DASHBOARD_PLAYLIST_SECTION\'\n});\n\noppia.constant(\'LEARNER_DASHBOARD_SUBSECTION_I18N_IDS\', {\n  EXPLORATIONS: \'I18N_DASHBOARD_EXPLORATIONS\',\n  COLLECTIONS: \'I18N_DASHBOARD_COLLECTIONS\'\n});\n\noppia.constant(\'EXPLORATIONS_SORT_BY_KEYS_AND_I18N_IDS\', {\n  LAST_PLAYED: {\n    key: \'last_played\',\n    i18nId: \'I18N_LEARNER_DASHBOARD_EXPLORATIONS_SORT_BY_LAST_PLAYED\'\n  },\n  TITLE: {\n    key: \'title\',\n    i18nId: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_TITLE\'\n  },\n  CATEGORY: {\n    key: \'category\',\n    i18nId: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_CATEGORY\'\n  }\n});\n\noppia.constant(\'SUBSCRIPTION_SORT_BY_KEYS_AND_I18N_IDS\', {\n  USERNAME: {\n    key: \'subscriber_username\',\n    i18nId: \'I18N_PREFERENCES_USERNAME\'\n  },\n  IMPACT: {\n    key: \'subscriber_impact\',\n    i18nId: \'I18N_CREATOR_IMPACT\'\n  }\n});\n\noppia.constant(\'FEEDBACK_THREADS_SORT_BY_KEYS_AND_I18N_IDS\', {\n  LAST_UPDATED: {\n    key: \'last_updated\',\n    i18nId: \'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_LAST_UPDATED\'\n  },\n  EXPLORATION: {\n    key: \'exploration\',\n    i18nId: \'I18N_DASHBOARD_TABLE_HEADING_EXPLORATION\'\n  }\n});\n\noppia.controller(\'LearnerDashboard\', [\n  \'$scope\', \'$rootScope\', \'$window\', \'$http\', \'$uibModal\', \'AlertsService\',\n  \'EXPLORATIONS_SORT_BY_KEYS_AND_I18N_IDS\',\n  \'SUBSCRIPTION_SORT_BY_KEYS_AND_I18N_IDS\', \'FATAL_ERROR_CODES\',\n  \'LearnerDashboardBackendApiService\', \'UrlInterpolationService\',\n  \'LEARNER_DASHBOARD_SECTION_I18N_IDS\',\n  \'LEARNER_DASHBOARD_SUBSECTION_I18N_IDS\', \'ThreadStatusDisplayService\',\n  \'DateTimeFormatService\', \'FEEDBACK_THREADS_SORT_BY_KEYS_AND_I18N_IDS\',\n  \'FeedbackThreadSummaryObjectFactory\', \'FeedbackMessageSummaryObjectFactory\',\n  function(\n      $scope, $rootScope, $window, $http, $uibModal, AlertsService,\n      EXPLORATIONS_SORT_BY_KEYS_AND_I18N_IDS,\n      SUBSCRIPTION_SORT_BY_KEYS_AND_I18N_IDS, FATAL_ERROR_CODES,\n      LearnerDashboardBackendApiService, UrlInterpolationService,\n      LEARNER_DASHBOARD_SECTION_I18N_IDS,\n      LEARNER_DASHBOARD_SUBSECTION_I18N_IDS, ThreadStatusDisplayService,\n      DateTimeFormatService, FEEDBACK_THREADS_SORT_BY_KEYS_AND_I18N_IDS,\n      FeedbackThreadSummaryObjectFactory, FeedbackMessageSummaryObjectFactory) {\n    $scope.EXPLORATIONS_SORT_BY_KEYS_AND_I18N_IDS = (\n      EXPLORATIONS_SORT_BY_KEYS_AND_I18N_IDS);\n    $scope.SUBSCRIPTION_SORT_BY_KEYS_AND_I18N_IDS = (\n      SUBSCRIPTION_SORT_BY_KEYS_AND_I18N_IDS);\n    $scope.FEEDBACK_THREADS_SORT_BY_KEYS_AND_I18N_IDS = (\n      FEEDBACK_THREADS_SORT_BY_KEYS_AND_I18N_IDS);\n    $scope.LEARNER_DASHBOARD_SECTION_I18N_IDS = (\n      LEARNER_DASHBOARD_SECTION_I18N_IDS);\n    $scope.LEARNER_DASHBOARD_SUBSECTION_I18N_IDS = (\n      LEARNER_DASHBOARD_SUBSECTION_I18N_IDS);\n    $scope.getStaticImageUrl = UrlInterpolationService.getStaticImageUrl;\n    $scope.PAGE_SIZE = 8;\n    $scope.Math = window.Math;\n    $scope.profilePictureDataUrl = GLOBALS.profilePictureDataUrl;\n    $scope.username = GLOBALS.username;\n    $scope.loadingFeedbacks = false;\n    var threadIndex = null;\n\n    $scope.newMessage = {\n      text: \'\'\n    };\n\n    $scope.getLabelClass = ThreadStatusDisplayService.getLabelClass;\n    $scope.getHumanReadableStatus = (\n      ThreadStatusDisplayService.getHumanReadableStatus);\n    $scope.getLocaleAbbreviatedDatetimeString = (\n      DateTimeFormatService.getLocaleAbbreviatedDatetimeString);\n\n    $scope.setActiveSection = function(newActiveSectionName) {\n      $scope.activeSection = newActiveSectionName;\n      if ($scope.activeSection ===\n        LEARNER_DASHBOARD_SECTION_I18N_IDS.FEEDBACK &&\n        $scope.feedbackThreadActive === true) {\n        $scope.feedbackThreadActive = false;\n      }\n    };\n\n    $scope.setActiveSubsection = function(newActiveSubsectionName) {\n      $scope.activeSubsection = newActiveSubsectionName;\n    };\n\n    $scope.getExplorationUrl = function(explorationId) {\n      return \'/explore/\' + explorationId;\n    };\n\n    $scope.getCollectionUrl = function(collectionId) {\n      return \'/collection/\' + collectionId;\n    };\n\n    $scope.checkMobileView = function() {\n      return ($window.innerWidth < 500);\n    };\n\n    $scope.showUsernamePopover = function(subscriberUsername) {\n      // The popover on the subscription card is only shown if the length of\n      // the subscriber username is greater than 10 and the user hovers over\n      // the truncated username.\n      if (subscriberUsername.length > 10) {\n        return \'mouseenter\';\n      } else {\n        return \'none\';\n      }\n    };\n\n    $scope.goToPreviousPage = function(section, subsection) {\n      if (section === LEARNER_DASHBOARD_SECTION_I18N_IDS.INCOMPLETE) {\n        if (subsection === LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.EXPLORATIONS) {\n          $scope.startIncompleteExpIndex = Math.max(\n            $scope.startIncompleteExpIndex - $scope.PAGE_SIZE, 0);\n        } else if (\n          subsection === LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.COLLECTIONS) {\n          $scope.startIncompleteCollectionIndex = Math.max(\n            $scope.startIncompleteCollectionIndex - $scope.PAGE_SIZE, 0);\n        }\n      } else if (section === LEARNER_DASHBOARD_SECTION_I18N_IDS.COMPLETED) {\n        if (subsection === LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.EXPLORATIONS) {\n          $scope.startCompletedExpIndex = Math.max(\n            $scope.startCompletedExpIndex - $scope.PAGE_SIZE, 0);\n        } else if (\n          subsection === LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.COLLECTIONS) {\n          $scope.startCompletedCollectionIndex = Math.max(\n            $scope.startCompletedCollectionIndex - $scope.PAGE_SIZE, 0);\n        }\n      }\n    };\n\n    $scope.goToNextPage = function(section, subsection) {\n      if (section === LEARNER_DASHBOARD_SECTION_I18N_IDS.INCOMPLETE) {\n        if (subsection === LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.EXPLORATIONS) {\n          if ($scope.startIncompleteExpIndex +\n            $scope.PAGE_SIZE <= $scope.incompleteExplorationsList.length) {\n            $scope.startIncompleteExpIndex += $scope.PAGE_SIZE;\n          }\n        } else if (\n          subsection === LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.COLLECTIONS) {\n          if ($scope.startIncompleteCollectionIndex +\n            $scope.PAGE_SIZE <= $scope.startIncompleteCollectionIndex.length) {\n            $scope.startIncompleteCollectionIndex += $scope.PAGE_SIZE;\n          }\n        }\n      } else if (section === LEARNER_DASHBOARD_SECTION_I18N_IDS.COMPLETED) {\n        if (subsection === LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.EXPLORATIONS) {\n          if ($scope.startCompletedExpIndex +\n            $scope.PAGE_SIZE <= $scope.startCompletedExpIndex.length) {\n            $scope.startCompletedExpIndex += $scope.PAGE_SIZE;\n          }\n        } else if (\n          subsection === LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.COLLECTIONS) {\n          if ($scope.startCompletedCollectionIndex +\n            $scope.PAGE_SIZE <= $scope.startCompletedCollectionIndex.length) {\n            $scope.startCompletedCollectionIndex += $scope.PAGE_SIZE;\n          }\n        }\n      }\n    };\n\n    $scope.setExplorationsSortingOptions = function(sortType) {\n      if (sortType === $scope.currentExpSortType) {\n        $scope.isCurrentExpSortDescending = !$scope.isCurrentExpSortDescending;\n      } else {\n        $scope.currentExpSortType = sortType;\n      }\n    };\n\n    $scope.setSubscriptionSortingOptions = function(sortType) {\n      if (sortType === $scope.currentSubscriptionSortType) {\n        $scope.isCurrentSubscriptionSortDescending = (\n          !$scope.isCurrentSubscriptionSortDescending);\n      } else {\n        $scope.currentSubscriptionSortType = sortType;\n      }\n    };\n\n    $scope.setFeedbackSortingOptions = function(sortType) {\n      if (sortType === $scope.currentFeedbackThreadsSortType) {\n        $scope.isCurrentFeedbackSortDescending = (\n          !$scope.isCurrentFeedbackSortDescending);\n      } else {\n        $scope.currentFeedbackThreadsSortType = sortType;\n      }\n    };\n\n    $scope.getValueOfExplorationSortKey = function(exploration) {\n      // This function is passed as a custom comparator function to `orderBy`,\n      // so that special cases can be handled while sorting explorations.\n      if ($scope.currentExpSortType ===\n          EXPLORATIONS_SORT_BY_KEYS_AND_I18N_IDS.LAST_PLAYED.key) {\n        return null;\n      } else {\n        return exploration[$scope.currentExpSortType];\n      }\n    };\n\n    $scope.getValueOfSubscriptionSortKey = function(subscription) {\n      // This function is passed as a custom comparator function to `orderBy`,\n      // so that special cases can be handled while sorting subscriptions.\n      var value = subscription[$scope.currentSubscribersSortType];\n      if ($scope.currentSubscribersSortType ===\n          SUBSCRIPTION_SORT_BY_KEYS_AND_I18N_IDS.IMPACT.key) {\n        value = (value || 0);\n      }\n      return value;\n    };\n\n    $scope.sortFeedbackThreadsFunction = function(feedbackThread) {\n      return feedbackThread[$scope.currentFeedbackThreadsSortType];\n    };\n\n    var getPlaylistSortableOptions = function(activityType) {\n      return {\n        \'ui-floating\': \'auto\',\n        start: function(e, ui) {\n          ui.placeholder.height(ui.item.height());\n          $scope.$apply();\n        },\n        sort: function (e, ui) {\n          /* eslint-disable quote-props */\n          // Reset the position of the window on scrolling. This keeps the mouse\n          // position and elements in sync.\n          ui.helper.css(\n            {\'top\': ui.position.top + $(window).scrollTop() + \'px\'});\n          /* eslint-enable quote-props */\n        },\n        update: function(e, ui) {\n          var insertExpInLearnerPlaylistUrl = (\n            UrlInterpolationService.interpolateUrl(\n              \'/learnerplaylistactivityhandler/<activityType>/<activityId>\', {\n                activityType: activityType,\n                activityId: (\n                  $scope.explorationPlaylist[ui.item.sortable.index].id)\n              }));\n\n          $http.post(insertExpInLearnerPlaylistUrl, {\n            index: ui.item.sortable.dropindex\n          });\n          $scope.$apply();\n        },\n        stop: function(e, ui) {\n          $scope.$apply();\n        },\n        axis: \'y\'\n      };\n    };\n\n    $scope.collectionPlaylistSortableOptions = getPlaylistSortableOptions(\n      constants.ACTIVITY_TYPE_COLLECTION);\n    $scope.explorationPlaylistSortableOptions = getPlaylistSortableOptions(\n      constants.ACTIVITY_TYPE_EXPLORATION);\n\n    $scope.onClickThread = function(\n        threadStatus, explorationId, threadId, explorationTitle) {\n      $scope.loadingFeedbacks = true;\n      var threadDataUrl = UrlInterpolationService.interpolateUrl(\n        \'/learnerdashboardthreadhandler/<explorationId>/<threadId>\', {\n          explorationId: explorationId,\n          threadId: threadId\n        });\n      $scope.explorationTitle = explorationTitle;\n      $scope.feedbackThreadActive = true;\n      $scope.threadStatus = threadStatus;\n      $scope.explorationId = explorationId;\n      $scope.threadId = threadId;\n\n      for (var index = 0; index < $scope.threadSummaries.length; index++) {\n        if ($scope.threadSummaries[index].explorationId === explorationId &&\n            $scope.threadSummaries[index].threadId === threadId) {\n          threadIndex = index;\n          var threadSummary = $scope.threadSummaries[index];\n          threadSummary.markTheLastTwoMessagesAsRead();\n          if (!threadSummary.lastMessageRead) {\n            $scope.numberOfUnreadThreads -= 1;\n          }\n        }\n      }\n\n      $http.get(threadDataUrl).then(function(response) {\n        var messageSummaryDicts = response.data.message_summary_list;\n        $scope.messageSummaries = [];\n        for (index = 0; index < messageSummaryDicts.length; index++) {\n          $scope.messageSummaries.push(\n            FeedbackMessageSummaryObjectFactory.createFromBackendDict(\n              messageSummaryDicts[index]));\n        }\n        $scope.loadingFeedbacks = false;\n      });\n    };\n\n    $scope.showAllThreads = function() {\n      $scope.feedbackThreadActive = false;\n      threadIndex = null;\n    };\n\n    $scope.addNewMessage = function(explorationId, threadId, newMessage) {\n      var url = UrlInterpolationService.interpolateUrl(\n        \'/threadhandler/<explorationId>/<threadId>\', {\n          explorationId: explorationId,\n          threadId: threadId\n        });\n      var payload = {\n        updated_status: null,\n        updated_subject: null,\n        text: newMessage\n      };\n      $scope.messageSendingInProgress = true;\n      $http.post(url, payload).success(function() {\n        $scope.threadSummary = $scope.threadSummaries[threadIndex];\n        $scope.threadSummary.appendNewMessage(\n          newMessage, $scope.username);\n        $scope.messageSendingInProgress = false;\n        $scope.newMessage.text = null;\n        var newMessageSummary = (\n          FeedbackMessageSummaryObjectFactory.createNewMessage(\n            $scope.threadSummary.totalMessageCount, newMessage, $scope.username,\n            $scope.profilePictureDataUrl));\n        $scope.messageSummaries.push(newMessageSummary);\n      });\n    };\n\n    $scope.showSuggestionModal = function(newContent, oldContent, description) {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/learner_dashboard/\' +\n          \'learner_view_suggestion_modal_directive.html\'),\n        backdrop: true,\n        resolve: {\n          newContent: function() {\n            return newContent;\n          },\n          oldContent: function() {\n            return oldContent;\n          },\n          description: function() {\n            return description;\n          }\n        },\n        controller: [\n          \'$scope\', \'$uibModalInstance\', \'newContent\', \'oldContent\',\n          \'description\',\n          function($scope, $uibModalInstance, newContent, oldContent,\n              description) {\n            $scope.newContent = newContent;\n            $scope.oldContent = oldContent;\n            $scope.description = description;\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n          }\n        ]\n      });\n    };\n\n    $scope.openRemoveActivityModal = function(\n        sectionNameI18nId, subsectionName, activity) {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/learner_dashboard/\' +\n          \'remove_activity_from_learner_dashboard_modal_directive.html\'),\n        backdrop: true,\n        resolve: {\n          sectionNameI18nId: function() {\n            return sectionNameI18nId;\n          },\n          subsectionName: function() {\n            return subsectionName;\n          },\n          activity: function() {\n            return activity;\n          }\n        },\n        controller: [\n          \'$scope\', \'$uibModalInstance\', \'$http\', \'sectionNameI18nId\',\n          \'subsectionName\',\n          function(\n              $scope, $uibModalInstance, $http, sectionNameI18nId,\n              subsectionName) {\n            $scope.sectionNameI18nId = sectionNameI18nId;\n            $scope.subsectionName = subsectionName;\n            $scope.activityTitle = activity.title;\n            $scope.remove = function() {\n              var activityType = \'\';\n              if (subsectionName ===\n                LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.EXPLORATIONS) {\n                activityType = constants.ACTIVITY_TYPE_EXPLORATION;\n              } else if (subsectionName ===\n                         LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.COLLECTIONS) {\n                activityType = constants.ACTIVITY_TYPE_COLLECTION;\n              } else {\n                throw new Error(\'Subsection name is not valid.\');\n              }\n\n              var removeActivityUrlPrefix = \'\';\n              if (sectionNameI18nId ===\n                  LEARNER_DASHBOARD_SECTION_I18N_IDS.PLAYLIST) {\n                removeActivityUrlPrefix = \'/learnerplaylistactivityhandler/\';\n              } else if (sectionNameI18nId ===\n                         LEARNER_DASHBOARD_SECTION_I18N_IDS.INCOMPLETE) {\n                removeActivityUrlPrefix = \'/learnerincompleteactivityhandler/\';\n              } else {\n                throw new Error(\'Section name is not valid.\');\n              }\n\n              removeActivityUrl = (\n                UrlInterpolationService.interpolateUrl(\n                  removeActivityUrlPrefix + \'<activityType>/<activityId>\', {\n                    activityType: activityType,\n                    activityId: activity.id\n                  }));\n\n              $http[\'delete\'](removeActivityUrl);\n              $uibModalInstance.close();\n            };\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n          }\n        ]\n      }).result.then(function() {\n        if (sectionNameI18nId ===\n            LEARNER_DASHBOARD_SECTION_I18N_IDS.INCOMPLETE) {\n          if (subsectionName ===\n              LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.EXPLORATIONS) {\n            var index = $scope.incompleteExplorationsList.indexOf(activity);\n            if (index !== -1) {\n              $scope.incompleteExplorationsList.splice(index, 1);\n            }\n          } else if (subsectionName ===\n                     LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.COLLECTIONS) {\n            var index = $scope.incompleteCollectionsList.indexOf(activity);\n            if (index !== -1) {\n              $scope.incompleteCollectionsList.splice(index, 1);\n            }\n          }\n        } else if (sectionNameI18nId ===\n                   LEARNER_DASHBOARD_SECTION_I18N_IDS.PLAYLIST) {\n          if (subsectionName ===\n              LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.EXPLORATIONS) {\n            var index = $scope.explorationPlaylist.indexOf(activity);\n            if (index !== -1) {\n              $scope.explorationPlaylist.splice(index, 1);\n            }\n          } else if (subsectionName ===\n                     LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.COLLECTIONS) {\n            var index = $scope.collectionPlaylist.indexOf(activity);\n            if (index !== -1) {\n              $scope.collectionPlaylist.splice(index, 1);\n            }\n          }\n        }\n      });\n    };\n\n    $rootScope.loadingMessage = \'Loading\';\n    LearnerDashboardBackendApiService.fetchLearnerDashboardData().then(\n      function(response) {\n        var responseData = response.data;\n        $scope.isCurrentExpSortDescending = true;\n        $scope.isCurrentSubscriptionSortDescending = true;\n        $scope.isCurrentFeedbackSortDescending = true;\n        $scope.currentExpSortType = (\n          EXPLORATIONS_SORT_BY_KEYS_AND_I18N_IDS.LAST_PLAYED.key);\n        $scope.currentSubscribersSortType = (\n          SUBSCRIPTION_SORT_BY_KEYS_AND_I18N_IDS.USERNAME.key);\n        $scope.currentFeedbackThreadsSortType = (\n          FEEDBACK_THREADS_SORT_BY_KEYS_AND_I18N_IDS.LAST_UPDATED.key);\n        $scope.startIncompleteExpIndex = 0;\n        $scope.startCompletedExpIndex = 0;\n        $scope.startIncompleteCollectionIndex = 0;\n        $scope.startCompletedCollectionIndex = 0;\n        $scope.completedExplorationsList = (\n          responseData.completed_explorations_list\n        );\n        $scope.completedCollectionsList = (\n          responseData.completed_collections_list\n        );\n        $scope.incompleteExplorationsList = (\n          responseData.incomplete_explorations_list\n        );\n        $scope.incompleteCollectionsList = (\n          responseData.incomplete_collections_list\n        );\n        $scope.subscriptionsList = (\n          responseData.subscription_list\n        );\n        $scope.numberNonexistentIncompleteExplorations = (\n          responseData.number_of_nonexistent_activities.incomplete_explorations\n        );\n        $scope.numberNonexistentIncompleteCollections = (\n          responseData.number_of_nonexistent_activities.incomplete_collections\n        );\n        $scope.numberNonexistentCompletedExplorations = (\n          responseData.number_of_nonexistent_activities.completed_explorations\n        );\n        $scope.numberNonexistentCompletedCollections = (\n          responseData.number_of_nonexistent_activities.completed_collections\n        );\n        $scope.numberNonexistentExplorationsFromPlaylist = (\n          responseData.number_of_nonexistent_activities.exploration_playlist\n        );\n        $scope.numberNonexistentCollectionsFromPlaylist = (\n          responseData.number_of_nonexistent_activities.collection_playlist\n        );\n        $scope.completedToIncompleteCollections = (\n          responseData.completed_to_incomplete_collections\n        );\n        var threadSummaryDicts = responseData.thread_summaries;\n        $scope.threadSummaries = [];\n        for (var index = 0; index < threadSummaryDicts.length; index++) {\n          $scope.threadSummaries.push(\n            FeedbackThreadSummaryObjectFactory.createFromBackendDict(\n              threadSummaryDicts[index]));\n        }\n        $scope.numberOfUnreadThreads = responseData.number_of_unread_threads;\n        $scope.explorationPlaylist = responseData.exploration_playlist;\n        $scope.collectionPlaylist = responseData.collection_playlist;\n        $scope.activeSection = LEARNER_DASHBOARD_SECTION_I18N_IDS.INCOMPLETE;\n        $scope.activeSubsection = (\n          LEARNER_DASHBOARD_SUBSECTION_I18N_IDS.EXPLORATIONS);\n        $scope.feedbackThreadActive = false;\n\n        $scope.noExplorationActivity = (\n          ($scope.completedExplorationsList.length === 0) &&\n            ($scope.incompleteExplorationsList.length === 0));\n        $scope.noCollectionActivity = (\n          ($scope.completedCollectionsList.length === 0) &&\n            ($scope.incompleteCollectionsList.length === 0));\n        $scope.noActivity = (\n          ($scope.noExplorationActivity) && ($scope.noCollectionActivity) &&\n          ($scope.explorationPlaylist.length === 0) &&\n          ($scope.collectionPlaylist.length === 0));\n        $rootScope.loadingMessage = \'\';\n      },\n      function(errorResponse) {\n        if (FATAL_ERROR_CODES.indexOf(errorResponse.status) !== -1) {\n          AlertsService.addWarning(\'Failed to get learner dashboard data\');\n        }\n      }\n    );\n  }\n]).animation(\'.menu-sub-section\', function() {\n  var NG_HIDE_CLASS = \'ng-hide\';\n  return {\n    beforeAddClass: function(element, className, done) {\n      if (className === NG_HIDE_CLASS) {\n        element.slideUp(done);\n      }\n    },\n    removeClass: function(element, className, done) {\n      if (className === NG_HIDE_CLASS) {\n        element.hide().slideDown(done);\n      }\n    }\n  };\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/SearchExplorationsBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for SearchExplorationsBackendApiService.\n */\n\ndescribe(\'Exploration search backend API service\', function() {\n  var SearchExplorationsBackendApiService = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    SearchExplorationsBackendApiService = $injector.get(\n      \'SearchExplorationsBackendApiService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should call the provided success handler on HTTP success\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n    var query = escape(btoa(\'three\'));\n\n    $httpBackend.expect(\'GET\', \'/exploration/metadata_search?q=\' + query)\n      .respond(200, {collection_node_metadata_list: []});\n    SearchExplorationsBackendApiService.fetchExplorations(\'three\')\n      .then(successHandler, failHandler);\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalled();\n    expect(failHandler).not.toHaveBeenCalled();\n  });\n\n  it(\'should search for explorations from the backend\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n    var query = escape(btoa(\'count\'));\n\n    // Search result object returnable from the backend\n    searchResults = {\n      collection_node_metadata_list: [{\n        id: \'12\',\n        objective:\n        \'learn how to count permutations accurately and systematically\',\n        title: \'Protractor Test\'\n      }, {\n        id: \'4\',\n        objective:\n        \'learn how to count permutations accurately and systematically\',\n        title: \'Three Balls\'\n      }]\n    };\n\n    $httpBackend\n      .expect(\'GET\', \'/exploration/metadata_search?q=\' + query)\n      .respond(200, searchResults);\n    SearchExplorationsBackendApiService.fetchExplorations(\'count\')\n      .then(successHandler, failHandler);\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalledWith(searchResults);\n    expect(failHandler).not.toHaveBeenCalled();\n  });\n\n  it(\'should call the provided fail handler on HTTP failure\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n    var query = escape(btoa(\'oppia\'));\n\n    $httpBackend\n      .expect(\'GET\', \'/exploration/metadata_search?q=\' + query).respond(500);\n    SearchExplorationsBackendApiService.fetchExplorations(\'oppia\')\n      .then(successHandler, failHandler);\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).not.toHaveBeenCalled();\n    expect(failHandler).toHaveBeenCalled();\n  });\n});'

blocks = {}
debug_info = ''
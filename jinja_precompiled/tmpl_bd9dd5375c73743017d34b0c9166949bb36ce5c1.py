from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/utilities/UrlInterpolationServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for UrlInterpolationService.\n */\n\ndescribe(\'URL Interpolation Service\', function() {\n  var uis = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    uis = $injector.get(\'UrlInterpolationService\');\n    GLOBALS.DEV_MODE = false;\n  }));\n\n  afterEach(function() {\n    GLOBALS.DEV_MODE = true;\n  });\n\n  it(\'should add hash to url if hash is set\', function() {\n    expect(uis._getUrlWithSlug(\'/hash_test.html\')).toBe(\n      \'/hash_test.\' + hashes[\'/hash_test.html\'] + \'.html\'\n    );\n    expect(uis._getUrlWithSlug(\'/path_test/hash_test.html\')).toBe(\n      \'/path_test/hash_test.\' + hashes[\'/path_test/hash_test.html\'] + \'.html\'\n    );\n    expect(uis._getUrlWithSlug(\'/hash_test.min.js\')).toBe(\n      \'/hash_test.min.\' + hashes[\'/hash_test.min.js\'] + \'.js\'\n    );\n  });\n\n  it(\'should build complete URL with prefixes and hash\', function() {\n    expect(uis._getCompleteUrl(\'/test_folder\', \'/hash_test.html\')).toBe(\n      \'/build/test_folder/hash_test.\' + hashes[\'/hash_test.html\'] + \'.html\'\n    );\n    expect(\n      uis._getCompleteUrl(\'/test_folder\', \'/path_test/hash_test.html\')).toBe(\n      \'/build/test_folder/path_test/hash_test.\' +\n      hashes[\'/path_test/hash_test.html\'] + \'.html\'\n    );\n    expect(uis._getCompleteUrl(\'/test_folder\', \'/hash_test.min.js\')).toBe(\n      \'/build/test_folder/hash_test.min.\' + hashes[\'/hash_test.min.js\'] + \'.js\'\n    );\n    expect(uis._getCompleteUrl(\'\', \'/hash_test.html\')).toBe(\n      \'/build/hash_test.\' + hashes[\'/hash_test.html\'] + \'.html\'\n    );\n  });\n\n  it(\'should throw an error for erroneous URLs\', function() {\n    expect(uis.interpolateUrl).toThrow(\n      new Error(\'Invalid or empty URL template passed in: \\\'undefined\\\'\'));\n    expect(uis.interpolateUrl.bind(null, null, {})).toThrow(\n      new Error(\'Invalid or empty URL template passed in: \\\'null\\\'\'));\n    expect(uis.interpolateUrl.bind(null, undefined, {})).toThrow(\n      new Error(\'Invalid or empty URL template passed in: \\\'undefined\\\'\'));\n    expect(uis.interpolateUrl.bind(null, \'\', {})).toThrow(\n      new Error(\'Invalid or empty URL template passed in: \\\'\\\'\'));\n    expect(uis.interpolateUrl.bind(null, \'\')).toThrow(\n      new Error(\'Invalid or empty URL template passed in: \\\'\\\'\'));\n  });\n\n  it(\'should throw an error for erroneous interpolation values\', function() {\n    expect(uis.interpolateUrl.bind(null, \'url\', null)).toThrow(\n      new Error(\'Expected an object of interpolation values to be passed \' +\n        \'into interpolateUrl.\'));\n    expect(uis.interpolateUrl.bind(null, \'url\', undefined)).toThrow(\n      new Error(\'Expected an object of interpolation values to be passed \' +\n        \'into interpolateUrl.\'));\n    expect(\n      uis.interpolateUrl.bind(null, \'/test_url/<param>\', \'value\')\n    ).toThrow(new Error(\n      \'Expected an object of interpolation values to be passed into \' +\n      \'interpolateUrl.\'));\n    expect(\n      uis.interpolateUrl.bind(null, \'/test_url/<param>\', [\'value\'])\n    ).toThrow(new Error(\n      \'Expected an object of interpolation values to be passed into \' +\n      \'interpolateUrl.\'));\n  });\n\n  it(\'should interpolate URLs not requiring parameters\', function() {\n    expect(uis.interpolateUrl(\'/test_url/\', {})).toBe(\'/test_url/\');\n    expect(uis.interpolateUrl(\'/test_url/\', {\n      param: \'value\'\n    })).toBe(\'/test_url/\');\n  });\n\n  it(\'should interpolate URLs when parameters have parentheses\', function() {\n    expect(uis.interpolateUrl(\'/test_url/<param>\', {\n      param: \'value (1\'\n    })).toBe(\'/test_url/value%20(1\');\n    expect(uis.interpolateUrl(\'/test_url/<param>\', {\n      param: \'value 1)\'\n    })).toBe(\'/test_url/value%201)\');\n    expect(uis.interpolateUrl(\'/test_url/<param>\', {\n      param: \'value (1)\'\n    })).toBe(\'/test_url/value%20(1)\');\n  });\n\n  it(\'should interpolate URLs requiring one or more parameters\', function() {\n    expect(uis.interpolateUrl(\'/test_url/<fparam>\', {\n      fparam: \'value\'\n    })).toBe(\'/test_url/value\');\n    expect(uis.interpolateUrl(\n      \'/test_url/<first_param>/<second_param>/<third_param>\', {\n        first_param: \'value1\',\n        second_param: \'value2\',\n        third_param: \'value3\'\n      })).toBe(\'/test_url/value1/value2/value3\');\n  });\n\n  it(\'should interpolate parameters within words or adjacent to other \' +\n     \'parameters\', function() {\n    // It also doesn\'t need to have \'/\' prefixing the URL.\n    expect(uis.interpolateUrl(\'word<with_param>\', {\n      with_param: \'_with_value\'\n    })).toBe(\'word_with_value\');\n    expect(uis.interpolateUrl(\'Eating_<param1><param2>_with_syrup\', {\n      param1: \'pan\',\n      param2: \'cakes\'\n    })).toBe(\'Eating_pancakes_with_syrup\');\n  });\n\n  it(\'should interpolate parameters beginning, ending, or composing \' +\n     \'the URL\', function() {\n    expect(uis.interpolateUrl(\'<prefix>_with_words\', {\n      prefix: \'Signs\'\n    })).toBe(\'Signs_with_words\');\n    expect(uis.interpolateUrl(\'Neither_here_nor_<suffix>\', {\n      suffix: \'anywhere\'\n    })).toBe(\'Neither_here_nor_anywhere\');\n    expect(uis.interpolateUrl(\'<param>\', {\n      param: \'value\'\n    })).toBe(\'value\');\n  });\n\n  it(\'should sanitize parameters but not URLs\', function() {\n    expect(uis.interpolateUrl(\'URL with a space\', {})).toBe(\n      \'URL with a space\');\n    expect(uis.interpolateUrl(\n      \'/test_url/<first_param>?<query_name>=<query_value>\', {\n        first_param: \'SEARCH\',\n        query_name: \'title or website\',\n        query_value: \'oppia\'\n      })).toBe(\'/test_url/SEARCH?title%20or%20website=oppia\');\n  });\n\n  it(\'should escape the "=" symbol correctly\', function() {\n    expect(uis.interpolateUrl(\n      \'/test_url/<first_param>\', {\n        first_param: \'first=param\',\n      })).toBe(\'/test_url/first%3Dparam\');\n  });\n\n  it(\'should not interpolate bad parameter names and values\', function() {\n    // Empty angle brackets indicate a malformed URL.\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<>\', {})).toThrow(\n      new Error(\'Invalid URL template received: \\\'/test_url/<>\\\'\'));\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<>\', {\n      \'\': \'value\'\n    })).toThrow(new Error(\'Invalid URL template received: \\\'/test_url/<>\\\'\'));\n\n    // Non alpha-numeric will not match the pattern matching for finding a\n    // parameter name.\n    expect(\'/test_url/<b@d!#$%^&*() p@r@m n@m3`~[]{}>\', {}).toBe(\n      \'/test_url/<b@d!#$%^&*() p@r@m n@m3`~[]{}>\');\n\n    // Parameter names cannot have spaces.\n    expect(uis.interpolateUrl(\'/test_url/<parameter with spaces>\', {\n      \'parameter with spaces\': \'value\'\n    })).toBe(\'/test_url/<parameter with spaces>\');\n\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<<name>>\', {\n      name: \'value\'\n    })).toThrow(new Error(\n      \'Invalid URL template received: \\\'/test_url/<<name>>\\\'\'));\n\n    expect(uis.interpolateUrl(\'/test_url/<name>\', {\n      name: \'<value>\'\n    })).toEqual(\'/test_url/%3Cvalue%3E\');\n\n    expect(uis.interpolateUrl(\'/test_url/<name>\', {\n      name: \'<<value>>\'\n    })).toEqual(\'/test_url/%3C%3Cvalue%3E%3E\');\n\n    expect(uis.interpolateUrl(\'/test_url/<name>\', {\n      name: \'<>\'\n    })).toEqual(\'/test_url/%3C%3E\');\n\n    expect(uis.interpolateUrl(\'/test_url/?<query_name>=<query_value>\', {\n      query_name: \'website\',\n      query_value: \'https://www.oppia.org/\'\n    })).toEqual(\'/test_url/?website=https%3A%2F%2Fwww.oppia.org%2F\');\n\n    expect(uis.interpolateUrl(\'/test_url/<name>\', {\n      name: \'value\\nmultiple lines\'\n    })).toEqual(\'/test_url/value%0Amultiple%20lines\');\n  });\n\n  it(\'should throw an error for missing parameters\', function() {\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<page>\', {})).toThrow(\n      new Error(\'Expected variable \\\'page\\\' when interpolating URL.\'));\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<page1>\', {\n      page2: \'v\'\n    })).toThrow(new Error(\n      \'Expected variable \\\'page1\\\' when interpolating URL.\'));\n  });\n\n  it(\'should throw an error for non-string parameters\', function() {\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<page>\', {\n      page: 0\n    })).toThrow(new Error(\n      \'Parameters passed into interpolateUrl must be strings.\'));\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<page>\', {\n      page: {}\n    })).toThrow(new Error(\n      \'Parameters passed into interpolateUrl must be strings.\'));\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<page>\', {\n      page: []\n    })).toThrow(new Error(\n      \'Parameters passed into interpolateUrl must be strings.\'));\n    expect(uis.interpolateUrl.bind(null, \'/test_url/<page>\', {\n      page: /abc/\n    })).toThrow(new Error(\n      \'Parameters passed into interpolateUrl must be strings.\'));\n  });\n\n  it(\'should interpolate correct path\', function() {\n    expect(uis.getStaticImageUrl(\'/test.png\')).toBe(\n      \'/build/assets/images/test.png\');\n    expect(uis.getStaticImageUrl(\'/test_url/test.png\')).toBe(\n      \'/build/assets/images/test_url/test.png\');\n    expect(uis.getStaticImageUrl(\'/hash_test.png\')).toBe(\n      \'/build/assets/images/hash_test.\' + hashes[\'/images/hash_test.png\'] +\n      \'.png\');\n\n    expect(uis.getInteractionThumbnailImageUrl(\'LogicProof\')).toBe(\n      \'/build/extensions/interactions/LogicProof/static/LogicProof.png\');\n    expect(uis.getInteractionThumbnailImageUrl(\'interTest\')).toBe(\n      \'/build/extensions/interactions/interTest/static/interTest.\' +\n      hashes[\'/interactions/interTest/static/interTest.png\'] + \'.png\');\n\n    expect(uis.getDirectiveTemplateUrl(\'/test.html\')).toBe(\n      \'/build/templates/head/test.html\');\n    expect(uis.getDirectiveTemplateUrl(\'/test_url/test.html\')).toBe(\n      \'/build/templates/head/test_url/test.html\');\n    expect(uis.getDirectiveTemplateUrl(\'/pages_test/hash_test.html\')).toBe(\n      \'/build/templates/head/pages_test/hash_test.\' +\n      hashes[\'/pages_test/hash_test.html\'] + \'.html\');\n\n    expect(uis.getStaticAssetUrl(\'/test.json\')).toBe(\n      \'/build/assets/test.json\');\n    expect(uis.getStaticAssetUrl(\'/test_url/test.json\')).toBe(\n      \'/build/assets/test_url/test.json\');\n    expect(uis.getStaticAssetUrl(\'/assets_test/hash_test.json\')).toBe(\n      \'/build/assets/assets_test/hash_test.\' +\n      hashes[\'/assets_test/hash_test.json\'] + \'.json\');\n\n    expect(uis.getExtensionResourceUrl(\'/test.html\')).toBe(\n      \'/build/extensions/test.html\');\n    expect(uis.getExtensionResourceUrl(\'/test_url/test.html\')).toBe(\n      \'/build/extensions/test_url/test.html\');\n    expect(uis.getExtensionResourceUrl(\'/path_test/hash_test.html\')).toBe(\n      \'/build/extensions/path_test/hash_test.\' +\n      hashes[\'/path_test/hash_test.html\'] + \'.html\');\n  });\n\n  it(\'should throw an error for empty path\', function() {\n    expect(uis.getStaticImageUrl.bind(null, null)).toThrow(\n      new Error(\n        \'Empty path passed in method.\'));\n    expect(uis.getStaticImageUrl.bind(null, \'\')).toThrow(\n      new Error(\n        \'Empty path passed in method.\'));\n\n    expect(uis.getInteractionThumbnailImageUrl.bind(null, null)).toThrow(\n      new Error(\n        \'Empty interactionId passed in getInteractionThumbnailImageUrl.\'));\n    expect(uis.getInteractionThumbnailImageUrl.bind(null, \'\')).toThrow(\n      new Error(\n        \'Empty interactionId passed in getInteractionThumbnailImageUrl.\'));\n\n    expect(uis.getDirectiveTemplateUrl.bind(null, null)).toThrow(\n      new Error(\'Empty path passed in method.\'));\n    expect(uis.getDirectiveTemplateUrl.bind(null, \'\')).toThrow(\n      new Error(\'Empty path passed in method.\'));\n\n    expect(uis.getStaticAssetUrl.bind(null, null)).toThrow(\n      new Error(\'Empty path passed in method.\'));\n    expect(uis.getStaticAssetUrl.bind(null, \'\')).toThrow(\n      new Error(\'Empty path passed in method.\'));\n\n    expect(uis.getExtensionResourceUrl.bind(null, null)).toThrow(\n      new Error(\'Empty path passed in method.\'));\n    expect(uis.getExtensionResourceUrl.bind(null, \'\')).toThrow(\n      new Error(\'Empty path passed in method.\'));\n  });\n\n  it(\'should throw an error for path not beginning with forward slash\',\n    function() {\n      expect(uis.getStaticImageUrl.bind(null, \'test_fail.png\')).toThrow(\n        new Error(\n          \'Path must start with \\\'\\/\\\': \\\'\' + \'test_fail.png\' + \'\\\'.\'));\n      expect(uis.getStaticImageUrl.bind(null, \'test_url/fail.png\')).toThrow(\n        new Error(\n          \'Path must start with \\\'\\/\\\': \\\'\' + \'test_url/fail.png\' + \'\\\'.\'));\n\n      expect(uis.getDirectiveTemplateUrl.bind(null, \'test_fail.html\')).toThrow(\n        new Error(\n          \'Path must start with \\\'\\/\\\': \\\'\' + \'test_fail.html\' + \'\\\'.\'));\n      expect(\n        uis.getDirectiveTemplateUrl.bind(null, \'test_url/fail.html\')).toThrow(\n        new Error(\n          \'Path must start with \\\'\\/\\\': \\\'\' + \'test_url/fail.html\' + \'\\\'.\'));\n\n      expect(uis.getStaticAssetUrl.bind(null, \'test_fail.html\')).toThrow(\n        new Error(\n          \'Path must start with \\\'\\/\\\': \\\'\' + \'test_fail.html\' + \'\\\'.\'));\n      expect(uis.getStaticAssetUrl.bind(null, \'test_url/fail.html\')).toThrow(\n        new Error(\n          \'Path must start with \\\'\\/\\\': \\\'\' + \'test_url/fail.html\' + \'\\\'.\'));\n\n      expect(uis.getExtensionResourceUrl.bind(null, \'test_fail.html\')).toThrow(\n        new Error(\n          \'Path must start with \\\'\\/\\\': \\\'\' + \'test_fail.html\' + \'\\\'.\'));\n      expect(\n        uis.getExtensionResourceUrl.bind(null, \'test_url/fail.html\')).toThrow(\n        new Error(\n          \'Path must start with \\\'\\/\\\': \\\'\' + \'test_url/fail.html\' + \'\\\'.\'));\n    });\n});'

blocks = {}
debug_info = ''
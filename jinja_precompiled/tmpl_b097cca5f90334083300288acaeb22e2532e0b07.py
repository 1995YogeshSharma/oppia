from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/GuestCollectionProgressObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating a domain object which\n * represents the progress of a guest playing through a collection.\n */\n\noppia.factory(\'GuestCollectionProgressObjectFactory\', [\n  function() {\n    var GuestCollectionProgress = function(completedExplorationsMap) {\n      this._completedExplorationsMap = completedExplorationsMap;\n    };\n\n    // Instance methods\n\n    // Returns whether the guest has made any progress towards completing the\n    // specified collection ID. Note that this does not account for whether the\n    // completed explorations are still contained within that collection.\n    GuestCollectionProgress.prototype.hasCompletionProgress = function(\n        collectionId) {\n      return this._completedExplorationsMap.hasOwnProperty(collectionId);\n    };\n\n    // Returns an array of exploration IDs which have been completed by the\n    // specified collection ID, or empty if none have.\n    GuestCollectionProgress.prototype.getCompletedExplorationIds = function(\n        collectionId) {\n      if (!this.hasCompletionProgress(collectionId)) {\n        return [];\n      }\n      return angular.copy(this._completedExplorationsMap[collectionId]);\n    };\n\n    // Specifies that a specific exploration ID has been completed in the\n    // context of the specified collection. Returns whether that exploration ID\n    // was not previously registered as completed for the collection.\n    GuestCollectionProgress.prototype.addCompletedExplorationId = function(\n        collectionId, explorationId) {\n      var completedExplorationIds = this.getCompletedExplorationIds(\n        collectionId);\n      if (completedExplorationIds.indexOf(explorationId) === -1) {\n        completedExplorationIds.push(explorationId);\n        this._completedExplorationsMap[collectionId] = completedExplorationIds;\n        return true;\n      }\n      return false;\n    };\n\n    // Converts this object to JSON for storage.\n    GuestCollectionProgress.prototype.toJson = function(\n        collectionId, explorationIds) {\n      return JSON.stringify(this._completedExplorationsMap);\n    };\n\n    // Static class methods. Note that "this" is not available in static\n    // contexts.\n\n    // This function takes a JSON string which represents a raw collection\n    // object and returns a new GuestCollectionProgress domain object. A null or\n    // undefined string indicates that an empty progress object should be\n    // created.\n    GuestCollectionProgress.createFromJson = function(collectionProgressJson) {\n      if (collectionProgressJson) {\n        return new GuestCollectionProgress(JSON.parse(collectionProgressJson));\n      } else {\n        return new GuestCollectionProgress({});\n      }\n    };\n\n\n    return GuestCollectionProgress;\n  }\n]);'

blocks = {}
debug_info = ''
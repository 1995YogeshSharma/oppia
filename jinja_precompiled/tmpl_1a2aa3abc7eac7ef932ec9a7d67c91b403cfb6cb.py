from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/TopicObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating instances of frontend\n * topic domain objects.\n */\n\noppia.factory(\'TopicObjectFactory\', [\n  \'SubtopicObjectFactory\', \'SkillSummaryObjectFactory\',\n  function(SubtopicObjectFactory, SkillSummaryObjectFactory) {\n    var Topic = function(\n        id, name, description, languageCode, canonicalStoryIds,\n        additionalStoryIds, uncategorizedSkillIds,\n        nextSubtopicId, version, subtopics, skillIdToDescriptionMap) {\n      this._id = id;\n      this._name = name;\n      this._description = description;\n      this._languageCode = languageCode;\n      this._canonicalStoryIds = canonicalStoryIds;\n      this._additionalStoryIds = additionalStoryIds;\n      this._uncategorizedSkillSummaries = uncategorizedSkillIds.map(\n        function(skillId) {\n          return SkillSummaryObjectFactory.create(\n            skillId, skillIdToDescriptionMap[skillId]);\n        });\n      this._nextSubtopicId = nextSubtopicId;\n      this._version = version;\n      this._subtopics = angular.copy(subtopics);\n    };\n\n    // Instance methods\n\n    Topic.prototype.getId = function() {\n      return this._id;\n    };\n\n    Topic.prototype.getName = function() {\n      return this._name;\n    };\n\n    Topic.prototype.setName = function(name) {\n      this._name = name;\n    };\n\n    Topic.prototype.getDescription = function() {\n      return this._description;\n    };\n\n    Topic.prototype.getNextSubtopicId = function() {\n      return this._nextSubtopicId;\n    };\n\n    Topic.prototype.setDescription = function(description) {\n      this._description = description;\n    };\n\n    Topic.prototype.getLanguageCode = function() {\n      return this._languageCode;\n    };\n\n    Topic.prototype.setLanguageCode = function(languageCode) {\n      this._languageCode = languageCode;\n    };\n\n    Topic.prototype.getVersion = function() {\n      return this._version;\n    };\n\n    Topic.prototype.validate = function() {\n      var issues = [];\n      if (this._name === \'\') {\n        issues.push(\'Topic name should not be empty.\');\n      }\n\n      var subtopics = this._subtopics;\n      var canonicalStoryIds = this._canonicalStoryIds;\n      var additionalStoryIds = this._additionalStoryIds;\n\n      for (var i = 0; i < canonicalStoryIds.length; i++) {\n        var storyId = canonicalStoryIds[i];\n        if (canonicalStoryIds.indexOf(storyId) <\n          canonicalStoryIds.lastIndexOf(storyId)) {\n          issues.push(\n            \'The canonical story with id \' + storyId + \' is duplicated in\' +\n            \' the topic.\');\n        }\n      }\n      for (var i = 0; i < additionalStoryIds.length; i++) {\n        var storyId = additionalStoryIds[i];\n        if (additionalStoryIds.indexOf(storyId) <\n          additionalStoryIds.lastIndexOf(storyId)) {\n          issues.push(\n            \'The additional story with id \' + storyId + \' is duplicated in\' +\n            \' the topic.\');\n        }\n      }\n      for (var i = 0; i < canonicalStoryIds.length; i++) {\n        if (additionalStoryIds.indexOf(canonicalStoryIds[i]) !== -1) {\n          issues.push(\n            \'The story with id \' + canonicalStoryIds[i] +\n            \' is present in both canonical and additional stories.\');\n        }\n      }\n      var topicSkillIds = angular.copy(\n        this._uncategorizedSkillSummaries.map(function(skillSummary) {\n          return skillSummary.getId();\n        }));\n      for (var i = 0; i < subtopics.length; i++) {\n        issues = issues.concat(subtopics[i].validate());\n        var skillIds = subtopics[i].getSkillSummaries().map(\n          function(skillSummary) {\n            return skillSummary.getId();\n          }\n        );\n        for (var j = 0; j < skillIds.length; j++) {\n          if (topicSkillIds.indexOf(skillIds[j]) === -1) {\n            topicSkillIds.push(skillIds[j]);\n          } else {\n            issues.push(\n              \'The skill with id \' + skillIds[j] +\n              \' is duplicated in the topic\');\n          }\n        }\n      }\n      return issues;\n    };\n\n    Topic.prototype.getSubtopicById = function(subtopicId) {\n      for (var i = 0; i < this._subtopics.length; i++) {\n        var id = this._subtopics[i].getId();\n        if (id === subtopicId) {\n          return this._subtopics[i];\n        }\n      }\n      return null;\n    };\n\n    // Adds a new frontend subtopic domain object to this topic.\n    Topic.prototype.addSubtopic = function(title) {\n      var newSubtopic = SubtopicObjectFactory.createFromTitle(\n        this._nextSubtopicId, title);\n      this._subtopics.push(newSubtopic);\n      this._nextSubtopicId++;\n    };\n\n    // Attempts to remove a subtopic from this topic given the\n    // subtopic ID.\n    Topic.prototype.deleteSubtopic = function(subtopicId, isNewlyCreated) {\n      var subtopicDeleted = false;\n      for (var i = 0; i < this._subtopics.length; i++) {\n        if (this._subtopics[i].getId() === subtopicId) {\n          // When a subtopic is deleted, all the skills in it are moved to\n          // uncategorized skill ids.\n          var skillSummaries = this._subtopics[i].getSkillSummaries();\n          for (var j = 0; j < skillSummaries.length; j++) {\n            var skillId = skillSummaries[j].getId();\n            var skillDescription = skillSummaries[j].getDescription();\n            if (!this.hasUncategorizedSkill(skillId)) {\n              this._uncategorizedSkillSummaries.push(\n                SkillSummaryObjectFactory.create(skillId, skillDescription));\n            }\n          }\n          this._subtopics.splice(i, 1);\n          subtopicDeleted = true;\n          break;\n        }\n      }\n      if (!subtopicDeleted) {\n        throw Error(\'Subtopic to delete does not exist\');\n      }\n      if (isNewlyCreated) {\n        for (var i = 0; i < this._subtopics.length; i++) {\n          if (this._subtopics[i].getId() > subtopicId) {\n            this._subtopics[i].decrementId();\n          }\n        }\n        this._nextSubtopicId--;\n      }\n    };\n\n    Topic.prototype.clearSubtopics = function() {\n      this._subtopics.length = 0;\n    };\n\n    Topic.prototype.getSubtopics = function() {\n      return this._subtopics.slice();\n    };\n\n    Topic.prototype.addCanonicalStoryId = function(storyId) {\n      if (this._canonicalStoryIds.indexOf(storyId) !== -1) {\n        throw Error(\n          \'Given story id already present in canonical story ids.\');\n      }\n      this._canonicalStoryIds.push(storyId);\n    };\n\n    Topic.prototype.removeCanonicalStoryId = function(storyId) {\n      var index = this._canonicalStoryIds.indexOf(storyId);\n      if (index === -1) {\n        throw Error(\n          \'Given story id not present in canonical story ids.\');\n      }\n      this._canonicalStoryIds.splice(index, 1);\n    };\n\n    Topic.prototype.clearCanonicalStoryIds = function() {\n      this._canonicalStoryIds.length = 0;\n    };\n\n    Topic.prototype.getCanonicalStoryIds = function() {\n      return this._canonicalStoryIds.slice();\n    };\n\n    Topic.prototype.addAdditionalStoryId = function(storyId) {\n      if (this._additionalStoryIds.indexOf(storyId) !== -1) {\n        throw Error(\n          \'Given story id already present in additional story ids.\');\n      }\n      this._additionalStoryIds.push(storyId);\n    };\n\n    Topic.prototype.removeAdditionalStoryId = function(storyId) {\n      var index = this._additionalStoryIds.indexOf(storyId);\n      if (index === -1) {\n        throw Error(\n          \'Given story id not present in additional story ids.\');\n      }\n      this._additionalStoryIds.splice(index, 1);\n    };\n\n    Topic.prototype.clearAdditionalStoryIds = function() {\n      this._additionalStoryIds.length = 0;\n    };\n\n    Topic.prototype.getAdditionalStoryIds = function() {\n      return this._additionalStoryIds.slice();\n    };\n\n    Topic.prototype.hasUncategorizedSkill = function(skillId) {\n      return this._uncategorizedSkillSummaries.some(function(skillSummary) {\n        return skillSummary.getId() === skillId;\n      });\n    };\n\n    Topic.prototype.addUncategorizedSkill = function(\n        skillId, skillDescription) {\n      var skillIsPresentInSomeSubtopic = false;\n      for (var i = 0; i < this._subtopics.length; i++) {\n        if (this._subtopics[i].hasSkill(skillId)) {\n          skillIsPresentInSomeSubtopic = true;\n          break;\n        }\n      }\n      if (skillIsPresentInSomeSubtopic) {\n        throw Error(\'Given skillId is already present in a subtopic.\');\n      }\n      if (this.hasUncategorizedSkill(skillId)) {\n        throw Error(\'Given skillId is already an uncategorized skill.\');\n      }\n      this._uncategorizedSkillSummaries.push(\n        SkillSummaryObjectFactory.create(skillId, skillDescription));\n    };\n\n    Topic.prototype.removeUncategorizedSkill = function(skillId) {\n      var index = this._uncategorizedSkillSummaries.map(function(skillSummary) {\n        return skillSummary.getId();\n      }).indexOf(skillId);\n      if (index === -1) {\n        throw Error(\'Given skillId is not an uncategorized skill.\');\n      }\n      this._uncategorizedSkillSummaries.splice(index, 1);\n    };\n\n    Topic.prototype.clearUncategorizedSkills = function() {\n      this._uncategorizedSkillSummaries.length = 0;\n    };\n\n    Topic.prototype.getUncategorizedSkillSummaries = function() {\n      return this._uncategorizedSkillSummaries.slice();\n    };\n\n    // Reassigns all values within this topic to match the existing\n    // topic. This is performed as a deep copy such that none of the\n    // internal, bindable objects are changed within this topic.\n    Topic.prototype.copyFromTopic = function(otherTopic) {\n      this._id = otherTopic.getId();\n      this.setName(otherTopic.getName());\n      this.setDescription(otherTopic.getDescription());\n      this.setLanguageCode(otherTopic.getLanguageCode());\n      this._version = otherTopic.getVersion();\n      this._nextSubtopicId = otherTopic.getNextSubtopicId();\n      this.clearAdditionalStoryIds();\n      this.clearCanonicalStoryIds();\n      this.clearUncategorizedSkills();\n      this.clearSubtopics();\n\n      var canonicalStoryIds = otherTopic.getCanonicalStoryIds();\n      for (var i = 0; i < canonicalStoryIds.length; i++) {\n        this.addCanonicalStoryId(canonicalStoryIds[i]);\n      }\n\n      var additionalStoryIds = otherTopic.getAdditionalStoryIds();\n      for (var i = 0; i < additionalStoryIds.length; i++) {\n        this.addAdditionalStoryId(additionalStoryIds[i]);\n      }\n\n      var uncategorizedSkillSummaries =\n        otherTopic.getUncategorizedSkillSummaries();\n      for (var i = 0; i < uncategorizedSkillSummaries.length; i++) {\n        this.addUncategorizedSkill(\n          uncategorizedSkillSummaries[i].getId(),\n          uncategorizedSkillSummaries[i].getDescription());\n      }\n\n      this._subtopics = angular.copy(otherTopic.getSubtopics());\n    };\n\n    // Static class methods. Note that "this" is not available in static\n    // contexts. This function takes a JSON object which represents a backend\n    // topic python dict.\n    Topic.create = function(topicBackendDict, skillIdToDescriptionDict) {\n      var subtopics = topicBackendDict.subtopics.map(function(subtopic) {\n        return SubtopicObjectFactory.create(subtopic, skillIdToDescriptionDict);\n      });\n      return new Topic(\n        topicBackendDict.id, topicBackendDict.name,\n        topicBackendDict.description, topicBackendDict.language_code,\n        topicBackendDict.canonical_story_ids,\n        topicBackendDict.additional_story_ids,\n        topicBackendDict.uncategorized_skill_ids,\n        topicBackendDict.next_subtopic_id, topicBackendDict.version,\n        subtopics, skillIdToDescriptionDict\n      );\n    };\n\n    // Create an interstitial topic that would be displayed in the editor until\n    // the actual topic is fetched from the backend.\n    Topic.createInterstitialTopic = function() {\n      return new Topic(\n        null, \'Topic name loading\', \'Topic description loading\',\n        \'en\', [], [], [], 1, 1, [], {}\n      );\n    };\n    return Topic;\n  }\n]);'

blocks = {}
debug_info = ''
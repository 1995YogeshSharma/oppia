from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/collection_editor/editor_tab/CollectionNodeCreatorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for creating a new collection node.\n */\n\noppia.directive(\'collectionNodeCreator\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/collection_editor/editor_tab/\' +\n        \'collection_node_creator_directive.html\'),\n      controller: [\n        \'$scope\', \'$http\', \'$window\', \'$filter\', \'AlertsService\',\n        \'ValidatorsService\', \'CollectionEditorStateService\',\n        \'CollectionLinearizerService\', \'CollectionUpdateService\',\n        \'CollectionNodeObjectFactory\', \'ExplorationSummaryBackendApiService\',\n        \'SearchExplorationsBackendApiService\', \'siteAnalyticsService\',\n        \'INVALID_NAME_CHARS\',\n        function(\n            $scope, $http, $window, $filter, AlertsService,\n            ValidatorsService, CollectionEditorStateService,\n            CollectionLinearizerService, CollectionUpdateService,\n            CollectionNodeObjectFactory, ExplorationSummaryBackendApiService,\n            SearchExplorationsBackendApiService, siteAnalyticsService,\n            INVALID_NAME_CHARS) {\n          $scope.collection = CollectionEditorStateService.getCollection();\n          $scope.newExplorationId = \'\';\n          $scope.newExplorationTitle = \'\';\n          $scope.searchQueryHasError = false;\n\n          var CREATE_NEW_EXPLORATION_URL_TEMPLATE = \'/create/<exploration_id>\';\n\n          /**\n           * Fetches a list of exploration metadata dicts from backend, given\n           * a search query. It then extracts the title and id of the\n           * exploration to prepare typeahead options.\n           */\n          $scope.fetchTypeaheadResults = function(searchQuery) {\n            if (isValidSearchQuery(searchQuery)) {\n              $scope.searchQueryHasError = false;\n              return SearchExplorationsBackendApiService.fetchExplorations(\n                searchQuery\n              ).then(function(explorationMetadataBackendDict) {\n                var options = [];\n                explorationMetadataBackendDict.collection_node_metadata_list.\n                  map(function(item) {\n                    if (!$scope.collection.containsCollectionNode(item.id)) {\n                      options.push(item.title + \' (\' + item.id + \')\');\n                    }\n                  });\n                return options;\n              }, function() {\n                AlertsService.addWarning(\n                  \'There was an error when searching for matching \' +\n                  \'explorations.\');\n              });\n            } else {\n              $scope.searchQueryHasError = true;\n            }\n          };\n\n          var isValidSearchQuery = function(searchQuery) {\n            // Allow underscores because they are allowed in exploration IDs.\n            var INVALID_SEARCH_CHARS = (\n              INVALID_NAME_CHARS.filter(function(item) {\n                return item !== \'_\';\n              }));\n            for (var i = 0; i < INVALID_SEARCH_CHARS.length; i++) {\n              if (searchQuery.indexOf(INVALID_SEARCH_CHARS[i]) !== -1) {\n                return false;\n              }\n            }\n            return true;\n          };\n\n          var addExplorationToCollection = function(newExplorationId) {\n            if (!newExplorationId) {\n              AlertsService.addWarning(\'Cannot add an empty exploration ID.\');\n              return;\n            }\n            if ($scope.collection.containsCollectionNode(newExplorationId)) {\n              AlertsService.addWarning(\n                \'There is already an exploration in this collection \' +\n                \'with that id.\');\n              return;\n            }\n\n            ExplorationSummaryBackendApiService\n              .loadPublicAndPrivateExplorationSummaries([newExplorationId])\n              .then(function(summaries) {\n                var summaryBackendObject = null;\n                if (summaries.length !== 0 &&\n                    summaries[0].id === newExplorationId) {\n                  summaryBackendObject = summaries[0];\n                }\n                if (summaryBackendObject) {\n                  CollectionLinearizerService.appendCollectionNode(\n                    $scope.collection, newExplorationId, summaryBackendObject);\n                } else {\n                  AlertsService.addWarning(\n                    \'That exploration does not exist or you do not have edit \' +\n                    \'access to it.\');\n                }\n              }, function() {\n                AlertsService.addWarning(\n                  \'There was an error while adding an exploration to the \' +\n                  \'collection.\');\n              });\n          };\n\n          var convertTypeaheadToExplorationId = function(typeaheadOption) {\n            var matchResults = typeaheadOption.match(/\\((.*?)\\)$/);\n            if (matchResults === null) {\n              return typeaheadOption;\n            }\n            return matchResults[1];\n          };\n\n          // Creates a new exploration, then adds it to the collection.\n          $scope.createNewExploration = function() {\n            var title = $filter(\'normalizeWhitespace\')(\n              $scope.newExplorationTitle);\n\n            if (!ValidatorsService.isValidExplorationTitle(title, true)) {\n              return;\n            }\n\n            // Create a new exploration with the given title.\n            $http.post(\'/contributehandler/create_new\', {\n              title: title\n            }).then(function(response) {\n              $scope.newExplorationTitle = \'\';\n              var newExplorationId = response.data.explorationId;\n\n              siteAnalyticsService\n                .registerCreateNewExplorationInCollectionEvent(\n                  newExplorationId);\n              addExplorationToCollection(newExplorationId);\n            });\n          };\n\n          // Checks whether the user has left a \'#\' at the end of their ID\n          // by accident (which can happen if it\'s being copy/pasted from the\n          // editor page.\n          $scope.isMalformedId = function(typedExplorationId) {\n            return (\n              typedExplorationId &&\n              typedExplorationId.lastIndexOf(\'#\') ===\n              typedExplorationId.length - 1);\n          };\n\n          $scope.addExploration = function() {\n            addExplorationToCollection(convertTypeaheadToExplorationId(\n              $scope.newExplorationId));\n            $scope.newExplorationId = \'\';\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
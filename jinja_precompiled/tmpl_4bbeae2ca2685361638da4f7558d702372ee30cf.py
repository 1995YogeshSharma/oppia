from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/translation_tab/StateTranslationStatusGraphDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the state translation status graph.\n */\n\noppia.directive(\'stateTranslationStatusGraph\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        isTranslationTabBusy: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_editor/translation_tab/\' +\n        \'state_translation_status_graph_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'ExplorationStatesService\', \'GraphDataService\',\n        \'StateEditorService\', \'StateContentIdsToAudioTranslationsService\',\n        \'TranslationStatusService\', function(\n            $scope, $rootScope, ExplorationStatesService, GraphDataService,\n            StateEditorService, StateContentIdsToAudioTranslationsService,\n            TranslationStatusService) {\n          $scope.getGraphData = GraphDataService.getGraphData;\n          $scope.nodeColors = TranslationStatusService.getAllStateStatusColors;\n          $scope.getActiveStateName = function() {\n            return StateEditorService.getActiveStateName();\n          };\n          $scope.onClickStateInMap = function(newStateName) {\n            if ($scope.isTranslationTabBusy) {\n              $rootScope.$broadcast(\'showTranslationTabBusyModal\');\n              return;\n            }\n            StateEditorService.setActiveStateName(newStateName);\n            var stateName = StateEditorService.getActiveStateName();\n            var stateData = ExplorationStatesService.getState(stateName);\n            if (stateName && stateData) {\n              StateContentIdsToAudioTranslationsService.init(\n                StateEditorService.getActiveStateName(),\n                stateData.contentIdsToAudioTranslations);\n              $rootScope.$broadcast(\'refreshStateTranslation\');\n              $rootScope.$broadcast(\'refreshAudioTranslationBar\');\n            }\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
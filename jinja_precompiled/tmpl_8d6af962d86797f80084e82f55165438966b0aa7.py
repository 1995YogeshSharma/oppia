from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/admin/activities_tab/AdminDevModeActivitiesTabDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the activities tab in the admin panel when Oppia\n * is in developer mode.\n */\n\noppia.directive(\'adminDevModeActivitiesTab\', [\n  \'$http\', \'AdminTaskManagerService\', \'ADMIN_HANDLER_URL\',\n  \'UrlInterpolationService\',\n  function($http, AdminTaskManagerService, ADMIN_HANDLER_URL,\n      UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        setStatusMessage: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/admin/activities_tab/\' +\n        \'admin_dev_mode_activities_tab_directive.html\'),\n      controller: [\'$scope\', function($scope) {\n        $scope.reloadExploration = function(explorationId) {\n          if (AdminTaskManagerService.isTaskRunning()) {\n            return;\n          }\n          if (!confirm(\'This action is irreversible. Are you sure?\')) {\n            return;\n          }\n\n          $scope.setStatusMessage(\'Processing...\');\n\n          AdminTaskManagerService.startTask();\n          $http.post(ADMIN_HANDLER_URL, {\n            action: \'reload_exploration\',\n            exploration_id: String(explorationId)\n          }).then(function() {\n            $scope.setStatusMessage(\'Data reloaded successfully.\');\n            AdminTaskManagerService.finishTask();\n          }, function(errorResponse) {\n            $scope.setStatusMessage(\n              \'Server error: \' + errorResponse.data.error);\n            AdminTaskManagerService.finishTask();\n          });\n        };\n\n        $scope.DEMO_EXPLORATIONS = GLOBALS.DEMO_EXPLORATIONS;\n        $scope.DEMO_COLLECTIONS = GLOBALS.DEMO_COLLECTIONS;\n        $scope.numDummyExpsToPublish = 0;\n        $scope.numDummyExpsToGenerate = 0;\n\n        $scope.reloadAllExplorations = function() {\n          if (AdminTaskManagerService.isTaskRunning()) {\n            return;\n          }\n          if (!confirm(\'This action is irreversible. Are you sure?\')) {\n            return;\n          }\n\n          $scope.setStatusMessage(\'Processing...\');\n          AdminTaskManagerService.startTask();\n\n          var numSucceeded = 0;\n          var numFailed = 0;\n          var numTried = 0;\n          var printResult = function() {\n            if (numTried < GLOBALS.DEMO_EXPLORATION_IDS.length) {\n              $scope.setStatusMessage(\n                \'Processing...\' + numTried + \'/\' +\n                GLOBALS.DEMO_EXPLORATION_IDS.length);\n              return;\n            }\n            $scope.setStatusMessage(\n              \'Reloaded \' + GLOBALS.DEMO_EXPLORATION_IDS.length +\n              \' explorations: \' + numSucceeded + \' succeeded, \' + numFailed +\n              \' failed.\');\n            AdminTaskManagerService.finishTask();\n          };\n\n          for (var i = 0; i < GLOBALS.DEMO_EXPLORATION_IDS.length; ++i) {\n            var explorationId = GLOBALS.DEMO_EXPLORATION_IDS[i];\n\n            $http.post(ADMIN_HANDLER_URL, {\n              action: \'reload_exploration\',\n              exploration_id: explorationId\n            }).then(function() {\n              ++numSucceeded;\n              ++numTried;\n              printResult();\n            }, function() {\n              ++numFailed;\n              ++numTried;\n              printResult();\n            });\n          }\n        };\n\n        $scope.generateDummyExplorations = function() {\n          // Generate dummy explorations with random title.\n          if ($scope.numDummyExpsToPublish > $scope.numDummyExpsToGenerate) {\n            $scope.setStatusMessage(\n              \'Publish count should be less than or equal to generate count\');\n            return;\n          }\n          AdminTaskManagerService.startTask();\n          $scope.setStatusMessage(\'Processing...\');\n          $http.post(ADMIN_HANDLER_URL, {\n            action: \'generate_dummy_explorations\',\n            num_dummy_exps_to_generate: $scope.numDummyExpsToGenerate,\n            num_dummy_exps_to_publish: $scope.numDummyExpsToPublish\n          }).then(function() {\n            $scope.setStatusMessage(\n              \'Dummy explorations generated successfully.\');\n          }, function(errorResponse) {\n            $scope.setStatusMessage(\n              \'Server error: \' + errorResponse.data.error);\n          });\n          AdminTaskManagerService.finishTask();\n        };\n\n        $scope.reloadCollection = function(collectionId) {\n          if (AdminTaskManagerService.isTaskRunning()) {\n            return;\n          }\n          if (!confirm(\'This action is irreversible. Are you sure?\')) {\n            return;\n          }\n\n          $scope.setStatusMessage(\'Processing...\');\n\n          AdminTaskManagerService.startTask();\n          $http.post(ADMIN_HANDLER_URL, {\n            action: \'reload_collection\',\n            collection_id: String(collectionId)\n          }).then(function() {\n            $scope.setStatusMessage(\'Data reloaded successfully.\');\n          }, function(errorResponse) {\n            $scope.setStatusMessage(\n              \'Server error: \' + errorResponse.data.error);\n          });\n          AdminTaskManagerService.finishTask();\n        };\n      }]\n    };\n  }\n]);'

blocks = {}
debug_info = ''
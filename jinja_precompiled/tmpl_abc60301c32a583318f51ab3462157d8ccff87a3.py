from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/StateTopAnswersStatsBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for StateTopAnswersStatsBackendApiService.\n */\n\ndescribe(\'StateTopAnswersStatsBackendApiService\', function() {\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    this.StateTopAnswersStatsBackendApiService =\n      $injector.get(\'StateTopAnswersStatsBackendApiService\');\n    this.$httpBackend = $injector.get(\'$httpBackend\');\n  }));\n\n  afterEach(function() {\n    this.$httpBackend.verifyNoOutstandingExpectation();\n    this.$httpBackend.verifyNoOutstandingRequest();\n  });\n\n  describe(\'.fetchStats\', function() {\n    it(\'returns the data provided by the backend.\', function() {\n      var backendDict = {\n        answers: {\n          Hola: [\n            {answer: \'hola\', frequency: 7},\n            {answer: \'adios\', frequency: 5},\n            {answer: \'que?\', frequency: 2},\n          ]\n        }\n      };\n      var successHandler = jasmine.createSpy(\'success\');\n      var failureHandler = jasmine.createSpy(\'failure\');\n      this.$httpBackend.expectGET(\n        \'/createhandler/state_answer_stats/7\'\n      ).respond(backendDict);\n\n      this.StateTopAnswersStatsBackendApiService.fetchStats(\'7\').then(\n        successHandler, failureHandler);\n      this.$httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(backendDict);\n      expect(failureHandler).not.toHaveBeenCalled();\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/SubtopicPageObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating instances of frontend\n * subtopic page domain objects.\n */\n\noppia.factory(\'SubtopicPageObjectFactory\', [\n  function() {\n    var SubtopicPage = function(\n        subtopicPageId, topicId, htmlData, languageCode) {\n      this._id = subtopicPageId;\n      this._topicId = topicId;\n      this._htmlData = htmlData;\n      this._languageCode = languageCode;\n    };\n\n    var getSubtopicPageId = function(topicId, subtopicId) {\n      return topicId + \'-\' + subtopicId.toString();\n    };\n\n    // Instance methods\n\n    // Returns the id of the subtopic page.\n    SubtopicPage.prototype.getId = function() {\n      return this._id;\n    };\n\n    SubtopicPage.prototype.setId = function(id) {\n      this._id = id;\n    };\n\n    // Returns the topic id that the subtopic page is linked to.\n    SubtopicPage.prototype.getTopicId = function() {\n      return this._topicId;\n    };\n\n    // Returns the html data for the subtopic page.\n    SubtopicPage.prototype.getHtmlData = function() {\n      return this._htmlData;\n    };\n\n    // Sets the html data for the subtopic page.\n    SubtopicPage.prototype.setHtmlData = function(htmlData) {\n      this._htmlData = htmlData;\n    };\n\n    // Returns the language code for the subtopic page.\n    SubtopicPage.prototype.getLanguageCode = function() {\n      return this._languageCode;\n    };\n\n    SubtopicPage.createFromBackendDict = function(subtopicPageBackendDict) {\n      return new SubtopicPage(\n        subtopicPageBackendDict.id, subtopicPageBackendDict.topic_id,\n        subtopicPageBackendDict.html_data, subtopicPageBackendDict.language_code\n      );\n    };\n\n    SubtopicPage.prototype.copyFromSubtopicPage = function(otherSubtopicPage) {\n      this._id = otherSubtopicPage.getId();\n      this._topicId = otherSubtopicPage.getTopicId();\n      this._htmlData = otherSubtopicPage.getHtmlData();\n      this._languageCode = otherSubtopicPage.getLanguageCode();\n    };\n\n    SubtopicPage.createDefault = function(topicId, subtopicId) {\n      return new SubtopicPage(\n        getSubtopicPageId(topicId, subtopicId), topicId, \'\', \'en\'\n      );\n    };\n\n    // Create an interstitial subtopic page that would be displayed in the\n    // editor until the actual subtopic page is fetched from the backend.\n    SubtopicPage.createInterstitialSubtopicPage = function() {\n      return new SubtopicPage(null, null, null, \'en\');\n    };\n    return SubtopicPage;\n  }\n]);'

blocks = {}
debug_info = ''
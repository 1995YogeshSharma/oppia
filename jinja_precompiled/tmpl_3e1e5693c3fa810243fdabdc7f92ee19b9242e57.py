from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/AudioTranslationLanguageService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to manage the current language being\n * used for audio translations.\n */\n\noppia.factory(\'AudioTranslationLanguageService\', [\n  \'$uibModal\', \'AudioPlayerService\', \'AutogeneratedAudioPlayerService\',\n  \'UrlInterpolationService\', \'LanguageUtilService\',\n  \'BrowserCheckerService\',\n  function(\n      $uibModal, AudioPlayerService, AutogeneratedAudioPlayerService,\n      UrlInterpolationService, LanguageUtilService,\n      BrowserCheckerService) {\n    var _currentAudioLanguageCode = null;\n    var _allAudioLanguageCodesInExploration = null;\n    var _explorationLanguageCode = null;\n    var _automaticTextToSpeechEnabled = null;\n    var _languagesInExploration = [];\n\n    var attemptToSetAudioLanguageToExplorationLanguage = function() {\n      // We minimize the number of related languages, because we want to\n      // pick the language that is the most directly related to the exploration\n      // language. For example, this would prioritize Hindi over Hinglish\n      // if both were available as audio languages.\n      var numRelatedLanguages = Number.MAX_VALUE;\n      _allAudioLanguageCodesInExploration.forEach(function(audioLanguageCode) {\n        var relatedLanguageCodes =\n          LanguageUtilService.getLanguageCodesRelatedToAudioLanguageCode(\n            audioLanguageCode);\n        if (relatedLanguageCodes.length < numRelatedLanguages &&\n            relatedLanguageCodes.indexOf(_explorationLanguageCode) !== -1) {\n          _currentAudioLanguageCode = audioLanguageCode;\n          numRelatedLanguages = relatedLanguageCodes.length;\n        }\n      });\n    };\n\n    var _isAutogeneratedAudioAllowed = function() {\n      return _automaticTextToSpeechEnabled &&\n        LanguageUtilService.supportsAutogeneratedAudio(\n          _explorationLanguageCode);\n    };\n\n    var _init = function(\n        allAudioLanguageCodesInExploration, preferredAudioLanguageCode,\n        explorationLanguageCode, automaticTextToSpeechEnabled) {\n      _allAudioLanguageCodesInExploration = allAudioLanguageCodesInExploration;\n      _explorationLanguageCode = explorationLanguageCode;\n      _automaticTextToSpeechEnabled = automaticTextToSpeechEnabled;\n      _languagesInExploration = [];\n      // Set the audio language that is chosen initially.\n      // Use the following priority (highest to lowest):\n      // 1. If the learner has a preferred audio language set, then set it to\n      // that language if it is available.\n      // 2. If the exploration language has a related audio language, then set\n      // it to that.\n      // 3. If only the autogenerated audio language is available, then set it\n      // to that.\n      // 4. Otherwise, just pick an available non-autogenerated audio language\n      // at random.\n      if (preferredAudioLanguageCode &&\n          allAudioLanguageCodesInExploration.indexOf(\n            preferredAudioLanguageCode) !== -1) {\n        _currentAudioLanguageCode = preferredAudioLanguageCode;\n      }\n\n      if (_currentAudioLanguageCode === null) {\n        attemptToSetAudioLanguageToExplorationLanguage();\n      }\n\n      if (_currentAudioLanguageCode === null &&\n          _allAudioLanguageCodesInExploration.length >= 1) {\n        _currentAudioLanguageCode = _allAudioLanguageCodesInExploration[0];\n      }\n\n      if (_currentAudioLanguageCode === null &&\n          _allAudioLanguageCodesInExploration.length === 0 &&\n          _isAutogeneratedAudioAllowed()) {\n        _currentAudioLanguageCode =\n          LanguageUtilService.getAutogeneratedAudioLanguage(\n            _explorationLanguageCode).id;\n      }\n\n      _allAudioLanguageCodesInExploration.forEach(function(languageCode) {\n        var languageDescription =\n          LanguageUtilService.getAudioLanguageDescription(languageCode);\n        _languagesInExploration.push({\n          value: languageCode,\n          displayed: languageDescription\n        });\n      });\n\n      if (LanguageUtilService.supportsAutogeneratedAudio(\n        _explorationLanguageCode)) {\n        var autogeneratedAudioLanguage =\n          LanguageUtilService.getAutogeneratedAudioLanguage(\n            _explorationLanguageCode);\n        _languagesInExploration.push({\n          value: autogeneratedAudioLanguage.id,\n          displayed: autogeneratedAudioLanguage.description\n        });\n      }\n    };\n\n    return {\n      init: function(\n          allAudioLanguageCodesInExploration, preferredAudioLanguageCode,\n          explorationLanguageCode, automaticTextToSpeechEnabled) {\n        _init(allAudioLanguageCodesInExploration, preferredAudioLanguageCode,\n          explorationLanguageCode, automaticTextToSpeechEnabled);\n      },\n      getCurrentAudioLanguageCode: function() {\n        return _currentAudioLanguageCode;\n      },\n      getCurrentAudioLanguageDescription: function() {\n        return LanguageUtilService.getAudioLanguageDescription(\n          _currentAudioLanguageCode);\n      },\n      getallAudioLanguageCodesInExploration: function() {\n        return _allAudioLanguageCodesInExploration;\n      },\n      getLanguageOptionsForDropdown: function() {\n        return _languagesInExploration;\n      },\n      clearCurrentAudioLanguageCode: function() {\n        _currentAudioLanguageCode = null;\n      },\n      setCurrentAudioLanguageCode: function(newLanguageCode) {\n        _currentAudioLanguageCode = newLanguageCode;\n      },\n      isAutogeneratedAudioAllowed: function() {\n        return _isAutogeneratedAudioAllowed();\n      },\n      isAutogeneratedLanguageCodeSelected: function() {\n        return LanguageUtilService.isAutogeneratedAudioLanguage(\n          _currentAudioLanguageCode);\n      },\n      isAutomaticTextToSpeechEnabled: function() {\n        return _automaticTextToSpeechEnabled;\n      },\n      getSpeechSynthesisLanguageCode: function() {\n        var autogeneratedAudioLanguage =\n          LanguageUtilService.getAutogeneratedAudioLanguage(\n            _explorationLanguageCode);\n        if (BrowserCheckerService.isMobileDevice()) {\n          return autogeneratedAudioLanguage.speechSynthesisCodeMobile;\n        }\n        return autogeneratedAudioLanguage.speechSynthesisCode;\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/StoryObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for StoryObjectFactory.\n */\n\ndescribe(\'Story object factory\', function() {\n  var StoryObjectFactory = null;\n  var _sampleStory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    StoryObjectFactory = $injector.get(\'StoryObjectFactory\');\n\n    var sampleStoryBackendDict = {\n      id: \'sample_story_id\',\n      title: \'Story title\',\n      description: \'Story description\',\n      notes: \'Notes\',\n      version: 1,\n      story_contents: {\n        initial_node_id: \'node_1\',\n        nodes: [{\n          id: \'node_1\',\n          prerequisite_skill_ids: [],\n          acquired_skill_ids: [],\n          destination_node_ids: [],\n          outline: \'Outline\',\n          exploration_id: null,\n          outline_is_finalized: false\n        }],\n        next_node_id: \'node_3\'\n      },\n      language_code: \'en\'\n    };\n    _sampleStory = StoryObjectFactory.createFromBackendDict(\n      sampleStoryBackendDict);\n  }));\n\n  it(\'should be able to create an interstitial story object\', function() {\n    var story = StoryObjectFactory.createInterstitialStory();\n    expect(story.getId()).toEqual(null);\n    expect(story.getTitle()).toEqual(\'Story title loading\');\n    expect(story.getDescription()).toEqual(\'Story description loading\');\n    expect(story.getLanguageCode()).toBe(\'en\');\n    expect(story.getStoryContents()).toEqual(null);\n    expect(story.getNotes()).toEqual(\'Story notes loading\');\n  });\n\n  it(\'should correctly validate a valid story\', function() {\n    expect(_sampleStory.validate()).toEqual([]);\n  });\n\n  it(\'should correctly validate a story\', function() {\n    _sampleStory.setTitle(\'\');\n    expect(_sampleStory.validate()).toEqual([\n      \'Story title should not be empty\'\n    ]);\n  });\n\n  it(\'should be able to copy from another story\', function() {\n    var secondStory = StoryObjectFactory.createFromBackendDict({\n      id: \'sample_story_id_2s\',\n      title: \'Story title 2\',\n      description: \'Story description 2\',\n      notes: \'Notes 2\',\n      version: 1,\n      story_contents: {\n        initial_node_id: \'node_2\',\n        nodes: [{\n          id: \'node_2\',\n          prerequisite_skill_ids: [],\n          acquired_skill_ids: [],\n          destination_node_ids: [],\n          outline: \'Outline\',\n          exploration_id: null,\n          outline_is_finalized: false\n        }],\n        next_node_id: \'node_3\'\n      },\n      language_code: \'en\'\n    });\n\n    expect(_sampleStory).not.toBe(secondStory);\n    expect(_sampleStory).not.toEqual(secondStory);\n\n    _sampleStory.copyFromStory(secondStory);\n    expect(_sampleStory).not.toBe(secondStory);\n    expect(_sampleStory).toEqual(secondStory);\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/SubtopicObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating instances of frontend\n * subtopic domain objects.\n */\n\noppia.factory(\'SubtopicObjectFactory\', [\'SkillSummaryObjectFactory\',\n  function(SkillSummaryObjectFactory) {\n    var Subtopic = function(\n        subtopicId, title, skillIds, skillIdToDescriptionMap) {\n      this._id = subtopicId;\n      this._title = title;\n      this._skillSummaries = skillIds.map(\n        function(skillId) {\n          return SkillSummaryObjectFactory.create(\n            skillId, skillIdToDescriptionMap[skillId]);\n        });\n    };\n\n    // Instance methods\n\n    // Returns the id of the subtopic.\n    Subtopic.prototype.getId = function() {\n      return this._id;\n    };\n\n    Subtopic.prototype.decrementId = function() {\n      return --this._id;\n    };\n\n    Subtopic.prototype.incrementId = function() {\n      return ++this._id;\n    };\n\n    // Returns the title of the subtopic.\n    Subtopic.prototype.getTitle = function() {\n      return this._title;\n    };\n\n    Subtopic.prototype.setTitle = function(title) {\n      this._title = title;\n    };\n\n    Subtopic.prototype.validate = function() {\n      var issues = [];\n      if (this._title === \'\') {\n        issues.push(\'Subtopic title should not be empty\');\n      }\n      var skillIds = this._skillSummaries.map(function(skillSummary) {\n        return skillSummary.getId();\n      });\n      for (var i = 0; i < skillIds.length; i++) {\n        var skillId = skillIds[i];\n        if (skillIds.indexOf(skillId) < skillIds.lastIndexOf(skillId)) {\n          issues.push(\n            \'The skill with id \' + skillId + \' is duplicated in\' +\n            \' subtopic with id \' + this._id);\n        }\n      }\n      return issues;\n    };\n\n    // Returns the summaries of the skills in the subtopic.\n    Subtopic.prototype.getSkillSummaries = function() {\n      return this._skillSummaries.slice();\n    };\n\n    Subtopic.prototype.hasSkill = function(skillId) {\n      return this._skillSummaries.some(function(skillSummary) {\n        return skillSummary.getId() === skillId;\n      });\n    };\n\n    Subtopic.prototype.addSkill = function(skillId, skillDescription) {\n      if (!this.hasSkill(skillId)) {\n        this._skillSummaries.push(SkillSummaryObjectFactory.create(\n          skillId, skillDescription));\n        return true;\n      }\n      return false;\n    };\n\n    Subtopic.prototype.removeSkill = function(skillId) {\n      var index = this._skillSummaries.map(function(skillSummary) {\n        return skillSummary.getId();\n      }).indexOf(skillId);\n      if (index > -1) {\n        this._skillSummaries.splice(index, 1);\n      } else {\n        throw Error(\'The given skill doesn\\\'t exist in the subtopic\');\n      }\n    };\n\n    Subtopic.create = function(subtopicBackendDict, skillIdToDescriptionMap) {\n      return new Subtopic(\n        subtopicBackendDict.id, subtopicBackendDict.title,\n        subtopicBackendDict.skill_ids, skillIdToDescriptionMap);\n    };\n\n    Subtopic.createFromTitle = function(subtopicId, title) {\n      return Subtopic.create({\n        id: subtopicId,\n        title: title,\n        skill_ids: []\n      }, {});\n    };\n\n    return Subtopic;\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/state_editor/StateHintsEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the add and view hints section of the state\n * editor.\n */\noppia.directive(\'stateHintsEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        onSaveContentIdsToAudioTranslations: \'=\',\n        onSaveHints: \'=\',\n        onSaveSolution: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/state_editor/state_hints_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'$uibModal\', \'$filter\',\n        \'GenerateContentIdService\', \'AlertsService\', \'INTERACTION_SPECS\',\n        \'StateHintsService\', \'COMPONENT_NAME_HINT\', \'StateEditorService\',\n        \'StateContentIdsToAudioTranslationsService\', \'EditabilityService\',\n        \'StateInteractionIdService\', \'UrlInterpolationService\',\n        \'HintObjectFactory\', \'StateSolutionService\',\n        function(\n            $scope, $rootScope, $uibModal, $filter,\n            GenerateContentIdService, AlertsService, INTERACTION_SPECS,\n            StateHintsService, COMPONENT_NAME_HINT, StateEditorService,\n            StateContentIdsToAudioTranslationsService, EditabilityService,\n            StateInteractionIdService, UrlInterpolationService,\n            HintObjectFactory, StateSolutionService) {\n          $scope.EditabilityService = EditabilityService;\n          $scope.StateHintsService = StateHintsService;\n          $scope.activeHintIndex = null;\n          $scope.canEdit = EditabilityService.isEditable();\n\n          $scope.dragDotsImgUrl = UrlInterpolationService.getStaticImageUrl(\n            \'/general/drag_dots.png\');\n\n          $scope.$on(\'stateEditorInitialized\', function(evt, stateData) {\n            $scope.activeHintIndex = null;\n          });\n\n          $scope.getHintButtonText = function() {\n            var hintButtonText = \'+ Add Hint\';\n            if ($scope.StateHintsService.displayed) {\n              if ($scope.StateHintsService.displayed.length >= 5) {\n                hintButtonText = \'Limit Reached\';\n              }\n            }\n            return hintButtonText;\n          };\n\n          $scope.getHintSummary = function(hint) {\n            var hintAsPlainText = $filter(\n              \'formatRtePreview\')(hint.hintContent.getHtml());\n            return hintAsPlainText;\n          };\n\n          $scope.changeActiveHintIndex = function(newIndex) {\n            var currentActiveIndex = $scope.activeHintIndex;\n            if (currentActiveIndex !== null && (\n              !StateHintsService.displayed[currentActiveIndex]\n                .hintContent.getHtml())) {\n              if (StateSolutionService.savedMemento &&\n                StateHintsService.displayed.length === 1) {\n                openDeleteLastHintModal();\n                return;\n              } else {\n                AlertsService.addInfoMessage(\'Deleting empty hint.\');\n                StateHintsService.displayed.splice(currentActiveIndex, 1);\n                StateHintsService.saveDisplayedValue();\n                $scope.onSaveHints(StateHintsService.displayed);\n              }\n            }\n            // If the current hint is being clicked on again, close it.\n            if (newIndex === $scope.activeHintIndex) {\n              $scope.activeHintIndex = null;\n            } else {\n              $scope.activeHintIndex = newIndex;\n            }\n          };\n\n          // This returns false if the current interaction ID is null.\n          $scope.isCurrentInteractionLinear = function() {\n            var interactionId = StateInteractionIdService.savedMemento;\n            return interactionId && INTERACTION_SPECS[interactionId].is_linear;\n          };\n\n          $scope.openAddHintModal = function() {\n            if ($scope.StateHintsService.displayed.length === 5) {\n              return;\n            }\n            AlertsService.clearWarnings();\n            $rootScope.$broadcast(\'externalSave\');\n\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/editor_tab/\' +\n                \'add_hint_modal_directive.html\'),\n              backdrop: \'static\',\n              controller: [\n                \'$scope\', \'$uibModalInstance\',\n                function($scope, $uibModalInstance) {\n                  $scope.HINT_FORM_SCHEMA = {\n                    type: \'html\',\n                    ui_config: {}\n                  };\n\n                  $scope.tmpHint = \'\';\n\n                  $scope.addHintForm = {};\n\n                  $scope.hintIndex = StateHintsService.displayed.length + 1;\n\n                  $scope.saveHint = function() {\n                    var contentId = GenerateContentIdService.getNextId(\n                      COMPONENT_NAME_HINT);\n                    // Close the modal and save it afterwards.\n                    $uibModalInstance.close({\n                      hint: angular.copy(\n                        HintObjectFactory.createNew(contentId, $scope.tmpHint)),\n                      contentId: contentId\n                    });\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                    AlertsService.clearWarnings();\n                  };\n                }\n              ]\n            }).result.then(function(result) {\n              StateHintsService.displayed.push(result.hint);\n              StateContentIdsToAudioTranslationsService.displayed.addContentId(\n                result.contentId);\n              StateHintsService.saveDisplayedValue();\n              $scope.onSaveHints(StateHintsService.displayed);\n              StateContentIdsToAudioTranslationsService.saveDisplayedValue();\n              $scope.onSaveContentIdsToAudioTranslations(\n                StateContentIdsToAudioTranslationsService.displayed\n              );\n            });\n          };\n\n          // When the page is scrolled so that the top of the page is above the\n          // browser viewport, there are some bugs in the positioning of the\n          // helper. This is a bug in jQueryUI that has not been fixed yet. For\n          // more details, see http://stackoverflow.com/q/5791886\n          $scope.HINT_LIST_SORTABLE_OPTIONS = {\n            axis: \'y\',\n            cursor: \'move\',\n            handle: \'.oppia-hint-sort-handle\',\n            items: \'.oppia-sortable-hint\',\n            revert: 100,\n            tolerance: \'pointer\',\n            start: function(e, ui) {\n              $rootScope.$broadcast(\'externalSave\');\n              $scope.activeHintIndex = null;\n              ui.placeholder.height(ui.item.height());\n            },\n            stop: function() {\n              StateHintsService.saveDisplayedValue();\n              $scope.onSaveHints(StateHintsService.displayed);\n            }\n          };\n\n          var openDeleteLastHintModal = function() {\n            AlertsService.clearWarnings();\n\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/editor_tab/\' +\n                \'delete_last_hint_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\',\n                function($scope, $uibModalInstance) {\n                  $scope.deleteBothSolutionAndHint = function() {\n                    $uibModalInstance.close();\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                    AlertsService.clearWarnings();\n                  };\n                }\n              ]\n            }).result.then(function() {\n              var solutionContentId = StateSolutionService.displayed\n                .explanation.getContentId();\n              StateSolutionService.displayed = null;\n              StateSolutionService.saveDisplayedValue();\n              $scope.onSaveSolution(StateSolutionService.displayed);\n\n              var hintContentId = StateHintsService.displayed[0]\n                .hintContent.getContentId();\n              StateHintsService.displayed = [];\n              StateHintsService.saveDisplayedValue();\n              $scope.onSaveHints(StateHintsService.displayed);\n\n              StateContentIdsToAudioTranslationsService.displayed\n                .deleteContentId(solutionContentId);\n              StateContentIdsToAudioTranslationsService.displayed\n                .deleteContentId(hintContentId);\n              StateContentIdsToAudioTranslationsService.saveDisplayedValue();\n              $scope.onSaveContentIdsToAudioTranslations(\n                StateContentIdsToAudioTranslationsService.displayed\n              );\n            });\n          };\n\n          $scope.deleteHint = function(index, evt) {\n            // Prevent clicking on the delete button from also toggling the\n            // display state of the hint.\n            evt.stopPropagation();\n\n            AlertsService.clearWarnings();\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/exploration_editor/editor_tab/\' +\n                \'delete_hint_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\', function(\n                    $scope, $uibModalInstance) {\n                  $scope.reallyDelete = function() {\n                    $uibModalInstance.close();\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                    AlertsService.clearWarnings();\n                  };\n                }\n              ]\n            }).result.then(function() {\n              if (StateSolutionService.savedMemento &&\n                StateHintsService.savedMemento.length === 1) {\n                openDeleteLastHintModal();\n              } else {\n                var hintContentId = StateHintsService.displayed[index]\n                  .hintContent.getContentId();\n                StateHintsService.displayed.splice(index, 1);\n                StateHintsService.saveDisplayedValue();\n                $scope.onSaveHints(StateHintsService.displayed);\n                StateContentIdsToAudioTranslationsService.displayed\n                  .deleteContentId(hintContentId);\n                StateContentIdsToAudioTranslationsService.saveDisplayedValue();\n                $scope.onSaveContentIdsToAudioTranslations(\n                  StateContentIdsToAudioTranslationsService.displayed\n                );\n              }\n            });\n          };\n\n          $scope.onSaveInlineHint = function() {\n            StateHintsService.saveDisplayedValue();\n            $scope.onSaveHints(StateHintsService.displayed);\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/story_editor/StoryEditorStateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to maintain the state of a single story shared\n * throughout the story editor. This service provides functionality for\n * retrieving the story, saving it, and listening for changes.\n */\n\noppia.constant(\'EVENT_STORY_INITIALIZED\', \'storyInitialized\');\noppia.constant(\'EVENT_STORY_REINITIALIZED\', \'storyReinitialized\');\n\noppia.factory(\'StoryEditorStateService\', [\n  \'$rootScope\', \'AlertsService\', \'StoryObjectFactory\',\n  \'UndoRedoService\', \'EditableStoryBackendApiService\',\n  \'EVENT_STORY_INITIALIZED\', \'EVENT_STORY_REINITIALIZED\',\n  function(\n      $rootScope, AlertsService, StoryObjectFactory,\n      UndoRedoService, EditableStoryBackendApiService,\n      EVENT_STORY_INITIALIZED, EVENT_STORY_REINITIALIZED) {\n    var _story = StoryObjectFactory.createInterstitialStory();\n    var _storyIsInitialized = false;\n    var _storyIsLoading = false;\n    var _storyIsBeingSaved = false;\n\n    var _setStory = function(story) {\n      _story.copyFromStory(story);\n      if (_storyIsInitialized) {\n        $rootScope.$broadcast(EVENT_STORY_REINITIALIZED);\n      } else {\n        $rootScope.$broadcast(EVENT_STORY_INITIALIZED);\n        _storyIsInitialized = true;\n      }\n    };\n\n    var _updateStory = function(newBackendStoryObject) {\n      _setStory(\n        StoryObjectFactory.createFromBackendDict(newBackendStoryObject));\n    };\n\n    return {\n      /**\n       * Loads, or reloads, the story stored by this service given a\n       * specified story ID. See setStory() for more information on\n       * additional behavior of this function.\n       */\n      loadStory: function(topicId, storyId) {\n        _storyIsLoading = true;\n        EditableStoryBackendApiService.fetchStory(\n          topicId, storyId).then(\n          function(newBackendStoryObject) {\n            _updateStory(newBackendStoryObject);\n            _storyIsLoading = false;\n          },\n          function(error) {\n            AlertsService.addWarning(\n              error || \'There was an error when loading the story.\');\n            _storyIsLoading = false;\n          });\n      },\n\n      /**\n       * Returns whether this service is currently attempting to load the\n       * story maintained by this service.\n       */\n      isLoadingStory: function() {\n        return _storyIsLoading;\n      },\n\n      /**\n       * Returns whether a story has yet been loaded using either\n       * loadStory() or setStory().\n       */\n      hasLoadedStory: function() {\n        return _storyIsInitialized;\n      },\n\n      /**\n       * Returns the current story to be shared among the story\n       * editor. Please note any changes to this story will be propogated\n       * to all bindings to it. This story object will be retained for the\n       * lifetime of the editor. This function never returns null, though it may\n       * return an empty story object if the story has not yet been\n       * loaded for this editor instance.\n       */\n      getStory: function() {\n        return _story;\n      },\n\n      /**\n       * Sets the story stored within this service, propogating changes to\n       * all bindings to the story returned by getStory(). The first\n       * time this is called it will fire a global event based on the\n       * EVENT_STORY_INITIALIZED constant. All subsequent\n       * calls will similarly fire a EVENT_STORY_REINITIALIZED event.\n       */\n      setStory: function(story) {\n        _setStory(story);\n      },\n\n      /**\n       * Attempts to save the current story given a commit message. This\n       * function cannot be called until after a story has been initialized\n       * in this service. Returns false if a save is not performed due to no\n       * changes pending, or true if otherwise. This function, upon success,\n       * will clear the UndoRedoService of pending changes. This function also\n       * shares behavior with setStory(), when it succeeds.\n       */\n      saveStory: function(topicId, commitMessage, successCallback) {\n        if (!_storyIsInitialized) {\n          AlertsService.fatalWarning(\n            \'Cannot save a story before one is loaded.\');\n        }\n\n        // Don\'t attempt to save the story if there are no changes pending.\n        if (!UndoRedoService.hasChanges()) {\n          return false;\n        }\n        _storyIsBeingSaved = true;\n        EditableStoryBackendApiService.updateStory(\n          topicId, _story.getId(), _story.getVersion(),\n          commitMessage, UndoRedoService.getCommittableChangeList()).then(\n          function(storyBackendObject) {\n            _updateStory(storyBackendObject);\n            UndoRedoService.clearChanges();\n            _storyIsBeingSaved = false;\n            if (successCallback) {\n              successCallback();\n            }\n          }, function(error) {\n            AlertsService.addWarning(\n              error || \'There was an error when saving the story.\');\n            _storyIsBeingSaved = false;\n          });\n        return true;\n      },\n\n      /**\n       * Returns whether this service is currently attempting to save the\n       * story maintained by this service.\n       */\n      isSavingStory: function() {\n        return _storyIsBeingSaved;\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
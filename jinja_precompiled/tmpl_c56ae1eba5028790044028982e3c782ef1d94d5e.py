from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/UserEmailPreferencesService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview User exploration emails service for the exploration settings.\n */\n\noppia.factory(\'UserEmailPreferencesService\', [\n  \'$http\', \'$q\', \'ExplorationDataService\', \'AlertsService\',\n  \'UrlInterpolationService\',\n  function(\n      $http, $q, ExplorationDataService,\n      AlertsService, UrlInterpolationService) {\n    var MESSAGE_TYPE_SUGGESTION = \'suggestion\';\n    var MESSAGE_TYPE_FEEDBACK = \'feedback\';\n    return {\n      init: function(\n          feedbackNotificationsMuted, suggestionNotificationsMuted) {\n        this.feedbackNotificationsMuted = feedbackNotificationsMuted;\n        this.suggestionNotificationsMuted = suggestionNotificationsMuted;\n      },\n      areFeedbackNotificationsMuted: function() {\n        return this.feedbackNotificationsMuted;\n      },\n      areSuggestionNotificationsMuted: function() {\n        return this.suggestionNotificationsMuted;\n      },\n      setFeedbackNotificationPreferences: function(mute) {\n        this.saveChangeToBackend({\n          message_type: MESSAGE_TYPE_FEEDBACK,\n          mute: mute\n        });\n      },\n      setSuggestionNotificationPreferences: function(mute) {\n        this.saveChangeToBackend({\n          message_type: MESSAGE_TYPE_SUGGESTION,\n          mute: mute\n        });\n      },\n      saveChangeToBackend: function(requestParams) {\n        var that = this;\n        var emailPreferencesUrl = UrlInterpolationService.interpolateUrl(\n          \'/createhandler/notificationpreferences/<exploration_id>\', {\n            exploration_id: ExplorationDataService.explorationId\n          }\n        );\n        return $http.put(emailPreferencesUrl, requestParams).then(\n          function(response) {\n            var data = response.data;\n            AlertsService.clearWarnings();\n            that.init(\n              data.email_preferences.mute_feedback_notifications,\n              data.email_preferences.mute_suggestion_notifications);\n          }\n        );\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
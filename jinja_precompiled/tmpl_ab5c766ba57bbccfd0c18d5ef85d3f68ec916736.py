from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/AssetsBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for AssetsBackendApiService\n */\n\ndescribe(\'Assets Backend API Service\', function() {\n  var AssetsBackendApiService = null;\n  var FileDownloadRequestObjectFactory = null;\n  var UrlInterpolationService = null;\n  var $httpBackend = null;\n  var $rootScope = null;\n  var $q = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    AssetsBackendApiService = $injector.get(\n      \'AssetsBackendApiService\');\n    FileDownloadRequestObjectFactory = $injector.get(\n      \'FileDownloadRequestObjectFactory\');\n    UrlInterpolationService = $injector.get(\n      \'UrlInterpolationService\');\n    $httpBackend = $injector.get(\'$httpBackend\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $q = $injector.get(\'$q\');\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'Should successfully fetch and cache audio\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    var requestUrl = UrlInterpolationService.interpolateUrl(\n      \'/audiohandler/<exploration_id>/audio/<filename>\', {\n        exploration_id: \'0\',\n        filename: \'myfile.mp3\'\n      });\n\n    $httpBackend.expect(\'GET\', requestUrl).respond(201, \'audio data\');\n    expect(AssetsBackendApiService.isCached(\'myfile.mp3\')).toBe(false);\n\n\n    AssetsBackendApiService.loadAudio(\'0\', \'myfile.mp3\').then(\n      successHandler, failHandler);\n    expect((AssetsBackendApiService.getAssetsFilesCurrentlyBeingRequested())\n      .audio.length).toBe(1);\n    $httpBackend.flush();\n    expect((AssetsBackendApiService.getAssetsFilesCurrentlyBeingRequested())\n      .audio.length).toBe(0);\n    expect(AssetsBackendApiService.isCached(\'myfile.mp3\')).toBe(true);\n    expect(successHandler).toHaveBeenCalled();\n    expect(failHandler).not.toHaveBeenCalled();\n    $httpBackend.verifyNoOutstandingExpectation();\n  });\n\n  it(\'Should successfully fetch and cache image\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    var requestUrl = UrlInterpolationService.interpolateUrl(\n      \'/imagehandler/<exploration_id>/<filename>\', {\n        exploration_id: \'0\',\n        filename: \'myfile.png\'\n      });\n\n    $httpBackend.expect(\'GET\', requestUrl).respond(201, \'image data\');\n    expect(AssetsBackendApiService.isCached(\'myfile.png\')).toBe(false);\n\n\n    AssetsBackendApiService.loadImage(\'0\', \'myfile.png\').then(\n      successHandler, failHandler);\n    expect((AssetsBackendApiService.getAssetsFilesCurrentlyBeingRequested())\n      .image.length).toBe(1);\n    $httpBackend.flush();\n    expect((AssetsBackendApiService.getAssetsFilesCurrentlyBeingRequested())\n      .image.length).toBe(0);\n    expect(AssetsBackendApiService.isCached(\'myfile.png\')).toBe(true);\n    expect(successHandler).toHaveBeenCalled();\n    expect(failHandler).not.toHaveBeenCalled();\n    $httpBackend.verifyNoOutstandingExpectation();\n  });\n\n  it(\'Should call the provided failure handler on HTTP failure for an audio\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      var requestUrl = UrlInterpolationService.interpolateUrl(\n        \'/audiohandler/<exploration_id>/audio/<filename>\', {\n          exploration_id: \'0\',\n          filename: \'myfile.mp3\'\n        });\n\n      $httpBackend.expect(\'GET\', requestUrl).respond(500, \'MutagenError\');\n      AssetsBackendApiService.loadAudio(\'0\', \'myfile.mp3\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalled();\n      $httpBackend.verifyNoOutstandingExpectation();\n    });\n\n  it(\'Should call the provided failure handler on HTTP failure for an image\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      var requestUrl = UrlInterpolationService.interpolateUrl(\n        \'/imagehandler/<exploration_id>/<filename>\', {\n          exploration_id: \'0\',\n          filename: \'myfile.png\'\n        });\n\n      $httpBackend.expect(\'GET\', requestUrl).respond(500, \'Error\');\n      AssetsBackendApiService.loadImage(\'0\', \'myfile.png\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalled();\n      $httpBackend.verifyNoOutstandingExpectation();\n    });\n\n  it(\'Should successfully abort the download of all the audio files\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      var requestUrl = UrlInterpolationService.interpolateUrl(\n        \'/audiohandler/<exploration_id>/audio/<filename>\', {\n          exploration_id: \'0\',\n          filename: \'myfile.mp3\'\n        });\n\n      $httpBackend.expect(\'GET\', requestUrl).respond(201, \'audio data\');\n\n      AssetsBackendApiService.loadAudio(\'0\', \'myfile.mp3\').then(\n        successHandler, failHandler);\n\n      expect(AssetsBackendApiService.getAssetsFilesCurrentlyBeingRequested()\n        .audio.length).toBe(1);\n\n      AssetsBackendApiService.abortAllCurrentAudioDownloads();\n      $httpBackend.verifyNoOutstandingRequest();\n      expect(AssetsBackendApiService.getAssetsFilesCurrentlyBeingRequested()\n        .audio.length).toBe(0);\n      expect(AssetsBackendApiService.isCached(\'myfile.mp3\')).toBe(false);\n    });\n\n  it(\'Should successfully abort the download of the all the image files\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      var requestUrl = UrlInterpolationService.interpolateUrl(\n        \'imagehandler/<exploration_id>/image/<filename>\', {\n          exploration_id: \'0\',\n          filename: \'myfile.png\'\n        });\n\n      $httpBackend.expect(\'GET\', requestUrl).respond(201, \'image data\');\n\n      AssetsBackendApiService.loadImage(\'0\', \'myfile.png\').then(\n        successHandler, failHandler);\n\n      expect(AssetsBackendApiService.getAssetsFilesCurrentlyBeingRequested()\n        .image.length).toBe(1);\n\n      AssetsBackendApiService.abortAllCurrentImageDownloads();\n      $httpBackend.verifyNoOutstandingRequest();\n      expect(AssetsBackendApiService.getAssetsFilesCurrentlyBeingRequested()\n        .image.length).toBe(0);\n      expect(AssetsBackendApiService.isCached(\'myfile.png\')).toBe(false);\n    });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/feedback_tab/FeedbackTab.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the exploration editor feedback tab.\n */\n\noppia.controller(\'FeedbackTab\', [\n  \'$scope\', \'$http\', \'$uibModal\', \'$timeout\', \'$rootScope\', \'AlertsService\',\n  \'DateTimeFormatService\', \'ThreadStatusDisplayService\',\n  \'ThreadDataService\', \'ExplorationStatesService\', \'ExplorationDataService\',\n  \'ChangeListService\', \'StateObjectFactory\', \'UrlInterpolationService\',\n  \'ACTION_ACCEPT_SUGGESTION\', \'ACTION_REJECT_SUGGESTION\',\n  function(\n      $scope, $http, $uibModal, $timeout, $rootScope, AlertsService,\n      DateTimeFormatService, ThreadStatusDisplayService,\n      ThreadDataService, ExplorationStatesService, ExplorationDataService,\n      ChangeListService, StateObjectFactory, UrlInterpolationService,\n      ACTION_ACCEPT_SUGGESTION, ACTION_REJECT_SUGGESTION) {\n    $scope.STATUS_CHOICES = ThreadStatusDisplayService.STATUS_CHOICES;\n    $scope.threadData = ThreadDataService.data;\n    $scope.getLabelClass = ThreadStatusDisplayService.getLabelClass;\n    $scope.getHumanReadableStatus = (\n      ThreadStatusDisplayService.getHumanReadableStatus);\n    $scope.getLocaleAbbreviatedDatetimeString = (\n      DateTimeFormatService.getLocaleAbbreviatedDatetimeString);\n\n    $scope.activeThread = null;\n    $scope.userIsLoggedIn = GLOBALS.userIsLoggedIn;\n    $rootScope.loadingMessage = \'Loading\';\n    $scope.tmpMessage = {\n      status: null,\n      text: \'\'\n    };\n\n    var _resetTmpMessageFields = function() {\n      $scope.tmpMessage.status = $scope.activeThread ?\n        $scope.activeThread.status : null;\n      $scope.tmpMessage.text = \'\';\n    };\n\n    $scope.clearActiveThread = function() {\n      $scope.activeThread = null;\n      _resetTmpMessageFields();\n    };\n\n    $scope.showCreateThreadModal = function() {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/feedback_tab/\' +\n          \'editor_create_feedback_thread_modal_directive.html\'),\n        backdrop: true,\n        resolve: {},\n        controller: [\'$scope\', \'$uibModalInstance\', function(\n            $scope, $uibModalInstance) {\n          $scope.newThreadSubject = \'\';\n          $scope.newThreadText = \'\';\n\n          $scope.create = function(newThreadSubject, newThreadText) {\n            if (!newThreadSubject) {\n              AlertsService.addWarning(\'Please specify a thread subject.\');\n              return;\n            }\n            if (!newThreadText) {\n              AlertsService.addWarning(\'Please specify a message.\');\n              return;\n            }\n\n            $uibModalInstance.close({\n              newThreadSubject: newThreadSubject,\n              newThreadText: newThreadText\n            });\n          };\n\n          $scope.cancel = function() {\n            $uibModalInstance.dismiss(\'cancel\');\n          };\n        }]\n      }).result.then(function(result) {\n        ThreadDataService.createNewThread(\n          result.newThreadSubject, result.newThreadText, function() {\n            $scope.clearActiveThread();\n            AlertsService.addSuccessMessage(\'Feedback thread created.\');\n          });\n      });\n    };\n\n    var _isSuggestionOpen = function() {\n      return $scope.activeThread.status === \'open\';\n    };\n\n    var _isSuggestionValid = function() {\n      return ExplorationStatesService.hasState(\n        $scope.activeThread.suggestion.state_name);\n    };\n\n    var _hasUnsavedChanges = function() {\n      return (ChangeListService.getChangeList().length > 0);\n    };\n\n    $scope.getSuggestionButtonType = function() {\n      return (_isSuggestionOpen() && _isSuggestionValid() &&\n              !_hasUnsavedChanges() ? \'primary\' : \'default\');\n    };\n\n    // TODO(Allan): Implement ability to edit suggestions before applying.\n    $scope.showSuggestionModal = function() {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/feedback_tab/\' +\n          \'editor_view_suggestion_modal_directive.html\'),\n        backdrop: true,\n        size: \'lg\',\n        resolve: {\n          suggestionIsOpen: function() {\n            return _isSuggestionOpen();\n          },\n          suggestionIsValid: function() {\n            return _isSuggestionValid();\n          },\n          unsavedChangesExist: function() {\n            return _hasUnsavedChanges();\n          },\n          suggestionStatus: function() {\n            return $scope.activeThread.status;\n          },\n          description: function() {\n            return $scope.activeThread.suggestion.description;\n          },\n          currentContent: function() {\n            var state = ExplorationStatesService.getState(\n              $scope.activeThread.suggestion.state_name);\n            return state !== undefined ? state.content.getHtml() : null;\n          },\n          newContent: function() {\n            return $scope.activeThread.suggestion.suggestion_html;\n          }\n        },\n        controller: [\n          \'$scope\', \'$log\', \'$uibModalInstance\', \'suggestionIsOpen\',\n          \'suggestionIsValid\', \'unsavedChangesExist\', \'suggestionStatus\',\n          \'description\', \'currentContent\', \'newContent\', \'EditabilityService\',\n          function(\n              $scope, $log, $uibModalInstance, suggestionIsOpen,\n              suggestionIsValid, unsavedChangesExist, suggestionStatus,\n              description, currentContent, newContent, EditabilityService) {\n            var SUGGESTION_ACCEPTED_MSG = \'This suggestion has already been \' +\n              \'accepted.\';\n            var SUGGESTION_REJECTED_MSG = \'This suggestion has already been \' +\n              \'rejected.\';\n            var SUGGESTION_INVALID_MSG = \'This suggestion was made \' +\n              \'for a state that no longer exists. It cannot be accepted.\';\n            var UNSAVED_CHANGES_MSG = \'You have unsaved changes to \' +\n              \'this exploration. Please save/discard your unsaved changes if \' +\n              \'you wish to accept.\';\n            $scope.isOpen = suggestionIsOpen;\n            $scope.canEdit = EditabilityService.isEditable();\n            $scope.canReject = $scope.canEdit && $scope.isOpen;\n            $scope.canAccept = $scope.canEdit && $scope.isOpen &&\n              suggestionIsValid && !unsavedChangesExist;\n\n            if (!$scope.canEdit) {\n              $scope.errorMessage = \'\';\n            } else if (!$scope.isOpen) {\n              $scope.errorMessage = suggestionStatus === \'fixed\' ?\n                SUGGESTION_ACCEPTED_MSG : SUGGESTION_REJECTED_MSG;\n            } else if (!suggestionIsValid) {\n              $scope.errorMessage = SUGGESTION_INVALID_MSG;\n            } else if (unsavedChangesExist) {\n              $scope.errorMessage = UNSAVED_CHANGES_MSG;\n            } else {\n              $scope.errorMessage = \'\';\n            }\n\n            $scope.currentContent = currentContent;\n            $scope.newContent = newContent;\n            $scope.commitMessage = description;\n\n            $scope.acceptSuggestion = function() {\n              $uibModalInstance.close({\n                action: ACTION_ACCEPT_SUGGESTION,\n                commitMessage: $scope.commitMessage,\n                // TODO(sll): If audio files exist for the content being\n                // replaced, implement functionality in the modal for the\n                // exploration creator to indicate whether this change\n                // requires the corresponding audio subtitles to be updated.\n                // For now, we default to assuming that the changes are\n                // sufficiently small as to warrant no updates.\n                audioUpdateRequired: false\n              });\n            };\n\n            $scope.rejectSuggestion = function() {\n              $uibModalInstance.close({\n                action: ACTION_REJECT_SUGGESTION\n              });\n            };\n\n            $scope.cancelReview = function() {\n              $uibModalInstance.dismiss();\n            };\n          }\n        ]\n      }).result.then(function(result) {\n        ThreadDataService.resolveSuggestion(\n          $scope.activeThread.thread_id, result.action, result.commitMessage,\n          result.audioUpdateRequired,\n          function() {\n            ThreadDataService.fetchThreads(function() {\n              $scope.setActiveThread($scope.activeThread.thread_id);\n            });\n            // Immediately update editor to reflect accepted suggestion.\n            if (result.action === ACTION_ACCEPT_SUGGESTION) {\n              var suggestion = $scope.activeThread.suggestion;\n              var stateName = suggestion.state_name;\n              var stateDict = ExplorationDataService.data.states[stateName];\n              var state = StateObjectFactory.createFromBackendDict(\n                stateName, stateDict);\n              state.content.setHtml(suggestion.suggestion_html);\n              if (result.audioUpdateRequired) {\n                state.content.markAllAudioAsNeedingUpdate();\n              }\n              ExplorationDataService.data.version += 1;\n              ExplorationStatesService.setState(stateName, state);\n              $rootScope.$broadcast(\'refreshVersionHistory\', {\n                forceRefresh: true\n              });\n              $rootScope.$broadcast(\'refreshStateEditor\');\n            }\n          }, function() {\n            $log.error(\'Error resolving suggestion\');\n          });\n      });\n    };\n\n    $scope.addNewMessage = function(threadId, tmpText, tmpStatus) {\n      if (threadId === null) {\n        AlertsService.addWarning(\'Cannot add message to thread with ID: null.\');\n        return;\n      }\n      if (!tmpStatus) {\n        AlertsService.addWarning(\'Invalid message status: \' + tmpStatus);\n        return;\n      }\n\n      $scope.messageSendingInProgress = true;\n      ThreadDataService.addNewMessage(threadId, tmpText, tmpStatus, function() {\n        _resetTmpMessageFields();\n        $scope.messageSendingInProgress = false;\n      }, function() {\n        $scope.messageSendingInProgress = false;\n      });\n    };\n\n    $scope.setActiveThread = function(threadId) {\n      ThreadDataService.fetchMessages(threadId);\n      ThreadDataService.markThreadAsSeen(threadId);\n\n      var allThreads = [].concat(\n        $scope.threadData.feedbackThreads, $scope.threadData.suggestionThreads);\n      for (var i = 0; i < allThreads.length; i++) {\n        if (allThreads[i].thread_id === threadId) {\n          $scope.activeThread = allThreads[i];\n          break;\n        }\n      }\n\n      $scope.tmpMessage.status = $scope.activeThread.status;\n    };\n\n    // Initial load of the thread list on page load.\n    $scope.clearActiveThread();\n    ThreadDataService.fetchFeedbackStats();\n    ThreadDataService.fetchThreads(function() {\n      $timeout(function() {\n        $rootScope.loadingMessage = \'\';\n      }, 500);\n    });\n  }\n]);'

blocks = {}
debug_info = ''
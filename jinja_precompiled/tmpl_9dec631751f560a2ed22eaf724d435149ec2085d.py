from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/feedback_tab/ThreadStatusDisplayServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for ThreadStatusDisplayService, that provides\n * information about how to display the status label for a thread in the\n * feedback tab of the exploration editor.\n */\n\ndescribe(\'Thread Status Display Service\', function() {\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n  var ThreadStatusDisplayService;\n  beforeEach(inject(function(_ThreadStatusDisplayService_) {\n    ThreadStatusDisplayService = _ThreadStatusDisplayService_;\n  }));\n\n  it(\'should give human readable status for status choice\', function() {\n    var mockStatusChoices = ThreadStatusDisplayService.STATUS_CHOICES;\n\n    for (var i = 0; i < mockStatusChoices.length; i++) {\n      mockStatusID = mockStatusChoices[i].id;\n      expect(\n        ThreadStatusDisplayService.getHumanReadableStatus(\n          mockStatusID)).toBe(mockStatusChoices[i].text);\n    }\n\n    var mockStatusID = \'INVALID_STATUS\';\n    expect(\n      ThreadStatusDisplayService.getHumanReadableStatus(\n        mockStatusID)).toBe(\'\');\n  });\n\n  it(\'should give appropriate label class for status id\', function() {\n    var mockStatusID = \'open\';\n    expect(ThreadStatusDisplayService.getLabelClass(mockStatusID)).toBe(\n      \'label label-info\');\n\n    mockStatusID = \'fixed\';\n    expect(ThreadStatusDisplayService.getLabelClass(mockStatusID)).toBe(\n      \'label label-default\');\n\n    mockStatusID = \'ignored\';\n    expect(ThreadStatusDisplayService.getLabelClass(mockStatusID)).toBe(\n      \'label label-default\');\n\n    mockStatusID = \'not_actionable\';\n    expect(ThreadStatusDisplayService.getLabelClass(mockStatusID)).toBe(\n      \'label label-default\');\n\n    mockStatusID = \'compliment\';\n    expect(ThreadStatusDisplayService.getLabelClass(mockStatusID)).toBe(\n      \'label label-default\');\n  });\n});'

blocks = {}
debug_info = ''
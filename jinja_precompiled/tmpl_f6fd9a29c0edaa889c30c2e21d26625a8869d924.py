from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/LearnerParamsServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the learner parameters service.\n */\n\ndescribe(\'Learner parameters service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'learner params service\', function() {\n    var LearnerParamsService = null;\n\n    beforeEach(inject(function($injector) {\n      LearnerParamsService = $injector.get(\'LearnerParamsService\');\n    }));\n\n    it(\'should correctly initialize parameters\', function() {\n      expect(LearnerParamsService.getAllParams()).toEqual({});\n      LearnerParamsService.init({\n        a: \'b\'\n      });\n      expect(LearnerParamsService.getAllParams()).toEqual({\n        a: \'b\'\n      });\n    });\n\n    it(\'should correctly get and set parameters\', function() {\n      LearnerParamsService.init({\n        a: \'b\'\n      });\n      expect(LearnerParamsService.getValue(\'a\')).toEqual(\'b\');\n      LearnerParamsService.setValue(\'a\', \'c\');\n      expect(LearnerParamsService.getValue(\'a\')).toEqual(\'c\');\n    });\n\n    it(\'should not get an invalid parameter\', function() {\n      LearnerParamsService.init({\n        a: \'b\'\n      });\n      expect(function() {\n        LearnerParamsService.getValue(\'b\');\n      }).toThrow(\'Invalid parameter name: b\');\n    });\n\n    it(\'should not set an invalid parameter\', function() {\n      LearnerParamsService.init({\n        a: \'b\'\n      });\n      expect(function() {\n        LearnerParamsService.setValue(\'b\', \'c\');\n      }).toThrow(\'Cannot set unknown parameter: b\');\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/exploration/ReadOnlyExplorationBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for ReadOnlyExplorationBackendApiService.\n */\n\ndescribe(\'Read only exploration backend API service\', function() {\n  var ReadOnlyExplorationBackendApiService = null;\n  var sampleDataResults = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n  var shof;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    ReadOnlyExplorationBackendApiService = $injector.get(\n      \'ReadOnlyExplorationBackendApiService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n    shof = $injector.get(\'SubtitledHtmlObjectFactory\');\n\n    // Sample exploration object returnable from the backend\n    sampleDataResults = {\n      exploration_id: \'0\',\n      is_logged_in: true,\n      session_id: \'KERH\',\n      exploration: {\n        init_state_name: \'Introduction\',\n        states: {\n          Introduction: {\n            param_changes: [],\n            content: {\n              html: \'\',\n              audio_translations: {}\n            },\n            unresolved_answers: {},\n            interaction: {\n              customization_args: {},\n              answer_groups: [],\n              default_outcome: {\n                param_changes: [],\n                dest: \'Introduction\',\n                feedback: {\n                  html: \'\',\n                  audio_translations: {}\n                }\n              },\n              confirmed_unclassified_answers: [],\n              id: null\n            }\n          }\n        }\n      },\n      version: 1,\n      state_classifier_mapping: {}\n    };\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully fetch an existing exploration from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/explorehandler/init/0\').respond(\n        sampleDataResults);\n      ReadOnlyExplorationBackendApiService.fetchExploration(\n        \'0\', null).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(sampleDataResults);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should load a cached exploration after fetching it from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a exploration the first time should fetch it from the backend.\n      $httpBackend.expect(\'GET\', \'/explorehandler/init/0\').respond(\n        sampleDataResults);\n      ReadOnlyExplorationBackendApiService.loadExploration(\n        \'0\', null).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(sampleDataResults);\n      expect(failHandler).not.toHaveBeenCalled();\n\n      // Loading a exploration the second time should not fetch it.\n      ReadOnlyExplorationBackendApiService.loadExploration(\n        \'0\', null).then(successHandler, failHandler);\n\n      expect(successHandler).toHaveBeenCalledWith(sampleDataResults);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a exploration the first time should fetch it from the backend.\n      $httpBackend.expect(\'GET\', \'/explorehandler/init/0\').respond(\n        500, \'Error loading exploration 0.\');\n      ReadOnlyExplorationBackendApiService.loadExploration(\n        \'0\', null).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\'Error loading exploration 0.\');\n    }\n  );\n\n  it(\'should report caching and support clearing the cache\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    // The exploration should not currently be cached.\n    expect(ReadOnlyExplorationBackendApiService.isCached(\'0\')).toBe(false);\n\n    // Loading a exploration the first time should fetch it from the backend.\n    $httpBackend.expect(\'GET\', \'/explorehandler/init/0\').respond(\n      sampleDataResults);\n    ReadOnlyExplorationBackendApiService.loadLatestExploration(\'0\').then(\n      successHandler, failHandler);\n    $httpBackend.flush();\n\n    expect(successHandler).toHaveBeenCalledWith(sampleDataResults);\n    expect(failHandler).not.toHaveBeenCalled();\n\n    // The exploration should now be cached.\n    expect(ReadOnlyExplorationBackendApiService.isCached(\'0\')).toBe(true);\n\n    // The exploration should be loadable from the cache.\n    ReadOnlyExplorationBackendApiService.loadLatestExploration(\'0\').then(\n      successHandler, failHandler);\n    expect(successHandler).toHaveBeenCalledWith(sampleDataResults);\n    expect(failHandler).not.toHaveBeenCalled();\n\n    // Resetting the cache will cause another fetch from the backend.\n    ReadOnlyExplorationBackendApiService.clearExplorationCache();\n    expect(ReadOnlyExplorationBackendApiService.isCached(\'0\')).toBe(false);\n\n    $httpBackend.expect(\'GET\', \'/explorehandler/init/0\').respond(\n      sampleDataResults);\n    ReadOnlyExplorationBackendApiService.loadLatestExploration(\'0\').then(\n      successHandler, failHandler);\n    $httpBackend.flush();\n\n    expect(successHandler).toHaveBeenCalledWith(sampleDataResults);\n    expect(failHandler).not.toHaveBeenCalled();\n  });\n\n  it(\'should report a cached exploration after caching it\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    // The exploration should not currently be cached.\n    expect(ReadOnlyExplorationBackendApiService.isCached(\'0\')).toBe(false);\n\n    // Cache a exploration.\n    ReadOnlyExplorationBackendApiService.cacheExploration(\'0\', {\n      id: \'0\',\n      nodes: []\n    });\n\n    // It should now be cached.\n    expect(ReadOnlyExplorationBackendApiService.isCached(\'0\')).toBe(true);\n\n    // A new exploration should not have been fetched from the backend. Also,\n    // the returned exploration should match the expected exploration object.\n    ReadOnlyExplorationBackendApiService.loadLatestExploration(\'0\').then(\n      successHandler, failHandler);\n\n    // http://brianmcd.com/2014/03/27/\n    // a-tip-for-angular-unit-tests-with-promises.html\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalledWith({\n      id: \'0\',\n      nodes: []\n    });\n    expect(failHandler).not.toHaveBeenCalled();\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/CollectionRightsObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for CollectionRightsObjectFactory.\n */\n\ndescribe(\'Collection rights object factory\', function() {\n  var CollectionRightsObjectFactory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    CollectionRightsObjectFactory = $injector.get(\n      \'CollectionRightsObjectFactory\');\n  }));\n\n  it(\'should not be able to modify owner names\', function() {\n    var initialCollectionRightsBackendObject = {\n      collection_id: 0,\n      can_edit: true,\n      can_unpublish: false,\n      is_private: true,\n      owner_names: [\'A\']\n    };\n\n    sampleCollectionRights = CollectionRightsObjectFactory.create(\n      initialCollectionRightsBackendObject);\n    var ownerNames = sampleCollectionRights.getOwnerNames();\n    ownerNames.push(\'B\');\n\n    expect(sampleCollectionRights.getOwnerNames()).toEqual([\'A\']);\n  });\n\n  it(\'should accept accept changes to the bindable list of collection nodes\',\n    function() {\n      var initialCollectionRightsBackendObject = {\n        collection_id: 0,\n        can_edit: true,\n        can_unpublish: false,\n        is_private: true,\n        owner_names: [\'A\']\n      };\n\n      sampleCollectionRights = CollectionRightsObjectFactory.create(\n        initialCollectionRightsBackendObject);\n      var ownerNames = sampleCollectionRights.getBindableOwnerNames();\n      ownerNames.push(\'B\');\n\n      expect(sampleCollectionRights.getOwnerNames()).toEqual([\'A\', \'B\']);\n    }\n  );\n\n  it(\'should be able to set public when canEdit is true\', function() {\n    var initialCollectionRightsBackendObject = {\n      collection_id: 0,\n      can_edit: true,\n      can_unpublish: false,\n      is_private: true,\n      owner_names: [\'A\']\n    };\n\n    sampleCollectionRights = CollectionRightsObjectFactory.create(\n      initialCollectionRightsBackendObject);\n    expect(sampleCollectionRights.isPrivate()).toBe(true);\n    expect(sampleCollectionRights.isPublic()).toBe(false);\n\n    sampleCollectionRights.setPublic();\n    expect(sampleCollectionRights.isPrivate()).toBe(false);\n    expect(sampleCollectionRights.isPublic()).toBe(true);\n  });\n\n  it(\'should throw error and not be able to set public when canEdit is false\',\n    function() {\n      var initialCollectionRightsBackendObject = {\n        collection_id: 0,\n        can_edit: false,\n        can_unpublish: false,\n        is_private: true,\n        owner_names: [\'A\']\n      };\n\n      sampleCollectionRights = CollectionRightsObjectFactory.create(\n        initialCollectionRightsBackendObject);\n      expect(sampleCollectionRights.isPrivate()).toBe(true);\n      expect(sampleCollectionRights.isPublic()).toBe(false);\n\n      expect(function() {\n        sampleCollectionRights.setPublic();\n      }).toThrow(new Error(\'User is not allowed to edit this collection.\'));\n      expect(sampleCollectionRights.isPrivate()).toBe(true);\n      expect(sampleCollectionRights.isPublic()).toBe(false);\n    }\n  );\n\n  it(\'should be able to set private when canUnpublish is true\', function() {\n    var initialCollectionRightsBackendObject = {\n      collection_id: 0,\n      can_edit: true,\n      can_unpublish: true,\n      is_private: false,\n      owner_names: [\'A\']\n    };\n\n    sampleCollectionRights = CollectionRightsObjectFactory.create(\n      initialCollectionRightsBackendObject);\n    expect(sampleCollectionRights.isPrivate()).toBe(false);\n    expect(sampleCollectionRights.isPublic()).toBe(true);\n\n    sampleCollectionRights.setPrivate();\n    expect(sampleCollectionRights.isPrivate()).toBe(true);\n    expect(sampleCollectionRights.isPublic()).toBe(false);\n  });\n\n  it(\'should throw error when when canUnpublish is false during unpublishing\',\n    function() {\n      var noUnpublishCollectionRightsBackendObject = {\n        collection_id: 0,\n        can_edit: true,\n        can_unpublish: false,\n        is_private: false,\n        owner_names: [\'A\']\n      };\n\n      sampleCollectionRights = CollectionRightsObjectFactory.create(\n        noUnpublishCollectionRightsBackendObject);\n      expect(sampleCollectionRights.isPrivate()).toBe(false);\n      expect(sampleCollectionRights.isPublic()).toBe(true);\n\n      expect(function() {\n        sampleCollectionRights.setPrivate();\n      }).toThrow(\n        new Error(\'User is not allowed to unpublish this collection.\'));\n\n      // Verify that the status remains unchanged.\n      expect(sampleCollectionRights.isPrivate()).toBe(false);\n      expect(sampleCollectionRights.isPublic()).toBe(true);\n    }\n  );\n\n  it(\'should create an empty collection rights object\', function() {\n    var emptyCollectionRightsBackendObject = (\n      CollectionRightsObjectFactory.createEmptyCollectionRights());\n\n    expect(\n      emptyCollectionRightsBackendObject.getCollectionId()).toBeUndefined();\n    expect(emptyCollectionRightsBackendObject.canEdit()).toBeUndefined();\n    expect(emptyCollectionRightsBackendObject.canUnpublish()).toBeUndefined();\n    expect(emptyCollectionRightsBackendObject.isPrivate()).toBeUndefined();\n    expect(emptyCollectionRightsBackendObject.getOwnerNames()).toEqual([]);\n  });\n\n  it(\'should make a copy from another collection rights\', function() {\n    var noUnpublishCollectionRightsBackendObject = {\n      collection_id: 0,\n      can_edit: true,\n      can_unpublish: false,\n      is_private: false,\n      owner_names: [\'A\']\n    };\n\n    sampleCollectionRights = CollectionRightsObjectFactory.create(\n      noUnpublishCollectionRightsBackendObject);\n\n    var emptyCollectionRightsBackendObject = (\n      CollectionRightsObjectFactory.createEmptyCollectionRights());\n\n    emptyCollectionRightsBackendObject.copyFromCollectionRights(\n      sampleCollectionRights);\n    expect(emptyCollectionRightsBackendObject.getCollectionId()).toEqual(0);\n    expect(emptyCollectionRightsBackendObject.canEdit()).toBe(true);\n    expect(emptyCollectionRightsBackendObject.canUnpublish()).toBe(false);\n    expect(emptyCollectionRightsBackendObject.isPrivate()).toBe(false);\n    expect(emptyCollectionRightsBackendObject.getOwnerNames()).toEqual([\'A\']);\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/topic/TopicRightsBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for TopicRightsBackendApiService.\n */\n\ndescribe(\'Topic rights backend API service\', function() {\n  var TopicRightsBackendApiService = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    TopicRightsBackendApiService = $injector.get(\n      \'TopicRightsBackendApiService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully publish and unpublish a topic\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    $httpBackend.expect(\n      \'PUT\', \'/rightshandler/change_topic_status/0\').respond(200);\n    TopicRightsBackendApiService.publishTopic(\'0\').then(\n      successHandler, failHandler);\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalled();\n    expect(failHandler).not.toHaveBeenCalled();\n\n    $httpBackend.expect(\n      \'PUT\', \'/rightshandler/change_topic_status/0\').respond(200);\n    TopicRightsBackendApiService.unpublishTopic(\'0\').then(\n      successHandler, failHandler);\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalled();\n    expect(failHandler).not.toHaveBeenCalled();\n  });\n\n  it(\'should call the provided fail handler on HTTP failure\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    $httpBackend.expect(\n      \'PUT\', \'/rightshandler/change_topic_status/0\').respond(\n      404, \'Topic doesn\\\'t not exist.\');\n    TopicRightsBackendApiService.publishTopic(\'0\').then(\n      successHandler, failHandler);\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).not.toHaveBeenCalled();\n    expect(failHandler).toHaveBeenCalled();\n  });\n\n  it(\'should report an uncached topic rights after caching it\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    $httpBackend.expect(\n      \'GET\', \'/rightshandler/get_topic_rights/0\').respond(200, {\n      topic_id: 0,\n      topic_is_published: true,\n      manager_ids: [\'user_id\']\n    });\n    // The topic should not currently be cached.\n    expect(TopicRightsBackendApiService.isCached(\'0\')).toBe(false);\n\n    // A new topic should be fetched from the backend. Also,\n    // the returned topic should match the expected topic object.\n    TopicRightsBackendApiService.loadTopicRights(\'0\').then(\n      successHandler, failHandler);\n\n    $httpBackend.flush();\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalled();\n    expect(failHandler).not.toHaveBeenCalled();\n    // It should now be cached.\n    expect(TopicRightsBackendApiService.isCached(\'0\')).toBe(true);\n  });\n\n  it(\'should report a cached topic rights after caching it\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    // The topic should not currently be cached.\n    expect(TopicRightsBackendApiService.isCached(\'0\')).toBe(false);\n\n    // Cache a topic rights object.\n    TopicRightsBackendApiService.cacheTopicRights(\'0\', {\n      topic_id: 0,\n      topic_is_published: true,\n      manager_ids: [\'user_id\']\n    });\n\n    // It should now be cached.\n    expect(TopicRightsBackendApiService.isCached(\'0\')).toBe(true);\n\n    // A new topic should not have been fetched from the backend. Also,\n    // the returned topic should match the expected topic object.\n    TopicRightsBackendApiService.loadTopicRights(\'0\').then(\n      successHandler, failHandler);\n\n    // http://brianmcd.com/2014/03/27/\n    // a-tip-for-angular-unit-tests-with-promises.html\n    $rootScope.$digest();\n\n    expect(successHandler).toHaveBeenCalledWith({\n      topic_id: 0,\n      topic_is_published: true,\n      manager_ids: [\'user_id\']\n    });\n    expect(failHandler).not.toHaveBeenCalled();\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/objects/FractionObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating instances of Fraction\n * domain objects.\n */\n\noppia.constant(\'FRACTION_PARSING_ERRORS\', {\n  INVALID_CHARS:\n    \'Please only use numerical digits, spaces or forward slashes (/)\',\n  INVALID_FORMAT:\n    \'Please enter a valid fraction (e.g., 5/3 or 1 2/3)\',\n  DIVISION_BY_ZERO: \'Please do not put 0 in the denominator\'\n});\n\noppia.factory(\'FractionObjectFactory\', [\n  \'FRACTION_PARSING_ERRORS\', function(FRACTION_PARSING_ERRORS) {\n    var Fraction = function(isNegative, wholeNumber, numerator, denominator) {\n      this.isNegative = isNegative;\n      this.wholeNumber = wholeNumber;\n      this.numerator = numerator;\n      this.denominator = denominator;\n    };\n\n    Fraction.prototype.toString = function() {\n      var fractionString = \'\';\n      if (this.numerator !== 0) {\n        fractionString += this.numerator + \'/\' + this.denominator;\n      }\n      if (this.wholeNumber !== 0) {\n        fractionString = this.wholeNumber + \' \' + fractionString;\n        // If the fractional part was empty then there will be a trailing\n        // whitespace.\n        fractionString = fractionString.trim();\n      }\n      if (this.isNegative && fractionString !== \'\') {\n        fractionString = \'-\' + fractionString;\n      }\n      return fractionString === \'\' ? \'0\' : fractionString;\n    };\n\n    Fraction.prototype.toDict = function() {\n      return {\n        isNegative: this.isNegative,\n        wholeNumber: this.wholeNumber,\n        numerator: this.numerator,\n        denominator: this.denominator\n      };\n    };\n\n    Fraction.prototype.toFloat = function() {\n      var totalParts = (this.wholeNumber * this.denominator) + this.numerator;\n      var floatVal = (totalParts / this.denominator);\n      return this.isNegative ? -floatVal : floatVal;\n    };\n\n    Fraction.prototype.getIntegerPart = function() {\n      return this.isNegative ? -this.wholeNumber : this.wholeNumber;\n    };\n\n    Fraction.prototype.convertToSimplestForm = function() {\n      var gcd = function(x, y) {\n        return y === 0 ? x : gcd(y, x % y);\n      };\n      var g = gcd(this.numerator, this.denominator);\n      var numerator = this.numerator / g;\n      var denominator = this.denominator / g;\n      return new Fraction(\n        this.isNegative, this.wholeNumber, numerator, denominator);\n    };\n\n    Fraction.prototype.hasNonzeroIntegerPart = function() {\n      return this.wholeNumber !== 0;\n    };\n\n    Fraction.prototype.isImproperFraction = function() {\n      return this.denominator <= this.numerator;\n    };\n\n    Fraction.fromRawInputString = function(rawInput) {\n      var INVALID_CHARS_REGEX = /[^\\d\\s\\/-]/g;\n      if (INVALID_CHARS_REGEX.test(rawInput)) {\n        throw new Error(FRACTION_PARSING_ERRORS.INVALID_CHARS);\n      }\n      var FRACTION_REGEX = /^\\s*-?\\s*((\\d*\\s*\\d+\\s*\\/\\s*\\d+)|\\d+)\\s*$/;\n      if (!FRACTION_REGEX.test(rawInput)) {\n        throw new Error(FRACTION_PARSING_ERRORS.INVALID_FORMAT);\n      }\n      var isNegative = false;\n      var wholeNumber = 0;\n      var numerator = 0;\n      var denominator = 1;\n      rawInput = rawInput.trim();\n      if (rawInput.charAt(0) === \'-\') {\n        isNegative = true;\n        // Remove the negative char from the string.\n        rawInput = rawInput.substring(1);\n      }\n      // Filter result from split to remove empty strings.\n      var numbers = rawInput.split(/\\/|\\s/g).filter(function(token) {\n        // The empty string will evaluate to false.\n        return Boolean(token);\n      });\n\n      if (numbers.length === 1) {\n        wholeNumber = parseInt(numbers[0]);\n      } else if (numbers.length === 2) {\n        numerator = parseInt(numbers[0]);\n        denominator = parseInt(numbers[1]);\n      } else {\n        // numbers.length == 3\n        wholeNumber = parseInt(numbers[0]);\n        numerator = parseInt(numbers[1]);\n        denominator = parseInt(numbers[2]);\n      }\n      if (denominator === 0) {\n        throw new Error(FRACTION_PARSING_ERRORS.DIVISION_BY_ZERO);\n      }\n      return new Fraction(isNegative, wholeNumber, numerator, denominator);\n    };\n\n    Fraction.fromDict = function(fractionDict) {\n      return new Fraction(\n        fractionDict.isNegative,\n        fractionDict.wholeNumber,\n        fractionDict.numerator,\n        fractionDict.denominator);\n    };\n\n    return Fraction;\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/question/EditableQuestionBackendApiServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for EditableQuestionBackendApiService.\n */\n\ndescribe(\'Editable question backend API service\', function() {\n  var EditableQuestionBackendApiService = null;\n  var sampleDataResults = null;\n  var $rootScope = null;\n  var $scope = null;\n  var $httpBackend = null;\n\n  beforeEach(module(\'oppia\'));\n  beforeEach(module(\'oppia\', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n\n  beforeEach(inject(function($injector) {\n    EditableQuestionBackendApiService = $injector.get(\n      \'EditableQuestionBackendApiService\');\n    $rootScope = $injector.get(\'$rootScope\');\n    $scope = $rootScope.$new();\n    $httpBackend = $injector.get(\'$httpBackend\');\n\n    // Sample question object returnable from the backend\n    sampleDataResults = {\n      question_dict: {\n        id: \'0\',\n        question_state_data: {\n          content: {\n            html: \'Question 1\'\n          },\n          content_ids_to_audio_translations: {},\n          interaction: {\n            answer_groups: [],\n            confirmed_unclassified_answers: [],\n            customization_args: {},\n            default_outcome: {\n              dest: null,\n              feedback: {\n                html: \'Correct Answer\'\n              },\n              param_changes: [],\n              labelled_as_correct: true\n            },\n            hints: [\n              {\n                hint_content: {\n                  html: \'Hint 1\'\n                }\n              }\n            ],\n            solution: {\n              correct_answer: \'This is the correct answer\',\n              answer_is_exclusive: false,\n              explanation: {\n                html: \'Solution explanation\'\n              }\n            },\n            id: \'TextInput\'\n          },\n          param_changes: []\n        },\n        language_code: \'en\',\n        version: 1\n      }\n    };\n  }));\n\n  afterEach(function() {\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  });\n\n  it(\'should successfully fetch an existing question from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/question_editor_handler/data/0\').respond(\n        sampleDataResults);\n      EditableQuestionBackendApiService.fetchQuestion(\'0\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(\n        sampleDataResults.question_dict);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the backend request failed\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      $httpBackend.expect(\'GET\', \'/question_editor_handler/data/1\').respond(\n        500, \'Error loading question 1.\');\n      EditableQuestionBackendApiService.fetchQuestion(\'1\').then(\n        successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).not.toHaveBeenCalled();\n      expect(failHandler).toHaveBeenCalledWith(\'Error loading question 1.\');\n    }\n  );\n\n  it(\'should update a question after fetching it from the backend\',\n    function() {\n      var successHandler = jasmine.createSpy(\'success\');\n      var failHandler = jasmine.createSpy(\'fail\');\n\n      // Loading a question the first time should fetch it from the backend.\n      $httpBackend.expect(\'GET\', \'/question_editor_handler/data/0\').respond(\n        sampleDataResults);\n\n      EditableQuestionBackendApiService.fetchQuestion(\'0\').then(\n        function(questionDict) {\n          question = questionDict;\n        });\n      $httpBackend.flush();\n\n      question.question_state_data.content.html = \'New Question Content\';\n      question.version = \'2\';\n      var questionWrapper = {\n        question_dict: question\n      };\n\n      $httpBackend.expect(\'PUT\', \'/question_editor_handler/data/0\').respond(\n        questionWrapper);\n\n      // Send a request to update question\n      EditableQuestionBackendApiService.updateQuestion(\n        question.id, question.version, \'Question Data is updated\', []\n      ).then(successHandler, failHandler);\n      $httpBackend.flush();\n\n      expect(successHandler).toHaveBeenCalledWith(question);\n      expect(failHandler).not.toHaveBeenCalled();\n    }\n  );\n\n  it(\'should use the rejection handler if the question to update \' +\n     \'doesn\\\'t exist\', function() {\n    var successHandler = jasmine.createSpy(\'success\');\n    var failHandler = jasmine.createSpy(\'fail\');\n\n    // Loading a question the first time should fetch it from the backend.\n    $httpBackend.expect(\'PUT\', \'/question_editor_handler/data/1\').respond(\n      404, \'Question with given id doesn\\\'t exist.\');\n\n    EditableQuestionBackendApiService.updateQuestion(\n      \'1\', \'1\', \'Update an invalid question.\', []\n    ).then(successHandler, failHandler);\n    $httpBackend.flush();\n\n    expect(successHandler).not.toHaveBeenCalled();\n    expect(failHandler).toHaveBeenCalledWith(\n      \'Question with given id doesn\\\'t exist.\');\n  });\n});'

blocks = {}
debug_info = ''
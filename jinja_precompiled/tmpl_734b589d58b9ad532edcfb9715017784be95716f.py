from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/collection/CollectionNodeObjectFactory.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating and mutating instances of frontend\n * collection node domain objects.\n */\n\n// This constant must match the corresponding constant defined in\n// core.domain.rights_manager.ACTIVITY_STATUS_PRIVATE.\n// TODO(bhenning): This should be provided by the backend.\noppia.constant(\'ACTIVITY_STATUS_PRIVATE\', \'private\');\n\noppia.factory(\'CollectionNodeObjectFactory\', [\n  \'ACTIVITY_STATUS_PRIVATE\',\n  function(ACTIVITY_STATUS_PRIVATE) {\n    var CollectionNode = function(collectionNodeBackendObject) {\n      this._explorationId = collectionNodeBackendObject.exploration_id;\n      this._explorationSummaryObject = angular.copy(\n        collectionNodeBackendObject.exploration_summary);\n    };\n\n    // Instance methods\n\n    // Returns the ID of the exploration represented by this collection node.\n    // This property is immutable.\n    CollectionNode.prototype.getExplorationId = function() {\n      return this._explorationId;\n    };\n\n    // Returns the title of the exploration represented by this collection node.\n    // This property is immutable. The value returned by this function is\n    // null if doesExplorationExist() returns false.\n    CollectionNode.prototype.getExplorationTitle = function() {\n      if (this._explorationSummaryObject) {\n        return this._explorationSummaryObject.title;\n      } else {\n        return null;\n      }\n    };\n\n    // Returns whether the exploration referenced by this node is known to exist\n    // in the backend. This property is immutable.\n    CollectionNode.prototype.doesExplorationExist = function() {\n      return this._explorationSummaryObject !== null;\n    };\n\n    // Returns whether the exploration referenced by this node is private and\n    // not published. This property is immutable. The value returned by this\n    // function is undefined if doesExplorationExist() returns false.\n    CollectionNode.prototype.isExplorationPrivate = function() {\n      if (this._explorationSummaryObject) {\n        return this._explorationSummaryObject.status === (\n          ACTIVITY_STATUS_PRIVATE);\n      } else {\n        return undefined;\n      }\n    };\n\n    // Returns a raw exploration summary object, as supplied by the backend for\n    // frontend exploration summary tile displaying. Changes to the returned\n    // object are not reflected in this domain object. The value returned by\n    // this function is null if doesExplorationExist() returns false.\n    CollectionNode.prototype.getExplorationSummaryObject = function() {\n      // TODO(bhenning): This should be represented by a frontend summary domain\n      // object that is also shared with the search result and profile pages.\n      return angular.copy(this._explorationSummaryObject);\n    };\n\n    // Sets the raw exploration summary object stored within this node.\n    CollectionNode.prototype.setExplorationSummaryObject = function(\n        explorationSummaryBackendObject) {\n      this._explorationSummaryObject = angular.copy(\n        explorationSummaryBackendObject);\n    };\n\n    CollectionNode.prototype.getCapitalizedObjective = function() {\n      return (\n        this._explorationSummaryObject.objective.charAt(0).toUpperCase() +\n        this._explorationSummaryObject.objective.slice(1));\n    };\n\n    // Static class methods. Note that "this" is not available in static\n    // contexts. This function takes a JSON object which represents a backend\n    // collection node python dict.\n    CollectionNode.create = function(collectionNodeBackendObject) {\n      return new CollectionNode(collectionNodeBackendObject);\n    };\n\n    // TODO(bhenning): Ensure this matches the backend dict elements for\n    // collection nodes.\n    CollectionNode.createFromExplorationId = function(explorationId) {\n      return CollectionNode.create({\n        exploration_id: explorationId,\n        exploration_summary: null\n      });\n    };\n\n    return CollectionNode;\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/statistics_tab/LearnerActionRenderServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the learner action render service.\n *\n * NOTE: To make tests shorter, we skip some elements and simply check\n * jasmine.any(Object).\n */\n\ndescribe(\'Learner Action Render Service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'Test learner action render service functions\', function() {\n    beforeEach(inject(function($injector) {\n      this.laof = $injector.get(\'LearnerActionObjectFactory\');\n      this.ps = $injector.get(\'PlaythroughService\');\n      this.lars = $injector.get(\'LearnerActionRenderService\');\n      this.ps.initSession(\'expId1\', 1, 1.0, [\'expId1\']);\n      this.sce = $injector.get(\'$sce\');\n    }));\n\n    it(\'should split up EarlyQuit learner actions into display blocks.\',\n      function() {\n        this.ps.recordExplorationStartAction(\'stateName1\');\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName2\', \'Continue\', \'\', \'Welcome\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordExplorationQuitAction(\'stateName2\', 120);\n\n        var learnerActions = this.ps.getPlaythrough().actions;\n        var displayBlocks = this.lars.getDisplayBlocks(learnerActions);\n\n        expect(displayBlocks).toEqual([[\n          this.laof.createNew(\n            \'ExplorationStart\', {\n              state_name: {\n                value: \'stateName1\'\n              }\n            }, 1\n          ),\n          jasmine.any(Object),\n          jasmine.any(Object),\n          this.laof.createNew(\n            \'ExplorationQuit\', {\n              state_name: {\n                value: \'stateName2\'\n              },\n              time_spent_in_state_in_msecs: {\n                value: 120\n              }\n            }, 1\n          )\n        ]]);\n      });\n\n    it(\'should split up many learner actions into different display blocks.\',\n      function() {\n        this.ps.recordExplorationStartAction(\'stateName1\');\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordExplorationQuitAction(\'stateName1\', 120);\n\n        var learnerActions = this.ps.getPlaythrough().actions;\n        var displayBlocks = this.lars.getDisplayBlocks(learnerActions);\n\n        expect(displayBlocks).toEqual([\n          [\n            this.laof.createNew(\n              \'AnswerSubmit\', {\n                state_name: {\n                  value: \'stateName1\'\n                },\n                dest_state_name: {\n                  value: \'stateName2\'\n                },\n                interaction_id: {\n                  value: \'TextInput\'\n                },\n                submitted_answer: {\n                  value: \'Hello\'\n                },\n                feedback: {\n                  value: \'Try again\'\n                },\n                time_spent_state_in_msecs: {\n                  value: 30\n                }\n              }, 1\n            ),\n            jasmine.any(Object),\n            jasmine.any(Object),\n            this.laof.createNew(\n              \'ExplorationQuit\', {\n                state_name: {\n                  value: \'stateName1\'\n                },\n                time_spent_in_state_in_msecs: {\n                  value: 120\n                }\n              }, 1\n            )\n          ],\n          [\n            this.laof.createNew(\n              \'AnswerSubmit\', {\n                state_name: {\n                  value: \'stateName3\'\n                },\n                dest_state_name: {\n                  value: \'stateName1\'\n                },\n                interaction_id: {\n                  value: \'TextInput\'\n                },\n                submitted_answer: {\n                  value: \'Hello\'\n                },\n                feedback: {\n                  value: \'Try again\'\n                },\n                time_spent_state_in_msecs: {\n                  value: 30\n                }\n              }, 1\n            ),\n            jasmine.any(Object),\n            jasmine.any(Object),\n            this.laof.createNew(\n              \'AnswerSubmit\', {\n                state_name: {\n                  value: \'stateName3\'\n                },\n                dest_state_name: {\n                  value: \'stateName1\'\n                },\n                interaction_id: {\n                  value: \'TextInput\'\n                },\n                submitted_answer: {\n                  value: \'Hello\'\n                },\n                feedback: {\n                  value: \'Try again\'\n                },\n                time_spent_state_in_msecs: {\n                  value: 30\n                }\n              }, 1\n            )\n          ],\n          [\n            this.laof.createNew(\n              \'ExplorationStart\', {\n                state_name: {\n                  value: \'stateName1\'\n                }\n              }, 1\n            ),\n            jasmine.any(Object),\n            this.laof.createNew(\n              \'AnswerSubmit\', {\n                state_name: {\n                  value: \'stateName2\'\n                },\n                dest_state_name: {\n                  value: \'stateName3\'\n                },\n                interaction_id: {\n                  value: \'TextInput\'\n                },\n                submitted_answer: {\n                  value: \'Hello\'\n                },\n                feedback: {\n                  value: \'Try again\'\n                },\n                time_spent_state_in_msecs: {\n                  value: 30\n                }\n              }, 1\n            )\n          ]\n        ]);\n      });\n\n    it(\'should assign multiple learner actions at same state to same block.\',\n      function() {\n        this.ps.recordExplorationStartAction(\'stateName1\');\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordExplorationQuitAction(\'stateName1\', 120);\n\n        var learnerActions = this.ps.getPlaythrough().actions;\n        var displayBlocks = this.lars.getDisplayBlocks(learnerActions);\n\n        expect(displayBlocks).toEqual([[\n          this.laof.createNew(\n            \'ExplorationStart\', {\n              state_name: {\n                value: \'stateName1\'\n              }\n            }, 1\n          ),\n          jasmine.any(Object),\n          jasmine.any(Object),\n          jasmine.any(Object),\n          jasmine.any(Object),\n          jasmine.any(Object),\n          jasmine.any(Object),\n          this.laof.createNew(\n            \'ExplorationQuit\', {\n              state_name: {\n                value: \'stateName1\'\n              },\n              time_spent_in_state_in_msecs: {\n                value: 120\n              }\n            }, 1\n          )\n        ]]);\n      });\n\n    it(\'should render tables for MultipleIncorrectSubmissions issue block.\',\n      function() {\n        var feedback = {\n          _html: \'Try again\'\n        };\n        this.ps.recordExplorationStartAction(\'stateName1\');\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', feedback, 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', feedback, 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', feedback, 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', feedback, 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', feedback, 30);\n        this.ps.recordExplorationQuitAction(\'stateName1\', 120);\n\n        var learnerActions = this.ps.getPlaythrough().actions;\n        var displayBlocks = this.lars.getDisplayBlocks(learnerActions);\n\n        expect(displayBlocks.length).toEqual(1);\n\n        var finalBlockHTML = this.lars.renderFinalDisplayBlockForMISIssueHTML(\n          displayBlocks[0], 1);\n\n        expect(this.sce.getTrustedHtml(finalBlockHTML)).toEqual(\n          \'<span class="oppia-issues-learner-action">1. Started exploration \' +\n          \'at card "stateName1".</span>\' +\n          \'<span class="oppia-issues-learner-action">2. Submitted the \' +\n          \'following answers in card "stateName1"</span>\' +\n          \'<table class="oppia-issues-learner-action-table"><tr><th>Answer\' +\n          \'</th><th>Feedback</th></tr>\' +\n          \'<tr><td>Hello</td><td>Try again</td></tr>\' +\n          \'<tr><td>Hello</td><td>Try again</td></tr>\' +\n          \'<tr><td>Hello</td><td>Try again</td></tr>\' +\n          \'<tr><td>Hello</td><td>Try again</td></tr>\' +\n          \'<tr><td>Hello</td><td>Try again</td></tr></table>\' +\n          \'<span class="oppia-issues-learner-action">3. Left the exploration \' +\n          \'after spending a total of 120 seconds on card "stateName1".</span>\'\n        );\n      });\n\n    it(\'should render HTML for learner action display blocks.\', function() {\n      this.ps.recordExplorationStartAction(\'stateName1\');\n      this.ps.recordAnswerSubmitAction(\n        \'stateName1\', \'stateName2\', \'Continue\', \'\', \'Welcome\', 30);\n      this.ps.recordAnswerSubmitAction(\n        \'stateName2\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n      this.ps.recordExplorationQuitAction(\'stateName2\', 120);\n\n      var learnerActions = this.ps.getPlaythrough().actions;\n      var displayBlocks = this.lars.getDisplayBlocks(learnerActions);\n\n      expect(displayBlocks.length).toEqual(1);\n\n      var blockHTML = this.lars.renderDisplayBlockHTML(displayBlocks[0], 1);\n\n      expect(this.sce.getTrustedHtml(blockHTML)).toEqual(\n        \'<span class="oppia-issues-learner-action">1. Started exploration at \' +\n        \'card "stateName1".</span>\' +\n        \'<span class="oppia-issues-learner-action">2. Pressed "Continue" to \' +\n        \'move to card "stateName2" after 30 seconds.</span>\' +\n        \'<span class="oppia-issues-learner-action">3. Submitted answer \' +\n        \'"Hello" in card "stateName2".</span>\' +\n        \'<span class="oppia-issues-learner-action">4. Left the exploration \' +\n        \'after spending a total of 120 seconds on card "stateName2".</span>\'\n      );\n    });\n  });\n});'

blocks = {}
debug_info = ''
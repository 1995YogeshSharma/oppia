from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/preferences/Preferences.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Data and controllers for the Oppia \'edit preferences\' page.\n */\n\noppia.controller(\'Preferences\', [\n  \'$scope\', \'$http\', \'$rootScope\', \'$uibModal\', \'$timeout\', \'$translate\',\n  \'AlertsService\', \'UrlInterpolationService\', \'UtilsService\',\n  \'DASHBOARD_TYPE_CREATOR\', \'DASHBOARD_TYPE_LEARNER\',\n  function(\n      $scope, $http, $rootScope, $uibModal, $timeout, $translate,\n      AlertsService, UrlInterpolationService, UtilsService,\n      DASHBOARD_TYPE_CREATOR, DASHBOARD_TYPE_LEARNER) {\n    var _PREFERENCES_DATA_URL = \'/preferenceshandler/data\';\n    $rootScope.loadingMessage = \'Loading\';\n    $scope.profilePictureDataUrl = \'\';\n    $scope.DASHBOARD_TYPE_CREATOR = DASHBOARD_TYPE_CREATOR;\n    $scope.DASHBOARD_TYPE_LEARNER = DASHBOARD_TYPE_LEARNER;\n    $scope.username = GLOBALS.username;\n\n    $scope.getStaticImageUrl = UrlInterpolationService.getStaticImageUrl;\n\n    var _saveDataItem = function(updateType, data) {\n      $http.put(_PREFERENCES_DATA_URL, {\n        update_type: updateType,\n        data: data\n      });\n    };\n\n    // Select2 dropdown cannot automatically refresh its display\n    // after being translated.\n    // Use $scope.select2DropdownIsShown in its ng-if attribute\n    // and this function to force it to reload\n    var _forceSelect2Refresh = function() {\n      $scope.select2DropdownIsShown = false;\n      $timeout(function() {\n        $scope.select2DropdownIsShown = true;\n      }, 100);\n    };\n\n    $scope.saveUserBio = function(userBio) {\n      _saveDataItem(\'user_bio\', userBio);\n    };\n\n    $scope.subjectInterestsChangedAtLeastOnce = false;\n    $scope.subjectInterestsWarningText = null;\n    $scope.TAG_REGEX_STRING = \'^[a-z ]+$\';\n\n    $scope.updateSubjectInterestsWarning = function(subjectInterests) {\n      var TAG_REGEX = new RegExp($scope.TAG_REGEX_STRING);\n\n      if (subjectInterests instanceof Array) {\n        for (var i = 0; i < subjectInterests.length; i++) {\n          if (UtilsService.isString(subjectInterests[i])) {\n            if (!TAG_REGEX.test(subjectInterests[i])) {\n              $scope.subjectInterestsWarningText = (\n                \'Subject interests should use only lowercase letters.\');\n            }\n          } else {\n            console.error(\n              \'Error: received bad value for a subject interest. Expected a \' +\n              \'string, got \', subjectInterests[i]);\n            throw Error(\'Error: received bad value for a subject interest.\');\n          }\n        }\n      } else {\n        console.error(\n          \'Error: received bad value for subject interests. Expected list of \' +\n          \'strings, got \', subjectInterests);\n        throw Error(\'Error: received bad value for subject interests.\');\n      }\n    };\n\n    $scope.onSubjectInterestsSelectionChange = function(subjectInterests) {\n      AlertsService.clearWarnings();\n      $scope.subjectInterestsChangedAtLeastOnce = true;\n      $scope.subjectInterestsWarningText = null;\n      $scope.updateSubjectInterestsWarning(subjectInterests);\n      if ($scope.subjectInterestsWarningText === null) {\n        _saveDataItem(\'subject_interests\', subjectInterests);\n      }\n    };\n\n    $scope.savePreferredSiteLanguageCodes = function(\n        preferredSiteLanguageCode) {\n      $translate.use(preferredSiteLanguageCode);\n      _forceSelect2Refresh();\n      _saveDataItem(\n        \'preferred_site_language_code\', preferredSiteLanguageCode);\n    };\n\n    $scope.savePreferredAudioLanguageCode = function(\n        preferredAudioLanguageCode) {\n      _saveDataItem(\n        \'preferred_audio_language_code\', preferredAudioLanguageCode);\n    };\n\n    $scope.showUsernamePopover = function(creatorUsername) {\n      // The popover on the subscription card is only shown if the length of\n      // the creator username is greater than 10 and the user hovers over\n      // the truncated username.\n      if (creatorUsername.length > 10) {\n        return \'mouseenter\';\n      } else {\n        return \'none\';\n      }\n    };\n\n    $scope.saveEmailPreferences = function(\n        canReceiveEmailUpdates, canReceiveEditorRoleEmail,\n        canReceiveFeedbackMessageEmail, canReceiveSubscriptionEmail) {\n      var data = {\n        can_receive_email_updates: canReceiveEmailUpdates,\n        can_receive_editor_role_email: canReceiveEditorRoleEmail,\n        can_receive_feedback_message_email: canReceiveFeedbackMessageEmail,\n        can_receive_subscription_email: canReceiveSubscriptionEmail\n      };\n      _saveDataItem(\'email_preferences\', data);\n    };\n\n    $scope.savePreferredLanguageCodes = function(preferredLanguageCodes) {\n      _saveDataItem(\'preferred_language_codes\', preferredLanguageCodes);\n    };\n\n    $scope.saveDefaultDashboard = function(defaultDashboard) {\n      _saveDataItem(\'default_dashboard\', defaultDashboard);\n    };\n\n    $scope.showEditProfilePictureModal = function() {\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/preferences/edit_profile_picture_modal_directive.html\'),\n        backdrop: true,\n        controller: [\n          \'$scope\', \'$uibModalInstance\', function($scope, $uibModalInstance) {\n            $scope.uploadedImage = null;\n            $scope.croppedImageDataUrl = \'\';\n            $scope.invalidImageWarningIsShown = false;\n\n            $scope.onFileChanged = function(file) {\n              $(\'.oppia-profile-image-uploader\').fadeOut(function() {\n                $scope.invalidImageWarningIsShown = false;\n\n                var reader = new FileReader();\n                reader.onload = function(e) {\n                  $scope.$apply(function() {\n                    $scope.uploadedImage = e.target.result;\n                  });\n                };\n                reader.readAsDataURL(file);\n\n                $timeout(function() {\n                  $(\'.oppia-profile-image-uploader\').fadeIn();\n                }, 100);\n              });\n            };\n\n            $scope.reset = function() {\n              $scope.uploadedImage = null;\n              $scope.croppedImageDataUrl = \'\';\n            };\n\n            $scope.onInvalidImageLoaded = function() {\n              $scope.uploadedImage = null;\n              $scope.croppedImageDataUrl = \'\';\n              $scope.invalidImageWarningIsShown = true;\n            };\n\n            $scope.confirm = function() {\n              $uibModalInstance.close($scope.croppedImageDataUrl);\n            };\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n            };\n          }\n        ]\n      }).result.then(function(newProfilePictureDataUrl) {\n        $http.put(_PREFERENCES_DATA_URL, {\n          update_type: \'profile_picture_data_url\',\n          data: newProfilePictureDataUrl\n        }).then(function() {\n          // The reload is needed in order to update the profile picture in the\n          // top-right corner.\n          location.reload();\n        });\n      });\n    };\n\n    $scope.LANGUAGE_CHOICES = GLOBALS.LANGUAGE_CODES_AND_NAMES.map(\n      function(languageItem) {\n        return {\n          id: languageItem.code,\n          text: languageItem.name\n        };\n      }\n    );\n\n    $scope.SITE_LANGUAGE_CHOICES = constants.SUPPORTED_SITE_LANGUAGES;\n    $scope.AUDIO_LANGUAGE_CHOICES = constants.SUPPORTED_AUDIO_LANGUAGES;\n\n    $scope.hasPageLoaded = false;\n    $http.get(_PREFERENCES_DATA_URL).then(function(response) {\n      var data = response.data;\n      $rootScope.loadingMessage = \'\';\n      $scope.userBio = data.user_bio;\n      $scope.subjectInterests = data.subject_interests;\n      $scope.preferredLanguageCodes = data.preferred_language_codes;\n      $scope.profilePictureDataUrl = data.profile_picture_data_url;\n      $scope.defaultDashboard = data.default_dashboard;\n      $scope.canReceiveEmailUpdates = data.can_receive_email_updates;\n      $scope.canReceiveEditorRoleEmail = data.can_receive_editor_role_email;\n      $scope.canReceiveSubscriptionEmail = data.can_receive_subscription_email;\n      $scope.canReceiveFeedbackMessageEmail = (\n        data.can_receive_feedback_message_email);\n      $scope.preferredSiteLanguageCode = data.preferred_site_language_code;\n      $scope.preferredAudioLanguageCode = data.preferred_audio_language_code;\n      $scope.subscriptionList = data.subscription_list;\n      $scope.hasPageLoaded = true;\n      _forceSelect2Refresh();\n    });\n  }\n]);'

blocks = {}
debug_info = ''
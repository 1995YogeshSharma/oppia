from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/AssetsBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to serve as the interface for fetching and uploading\n * assets from Google Cloud Storage.\n */\n\noppia.factory(\'AssetsBackendApiService\', [\n  \'$http\', \'$q\', \'UrlInterpolationService\', \'AudioFileObjectFactory\',\n  \'ImageFileObjectFactory\', \'FileDownloadRequestObjectFactory\',\n  function(\n      $http, $q, UrlInterpolationService, AudioFileObjectFactory,\n      ImageFileObjectFactory, FileDownloadRequestObjectFactory) {\n    // List of filenames that have been requested for but have\n    // yet to return a response.\n    var _audioFilesCurrentlyBeingRequested = [];\n    var _imageFilesCurrentlyBeingRequested = [];\n\n    var ASSET_TYPE_AUDIO = \'audio\';\n    var ASSET_TYPE_IMAGE = \'image\';\n\n    var AUDIO_DOWNLOAD_URL_TEMPLATE = (\n      GLOBALS.GCS_RESOURCE_BUCKET_NAME ?\n        (\'https://storage.googleapis.com/\' + GLOBALS.GCS_RESOURCE_BUCKET_NAME +\n       \'/exploration/<exploration_id>/assets/audio/<filename>\') :\n        \'/audiohandler/<exploration_id>/audio/<filename>\');\n    var IMAGE_DOWNLOAD_URL_TEMPLATE = (\n        GLOBALS.GCS_RESOURCE_BUCKET_NAME ?\n        (\'https://storage.googleapis.com/\' + GLOBALS.GCS_RESOURCE_BUCKET_NAME +\n       \'/exploration/<exploration_id>/assets/image/<filename>\') :\n        \'/imagehandler/<exploration_id>/<filename>\');\n\n    var AUDIO_UPLOAD_URL_TEMPLATE =\n      \'/createhandler/audioupload/<exploration_id>\';\n\n    // Map from asset filename to asset blob.\n    var assetsCache = {};\n    var _fetchFile = function(\n        explorationId, filename, assetType, successCallback, errorCallback) {\n      var canceler = $q.defer();\n      if (assetType === ASSET_TYPE_AUDIO) {\n        _audioFilesCurrentlyBeingRequested.push(\n          FileDownloadRequestObjectFactory.createNew(filename, canceler));\n      } else {\n        _imageFilesCurrentlyBeingRequested.push(\n          FileDownloadRequestObjectFactory.createNew(filename, canceler));\n      }\n\n      $http({\n        method: \'GET\',\n        responseType: \'blob\',\n        url: _getDownloadUrl(explorationId, filename, assetType),\n        timeout: canceler.promise\n      }).success(function(data) {\n        try {\n          var assetBlob = new Blob([data]);\n        } catch (exception) {\n          window.BlobBuilder = window.BlobBuilder ||\n                         window.WebKitBlobBuilder ||\n                         window.MozBlobBuilder ||\n                         window.MSBlobBuilder;\n          if (exception.name === \'TypeError\' && window.BlobBuilder) {\n            var blobBuilder = new BlobBuilder();\n            blobBuilder.append(data);\n            var assetBlob = blobBuilder.getBlob(assetType.concat(\'/*\'));\n          } else {\n            throw exception;\n          }\n        }\n        assetsCache[filename] = assetBlob;\n        if (assetType === ASSET_TYPE_AUDIO) {\n          successCallback(\n            AudioFileObjectFactory.createNew(filename, assetBlob));\n        } else {\n          successCallback(\n            ImageFileObjectFactory.createNew(filename, assetBlob));\n        }\n      }).error(function() {\n        errorCallback(filename);\n      })[\'finally\'](function() {\n        _removeFromFilesCurrentlyBeingRequested(filename, assetType);\n      });\n    };\n\n    var _abortAllCurrentDownloads = function(assetType) {\n      if (assetType === ASSET_TYPE_AUDIO) {\n        _audioFilesCurrentlyBeingRequested.forEach(function(request) {\n          request.canceler.resolve();\n        });\n        _audioFilesCurrentlyBeingRequested = [];\n      } else {\n        _imageFilesCurrentlyBeingRequested.forEach(function(request) {\n          request.canceler.resolve();\n        });\n        _imageFilesCurrentlyBeingRequested = [];\n      }\n    };\n\n    var _removeFromFilesCurrentlyBeingRequested = function(filename,\n        assetType) {\n      if (_isAssetCurrentlyBeingRequested(filename, ASSET_TYPE_AUDIO)) {\n        for (var index = 0; index <\n             _audioFilesCurrentlyBeingRequested.length; index++) {\n          if (_audioFilesCurrentlyBeingRequested[index].filename === filename) {\n            _audioFilesCurrentlyBeingRequested.splice(index, 1);\n            break;\n          }\n        }\n      } else if (_isAssetCurrentlyBeingRequested(filename, ASSET_TYPE_IMAGE)) {\n        for (var index = 0; index <\n             _imageFilesCurrentlyBeingRequested.length; index++) {\n          if (_imageFilesCurrentlyBeingRequested[index].filename === filename) {\n            _imageFilesCurrentlyBeingRequested.splice(index, 1);\n            break;\n          }\n        }\n      }\n    };\n\n    var _saveAudio = function(\n        explorationId, filename, rawAssetData, successCallback,\n        errorCallback) {\n      var form = new FormData();\n\n      form.append(\'raw_audio_file\', rawAssetData);\n      form.append(\'payload\', JSON.stringify({\n        filename: filename\n      }));\n      form.append(\'csrf_token\', GLOBALS.csrf_token);\n\n      $.ajax({\n        url: _getAudioUploadUrl(explorationId),\n        data: form,\n        processData: false,\n        contentType: false,\n        type: \'POST\',\n        dataType: \'text\',\n        dataFilter: function(data) {\n          // Remove the XSSI prefix.\n          var transformedData = data.substring(5);\n          return JSON.parse(transformedData);\n        },\n      }).done(function(response) {\n        if (successCallback) {\n          successCallback(response);\n        }\n      }).fail(function(data) {\n        // Remove the XSSI prefix.\n        var transformedData = data.responseText.substring(5);\n        var parsedResponse = angular.fromJson(transformedData);\n        console.error(parsedResponse);\n        if (errorCallback) {\n          errorCallback(parsedResponse);\n        }\n      });\n    };\n\n    var _getDownloadUrl = function(explorationId, filename, assetType) {\n      return UrlInterpolationService.interpolateUrl(\n        (assetType === ASSET_TYPE_AUDIO ? AUDIO_DOWNLOAD_URL_TEMPLATE :\n        IMAGE_DOWNLOAD_URL_TEMPLATE), {\n          exploration_id: explorationId,\n          filename: filename\n        });\n    };\n\n    var _getAudioUploadUrl = function(explorationId) {\n      return UrlInterpolationService.interpolateUrl(AUDIO_UPLOAD_URL_TEMPLATE, {\n        exploration_id: explorationId\n      });\n    };\n\n    var _isAssetCurrentlyBeingRequested = function(filename, assetType) {\n      if (assetType === ASSET_TYPE_AUDIO) {\n        return _audioFilesCurrentlyBeingRequested.some(function(request) {\n          return request.filename === filename;\n        });\n      } else {\n        return _imageFilesCurrentlyBeingRequested.some(function(request) {\n          return request.filename === filename;\n        });\n      }\n    };\n\n    var _isCached = function(filename) {\n      return assetsCache.hasOwnProperty(filename);\n    };\n\n    return {\n      loadAudio: function(explorationId, filename) {\n        return $q(function(resolve, reject) {\n          if (_isCached(filename)) {\n            resolve(AudioFileObjectFactory.createNew(\n              filename, assetsCache[filename]));\n          } else if (!_isAssetCurrentlyBeingRequested(filename,\n            ASSET_TYPE_AUDIO)) {\n            _fetchFile(explorationId, filename, ASSET_TYPE_AUDIO,\n              resolve, reject);\n          }\n        });\n      },\n      loadImage: function(explorationId, filename) {\n        return $q(function(resolve, reject) {\n          if (_isCached(filename)) {\n            resolve(ImageFileObjectFactory.createNew(\n              filename, assetsCache[filename]));\n          } else if (!_isAssetCurrentlyBeingRequested(filename,\n            ASSET_TYPE_IMAGE)) {\n            _fetchFile(explorationId, filename, ASSET_TYPE_IMAGE,\n              resolve, reject);\n          }\n        });\n      },\n      saveAudio: function(explorationId, filename, rawAssetData) {\n        return $q(function(resolve, reject) {\n          _saveAudio(explorationId, filename, rawAssetData, resolve, reject);\n        });\n      },\n      isCached: function(filename) {\n        return _isCached(filename);\n      },\n      getAudioDownloadUrl: function(explorationId, filename) {\n        return _getDownloadUrl(explorationId, filename, ASSET_TYPE_AUDIO);\n      },\n      abortAllCurrentAudioDownloads: function() {\n        _abortAllCurrentDownloads(ASSET_TYPE_AUDIO);\n      },\n      abortAllCurrentImageDownloads: function() {\n        _abortAllCurrentDownloads(ASSET_TYPE_IMAGE);\n      },\n      getAssetsFilesCurrentlyBeingRequested: function() {\n        return { audio: _audioFilesCurrentlyBeingRequested,\n          image: _imageFilesCurrentlyBeingRequested\n        };\n      },\n      getImageUrlForPreview: function(explorationId, filename) {\n        return _getDownloadUrl(explorationId, filename, ASSET_TYPE_IMAGE);\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/PredictionAlgorithmRegistryServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the prediction algorithm registry service.\n */\n\ndescribe(\'Prediction algorithm registry service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'Test prediction algorithm registry functions\', function() {\n    var registryService, predictionService;\n\n    beforeEach(function() {\n      module(function($provide) {\n        $provide.factory(\'PredictionSampleService\', [function() {\n          return {\n            predict: function(classifierData, answer) {\n              return 1;\n            }\n          };\n        }]);\n      });\n    });\n\n    beforeEach(inject(function($injector) {\n      registryService = $injector.get(\'PredictionAlgorithmRegistryService\');\n      predictionService = $injector.get(\'PredictionSampleService\');\n\n      registryService.setMapping({\n        TestClassifier: {\n          v1: \'PredictionSampleService\'\n        }\n      });\n    }));\n\n    it(\'should return correct prediction algorithm service.\', function() {\n      var algorithmId = \'TestClassifier\';\n      var dataSchemaVersion = 1;\n      var generatedPredictionService = registryService.getPredictionService(\n        algorithmId, dataSchemaVersion);\n\n      expect(generatedPredictionService.toString()).toEqual(\n        predictionService.toString());\n    });\n  });\n});'

blocks = {}
debug_info = ''
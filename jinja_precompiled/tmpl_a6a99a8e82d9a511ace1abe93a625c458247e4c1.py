from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/ChangesInHumanReadableFormService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to get changes in human readable form.\n */\n\noppia.factory(\'ChangesInHumanReadableFormService\', [\n  \'UtilsService\', function(UtilsService) {\n    var CMD_ADD_STATE = \'add_state\';\n    var CMD_RENAME_STATE = \'rename_state\';\n    var CMD_DELETE_STATE = \'delete_state\';\n    var CMD_EDIT_STATE_PROPERTY = \'edit_state_property\';\n\n    var makeRulesListHumanReadable = function(answerGroupValue) {\n      var rulesList = [];\n      answerGroupValue.rules.forEach(function(rule) {\n        var ruleElm = angular.element(\'<li></li>\');\n        ruleElm.html(\'<p>Type: \' + rule.type + \'</p>\');\n        ruleElm.append(\n          \'<p>Value: \' + (\n            Object.keys(rule.inputs).map(function(input) {\n              return rule.inputs[input];\n            })\n          ).toString() + \'</p>\');\n        rulesList.push(ruleElm);\n      });\n\n      return rulesList;\n    };\n\n    // An edit is represented either as an object or an array. If it\'s an\n    // object, then simply return that object. In case of an array, return\n    // the last item.\n    var getStatePropertyValue = function(statePropertyValue) {\n      return angular.isArray(statePropertyValue) ?\n        statePropertyValue[statePropertyValue.length - 1] : statePropertyValue;\n    };\n\n    // Detects whether an object of the type \'answer_group\' or\n    // \'default_outcome\' has been added, edited or deleted.\n    // Returns - \'addded\', \'edited\' or \'deleted\' accordingly.\n    var getRelativeChangeToGroups = function(changeObject) {\n      var newValue = changeObject.new_value;\n      var oldValue = changeObject.old_value;\n      var result = \'\';\n\n      if (angular.isArray(newValue) && angular.isArray(oldValue)) {\n        result = (newValue.length > oldValue.length) ?\n          \'added\' : (newValue.length === oldValue.length) ?\n            \'edited\' : \'deleted\';\n      } else {\n        if (!UtilsService.isEmpty(oldValue)) {\n          if (!UtilsService.isEmpty(newValue)) {\n            result = \'edited\';\n          } else {\n            result = \'deleted\';\n          }\n        } else if (!UtilsService.isEmpty(newValue)) {\n          result = \'added\';\n        }\n      }\n      return result;\n    };\n\n    var makeHumanReadable = function(lostChanges) {\n      var outerHtml = angular.element(\'<ul></ul>\');\n      var stateWiseEditsMapping = {};\n      // The variable stateWiseEditsMapping stores the edits grouped by state.\n      // For instance, you made the following edits:\n      // 1. Changed content to \'Welcome!\' instead of \'\' in \'Introduction\'.\n      // 2. Added an interaction in this state.\n      // 2. Added a new state \'End\'.\n      // 3. Ended Exporation from state \'End\'.\n      // stateWiseEditsMapping will look something like this:\n      // - \'Introduction\': [\n      //   - \'Edited Content: Welcome!\',:\n      //   - \'Added Interaction: Continue\',\n      //   - \'Added interaction customizations\']\n      // - \'End\': [\'Ended exploration\']\n\n      lostChanges.forEach(function(lostChange) {\n        switch (lostChange.cmd) {\n          case CMD_ADD_STATE:\n            outerHtml.append(\n              angular.element(\'<li></li>\').html(\n                \'Added state: \' + lostChange.state_name));\n            break;\n          case CMD_RENAME_STATE:\n            outerHtml.append(\n              angular.element(\'<li></li>\').html(\n                \'Renamed state: \' + lostChange.old_state_name + \' to \' +\n                  lostChange.new_state_name));\n            break;\n          case CMD_DELETE_STATE:\n            outerHtml.append(\n              angular.element(\'<li></li>\').html(\n                \'Deleted state: \' + lostChange.state_name));\n            break;\n          case CMD_EDIT_STATE_PROPERTY:\n            var newValue = getStatePropertyValue(lostChange.new_value);\n            var oldValue = getStatePropertyValue(lostChange.old_value);\n            var stateName = lostChange.state_name;\n            if (!stateWiseEditsMapping[stateName]) {\n              stateWiseEditsMapping[stateName] = [];\n            }\n\n            switch (lostChange.property_name) {\n              case \'content\':\n                if (newValue !== null) {\n                  // TODO(sll): Also add display of audio translations here.\n                  stateWiseEditsMapping[stateName].push(\n                    angular.element(\'<div></div>\').html(\n                      \'<strong>Edited content: </strong><div class="content">\' +\n                        newValue.html + \'</div>\')\n                      .addClass(\'state-edit-desc\'));\n                }\n                break;\n\n              case \'widget_id\':\n                var lostChangeValue = \'\';\n                if (oldValue === null) {\n                  if (newValue !== \'EndExploration\') {\n                    lostChangeValue = (\'<strong>Added Interaction: </strong>\' +\n                                       newValue);\n                  } else {\n                    lostChangeValue = \'Ended Exploration\';\n                  }\n                } else {\n                  lostChangeValue = (\'<strong>Deleted Interaction: </strong>\' +\n                                     oldValue);\n                }\n                stateWiseEditsMapping[stateName].push(\n                  angular.element(\'<div></div>\').html(lostChangeValue)\n                    .addClass(\'state-edit-desc\'));\n                break;\n\n              case \'widget_customization_args\':\n                var lostChangeValue = \'\';\n                if (UtilsService.isEmpty(oldValue)) {\n                  lostChangeValue = \'Added Interaction Customizations\';\n                } else if (UtilsService.isEmpty(newValue)) {\n                  lostChangeValue = \'Removed Interaction Customizations\';\n                } else {\n                  lostChangeValue = \'Edited Interaction Customizations\';\n                }\n                stateWiseEditsMapping[stateName].push(\n                  angular.element(\'<div></div>\').html(lostChangeValue)\n                    .addClass(\'state-edit-desc\'));\n                break;\n\n              case \'answer_groups\':\n                var answerGroupChanges = getRelativeChangeToGroups(lostChange);\n                var answerGroupHtml = \'\';\n                if (answerGroupChanges === \'added\') {\n                  answerGroupHtml += (\n                    \'<p class="sub-edit"><i>Destination: </i>\' +\n                      newValue.outcome.dest + \'</p>\');\n                  answerGroupHtml += (\n                    \'<div class="sub-edit"><i>Feedback: </i>\' +\n                      \'<div class="feedback">\' +\n                      newValue.outcome.feedback.getHtml() + \'</div></div>\');\n                  var rulesList = makeRulesListHumanReadable(newValue);\n                  if (rulesList.length > 0) {\n                    answerGroupHtml += \'<p class="sub-edit"><i>Rules: </i></p>\';\n                    var rulesListHtml = (\n                      angular.element(\'<ol></ol>\').addClass(\'rules-list\'));\n                    for (var rule in rulesList) {\n                      rulesListHtml.html(rulesList[rule][0].outerHTML);\n                    }\n                    answerGroupHtml += rulesListHtml[0].outerHTML;\n                  }\n                  stateWiseEditsMapping[stateName].push(\n                    angular.element(\'<div><strong>Added answer group: \' +\n                                    \'</strong></div>\')\n                      .append(answerGroupHtml)\n                      .addClass(\'state-edit-desc answer-group\'));\n                } else if (answerGroupChanges === \'edited\') {\n                  if (newValue.outcome.dest !== oldValue.outcome.dest) {\n                    answerGroupHtml += (\n                      \'<p class="sub-edit"><i>Destination: </i>\' +\n                        newValue.outcome.dest + \'</p>\');\n                  }\n                  if (!angular.equals(\n                    newValue.outcome.feedback.getHtml(),\n                    oldValue.outcome.feedback.getHtml())) {\n                    answerGroupHtml += (\n                      \'<div class="sub-edit"><i>Feedback: </i>\' +\n                        \'<div class="feedback">\' +\n                        newValue.outcome.feedback.getHtml() +\n                        \'</div></div>\');\n                  }\n                  if (!angular.equals(newValue.rules, oldValue.rules)) {\n                    var rulesList = makeRulesListHumanReadable(newValue);\n                    if (rulesList.length > 0) {\n                      answerGroupHtml += (\n                        \'<p class="sub-edit"><i>Rules: </i></p>\');\n                      var rulesListHtml = (angular.element(\'<ol></ol>\')\n                        .addClass(\'rules-list\'));\n                      for (var rule in rulesList) {\n                        rulesListHtml.html(rulesList[rule][0].outerHTML);\n                      }\n                      answerGroupChanges = rulesListHtml[0].outerHTML;\n                    }\n                  }\n                  stateWiseEditsMapping[stateName].push(\n                    angular.element(\n                      \'<div><strong>Edited answer group: <strong>\' +\n                        \'</div>\')\n                      .append(answerGroupHtml)\n                      .addClass(\'state-edit-desc answer-group\'));\n                } else if (answerGroupChanges === \'deleted\') {\n                  stateWiseEditsMapping[stateName].push(\n                    angular.element(\'<div>Deleted answer group</div>\')\n                      .addClass(\'state-edit-desc\'));\n                }\n                break;\n\n              case \'default_outcome\':\n                var defaultOutcomeChanges = getRelativeChangeToGroups(\n                  lostChange);\n                var defaultOutcomeHtml = \'\';\n                if (defaultOutcomeChanges === \'added\') {\n                  defaultOutcomeHtml += (\n                    \'<p class="sub-edit"><i>Destination: </i>\' +\n                      newValue.dest + \'</p>\');\n                  defaultOutcomeHtml += (\n                    \'<div class="sub-edit"><i>Feedback: </i>\' +\n                      \'<div class="feedback">\' + newValue.feedback.getHtml() +\n                      \'</div></div>\');\n                  stateWiseEditsMapping[stateName].push(\n                    angular.element(\'<div>Added default outcome: </div>\')\n                      .append(defaultOutcomeHtml)\n                      .addClass(\'state-edit-desc default-outcome\'));\n                } else if (defaultOutcomeChanges === \'edited\') {\n                  if (newValue.dest !== oldValue.dest) {\n                    defaultOutcomeHtml += (\n                      \'<p class="sub-edit"><i>Destination: </i>\' +\n                      newValue.dest +\n                      \'</p>\');\n                  }\n                  if (!angular.equals(newValue.feedback.getHtml(),\n                    oldValue.feedback.getHtml())) {\n                    defaultOutcomeHtml += (\n                      \'<div class="sub-edit"><i>Feedback: </i>\' +\n                        \'<div class="feedback">\' + newValue.feedback +\n                        \'</div></div>\');\n                  }\n                  stateWiseEditsMapping[stateName].push(\n                    angular.element(\'<div>Edited default outcome: </div>\')\n                      .append(defaultOutcomeHtml)\n                      .addClass(\'state-edit-desc default-outcome\'));\n                } else if (defaultOutcomeChanges === \'deleted\') {\n                  stateWiseEditsMapping[stateName].push(\n                    angular.element(\'<div>Deleted default outcome</div>\')\n                      .addClass(\'state-edit-desc\'));\n                }\n            }\n        }\n      });\n\n      for (var stateName in stateWiseEditsMapping) {\n        var stateChangesEl = angular.element(\n          \'<li>Edits to state: \' + stateName + \'</li>\');\n        for (var stateEdit in stateWiseEditsMapping[stateName]) {\n          stateChangesEl.append(stateWiseEditsMapping[stateName][stateEdit]);\n        }\n        outerHtml.append(stateChangesEl);\n      }\n\n      return outerHtml;\n    };\n\n    return {\n      makeHumanReadable: function(lostChanges) {\n        try {\n          return makeHumanReadable(lostChanges);\n        } catch (e) {\n          return angular.element(\n            \'<div>Error: Could not recover lost changes.</div>\');\n        }\n      }\n    };\n  }]\n);'

blocks = {}
debug_info = ''
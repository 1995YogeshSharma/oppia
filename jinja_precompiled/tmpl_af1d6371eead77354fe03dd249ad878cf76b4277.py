from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/ExplorationDataService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n *  @fileoverview Service for handling all interactions\n *  with the exploration editor backend.\n */\n\noppia.factory(\'ExplorationDataService\', [\n  \'$http\', \'$log\', \'$q\', \'$window\', \'AlertsService\',\n  \'EditableExplorationBackendApiService\', \'LocalStorageService\',\n  \'ReadOnlyExplorationBackendApiService\', \'UrlService\',\n  function(\n      $http, $log, $q, $window, AlertsService,\n      EditableExplorationBackendApiService, LocalStorageService,\n      ReadOnlyExplorationBackendApiService, UrlService) {\n    // The pathname (without the hash) should be: .../create/{exploration_id}\n    var explorationId = \'\';\n    var draftChangeListId = null;\n    var pathnameArray = UrlService.getPathname().split(\'/\');\n    for (var i = 0; i < pathnameArray.length; i++) {\n      if (pathnameArray[i] === \'create\') {\n        var explorationId = pathnameArray[i + 1];\n        break;\n      }\n    }\n    if (!explorationId) {\n      $log.error(\n        \'Unexpected call to ExplorationDataService for pathname \',\n        pathnameArray[i]);\n      // Note: if we do not return anything, Karma unit tests fail.\n      return {};\n    }\n\n    var resolvedAnswersUrlPrefix = (\n      \'/createhandler/resolved_answers/\' + explorationId);\n    var explorationDraftAutosaveUrl = \'\';\n    if (GLOBALS.can_edit) {\n      explorationDraftAutosaveUrl = (\n        \'/createhandler/autosave_draft/\' + explorationId);\n    } else if (GLOBALS.can_translate) {\n      explorationDraftAutosaveUrl = (\n        \'/createhandler/autosave_translation_draft/\' + explorationId);\n    }\n\n\n    // Put exploration variables here.\n    var explorationData = {\n      explorationId: explorationId,\n      // Note that the changeList is the full changeList since the last\n      // committed version (as opposed to the most recent autosave).\n      autosaveChangeList: function(changeList, successCallback, errorCallback) {\n        // First save locally to be retrieved later if save is unsuccessful.\n        LocalStorageService.saveExplorationDraft(\n          explorationId, changeList, draftChangeListId);\n        $http.put(explorationDraftAutosaveUrl, {\n          change_list: changeList,\n          version: explorationData.data.version\n        }).then(function(response) {\n          draftChangeListId = response.data.draft_change_list_id;\n          // We can safely remove the locally saved draft copy if it was saved\n          // to the backend.\n          LocalStorageService.removeExplorationDraft(explorationId);\n          if (successCallback) {\n            successCallback(response);\n          }\n        }, function() {\n          if (errorCallback) {\n            errorCallback();\n          }\n        });\n      },\n      discardDraft: function(successCallback, errorCallback) {\n        $http.post(explorationDraftAutosaveUrl, {}).then(function() {\n          LocalStorageService.removeExplorationDraft(explorationId);\n          if (successCallback) {\n            successCallback();\n          }\n        }, function() {\n          if (errorCallback) {\n            errorCallback();\n          }\n        });\n      },\n      // Returns a promise that supplies the data for the current exploration.\n      getData: function(errorCallback) {\n        if (explorationData.data) {\n          $log.info(\'Found exploration data in cache.\');\n          return $q.resolve(explorationData.data);\n        } else {\n          // Retrieve data from the server.\n          // WARNING: Note that this is a version of the exploration with draft\n          // changes applied. This makes a force-refresh necessary when changes\n          // are discarded, otherwise the exploration-with-draft-changes\n          // (which is cached here) will be reused.\n          return (\n            EditableExplorationBackendApiService.fetchApplyDraftExploration(\n              explorationId).then(function(response) {\n              $log.info(\'Retrieved exploration data.\');\n              $log.info(response);\n              draftChangeListId = response.draft_change_list_id;\n              explorationData.data = response;\n              var draft = LocalStorageService.getExplorationDraft(\n                explorationId);\n              if (draft) {\n                if (draft.isValid(draftChangeListId)) {\n                  var changeList = draft.getChanges();\n                  explorationData.autosaveChangeList(changeList, function() {\n                    // A reload is needed so that the changelist just saved is\n                    // loaded as opposed to the exploration returned by this\n                    // response.\n                    $window.location.reload();\n                  });\n                } else {\n                  errorCallback(explorationId, draft.getChanges());\n                }\n              }\n              return response;\n            })\n          );\n        }\n      },\n      // Returns a promise supplying the last saved version for the current\n      // exploration.\n      getLastSavedData: function() {\n        return ReadOnlyExplorationBackendApiService.loadLatestExploration(\n          explorationId).then(function(response) {\n          $log.info(\'Retrieved saved exploration data.\');\n          $log.info(response);\n\n          return response.exploration;\n        });\n      },\n      resolveAnswers: function(stateName, resolvedAnswersList) {\n        AlertsService.clearWarnings();\n        $http.put(\n          resolvedAnswersUrlPrefix + \'/\' + encodeURIComponent(stateName), {\n            resolved_answers: resolvedAnswersList\n          }\n        );\n      },\n      /**\n       * Saves the exploration to the backend, and, on a success callback,\n       * updates the local copy of the exploration data.\n       * @param {object} changeList - Represents the change list for\n       *   this save. Each element of the list is a command representing an\n       *   editing action (such as add state, delete state, etc.). See the\n       *  _\'Change\' class in exp_services.py for full documentation.\n       * @param {string} commitMessage - The user-entered commit message for\n       *   this save operation.\n       */\n      save: function(\n          changeList, commitMessage, successCallback, errorCallback) {\n        EditableExplorationBackendApiService.updateExploration(explorationId,\n          explorationData.data.version, commitMessage, changeList).then(\n          function(response) {\n            AlertsService.clearWarnings();\n            explorationData.data = response;\n            if (successCallback) {\n              successCallback(\n                response.is_version_of_draft_valid,\n                response.draft_changes);\n            }\n          }, function() {\n            if (errorCallback) {\n              errorCallback();\n            }\n          }\n        );\n      }\n    };\n\n    return explorationData;\n  }\n]);'

blocks = {}
debug_info = ''
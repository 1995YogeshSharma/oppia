from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/objects/NumberWithUnitsObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview unit tests for number with units object type factory service.\n */\ndescribe(\'NumberWithUnitsObjectFactory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'number with units object factory\', function() {\n    var NumberWithUnits = null;\n    var Units = null;\n    var Fraction = null;\n    var errors = null;\n\n    beforeEach(inject(function($injector) {\n      NumberWithUnits = $injector.get(\'NumberWithUnitsObjectFactory\');\n      Units = $injector.get(\'UnitsObjectFactory\');\n      Fraction = $injector.get(\'FractionObjectFactory\');\n      errors = $injector.get(\'NUMBER_WITH_UNITS_PARSING_ERRORS\');\n    }));\n\n    it(\'should convert units to list format\', function() {\n      expect(Units.fromStringToList(\'kg / kg^2 K mol / (N m s^2) K s\')).toEqual(\n        [{exponent: -1, unit: \'kg\'}, {exponent: 2, unit: \'K\'},\n          {exponent: 1, unit: \'mol\'}, {exponent: -1, unit: \'N\'},\n          {exponent: -1, unit: \'m\'}, {exponent: -1, unit: \'s\'}]);\n      expect(Units.fromStringToList(\'mol/(kg / (N m / s^2)\')).toEqual(\n        [{exponent: 1, unit: \'mol\'}, {exponent: -1, unit: \'kg\'},\n          {exponent: 1, unit: \'N\'}, {exponent: 1, unit: \'m\'},\n          {exponent: -2, unit: \'s\'}]);\n      expect(Units.fromStringToList(\'kg per kg^2 K mol per (N m s^2) K s\'\n      )).toEqual([{exponent: -1, unit: \'kg\'}, {exponent: 2, unit: \'K\'},\n        {exponent: 1, unit: \'mol\'}, {exponent: -1, unit: \'N\'},\n        {exponent: -1, unit: \'m\'}, {exponent: -1, unit: \'s\'}]);\n    });\n\n    it(\'should convert units from list to string format\', function() {\n      expect(new Units(\n        [{exponent: -1, unit: \'kg\'}, {exponent: 2, unit: \'K\'},\n          {exponent: 1, unit: \'mol\'}, {exponent: -1, unit: \'N\'},\n          {exponent: -1, unit: \'m\'}, {exponent: -1, unit: \'s\'}]\n      ).toString()).toBe(\'kg^-1 K^2 mol N^-1 m^-1 s^-1\');\n      expect(new Units(\n        [{exponent: 1, unit: \'mol\'}, {exponent: -1, unit: \'kg\'},\n          {exponent: 1, unit: \'N\'}, {exponent: 1, unit: \'m\'},\n          {exponent: -2, unit: \'s\'}]).toString()).toBe(\n        \'mol kg^-1 N m s^-2\');\n    });\n\n    it(\'should convert units from string to lexical format\', function() {\n      expect(Units.stringToLexical(\'kg per kg^2 K mol / (N m s^2) K s\'\n      )).toEqual(\n        [\'kg\', \'/\', \'kg^2\', \'*\', \'K\', \'*\', \'mol\', \'/\', \'(\', \'N\', \'*\', \'m\', \'*\',\n          \'s^2\', \')\', \'K\', \'*\', \'s\']);\n      expect(Units.stringToLexical(\'kg (K mol) m/s^2 r t / (l/ n) / o\'\n      )).toEqual(\n        [\'kg\', \'(\', \'K\', \'*\', \'mol\', \')\', \'m\', \'/\', \'s^2\', \'*\', \'r\', \'*\', \'t\',\n          \'/\', \'(\', \'l\', \'/\', \'n\', \')\', \'/\', \'o\']);\n      expect(Units.stringToLexical(\'mol per (kg per (N m per s^2)*K)\'\n      )).toEqual(\n        [\'mol\', \'/\', \'(\', \'kg\', \'/\', \'(\', \'N\', \'*\', \'m\', \'/\', \'s^2\', \')\', \'*\',\n          \'K\', \')\']);\n    });\n\n    it(\'should convert number with units object to a string\', function() {\n      expect(new NumberWithUnits(\'real\', 2.02, new Fraction(false, 0, 0, 1\n      ), Units.fromRawInputString(\'m / s^2\')).toString()).toBe(\'2.02 m s^-2\');\n      expect(new NumberWithUnits(\'real\', 2.02, new Fraction(false, 0, 0, 1\n      ), Units.fromRawInputString(\'Rs\')).toString()).toBe(\'Rs 2.02\');\n      expect(new NumberWithUnits(\'real\', 2, new Fraction(false, 0, 0, 1\n      ), Units.fromRawInputString(\'\')).toString()).toBe(\'2\');\n      expect(new NumberWithUnits(\'fraction\', 0, new Fraction(true, 0, 4, 3\n      ), Units.fromRawInputString(\'m / s^2\')).toString()).toBe(\'-4/3 m s^-2\');\n      expect(new NumberWithUnits(\'fraction\', 0, new Fraction(\n        false, 0, 4, 3), Units.fromRawInputString(\'$ per hour\')).toString(\n      )).toBe(\'$ 4/3 hour^-1\');\n      expect(new NumberWithUnits(\'real\', 40, new Fraction(\n        false, 0, 0, 1), Units.fromRawInputString(\'Rs per hour\')).toString(\n      )).toBe(\'Rs 40 hour^-1\');\n    });\n\n    it(\'should parse valid units strings\', function() {\n      expect(Units.fromRawInputString(\'kg per (K mol^-2)\')).toEqual(\n        new Units(Units.fromStringToList(\'kg / (K mol^-2)\')));\n      expect(Units.fromRawInputString(\'kg / (K mol^-2) N / m^2\')).toEqual(\n        new Units(Units.fromStringToList(\'kg / (K mol^-2) N / m^2\')));\n    });\n\n    it(\'should parse valid number with units strings\', function() {\n      expect(NumberWithUnits.fromRawInputString(\'2.02 kg / m^3\')).toEqual(\n        new NumberWithUnits(\'real\', 2.02, new Fraction(\n          false, 0, 0, 1), Units.fromRawInputString(\'kg / m^3\')));\n      expect(NumberWithUnits.fromRawInputString(\'2 / 3 kg / m^3\')).toEqual(\n        new NumberWithUnits(\'fraction\', 0, new Fraction(\n          false, 0, 2, 3), Units.fromRawInputString(\'kg / m^3\')));\n      expect(NumberWithUnits.fromRawInputString(\'2\')).toEqual(\n        new NumberWithUnits(\'real\', 2, new Fraction(\n          false, 0, 0, 1), Units.fromRawInputString(\'\')));\n      expect(NumberWithUnits.fromRawInputString(\'2 / 3\')).toEqual(\n        new NumberWithUnits(\'fraction\', 0, new Fraction(\n          false, 0, 2, 3), Units.fromRawInputString(\'\')));\n      expect(NumberWithUnits.fromRawInputString(\'$ 2.02\')).toEqual(\n        new NumberWithUnits(\'real\', 2.02, new Fraction(\n          false, 0, 0, 1), Units.fromRawInputString(\'$\')));\n      expect(NumberWithUnits.fromRawInputString(\'Rs 2 / 3 per hour\')).toEqual(\n        new NumberWithUnits(\'fraction\', 0, new Fraction(\n          false, 0, 2, 3), Units.fromRawInputString(\'Rs / hour\')));\n    });\n\n    it(\'should throw errors for invalid number with units\', function() {\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'3* kg\');\n      }).toThrow(new Error(errors.INVALID_VALUE));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'$ 3*\');\n      }).toThrow(new Error(errors.INVALID_VALUE));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'Rs 3^\');\n      }).toThrow(new Error(errors.INVALID_VALUE));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'3# m/s\');\n      }).toThrow(new Error(errors.INVALID_VALUE));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'3 $\');\n      }).toThrow(new Error(errors.INVALID_CURRENCY_FORMAT));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'Rs5\');\n      }).toThrow(new Error(errors.INVALID_CURRENCY));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'$\');\n      }).toThrow(new Error(errors.INVALID_CURRENCY));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'kg 2 s^2\');\n      }).toThrow(new Error(errors.INVALID_CURRENCY));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'2 m/s#\');\n      }).toThrow(new Error(errors.INVALID_UNIT_CHARS));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'@ 2\');\n      }).toThrow(new Error(errors.INVALID_CURRENCY));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'2 / 3 kg&^-2\');\n      }).toThrow(new Error(errors.INVALID_UNIT_CHARS));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'2 m**2\');\n      }).toThrow(new Error(\'SyntaxError: Unexpected "*" in "m**2" at index 2\'));\n      expect(function() {\n        NumberWithUnits.fromRawInputString(\'2 kg / m^(2)\');\n      }).toThrow(new Error(\'SyntaxError: In "kg / m^(2)", "^" must be \' +\n      \'followed by a floating-point number\'));\n    });\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/skill_editor/SkillEditorStateService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n* @fileoverview Service for managing the state of the skill being edited\n* in the skill editor.\n*/\n\noppia.constant(\'EVENT_SKILL_INITIALIZED\', \'skillInitialized\');\noppia.constant(\'EVENT_SKILL_REINITIALIZED\', \'skillReinitialized\');\n\noppia.factory(\'SkillEditorStateService\', [\n  \'$rootScope\', \'SkillObjectFactory\', \'SkillRightsObjectFactory\',\n  \'EditableSkillBackendApiService\', \'SkillRightsBackendApiService\',\n  \'AlertsService\', \'UndoRedoService\', \'EVENT_SKILL_INITIALIZED\',\n  \'EVENT_SKILL_REINITIALIZED\',\n  function(\n      $rootScope, SkillObjectFactory, SkillRightsObjectFactory,\n      EditableSkillBackendApiService, SkillRightsBackendApiService,\n      AlertsService, UndoRedoService, EVENT_SKILL_INITIALIZED,\n      EVENT_SKILL_REINITIALIZED) {\n    var _skill = SkillObjectFactory.createInterstitialSkill();\n    var _skillRights = SkillRightsObjectFactory.createInterstitialSkillRights();\n    var _skillIsInitialized = false;\n    var _skillIsBeingLoaded = false;\n    var _skillIsBeingSaved = false;\n\n    var _setSkill = function(skill) {\n      _skill.copyFromSkill(skill);\n      if (_skillIsInitialized) {\n        $rootScope.$broadcast(EVENT_SKILL_REINITIALIZED);\n      } else {\n        $rootScope.$broadcast(EVENT_SKILL_INITIALIZED);\n      }\n      _skillIsInitialized = true;\n    };\n\n    var _updateSkill = function(newBackendSkillObject) {\n      _setSkill(SkillObjectFactory.createFromBackendDict(\n        newBackendSkillObject));\n    };\n\n    var _setSkillRights = function(skillRights) {\n      _skillRights.copyFromSkillRights(skillRights);\n    };\n\n    var _updateSkillRights = function(newBackendSkillRightsObject) {\n      _setSkillRights(SkillRightsObjectFactory.createFromBackendDict(\n        newBackendSkillRightsObject));\n    };\n\n    return {\n      loadSkill: function(skillId) {\n        _skillIsBeingLoaded = true;\n        EditableSkillBackendApiService.fetchSkill(\n          skillId).then(\n          function(newBackendSkillObject) {\n            _updateSkill(newBackendSkillObject);\n            _skillIsBeingLoaded = false;\n          }, function(error) {\n            AlertsService.addWarning();\n            _skillIsBeingLoaded = false;\n          });\n        SkillRightsBackendApiService.fetchSkillRights(\n          skillId).then(function(newBackendSkillRightsObject) {\n          _updateSkillRights(newBackendSkillRightsObject);\n          _skillIsBeingLoaded = false;\n        }, function(error) {\n          AlertsService.addWarning(\n            error ||\n            \'There was an error when loading the skill rights.\');\n          _skillIsBeingLoaded = false;\n        });\n      },\n\n      isLoadingSkill: function() {\n        return _skillIsBeingLoaded;\n      },\n\n      hasLoadedSkill: function() {\n        return _skillIsInitialized;\n      },\n\n      getSkill: function() {\n        return _skill;\n      },\n\n      saveSkill: function(commitMessage, successCallback) {\n        if (!_skillIsInitialized) {\n          AlertsService.fatalWarning(\n            \'Cannot save a skill before one is loaded.\');\n        }\n\n        if (!UndoRedoService.hasChanges()) {\n          return false;\n        }\n        _skillIsBeingSaved = true;\n        EditableSkillBackendApiService.updateSkill(\n          _skill.getId(), _skill.getVersion(), commitMessage,\n          UndoRedoService.getCommittableChangeList()).then(\n          function(skillBackendObject) {\n            _updateSkill(skillBackendObject);\n            UndoRedoService.clearChanges();\n            _skillIsBeingSaved = false;\n            if (successCallback) {\n              successCallback();\n            }\n          }, function(error) {\n            AlertsService.addWarning(\n              error || \'There was an error when saving the skill\');\n            _skillIsBeingSaved = false;\n          });\n        return true;\n      },\n\n      getSkillRights: function() {\n        return _skillRights;\n      },\n\n      isSavingSkill: function() {\n        return _skillIsBeingSaved;\n      },\n\n      setSkillRights: function(skillRights) {\n        _setSkillRights(skillRights);\n      }\n    };\n  }]);'

blocks = {}
debug_info = ''
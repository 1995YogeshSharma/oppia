from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/ExplorationHtmlFormatterService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utility services for explorations which may be shared by both\n * the learner and editor views.\n */\n\n// A service that provides a number of utility functions useful to both the\n// editor and player.\noppia.factory(\'ExplorationHtmlFormatterService\', [\n  \'$filter\', \'extensionTagAssemblerService\', \'HtmlEscaperService\',\n  \'INTERACTION_SPECS\',\n  function(\n      $filter, extensionTagAssemblerService, HtmlEscaperService,\n      INTERACTION_SPECS) {\n    return {\n      /**\n       * @param {string} interactionId - The interaction id.\n       * @param {object} interactionCustomizationArgSpecs - The various\n       *   attributes that the interaction depends on.\n       * @param {boolean} parentHasLastAnswerProperty - If this function is\n       *   called in the exploration_player view (including the preview mode),\n       *   callers should ensure that parentHasLastAnswerProperty is set to\n       *   true and $scope.lastAnswer =\n       *   PlayerTranscriptService.getLastAnswerOnActiveCard(index) is set on\n       *   the parent controller of the returned tag.\n       *   Otherwise, parentHasLastAnswerProperty should be set to false.\n       * @param {string} labelForFocusTarget - The label for setting focus on\n       *   the interaction.\n       */\n      getInteractionHtml: function(\n          interactionId, interactionCustomizationArgSpecs,\n          parentHasLastAnswerProperty, labelForFocusTarget) {\n        var htmlInteractionId = $filter(\'camelCaseToHyphens\')(interactionId);\n        var element = $(\'<oppia-interactive-\' + htmlInteractionId + \'>\');\n\n        element = (\n          extensionTagAssemblerService.formatCustomizationArgAttrs(\n            element, interactionCustomizationArgSpecs));\n        element.attr(\'on-submit\', \'submitAnswer(answer, rulesService);\');\n        element.attr(\'last-answer\', parentHasLastAnswerProperty ?\n          \'lastAnswer\' : \'null\');\n        if (labelForFocusTarget) {\n          element.attr(\'label-for-focus-target\', labelForFocusTarget);\n        }\n        // answerValidity is a boolean, used to enable/disable the progress\n        // nav Submit button. Parent directive should define the\n        // setInteractionAnswerValidity function.\n        // Note that ItemSelectionInput is a special\n        // case which has a special interaction-specific Submit\n        // button, not covered by show_generic_submit_button.\n        var navSubmitButtonExists = (\n          INTERACTION_SPECS[interactionId].show_generic_submit_button ||\n          interactionId === \'ItemSelectionInput\');\n        if (navSubmitButtonExists) {\n          element.attr(\n            \'set-answer-validity\',\n            \'setInteractionAnswerValidity(answerValidity)\');\n        }\n        return element.get(0).outerHTML;\n      },\n\n      getAnswerHtml: function(\n          answer, interactionId, interactionCustomizationArgs) {\n        // TODO(sll): Get rid of this special case for multiple choice.\n        var interactionChoices = null;\n        if (interactionCustomizationArgs.choices) {\n          interactionChoices = interactionCustomizationArgs.choices.value;\n        }\n\n        var el = $(\n          \'<oppia-response-\' + $filter(\'camelCaseToHyphens\')(\n            interactionId) + \'>\');\n        el.attr(\'answer\', HtmlEscaperService.objToEscapedJson(answer));\n        if (interactionChoices) {\n          el.attr(\'choices\', HtmlEscaperService.objToEscapedJson(\n            interactionChoices));\n        }\n        return ($(\'<div>\').append(el)).html();\n      },\n\n      getShortAnswerHtml: function(\n          answer, interactionId, interactionCustomizationArgs) {\n        // TODO(sll): Get rid of this special case for multiple choice.\n        var interactionChoices = null;\n        if (interactionCustomizationArgs.choices) {\n          interactionChoices = interactionCustomizationArgs.choices.value;\n        }\n\n        var el = $(\n          \'<oppia-short-response-\' + $filter(\'camelCaseToHyphens\')(\n            interactionId) + \'>\');\n        el.attr(\'answer\', HtmlEscaperService.objToEscapedJson(answer));\n        if (interactionChoices) {\n          el.attr(\'choices\', HtmlEscaperService.objToEscapedJson(\n            interactionChoices));\n        }\n        return ($(\'<span>\').append(el)).html();\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
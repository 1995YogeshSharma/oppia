from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/topic_editor/questions/QuestionsTabDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'\n// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the questions tab.\n */\noppia.directive(\'questionsTab\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {},\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/topic_editor/questions/questions_tab_directive.html\'),\n      controller: [\n        \'$scope\', \'$http\', \'$q\', \'$uibModal\', \'$window\', \'AlertsService\',\n        \'TopicEditorStateService\', \'QuestionCreationService\',\n        \'EditableQuestionBackendApiService\', \'EditableSkillBackendApiService\',\n        \'MisconceptionObjectFactory\', \'QuestionObjectFactory\',\n        \'QuestionSuggestionObjectFactory\', \'SuggestionThreadObjectFactory\',\n        \'EVENT_QUESTION_SUMMARIES_INITIALIZED\', \'StateEditorService\', function(\n            $scope, $http, $q, $uibModal, $window, AlertsService,\n            TopicEditorStateService, QuestionCreationService,\n            EditableQuestionBackendApiService, EditableSkillBackendApiService,\n            MisconceptionObjectFactory, QuestionObjectFactory,\n            QuestionSuggestionObjectFactory, SuggestionThreadObjectFactory,\n            EVENT_QUESTION_SUMMARIES_INITIALIZED, StateEditorService) {\n          var _initTab = function() {\n            $scope.questionEditorIsShown = false;\n            $scope.question = null;\n            $scope.skillId = null;\n            $scope.topic = TopicEditorStateService.getTopic();\n            $scope.topicRights = TopicEditorStateService.getTopicRights();\n            $scope.canEditQuestion = $scope.topicRights.canEditTopic();\n            $scope.questionSummaries =\n              TopicEditorStateService.getQuestionSummaries();\n            $scope.misconceptions = [];\n            $scope.questionSuggestionThreads = [];\n            $scope.activeQuestion = null;\n            $scope.suggestionReviewMessage = null;\n          };\n\n          $scope.saveAndPublishQuestion = function() {\n            var validationErrors = $scope.question.validate(\n              $scope.misconceptions);\n            if (validationErrors) {\n              AlertsService.addWarning(validationErrors);\n              return;\n            }\n            EditableQuestionBackendApiService.createQuestion(\n              $scope.skillId, $scope.question.toBackendDict(true)\n            ).then(function() {\n              TopicEditorStateService.fetchQuestionSummaries(\n                $scope.topic.getId(), function() {\n                  _initTab();\n                }\n              );\n            });\n          };\n\n          $scope.createQuestion = function() {\n            var allSkillSummaries = [];\n            allSkillSummaries = allSkillSummaries.concat(\n              $scope.topic.getUncategorizedSkillSummaries());\n            for (var i = 0; i < $scope.topic.getSubtopics().length; i++) {\n              var subtopic = $scope.topic.getSubtopics()[i];\n              allSkillSummaries = allSkillSummaries.concat(\n                subtopic.getSkillSummaries());\n            }\n            var modalInstance = $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/topic_editor/questions/\' +\n                \'select_skill_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\',\n                function($scope, $uibModalInstance) {\n                  $scope.selectedSkillId = null;\n                  $scope.skillSummaries = allSkillSummaries;\n\n                  $scope.selectSkill = function(skillId) {\n                    $scope.selectedSkillId = skillId;\n                  };\n\n                  $scope.done = function() {\n                    $uibModalInstance.close($scope.selectedSkillId);\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                  };\n                }\n              ]\n            });\n\n            modalInstance.result.then(function(skillId) {\n              $scope.skillId = skillId;\n              EditableSkillBackendApiService.fetchSkill(\n                skillId).then(\n                function(skillDict) {\n                  $scope.misconceptions = skillDict.misconceptions.map(function(\n                      misconceptionsBackendDict) {\n                    return MisconceptionObjectFactory.createFromBackendDict(\n                      misconceptionsBackendDict);\n                  });\n                  $scope.question =\n                    QuestionObjectFactory.createDefaultQuestion();\n                  $scope.questionId = $scope.question.getId();\n                  $scope.questionStateData = $scope.question.getStateData();\n                  $scope.questionEditorIsShown = true;\n                }, function(error) {\n                  AlertsService.addWarning();\n                });\n            });\n          };\n\n          loadSuggestedQuestionsAsync = function() {\n            $scope.questionSuggestionThreads = [];\n            var suggestionsPromise = $http.get(\n              \'/generalsuggestionlisthandler\', {\n                params: {\n                  target_type: \'topic\',\n                  target_id: $scope.topic.getId(),\n                  suggestion_type: \'add_question\'\n                }\n              }\n            );\n            var threadsPromise = $http.get(\n              UrlInterpolationService.interpolateUrl(\n                \'/threadlisthandlerfortopic/<topic_id>\', {\n                  topic_id: $scope.topic.getId()\n                }));\n            $q.all([suggestionsPromise, threadsPromise]).then(function(res) {\n              var suggestionThreads = res[1].data.suggestion_thread_dicts;\n              var suggestions = res[0].data.suggestions;\n              if (suggestionThreads.length !== suggestions.length) {\n                $log.error(\n                  \'Number of suggestion threads doesn\\\'t match number of \' +\n                  \'suggestion objects\');\n              }\n              for (var i = 0; i < suggestionThreads.length; i++) {\n                for (var j = 0; j < suggestions.length; j++) {\n                  if (suggestionThreads[i].thread_id ===\n                      suggestions[j].suggestion_id) {\n                    var suggestionThread = (\n                      SuggestionThreadObjectFactory.createFromBackendDicts(\n                        suggestionThreads[i], suggestions[j]));\n                    $scope.questionSuggestionThreads.push(suggestionThread);\n                    break;\n                  }\n                }\n              }\n            });\n          };\n\n          $scope.setActiveQuestion = function(questionSuggestionThread) {\n            if (questionSuggestionThread.getSuggestionStatus() === \'review\') {\n              $scope.activeQuestion = (\n                questionSuggestionThread.suggestion.question);\n              $scope.idOfActiveSuggestion = (\n                questionSuggestionThread.suggestion.suggestionId);\n            }\n          };\n\n          $scope.clearActiveQuestion = function() {\n            $scope.activeQuestion = null;\n            $scope.idOfActiveSuggestion = null;\n            $scope.suggestionReviewMessage = null;\n          };\n\n          $scope.showSelectSkillModal = function() {\n            var allSkillSummaries = [];\n            allSkillSummaries = allSkillSummaries.concat(\n              $scope.topic.getUncategorizedSkillSummaries());\n            for (var i = 0; i < $scope.topic.getSubtopics().length; i++) {\n              var subtopic = $scope.topic.getSubtopics()[i];\n              allSkillSummaries = allSkillSummaries.concat(\n                subtopic.getSkillSummaries());\n            }\n            $uibModal.open({\n              templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                \'/pages/topic_editor/questions/\' +\n                \'select_skill_modal_directive.html\'),\n              backdrop: true,\n              controller: [\n                \'$scope\', \'$uibModalInstance\',\n                function($scope, $uibModalInstance) {\n                  $scope.selectedSkillId = null;\n                  $scope.skillSummaries = allSkillSummaries;\n\n                  $scope.selectSkill = function(skillId) {\n                    $scope.selectedSkillId = skillId;\n                  };\n\n                  $scope.done = function() {\n                    $uibModalInstance.close({\n                      skillId: $scope.selectedSkillId\n                    });\n                  };\n\n                  $scope.cancel = function() {\n                    $uibModalInstance.dismiss(\'cancel\');\n                  };\n                }\n              ]\n            }).result.then(function(res) {\n              $scope.selectedSkillId = res.skillId;\n              EditableSkillBackendApiService.fetchSkill(res.skillId).then(\n                function(skillDict) {\n                  $scope.misconceptions = skillDict.misconceptions.map(function(\n                      misconceptionsBackendDict) {\n                    return MisconceptionObjectFactory.createFromBackendDict(\n                      misconceptionsBackendDict);\n                  });\n                }, function(error) {\n                  AlertsService.addWarning();\n                });\n            });\n          };\n\n          $scope.acceptQuestion = function(suggestionId, reviewMessage) {\n            var suggestionActionHandlerUrl = (\n              UrlInterpolationService.interpolateUrl(\n                \'/generalsuggestionactionhandler/topic/<topic_id>/\' +\n                \'<suggestion_id>\', {\n                  topic_id: $scope.topic.getId(),\n                  suggestion_id: suggestionId\n                }));\n            $http.put(suggestionActionHandlerUrl, {\n              action: \'accept\',\n              skill_id: $scope.selectedSkillId,\n              commit_message: \'unused_commit_message\',\n              review_message: reviewMessage\n            }).then(function() {\n              $scope.clearActiveQuestion();\n              $window.location.reload();\n            });\n          };\n\n          $scope.rejectQuestion = function(suggestionId, reviewMessage) {\n            var suggestionActionHandlerUrl = (\n              UrlInterpolationService.interpolateUrl(\n                \'/generalsuggestionactionhandler/topic/<topic_id>/\' +\n                \'<suggestion_id>\', {\n                  topic_id: $scope.topic.getId(),\n                  suggestion_id: suggestionId\n                }));\n            $http.put(suggestionActionHandlerUrl, {\n              action: \'reject\',\n              commit_message: \'unused_commit_message\',\n              review_message: reviewMessage\n            }).then(function() {\n              $scope.clearActiveQuestion();\n              $window.location.reload();\n            });\n          };\n\n          $scope.$on(EVENT_QUESTION_SUMMARIES_INITIALIZED, _initTab);\n\n          _initTab();\n          loadSuggestedQuestionsAsync();\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
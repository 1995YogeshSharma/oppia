from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/AudioPreloaderServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \'License\');\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \'AS-IS\' BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the audio preloader service.\n */\n\ndescribe(\'Audio preloader service\', function() {\n  beforeEach(function() {\n    module(\'oppia\');\n    // Set a global value for INTERACTION_SPECS that will be used by all the\n    // descendant dependencies.\n    module(function($provide) {\n      $provide.constant(\'INTERACTION_SPECS\', {\n        TextInput: {\n          is_terminal: false\n        },\n        Continue: {\n          is_terminal: false\n        },\n        EndExploration: {\n          is_terminal: true\n        }\n      });\n    });\n  });\n\n  var aps, atls, eof, ecs;\n  var $httpBackend = null;\n  var $rootScope = null;\n  var explorationDict;\n  var requestUrl1, requestUrl2, requestUrl3, requestUrl4;\n  beforeEach(inject(function($injector) {\n    $httpBackend = $injector.get(\'$httpBackend\');\n    aps = $injector.get(\'AudioPreloaderService\');\n    atls = $injector.get(\'AudioTranslationLanguageService\');\n    eof = $injector.get(\'ExplorationObjectFactory\');\n    ecs = $injector.get(\'ContextService\');\n    spyOn(ecs, \'getExplorationId\').and.returnValue(\'1\');\n    $rootScope = $injector.get(\'$rootScope\');\n    explorationDict = {\n      id: 1,\n      title: \'My Title\',\n      category: \'Art\',\n      objective: \'Your objective\',\n      tags: [],\n      blurb: \'\',\n      author_notes: \'\',\n      states_schema_version: 15,\n      init_state_name: \'Introduction\',\n      states: {\n        \'State 1\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'<p>State 1 Content</p>\'\n          },\n          content_ids_to_audio_translations: {\n            content: {\n              en: {\n                filename: \'en-1.mp3\',\n                file_size_bytes: 120000,\n                needs_update: false\n              }\n            },\n            default_outcome: {}\n          },\n          interaction: {\n            id: \'Continue\',\n            default_outcome: {\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'\'\n              },\n              dest: \'State 3\',\n              param_changes: []\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              buttonText: {\n                value: \'Continue\'\n              }\n            },\n            solution: null,\n            answer_groups: [],\n            hints: []\n          },\n          classifier_model_id: null\n        },\n        \'State 3\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'Congratulations, you have finished!\',\n          },\n          content_ids_to_audio_translations: {\n            content: {\n              en: {\n                filename: \'en-3.mp3\',\n                file_size_bytes: 120000,\n                needs_update: false\n              }\n            }\n          },\n          interaction: {\n            id: \'EndExploration\',\n            default_outcome: null,\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              recommendedExplorationIds: {\n                value: []\n              }\n            },\n            solution: null,\n            answer_groups: [],\n            hints: []\n          },\n          classifier_model_id: null\n        },\n        \'State 2\': {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'<p>State 2 Content</p>\'\n          },\n          content_ids_to_audio_translations: {\n            content: {\n              en: {\n                filename: \'en-2.mp3\',\n                file_size_bytes: 120000,\n                needs_update: false\n              }\n            },\n            default_outcome: {}\n          },\n          interaction: {\n            id: \'Continue\',\n            default_outcome: {\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'\'\n              },\n              dest: \'State 3\',\n              param_changes: []\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              buttonText: {\n                value: \'Continue\'\n              }\n            },\n            solution: null,\n            answer_groups: [],\n            hints: []\n          },\n          classifier_model_id: null\n        },\n        Introduction: {\n          param_changes: [],\n          content: {\n            content_id: \'content\',\n            html: \'<p>Introduction Content</p>\',\n          },\n          content_ids_to_audio_translations: {\n            content: {\n              en: {\n                filename: \'en-0.mp3\',\n                file_size_bytes: 120000,\n                needs_update: false\n              }\n            },\n            default_outcome: {},\n            feedback_1: {}\n          },\n          interaction: {\n            id: \'TextInput\',\n            default_outcome: {\n              dest: \'Introduction\',\n              feedback: {\n                content_id: \'default_outcome\',\n                html: \'<p>Try again.</p>\'\n              },\n              labelled_as_correct: false,\n              param_changes: [],\n              refresher_exploration_id: null\n            },\n            confirmed_unclassified_answers: [],\n            customization_args: {\n              rows: {\n                value: 1\n              },\n              placeholder: {\n                value: \'\'\n              }\n            },\n            solution: null,\n            answer_groups: [{\n              rule_specs: [{\n                inputs: {\n                  x: \'1\'\n                },\n                rule_type: \'Contains\'\n              }],\n              outcome: {\n                dest: \'State 1\',\n                feedback: {\n                  content_id: \'feedback_1\',\n                  html: "<p>Let\'s go to State 1</p>"\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null\n              }\n            }, {\n              rule_specs: [{\n                inputs: {\n                  x: \'2\'\n                },\n                rule_type: \'Contains\'\n              }],\n              outcome: {\n                dest: \'State 2\',\n                feedback: {\n                  content_id: \'feedback_2\',\n                  html: "<p>Let\'s go to State 2</p>"\n                },\n                labelled_as_correct: false,\n                param_changes: [],\n                refresher_exploration_id: null\n              }\n            }],\n            hints: []\n          },\n          classifier_model_id: null\n        }\n      },\n      param_specs: {},\n      param_changes: [],\n      version: 1\n    };\n\n    requestUrl1 = UrlInterpolationService.interpolateUrl(\n      \'/audiohandler/<exploration_id>/audio/<filename>\', {\n        exploration_id: \'1\',\n        filename: \'en-0.mp3\'\n      });\n    requestUrl2 = UrlInterpolationService.interpolateUrl(\n      \'/audiohandler/<exploration_id>/audio/<filename>\', {\n        exploration_id: \'1\',\n        filename: \'en-1.mp3\'\n      });\n    requestUrl3 = UrlInterpolationService.interpolateUrl(\n      \'/audiohandler/<exploration_id>/audio/<filename>\', {\n        exploration_id: \'1\',\n        filename: \'en-2.mp3\'\n      });\n    requestUrl4 = UrlInterpolationService.interpolateUrl(\n      \'/audiohandler/<exploration_id>/audio/<filename>\', {\n        exploration_id: \'1\',\n        filename: \'en-3.mp3\'\n      });\n  }));\n\n  it(\'should maintain the correct number of download requests in queue\',\n    function() {\n      $httpBackend.expect(\'GET\', requestUrl1).respond(201, \'audio data 1\');\n      $httpBackend.expect(\'GET\', requestUrl2).respond(201, \'audio data 2\');\n      $httpBackend.expect(\'GET\', requestUrl3).respond(201, \'audio data 3\');\n      $httpBackend.expect(\'GET\', requestUrl4).respond(201, \'audio data 4\');\n      var exploration = eof.createFromBackendDict(explorationDict);\n      aps.init(exploration);\n      atls.init([\'en\'], \'en\', \'en\');\n      aps.kickOffAudioPreloader(exploration.getInitialState().name);\n\n      expect(aps.getFilenamesOfAudioCurrentlyDownloading().length).toBe(3);\n      expect(aps.isLoadingAudioFile(\'en-0.mp3\')).toBe(true);\n      expect(aps.isLoadingAudioFile(\'en-1.mp3\')).toBe(true);\n      expect(aps.isLoadingAudioFile(\'en-2.mp3\')).toBe(true);\n      expect(aps.isLoadingAudioFile(\'en-3.mp3\')).toBe(false);\n      $httpBackend.flush(1);\n      expect(aps.getFilenamesOfAudioCurrentlyDownloading().length).toBe(3);\n      $httpBackend.flush(1);\n      expect(aps.getFilenamesOfAudioCurrentlyDownloading().length).toBe(2);\n      $httpBackend.flush(1);\n      expect(aps.getFilenamesOfAudioCurrentlyDownloading().length).toBe(1);\n      expect(aps.isLoadingAudioFile(\'en-0.mp3\')).toBe(false);\n      expect(aps.isLoadingAudioFile(\'en-1.mp3\')).toBe(false);\n      expect(aps.isLoadingAudioFile(\'en-2.mp3\')).toBe(false);\n      expect(aps.isLoadingAudioFile(\'en-3.mp3\')).toBe(true);\n      $httpBackend.flush(1);\n      expect(aps.getFilenamesOfAudioCurrentlyDownloading().length).toBe(0);\n    });\n\n  it(\'should properly restart pre-loading from a new state\', function() {\n    var exploration = eof.createFromBackendDict(explorationDict);\n    aps.init(exploration);\n    atls.init([\'en\'], \'en\', \'en\');\n    aps.kickOffAudioPreloader(exploration.getInitialState().name);\n    expect(aps.getFilenamesOfAudioCurrentlyDownloading().length).toBe(3);\n    aps.restartAudioPreloader(\'State 3\');\n    expect(aps.getFilenamesOfAudioCurrentlyDownloading().length).toBe(1);\n    expect(aps.isLoadingAudioFile(\'en-3.mp3\')).toBe(true);\n    aps.restartAudioPreloader(\'State 2\');\n    expect(aps.getFilenamesOfAudioCurrentlyDownloading().length).toBe(2);\n    expect(aps.isLoadingAudioFile(\'en-2.mp3\')).toBe(true);\n    expect(aps.isLoadingAudioFile(\'en-3.mp3\')).toBe(true);\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/story_editor/main_editor/StoryEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the main story editor.\n */\noppia.constant(\'EVENT_VIEW_STORY_NODE_EDITOR\', \'viewStoryNodeEditor\');\n\noppia.directive(\'storyEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {},\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/story_editor/main_editor/story_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'StoryEditorStateService\', \'StoryUpdateService\',\n        \'UndoRedoService\', \'EVENT_VIEW_STORY_NODE_EDITOR\',\n        \'EVENT_STORY_INITIALIZED\', \'EVENT_STORY_REINITIALIZED\',\n        function(\n            $scope, StoryEditorStateService, StoryUpdateService,\n            UndoRedoService, EVENT_VIEW_STORY_NODE_EDITOR,\n            EVENT_STORY_INITIALIZED, EVENT_STORY_REINITIALIZED) {\n          var _init = function() {\n            $scope.story = StoryEditorStateService.getStory();\n            $scope.storyContents = $scope.story.getStoryContents();\n            if ($scope.storyContents) {\n              $scope.setNodeToEdit($scope.storyContents.getInitialNodeId());\n            }\n            _initEditor();\n          };\n\n          var _initEditor = function() {\n            $scope.story = StoryEditorStateService.getStory();\n            $scope.storyContents = $scope.story.getStoryContents();\n            if ($scope.storyContents) {\n              $scope.nodes = $scope.storyContents.getNodes();\n            }\n            $scope.storyTitleEditorIsShown = false;\n            $scope.editableTitle = $scope.story.getTitle();\n            $scope.notes = $scope.story.getNotes();\n            $scope.notesEditorIsShown = false;\n            $scope.editableDescription = $scope.story.getDescription();\n            $scope.editableDescriptionIsEmpty = (\n              $scope.editableDescription === \'\');\n            $scope.storyDescriptionChanged = false;\n          };\n\n          $scope.setNodeToEdit = function(nodeId) {\n            $scope.idOfNodeToEdit = nodeId;\n          };\n\n          $scope.isInitialNode = function(nodeId) {\n            return (\n              $scope.story.getStoryContents().getInitialNodeId() === nodeId);\n          };\n\n          $scope.markAsInitialNode = function(nodeId) {\n            if ($scope.isInitialNode(nodeId)) {\n              return;\n            }\n            StoryUpdateService.setInitialNodeId($scope.story, nodeId);\n          };\n\n          $scope.deleteNode = function(nodeId) {\n            StoryUpdateService.deleteStoryNode($scope.story, nodeId);\n          };\n\n          $scope.NOTES_SCHEMA = {\n            type: \'html\',\n            ui_config: {\n              rows: 100\n            }\n          };\n\n          $scope.openPreviewNotes = function(notes) {\n            $scope.notesEditorIsShown = false;\n            $scope.notes = notes;\n          };\n\n          $scope.closePreviewNotes = function(previewNotes) {\n            $scope.notesEditorIsShown = true;\n            $scope.editableNotes = previewNotes;\n          };\n\n          $scope.updateNotes = function(newNotes) {\n            if (newNotes === $scope.story.getNotes()) {\n              return;\n            }\n            StoryUpdateService.setStoryNotes($scope.story, newNotes);\n            $scope.openPreviewNotes(newNotes);\n          };\n\n          $scope.updateStoryDescriptionStatus = function(description) {\n            $scope.editableDescriptionIsEmpty = (description === \'\');\n            $scope.storyDescriptionChanged = true;\n          };\n\n          $scope.openStoryTitleEditor = function() {\n            $scope.storyTitleEditorIsShown = true;\n            $scope.editableTitle = $scope.story.getTitle();\n          };\n\n          $scope.closeStoryTitleEditor = function() {\n            $scope.storyTitleEditorIsShown = false;\n            $scope.editableTitle = $scope.story.getTitle();\n          };\n\n          $scope.updateStoryTitle = function(newTitle) {\n            StoryUpdateService.setStoryTitle($scope.story, newTitle);\n            $scope.closeStoryTitleEditor();\n          };\n\n          $scope.updateStoryDescription = function(newDescription) {\n            if (newDescription !== $scope.story.getDescription()) {\n              StoryUpdateService.setStoryDescription(\n                $scope.story, newDescription);\n            }\n          };\n\n          $scope.$on(EVENT_VIEW_STORY_NODE_EDITOR, function(evt, nodeId) {\n            $scope.setNodeToEdit(nodeId);\n          });\n\n          $scope.$on(EVENT_STORY_INITIALIZED, _init);\n          $scope.$on(EVENT_STORY_REINITIALIZED, _initEditor);\n\n          _init();\n          _initEditor();\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
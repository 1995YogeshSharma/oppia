from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/collection_editor/editor_tab/CollectionLinearizerServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for CollectionLinearizerService.\n */\n\ndescribe(\'Collection linearizer service\', function() {\n  var CollectionObjectFactory = null;\n  var CollectionNodeObjectFactory = null;\n  var CollectionLinearizerService = null;\n\n  var firstCollectionNode = null;\n  var secondCollectionNode = null;\n  var thirdCollectionNode = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    CollectionObjectFactory = $injector.get(\'CollectionObjectFactory\');\n    CollectionNodeObjectFactory = $injector.get(\'CollectionNodeObjectFactory\');\n    CollectionLinearizerService = $injector.get(\'CollectionLinearizerService\');\n\n    var firstCollectionNodeBackendObject = {\n      exploration_id: \'exp_id0\',\n      exploration_summary: {\n        title: \'exp title0\',\n        category: \'exp category\',\n        objective: \'exp objective\'\n      }\n    };\n    firstCollectionNode = CollectionNodeObjectFactory.create(\n      firstCollectionNodeBackendObject);\n\n    var secondCollectionNodeBackendObject = {\n      exploration_id: \'exp_id1\',\n      exploration_summary: {\n        title: \'exp title1\',\n        category: \'exp category\',\n        objective: \'exp objective\'\n      }\n    };\n    secondCollectionNode = CollectionNodeObjectFactory.create(\n      secondCollectionNodeBackendObject);\n\n    var thirdCollectionNodeBackendObject = {\n      exploration_id: \'exp_id2\',\n      exploration_summary: {\n        title: \'exp title2\',\n        category: \'exp category\',\n        objective: \'exp objective\'\n      }\n    };\n    thirdCollectionNode = CollectionNodeObjectFactory.create(\n      thirdCollectionNodeBackendObject);\n  }));\n\n  // The linear order of explorations is: exp_id0 -> exp_id1 -> exp_id2\n  var createLinearCollection = function() {\n    var collection = CollectionObjectFactory.createEmptyCollection();\n\n    // Add collections in a different order from which they will be displayed\n    // by the linearizer for robustness.\n    collection.addCollectionNode(firstCollectionNode);\n    collection.addCollectionNode(secondCollectionNode);\n    collection.addCollectionNode(thirdCollectionNode);\n    return collection;\n  };\n\n  describe(\'removeCollectionNode()\', function() {\n    it(\'should not remove a non-existent node from a single node collection\',\n      function() {\n        var collection = CollectionObjectFactory.createEmptyCollection();\n        collection.addCollectionNode(firstCollectionNode);\n        expect(collection.containsCollectionNode(\'exp_id0\')).toBe(true);\n        expect(\n          CollectionLinearizerService.removeCollectionNode(\n            collection, \'non_existent\')).toBe(false);\n        expect(collection.containsCollectionNode(\'exp_id0\')).toBe(true);\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual([firstCollectionNode]);\n      }\n    );\n\n    it(\'should not remove a non-existent node from a multiple nodes collection\',\n      function() {\n        var collection = createLinearCollection();\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual(\n          [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n        expect(\n          CollectionLinearizerService.removeCollectionNode(\n            collection, \'non_existent\')).toBe(false);\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual(\n          [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      }\n    );\n\n    it(\'should correctly remove a node from a single node collection\',\n      function() {\n        var collection = CollectionObjectFactory.createEmptyCollection();\n        collection.addCollectionNode(firstCollectionNode);\n        expect(collection.containsCollectionNode(\'exp_id0\')).toBe(true);\n        expect(\n          CollectionLinearizerService.removeCollectionNode(\n            collection, \'exp_id0\')).toBe(true);\n        expect(collection.containsCollectionNode(\'exp_id0\')).toBe(false);\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual([]);\n      }\n    );\n\n    it(\'should correctly remove the first node from a collection\', function() {\n      var collection = createLinearCollection();\n      expect(collection.containsCollectionNode(\'exp_id0\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.removeCollectionNode(\n          collection, \'exp_id0\')).toBe(true);\n      expect(collection.containsCollectionNode(\'exp_id0\')).toBe(false);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual([secondCollectionNode, thirdCollectionNode]);\n    });\n\n    it(\'should correctly remove the last node from a collection\', function() {\n      var collection = createLinearCollection();\n      expect(collection.containsCollectionNode(\'exp_id2\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.removeCollectionNode(\n          collection, \'exp_id2\')).toBe(true);\n      expect(collection.containsCollectionNode(\'exp_id2\')).toBe(false);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual([firstCollectionNode, secondCollectionNode]);\n    });\n\n    it(\'should correctly remove a middle node from a collection\', function() {\n      var collection = createLinearCollection();\n      expect(collection.containsCollectionNode(\'exp_id1\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.removeCollectionNode(\n          collection, \'exp_id1\')).toBe(true);\n      expect(collection.containsCollectionNode(\'exp_id1\')).toBe(false);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual([firstCollectionNode, thirdCollectionNode]);\n    });\n  });\n\n  describe(\'appendCollectionNode()\', function() {\n    it(\'should correctly append a node to an empty collection\', function() {\n      var collection = CollectionObjectFactory.createEmptyCollection();\n      expect(collection.containsCollectionNode(\'exp_id0\')).toBe(false);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual([]);\n      CollectionLinearizerService.appendCollectionNode(\n        collection,\n        \'exp_id0\',\n        firstCollectionNode.getExplorationSummaryObject());\n      firstCollectionNode = collection.getCollectionNodeByExplorationId(\n        \'exp_id0\');\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual([firstCollectionNode]);\n    });\n\n    it(\'should correctly append a node to a non-empty collection\', function() {\n      var collection = createLinearCollection();\n      var newCollectionNodeBackendObject = {\n        exploration_id: \'exp_id3\',\n        exploration_summary: {\n          title: \'exp title3\',\n          category: \'exp category\',\n          objective: \'exp objective\'\n        }\n      };\n      var newCollectionNode = CollectionNodeObjectFactory.create(\n        newCollectionNodeBackendObject);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      CollectionLinearizerService.appendCollectionNode(\n        collection, \'exp_id3\', newCollectionNode.getExplorationSummaryObject());\n      newCollectionNode = collection.getCollectionNodeByExplorationId(\n        \'exp_id3\');\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual([\n        collection.getCollectionNodeByExplorationId(\'exp_id0\'),\n        collection.getCollectionNodeByExplorationId(\'exp_id1\'),\n        collection.getCollectionNodeByExplorationId(\'exp_id2\'),\n        collection.getCollectionNodeByExplorationId(\'exp_id3\')]);\n    });\n  });\n\n  describe(\'shiftNodeLeft()\', function() {\n    it(\'should correctly shift a node in a single node collection\',\n      function() {\n        var collection = CollectionObjectFactory.createEmptyCollection();\n        collection.addCollectionNode(firstCollectionNode);\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual([firstCollectionNode]);\n        expect(\n          CollectionLinearizerService.shiftNodeLeft(\n            collection, \'exp_id0\')).toBe(true);\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual([firstCollectionNode]);\n      }\n    );\n\n    it(\'should not shift a non-existent node\', function() {\n      var collection = createLinearCollection();\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(CollectionLinearizerService.shiftNodeLeft(\n        collection, \'non_existent\')).toBe(false);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n    });\n\n    it(\'should correctly shift the first node\', function() {\n      var collection = createLinearCollection();\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.shiftNodeLeft(\n          collection, \'exp_id0\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n    });\n\n    it(\'should correctly shift the last node\', function() {\n      var collection = createLinearCollection();\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.shiftNodeLeft(\n          collection, \'exp_id2\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, thirdCollectionNode, secondCollectionNode]);\n    });\n\n    it(\'should correctly shift a middle node\', function() {\n      var collection = createLinearCollection();\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.shiftNodeLeft(\n          collection, \'exp_id1\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [secondCollectionNode, firstCollectionNode, thirdCollectionNode]);\n    });\n  });\n\n  describe(\'shiftNodeRight()\', function() {\n    it(\'should correctly shift a node in a single node collection\',\n      function() {\n        var collection = CollectionObjectFactory.createEmptyCollection();\n        collection.addCollectionNode(firstCollectionNode);\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual([firstCollectionNode]);\n        expect(\n          CollectionLinearizerService.shiftNodeRight(\n            collection, \'exp_id0\')).toBe(true);\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual([firstCollectionNode]);\n      }\n    );\n\n    it(\'should not shift a non-existent node\', function() {\n      var collection = createLinearCollection();\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.shiftNodeRight(\n          collection, \'non_existent\')).toBe(false);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n    });\n\n    it(\'should correctly shift the first node\', function() {\n      var collection = createLinearCollection();\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.shiftNodeRight(\n          collection, \'exp_id0\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [secondCollectionNode, firstCollectionNode, thirdCollectionNode]);\n    });\n\n    it(\'should correctly shift the last node\', function() {\n      var collection = createLinearCollection();\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.shiftNodeRight(\n          collection, \'exp_id2\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n    });\n\n    it(\'should correctly shift middle node\', function() {\n      var collection = createLinearCollection();\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      expect(\n        CollectionLinearizerService.shiftNodeRight(\n          collection, \'exp_id1\')).toBe(true);\n      expect(\n        CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n          collection)).toEqual(\n        [firstCollectionNode, thirdCollectionNode, secondCollectionNode]);\n    });\n  });\n\n  describe(\'getNextExplorationId()\', function() {\n    it(\'should return no exploration ids for a completed linear collection\',\n      function() {\n        var collection = createLinearCollection();\n        expect(\n          CollectionLinearizerService.getNextExplorationId(\n            collection, [\'exp_id0\', \'exp_id1\', \'exp_id2\'])).toEqual(null);\n      }\n    );\n\n    it(\'should return next exploration id for a partially completed collection\',\n      function() {\n        var collection = createLinearCollection();\n        expect(\n          CollectionLinearizerService.getNextExplorationId(\n            collection, [\'exp_id0\', \'exp_id1\'])).toEqual(\'exp_id2\');\n      }\n    );\n  });\n\n  describe(\'getCollectionNodesInPlayableOrder()\', function() {\n    it(\'should correctly return an empty list for an empty collection\',\n      function() {\n        var collection = CollectionObjectFactory.createEmptyCollection();\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual([]);\n      }\n    );\n\n    it(\'should correctly return a list for a collection with a single node\',\n      function() {\n        var collection = CollectionObjectFactory.createEmptyCollection();\n        collection.addCollectionNode(firstCollectionNode);\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual([firstCollectionNode]);\n      }\n    );\n\n    it(\'should correctly return a list for a collection with multiple nodes\',\n      function() {\n        var collection = createLinearCollection();\n        expect(\n          CollectionLinearizerService.getCollectionNodesInPlayableOrder(\n            collection)).toEqual(\n          [firstCollectionNode, secondCollectionNode, thirdCollectionNode]);\n      }\n    );\n  });\n});'

blocks = {}
debug_info = ''
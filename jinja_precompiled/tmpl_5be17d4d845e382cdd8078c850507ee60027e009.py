from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/forms/schema_editors/SchemaBasedFloatEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for a schema-based editor for floats.\n */\n\noppia.directive(\'schemaBasedFloatEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      scope: {\n        localValue: \'=\',\n        isDisabled: \'&\',\n        validators: \'&\',\n        labelForFocusTarget: \'&\',\n        onInputBlur: \'=\',\n        onInputFocus: \'=\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/forms/schema_editors/\' +\n        \'schema_based_float_editor_directive.html\'),\n      restrict: \'E\',\n      controller: [\n        \'$scope\', \'$filter\', \'$timeout\', \'FocusManagerService\',\n        function($scope, $filter, $timeout, FocusManagerService) {\n          $scope.hasLoaded = false;\n          $scope.isUserCurrentlyTyping = false;\n          $scope.hasFocusedAtLeastOnce = false;\n\n          $scope.labelForErrorFocusTarget =\n            FocusManagerService.generateFocusLabel();\n\n          $scope.validate = function(localValue) {\n            return $filter(\'isFloat\')(localValue) !== undefined;\n          };\n\n          $scope.onFocus = function() {\n            $scope.hasFocusedAtLeastOnce = true;\n            if ($scope.onInputFocus) {\n              $scope.onInputFocus();\n            }\n          };\n\n          $scope.onBlur = function() {\n            $scope.isUserCurrentlyTyping = false;\n            if ($scope.onInputBlur) {\n              $scope.onInputBlur();\n            }\n          };\n\n          // TODO(sll): Move these to ng-messages when we move to Angular 1.3.\n          $scope.getMinValue = function() {\n            for (var i = 0; i < $scope.validators().length; i++) {\n              if ($scope.validators()[i].id === \'is_at_least\') {\n                return $scope.validators()[i].min_value;\n              }\n            }\n          };\n\n          $scope.getMaxValue = function() {\n            for (var i = 0; i < $scope.validators().length; i++) {\n              if ($scope.validators()[i].id === \'is_at_most\') {\n                return $scope.validators()[i].max_value;\n              }\n            }\n          };\n\n          $scope.onKeypress = function(evt) {\n            if (evt.keyCode === 13) {\n              if (\n                Object.keys($scope.floatForm.floatValue.$error).length !== 0) {\n                $scope.isUserCurrentlyTyping = false;\n                FocusManagerService.setFocus($scope.labelForErrorFocusTarget);\n              } else {\n                $scope.$emit(\'submittedSchemaBasedFloatForm\');\n              }\n            } else {\n              $scope.isUserCurrentlyTyping = true;\n            }\n          };\n\n          if ($scope.localValue === undefined) {\n            $scope.localValue = 0.0;\n          }\n\n          // This prevents the red \'invalid input\' warning message from flashing\n          // at the outset.\n          $timeout(function() {\n            $scope.hasLoaded = true;\n          });\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
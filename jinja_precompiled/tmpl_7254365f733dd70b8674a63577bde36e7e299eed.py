from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/ProgressNavDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for navigation in the conversation skin.\n */\n\noppia.directive(\'progressNav\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        onSubmit: \'&\',\n        onClickContinueButton: \'&\',\n        isLearnAgainButton: \'&\',\n        isSubmitButtonShown: \'&submitButtonIsShown\',\n        isSubmitButtonDisabled: \'&submitButtonIsDisabled\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/exploration_player/progress_nav_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'PlayerPositionService\', \'UrlService\',\n        \'PlayerTranscriptService\', \'ExplorationEngineService\',\n        \'WindowDimensionsService\', \'TWO_CARD_THRESHOLD_PX\',\n        \'CONTINUE_BUTTON_FOCUS_LABEL\', \'INTERACTION_SPECS\',\n        \'ExplorationPlayerStateService\',\n        function($scope, $rootScope, PlayerPositionService, UrlService,\n            PlayerTranscriptService, ExplorationEngineService,\n            WindowDimensionsService, TWO_CARD_THRESHOLD_PX,\n            CONTINUE_BUTTON_FOCUS_LABEL, INTERACTION_SPECS,\n            ExplorationPlayerStateService) {\n          $scope.CONTINUE_BUTTON_FOCUS_LABEL = CONTINUE_BUTTON_FOCUS_LABEL;\n          $scope.isIframed = UrlService.isIframed();\n          var transcriptLength = 0;\n          var interactionIsInline = true;\n          var interactionHasNavSubmitButton = false;\n          var updateActiveCardInfo = function() {\n            transcriptLength = PlayerTranscriptService.getNumCards();\n            $scope.activeCardIndex = PlayerPositionService.getActiveCardIndex();\n            $scope.activeCard = PlayerTranscriptService.getCard(\n              $scope.activeCardIndex);\n            $scope.hasPrevious = $scope.activeCardIndex > 0;\n            $scope.hasNext = !PlayerTranscriptService.isLastCard(\n              $scope.activeCardIndex);\n            $scope.conceptCardIsBeingShown = (\n              $scope.activeCard.getStateName() === null &&\n              !ExplorationPlayerStateService.isInPretestMode());\n            if ($scope.hasNext) {\n              var interaction = $scope.activeCard.getInteraction();\n            } else {\n              var interaction =\n                ExplorationPlayerStateService.getCurrentInteraction();\n            }\n            if (!$scope.conceptCardIsBeingShown) {\n              interactionIsInline = (\n                ExplorationPlayerStateService.isInteractionInline());\n              $scope.interactionCustomizationArgs =\n                interaction.customizationArgs;\n              $scope.interactionId = interaction.id;\n              interactionHasNavSubmitButton = (\n                Boolean(interaction.id) &&\n                INTERACTION_SPECS[interaction.id].show_generic_submit_button);\n            }\n\n            $scope.helpCardHasContinueButton = false;\n          };\n\n          $scope.$watch(function() {\n            return PlayerPositionService.getActiveCardIndex();\n          }, updateActiveCardInfo);\n\n          $scope.$on(\'helpCardAvailable\', function(evt, helpCard) {\n            $scope.helpCardHasContinueButton = helpCard.hasContinueButton;\n          });\n\n          $scope.changeCard = function(index) {\n            if (index >= 0 && index < transcriptLength) {\n              PlayerPositionService.recordNavigationButtonClick();\n              PlayerPositionService.setActiveCardIndex(index);\n              $rootScope.$broadcast(\'updateActiveStateIfInEditor\',\n                PlayerPositionService.getCurrentStateName());\n            } else {\n              throw Error(\'Target card index out of bounds.\');\n            }\n          };\n\n          // Returns whether the screen is wide enough to fit two\n          // cards (e.g., the tutor and supplemental cards) side-by-side.\n          $scope.canWindowShowTwoCards = function() {\n            return WindowDimensionsService.getWidth() > TWO_CARD_THRESHOLD_PX;\n          };\n\n          $scope.shouldGenericSubmitButtonBeShown = function() {\n            if ($scope.interactionId === \'ItemSelectionInput\' &&\n                $scope.interactionCustomizationArgs\n                  .maxAllowableSelectionCount.value > 1) {\n              return true;\n            }\n\n            return (interactionHasNavSubmitButton && (\n              interactionIsInline ||\n              !$scope.canWindowShowTwoCards()\n            ));\n          };\n\n          $scope.shouldContinueButtonBeShown = function() {\n            if ($scope.conceptCardIsBeingShown) {\n              return true;\n            }\n            return Boolean(\n              interactionIsInline &&\n              ($scope.activeCard.getDestStateName() ||\n              $scope.activeCard.getLeadsToConceptCard()) &&\n              $scope.activeCard.getLastOppiaResponse());\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
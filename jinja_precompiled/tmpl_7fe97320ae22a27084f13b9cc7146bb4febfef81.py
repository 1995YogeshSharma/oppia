from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/feedback_thread/FeedbackThreadSummaryObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for FeedbackThreadSummaryObjectFactory.\n */\n\ndescribe(\'Feedback thread object factory\', function() {\n  var FeedbackThreadSummaryObjectFactory = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    FeedbackThreadSummaryObjectFactory = $injector.get(\n      \'FeedbackThreadSummaryObjectFactory\');\n  }));\n\n  it(\'should update the summary of the thread on addition of a \' +\n     \' message\', function() {\n    var feedbackThreadSummary = FeedbackThreadSummaryObjectFactory.create(\n      \'open\', \'Test user 1\', new Date(), \'last message\', 2, false, false,\n      \'Test user 2\', \'Test user 2\', \'Test exploration name\', \'0\', \'thread_id\');\n\n    feedbackThreadSummary.appendNewMessage(\n      \'Looks good!\', \'Test user 3\');\n    expect(feedbackThreadSummary.authorLastMessage).toEqual(\'Test user 3\');\n    expect(feedbackThreadSummary.lastMessageText).toEqual(\'Looks good!\');\n    expect(feedbackThreadSummary.totalMessageCount).toEqual(3);\n  });\n\n  it(\'should fetch the feedback thread domain object from the backend \' +\n     \'summary dict\', function() {\n    var threadSummary = {\n      status: \'open\',\n      original_author_id: \'Test user 1\',\n      last_updated: 1000,\n      last_message_text: \'last message\',\n      total_message_count: 2,\n      last_message_read: false,\n      second_last_message_read: true,\n      author_last_message: \'Test user 2\',\n      author_second_last_message: \'Test user 1\',\n      exploration_title: \'Sample exploration 1\',\n      exploration_id: \'0\',\n      thread_id: \'thread_id_1\'\n    };\n\n    var feedbackThreadSummary = (\n      FeedbackThreadSummaryObjectFactory.createFromBackendDict(threadSummary));\n\n    expect(feedbackThreadSummary.explorationTitle).toEqual(\n      \'Sample exploration 1\');\n    expect(feedbackThreadSummary.originalAuthorId).toEqual(\n      \'Test user 1\');\n    expect(feedbackThreadSummary.lastMessageText).toEqual(\n      \'last message\');\n    expect(feedbackThreadSummary.totalMessageCount).toEqual(2);\n  });\n});'

blocks = {}
debug_info = ''
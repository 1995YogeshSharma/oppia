from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/admin/AdminRouterServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tests for AdminRouterService.\n */\n\ndescribe(\'Admin router service\', function() {\n  var AdminRouterService = null;\n\n  beforeEach(module(\'oppia\'));\n\n  beforeEach(inject(function($injector) {\n    AdminRouterService = $injector.get(\'AdminRouterService\');\n  }));\n\n  it(\'should initially be routed to the activities tab\', function() {\n    expect(AdminRouterService.isActivitiesTabOpen()).toBe(true);\n    expect(AdminRouterService.isConfigTabOpen()).toBe(false);\n    expect(AdminRouterService.isRolesTabOpen()).toBe(false);\n    expect(AdminRouterService.isJobsTabOpen()).toBe(false);\n    expect(AdminRouterService.isMiscTabOpen()).toBe(false);\n  });\n\n  it(\'should be able to navigate to the activities tab\', function() {\n    // Navigate away from the activities tab (relying on other tests to verify\n    // this works correctly) in order to navigate back.\n    AdminRouterService.showTab(\'#jobs\');\n\n    expect(AdminRouterService.isActivitiesTabOpen()).toBe(false);\n    AdminRouterService.showTab(\'#activities\');\n    expect(AdminRouterService.isActivitiesTabOpen()).toBe(true);\n    expect(AdminRouterService.isConfigTabOpen()).toBe(false);\n    expect(AdminRouterService.isRolesTabOpen()).toBe(false);\n    expect(AdminRouterService.isJobsTabOpen()).toBe(false);\n    expect(AdminRouterService.isMiscTabOpen()).toBe(false);\n  });\n\n  it(\'should be able to navigate to the config tab\', function() {\n    expect(AdminRouterService.isConfigTabOpen()).toBe(false);\n    AdminRouterService.showTab(\'#config\');\n    expect(AdminRouterService.isActivitiesTabOpen()).toBe(false);\n    expect(AdminRouterService.isConfigTabOpen()).toBe(true);\n    expect(AdminRouterService.isRolesTabOpen()).toBe(false);\n    expect(AdminRouterService.isJobsTabOpen()).toBe(false);\n    expect(AdminRouterService.isMiscTabOpen()).toBe(false);\n  });\n\n  it(\'should be able to navigate to the roles tab\', function() {\n    expect(AdminRouterService.isRolesTabOpen()).toBe(false);\n    AdminRouterService.showTab(\'#roles\');\n    expect(AdminRouterService.isActivitiesTabOpen()).toBe(false);\n    expect(AdminRouterService.isConfigTabOpen()).toBe(false);\n    expect(AdminRouterService.isRolesTabOpen()).toBe(true);\n    expect(AdminRouterService.isJobsTabOpen()).toBe(false);\n    expect(AdminRouterService.isMiscTabOpen()).toBe(false);\n  });\n\n  it(\'should be able to navigate to the jobs tab\', function() {\n    expect(AdminRouterService.isJobsTabOpen()).toBe(false);\n    AdminRouterService.showTab(\'#jobs\');\n    expect(AdminRouterService.isActivitiesTabOpen()).toBe(false);\n    expect(AdminRouterService.isConfigTabOpen()).toBe(false);\n    expect(AdminRouterService.isRolesTabOpen()).toBe(false);\n    expect(AdminRouterService.isJobsTabOpen()).toBe(true);\n    expect(AdminRouterService.isMiscTabOpen()).toBe(false);\n  });\n\n  it(\'should be able to navigate to the misc tab\', function() {\n    expect(AdminRouterService.isMiscTabOpen()).toBe(false);\n    AdminRouterService.showTab(\'#misc\');\n    expect(AdminRouterService.isActivitiesTabOpen()).toBe(false);\n    expect(AdminRouterService.isConfigTabOpen()).toBe(false);\n    expect(AdminRouterService.isRolesTabOpen()).toBe(false);\n    expect(AdminRouterService.isJobsTabOpen()).toBe(false);\n    expect(AdminRouterService.isMiscTabOpen()).toBe(true);\n  });\n\n  it(\'should be able to navigate to the same tab twice\', function() {\n    expect(AdminRouterService.isJobsTabOpen()).toBe(false);\n\n    AdminRouterService.showTab(\'#jobs\');\n    expect(AdminRouterService.isJobsTabOpen()).toBe(true);\n\n    AdminRouterService.showTab(\'#jobs\');\n    expect(AdminRouterService.isActivitiesTabOpen()).toBe(false);\n    expect(AdminRouterService.isConfigTabOpen()).toBe(false);\n    expect(AdminRouterService.isRolesTabOpen()).toBe(false);\n    expect(AdminRouterService.isJobsTabOpen()).toBe(true);\n    expect(AdminRouterService.isMiscTabOpen()).toBe(false);\n  });\n\n  it(\'should stay on the current tab if an invalid tab is shown\', function() {\n    AdminRouterService.showTab(\'#jobs\');\n\n    expect(AdminRouterService.isJobsTabOpen()).toBe(true);\n    AdminRouterService.showTab(\'#unknown\');\n    expect(AdminRouterService.isJobsTabOpen()).toBe(true);\n  });\n});'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/story/EditableStoryBackendApiService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service to send changes to a story to the backend.\n */\noppia.constant(\n  \'EDITABLE_STORY_DATA_URL_TEMPLATE\',\n  \'/story_editor_handler/data/<topic_id>/<story_id>\');\n\noppia.factory(\'EditableStoryBackendApiService\', [\n  \'$http\', \'$q\', \'EDITABLE_STORY_DATA_URL_TEMPLATE\',\n  \'UrlInterpolationService\',\n  function($http, $q, EDITABLE_STORY_DATA_URL_TEMPLATE,\n      UrlInterpolationService) {\n    var _fetchStory = function(\n        topicId, storyId, successCallback, errorCallback) {\n      var storyDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_STORY_DATA_URL_TEMPLATE, {\n          topic_id: topicId,\n          story_id: storyId\n        });\n\n      $http.get(storyDataUrl).then(function(response) {\n        var story = angular.copy(response.data.story);\n        if (successCallback) {\n          successCallback(story);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _updateStory = function(\n        topicId, storyId, storyVersion, commitMessage, changeList,\n        successCallback, errorCallback) {\n      var editableStoryDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_STORY_DATA_URL_TEMPLATE, {\n          topic_id: topicId,\n          story_id: storyId\n        });\n\n      var putData = {\n        version: storyVersion,\n        commit_message: commitMessage,\n        change_dicts: changeList\n      };\n      $http.put(editableStoryDataUrl, putData).then(function(response) {\n        // The returned data is an updated story dict.\n        var story = angular.copy(response.data.story);\n\n        if (successCallback) {\n          successCallback(story);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    var _deleteStory = function(\n        topicId, storyId, successCallback, errorCallback) {\n      var storyDataUrl = UrlInterpolationService.interpolateUrl(\n        EDITABLE_STORY_DATA_URL_TEMPLATE, {\n          topic_id: topicId,\n          story_id: storyId\n        });\n      $http[\'delete\'](storyDataUrl).then(function(response) {\n        if (successCallback) {\n          successCallback(response.status);\n        }\n      }, function(errorResponse) {\n        if (errorCallback) {\n          errorCallback(errorResponse.data);\n        }\n      });\n    };\n\n    return {\n      fetchStory: function(topicId, storyId) {\n        return $q(function(resolve, reject) {\n          _fetchStory(topicId, storyId, resolve, reject);\n        });\n      },\n\n      /**\n       * Updates a story in the backend with the provided story ID.\n       * The changes only apply to the story of the given version and the\n       * request to update the story will fail if the provided story\n       * version is older than the current version stored in the backend. Both\n       * the changes and the message to associate with those changes are used\n       * to commit a change to the story. The new story is passed to\n       * the success callback, if one is provided to the returned promise\n       * object. Errors are passed to the error callback, if one is provided.\n       */\n      updateStory: function(\n          topicId, storyId, storyVersion, commitMessage, changeList) {\n        return $q(function(resolve, reject) {\n          _updateStory(\n            topicId, storyId, storyVersion, commitMessage, changeList,\n            resolve, reject);\n        });\n      },\n\n      deleteStory: function(topicId, storyId) {\n        return $q(function(resolve, reject) {\n          _deleteStory(topicId, storyId, resolve, reject);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
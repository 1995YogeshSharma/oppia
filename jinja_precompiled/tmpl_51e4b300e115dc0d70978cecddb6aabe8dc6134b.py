from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/contextual/UrlService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for manipulating the page URL. Also allows\n * functions on $window to be mocked in unit tests.\n */\n\noppia.factory(\'UrlService\', [\'$window\', function($window) {\n  return {\n    // This function is for testing purposes (to mock $window.location)\n    getCurrentLocation: function() {\n      return $window.location;\n    },\n    getCurrentQueryString: function() {\n      return this.getCurrentLocation().search;\n    },\n    /* As params[key] is overwritten, if query string has multiple fieldValues\n       for same fieldName, use getQueryFieldValuesAsList(fieldName) to get it\n       in array form. */\n    getUrlParams: function() {\n      var params = {};\n      var parts = this.getCurrentQueryString().replace(\n        /[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value) {\n          params[decodeURIComponent(key)] = decodeURIComponent(value);\n        }\n      );\n      return params;\n    },\n    isIframed: function() {\n      var pathname = this.getPathname();\n      var urlParts = pathname.split(\'/\');\n      return urlParts[1] === \'embed\';\n    },\n    getPathname: function() {\n      return this.getCurrentLocation().pathname;\n    },\n    // Topic id should be correctly returned from topic editor as well as\n    // story editor, since both have topic id in their url.\n    getTopicIdFromUrl: function() {\n      var pathname = this.getPathname();\n      if (pathname.match(/\\/(story|topic)_editor\\/(\\w|-){12}\\b/g)) {\n        return pathname.split(\'/\')[2];\n      }\n      throw Error(\'Invalid topic id url\');\n    },\n    getStoryIdFromUrl: function() {\n      var pathname = this.getPathname();\n      if (pathname.match(/\\/story_editor(\\/(\\w|-){12}\\b){2}/g)) {\n        return pathname.split(\'/\')[3];\n      }\n      throw Error(\'Invalid story id url\');\n    },\n    getStoryIdInPlayer: function() {\n      var query = this.getCurrentQueryString();\n      if (query.match(/\\?story_id=((\\w|-){12}\\b)/g)) {\n        return query.split(\'=\')[1];\n      }\n      return null;\n    },\n    getSkillIdFromUrl: function() {\n      var pathname = this.getPathname();\n      var skillId = pathname.split(\'/\')[2];\n      if (skillId.length !== 12) {\n        throw Error(\'Invalid Skill Id\');\n      }\n      return skillId;\n    },\n    getQueryFieldValuesAsList: function(fieldName) {\n      var fieldValues = [];\n      if (this.getCurrentQueryString().indexOf(\'?\') > -1) {\n        // Each queryItem return one field-value pair in the url.\n        var queryItems = this.getCurrentQueryString().slice(\n          this.getCurrentQueryString().indexOf(\'?\') + 1).split(\'&\');\n        for (var i = 0; i < queryItems.length; i++) {\n          var currentFieldName = decodeURIComponent(\n            queryItems[i].split(\'=\')[0]);\n          var currentFieldValue = decodeURIComponent(\n            queryItems[i].split(\'=\')[1]);\n          if (currentFieldName === fieldName) {\n            fieldValues.push(currentFieldValue);\n          }\n        }\n      }\n      return fieldValues;\n    },\n    addField: function(url, fieldName, fieldValue) {\n      var encodedFieldValue = encodeURIComponent(fieldValue);\n      var encodedFieldName = encodeURIComponent(fieldName);\n      return url + (url.indexOf(\'?\') !== -1 ? \'&\' : \'?\') + encodedFieldName +\n        \'=\' + encodedFieldValue;\n    },\n    getHash: function() {\n      return this.getCurrentLocation().hash;\n    }\n  };\n}]);'

blocks = {}
debug_info = ''
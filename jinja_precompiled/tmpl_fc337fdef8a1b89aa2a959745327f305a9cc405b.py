from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'domain/utilities/StopwatchObjectFactorySpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for StopwatchObjectFactory.\n */\n\ndescribe(\'Stopwatch object factory\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'stopwatch object factory\', function() {\n    var StopwatchObjectFactory = null;\n    var errorLog = [];\n\n    beforeEach(inject(function($injector) {\n      StopwatchObjectFactory = $injector.get(\'StopwatchObjectFactory\');\n      spyOn($injector.get(\'$log\'), \'error\').and.callFake(\n        function(errorMessage) {\n          errorLog.push(errorMessage);\n        }\n      );\n    }));\n\n    var changeCurrentTime = function(stopwatch, desiredCurrentTime) {\n      stopwatch._getCurrentTime = function() {\n        return desiredCurrentTime;\n      };\n    };\n\n    it(\'should correctly record time intervals\', function() {\n      var stopwatch = StopwatchObjectFactory.create();\n      changeCurrentTime(stopwatch, 0);\n      stopwatch.reset();\n      changeCurrentTime(stopwatch, 500);\n      expect(stopwatch.getTimeInSecs()).toEqual(0.5);\n    });\n\n    it(\'should not reset stopwatch when current time is retrieved\', function() {\n      var stopwatch = StopwatchObjectFactory.create();\n      changeCurrentTime(stopwatch, 0);\n      stopwatch.reset();\n      changeCurrentTime(stopwatch, 500);\n      expect(stopwatch.getTimeInSecs()).toEqual(0.5);\n      expect(stopwatch.getTimeInSecs()).toEqual(0.5);\n    });\n\n    it(\'should correctly reset the stopwatch\', function() {\n      var stopwatch = StopwatchObjectFactory.create();\n      changeCurrentTime(stopwatch, 0);\n      stopwatch.reset();\n      changeCurrentTime(stopwatch, 500);\n      expect(stopwatch.getTimeInSecs()).toEqual(0.5);\n      stopwatch.reset();\n      expect(stopwatch.getTimeInSecs()).toEqual(0);\n      changeCurrentTime(stopwatch, 800);\n      expect(stopwatch.getTimeInSecs()).toEqual(0.3);\n    });\n\n    it(\'should error if getTimeInSecs() is called before reset()\', function() {\n      var stopwatch = StopwatchObjectFactory.create();\n      changeCurrentTime(stopwatch, 29);\n      expect(stopwatch.getTimeInSecs()).toBeNull();\n      expect(errorLog).toEqual([\n        \'Tried to retrieve the elapsed time, but no start time was set.\']);\n    });\n\n    it(\'should instantiate independent stopwatches\', function() {\n      var stopwatch1 = StopwatchObjectFactory.create();\n      var stopwatch2 = StopwatchObjectFactory.create();\n\n      changeCurrentTime(stopwatch1, 0);\n      changeCurrentTime(stopwatch2, 0);\n      stopwatch1.reset();\n\n      changeCurrentTime(stopwatch1, 50);\n      changeCurrentTime(stopwatch2, 50);\n      stopwatch2.reset();\n\n      changeCurrentTime(stopwatch1, 100);\n      changeCurrentTime(stopwatch2, 100);\n      expect(stopwatch1.getTimeInSecs()).toEqual(0.1);\n      expect(stopwatch2.getTimeInSecs()).toEqual(0.05);\n    });\n  });\n});'

blocks = {}
debug_info = ''
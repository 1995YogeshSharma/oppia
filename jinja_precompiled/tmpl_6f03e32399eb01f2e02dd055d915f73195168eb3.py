from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'components/VersionDiffVisualizationDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the visualization of the diff between two\n *   versions of an exploration.\n */\n\noppia.directive(\'versionDiffVisualization\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        // An object with the following properties:\n        // - nodes: an object whose keys are state IDs and whoe value is an\n        //     object with the following keys:\n        //     - \'newestStateName\': the latest name of the state\n        //     - \'originalStateName\': the first encountered name for the state\n        //     - \'stateProperty\': \'changed\', \'unchanged\', \'added\' or \'deleted\'\n        // - links: a list of objects representing links in the diff graph. Each\n        //     object represents one link, and has keys:\n        //     - \'source\': source state of link\n        //     - \'target\': target state of link\n        //     - \'linkProperty\': \'added\', \'deleted\' or \'unchanged\'\n        // - v1InitStateId: the id of the initial state in the earlier version\n        // - v2InitStateId: the id of the initial state in the later version\n        // - finalStateIds: whether a state is terminal in either the earlier or\n        //     later version\n        // - v1States: the states dict for the earlier version of the\n        // exploration\n        // - v2States: the states dict for the later version of the exploration\n        getDiffData: \'&diffData\',\n        // The header for the pane of the state comparison modal corresponding\n        // to the earlier version of the exploration.\n        getEarlierVersionHeader: \'&earlierVersionHeader\',\n        // The header for the pane of the state comparison modal corresponding\n        // to the later version of the exploration.\n        getLaterVersionHeader: \'&laterVersionHeader\',\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/components/\' +\n        \'version_diff_visualization_directive.html\'),\n      controller: [\'$scope\', \'$uibModal\', function($scope, $uibModal) {\n        // Constants for color of nodes in diff graph\n        var COLOR_ADDED = \'#4EA24E\';\n        var COLOR_DELETED = \'#DC143C\';\n        var COLOR_CHANGED = \'#1E90FF\';\n        var COLOR_UNCHANGED = \'beige\';\n        var COLOR_RENAMED_UNCHANGED = \'#FFD700\';\n\n        // Constants for names in legend\n        var NODE_TYPE_ADDED = \'Added\';\n        var NODE_TYPE_DELETED = \'Deleted\';\n        var NODE_TYPE_CHANGED = \'Changed\';\n        var NODE_TYPE_CHANGED_RENAMED = \'Changed/renamed\';\n        var NODE_TYPE_RENAMED = \'Renamed\';\n        var NODE_TYPE_UNCHANGED = \'Unchanged\';\n\n        var STATE_PROPERTY_ADDED = \'added\';\n        var STATE_PROPERTY_DELETED = \'deleted\';\n        var STATE_PROPERTY_CHANGED = \'changed\';\n        var STATE_PROPERTY_UNCHANGED = \'unchanged\';\n\n        // Object whose keys are legend node names and whose values are\n        // \'true\' or false depending on whether the state property is used in\n        // the diff graph. (Will be used to generate legend)\n        var _stateTypeUsed = {};\n        _stateTypeUsed[NODE_TYPE_ADDED] = false;\n        _stateTypeUsed[NODE_TYPE_DELETED] = false;\n        _stateTypeUsed[NODE_TYPE_CHANGED] = false;\n        _stateTypeUsed[NODE_TYPE_UNCHANGED] = false;\n        _stateTypeUsed[NODE_TYPE_RENAMED] = false;\n        _stateTypeUsed[NODE_TYPE_CHANGED_RENAMED] = false;\n\n        $scope.LEGEND_GRAPH_COLORS = {};\n        $scope.LEGEND_GRAPH_COLORS[NODE_TYPE_ADDED] = COLOR_ADDED;\n        $scope.LEGEND_GRAPH_COLORS[NODE_TYPE_DELETED] = COLOR_DELETED;\n        $scope.LEGEND_GRAPH_COLORS[NODE_TYPE_CHANGED] = COLOR_CHANGED;\n        $scope.LEGEND_GRAPH_COLORS[NODE_TYPE_UNCHANGED] = COLOR_UNCHANGED;\n        $scope.LEGEND_GRAPH_COLORS[NODE_TYPE_RENAMED] = COLOR_RENAMED_UNCHANGED;\n        $scope.LEGEND_GRAPH_COLORS[NODE_TYPE_CHANGED_RENAMED] = COLOR_CHANGED;\n\n        $scope.LEGEND_GRAPH_SECONDARY_LABELS = {};\n        $scope.LEGEND_GRAPH_SECONDARY_LABELS[NODE_TYPE_CHANGED_RENAMED] = (\n          \'(was: Old name)\');\n        $scope.LEGEND_GRAPH_SECONDARY_LABELS[NODE_TYPE_RENAMED] = (\n          \'(was: Old name)\');\n        $scope.LEGEND_GRAPH_LINK_PROPERTY_MAPPING = {\n          hidden: \'stroke: none; marker-end: none;\'\n        };\n        $scope.DIFF_GRAPH_LINK_PROPERTY_MAPPING = {\n          added: (\n            \'stroke: #1F7D1F; stroke-opacity: 0.8; \' +\n            \'marker-end: url(#arrowhead-green)\'),\n          deleted: (\n            \'stroke: #B22222; stroke-opacity: 0.8; \' +\n            \'marker-end: url(#arrowhead-red)\')\n        };\n        var diffGraphNodes = {};\n        $scope.diffGraphSecondaryLabels = {};\n        $scope.diffGraphNodeColors = {};\n\n        nodesData = $scope.getDiffData().nodes;\n        for (var nodeId in nodesData) {\n          var nodeStateProperty = nodesData[nodeId].stateProperty;\n          if (nodeStateProperty === STATE_PROPERTY_ADDED) {\n            diffGraphNodes[nodeId] = nodesData[nodeId].newestStateName;\n            $scope.diffGraphNodeColors[nodeId] = COLOR_ADDED;\n            _stateTypeUsed[NODE_TYPE_ADDED] = true;\n          } else if (nodeStateProperty === STATE_PROPERTY_DELETED) {\n            diffGraphNodes[nodeId] = nodesData[nodeId].originalStateName;\n            $scope.diffGraphNodeColors[nodeId] = COLOR_DELETED;\n            _stateTypeUsed[NODE_TYPE_DELETED] = true;\n          } else if (nodeStateProperty === STATE_PROPERTY_CHANGED) {\n            diffGraphNodes[nodeId] = nodesData[nodeId].originalStateName;\n            $scope.diffGraphNodeColors[nodeId] = COLOR_CHANGED;\n            if (nodesData[nodeId].originalStateName !==\n                nodesData[nodeId].newestStateName) {\n              $scope.diffGraphSecondaryLabels[nodeId] = \'(was: \' +\n                nodesData[nodeId].originalStateName + \')\';\n              diffGraphNodes[nodeId] = nodesData[nodeId].newestStateName;\n              _stateTypeUsed[NODE_TYPE_CHANGED_RENAMED] = true;\n            } else {\n              _stateTypeUsed[NODE_TYPE_CHANGED] = true;\n            }\n          } else if (nodeStateProperty === STATE_PROPERTY_UNCHANGED) {\n            diffGraphNodes[nodeId] = nodesData[nodeId].originalStateName;\n            $scope.diffGraphNodeColors[nodeId] = COLOR_UNCHANGED;\n            if (nodesData[nodeId].originalStateName !==\n                nodesData[nodeId].newestStateName) {\n              $scope.diffGraphSecondaryLabels[nodeId] = \'(was: \' +\n                nodesData[nodeId].originalStateName + \')\';\n              diffGraphNodes[nodeId] = nodesData[nodeId].newestStateName;\n              $scope.diffGraphNodeColors[nodeId] = COLOR_RENAMED_UNCHANGED;\n              _stateTypeUsed[NODE_TYPE_RENAMED] = true;\n            } else {\n              _stateTypeUsed[NODE_TYPE_UNCHANGED] = true;\n            }\n          } else {\n            throw new Error(\'Invalid state property.\');\n          }\n        }\n\n        $scope.v1InitStateId = $scope.getDiffData().v1InitStateId;\n\n        $scope.diffGraphData = {\n          nodes: diffGraphNodes,\n          links: $scope.getDiffData().links,\n          initStateId: $scope.getDiffData().v2InitStateId,\n          finalStateIds: $scope.getDiffData().finalStateIds\n        };\n\n        // Generate the legend graph\n        $scope.legendGraph = {\n          nodes: {},\n          links: []\n        };\n        var _lastUsedStateType = null;\n        for (var stateProperty in _stateTypeUsed) {\n          if (_stateTypeUsed[stateProperty]) {\n            $scope.legendGraph.nodes[stateProperty] = stateProperty;\n            if (_lastUsedStateType) {\n              $scope.legendGraph.links.push({\n                source: _lastUsedStateType,\n                target: stateProperty,\n                linkProperty: \'hidden\'\n              });\n            }\n            _lastUsedStateType = stateProperty;\n            if (!$scope.legendGraph.hasOwnProperty(\'initStateId\')) {\n              $scope.legendGraph.initStateId = stateProperty;\n            }\n          }\n        }\n        $scope.legendGraph.finalStateIds = [_lastUsedStateType];\n        // Opens the modal showing the history diff for a given state.\n        // stateId is the unique ID assigned to a state during the\n        // calculation of the state graph.\n        $scope.onClickStateInDiffGraph = function(stateId) {\n          var oldStateName = undefined;\n          if (nodesData[stateId].newestStateName !==\n              nodesData[stateId].originalStateName) {\n            oldStateName = nodesData[stateId].originalStateName;\n          }\n          $scope.showStateDiffModal(nodesData[stateId].newestStateName,\n            oldStateName, nodesData[stateId].stateProperty);\n        };\n\n        // Shows a modal comparing changes on a state between 2 versions.\n        //\n        // Arguments:\n        // - stateName is the name of the state in the newer version.\n        // - oldStateName is undefined if the name of the state is unchanged\n        //     between the 2 versions, or the name of the state in the older\n        //     version if the state name is changed.\n        // - stateProperty is whether the state is added, changed, unchanged or\n        //     deleted.\n        $scope.showStateDiffModal = function(\n            newStateName, oldStateName, stateProperty) {\n          $uibModal.open({\n            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n              \'/pages/exploration_editor/\' +\n              \'state_diff_modal_directive.html\'),\n            backdrop: true,\n            windowClass: \'state-diff-modal\',\n            resolve: {\n              newStateName: function() {\n                return newStateName;\n              },\n              oldStateName: function() {\n                return oldStateName;\n              },\n              newState: function() {\n                if (stateProperty !== STATE_PROPERTY_DELETED &&\n                    $scope.getDiffData().v2States.hasOwnProperty(\n                      newStateName)) {\n                  return $scope.getDiffData().v2States[newStateName];\n                } else {\n                  return null;\n                }\n              },\n              oldState: function() {\n                var stateNameToRetrieve = oldStateName || newStateName;\n                if (stateProperty !== STATE_PROPERTY_ADDED &&\n                    $scope.getDiffData().v1States.hasOwnProperty(\n                      stateNameToRetrieve)) {\n                  return $scope.getDiffData().v1States[stateNameToRetrieve];\n                } else {\n                  return null;\n                }\n              },\n              headers: function() {\n                return {\n                  leftPane: $scope.getLaterVersionHeader(),\n                  rightPane: $scope.getEarlierVersionHeader()\n                };\n              }\n            },\n            controller: [\n              \'$scope\', \'$http\', \'$uibModalInstance\', \'$timeout\',\n              \'newStateName\', \'oldStateName\', \'newState\', \'oldState\',\n              \'headers\', \'ContextService\',\n              \'UrlInterpolationService\',\n              function(\n                  $scope, $http, $uibModalInstance, $timeout,\n                  newStateName, oldStateName, newState, oldState,\n                  headers, ContextService,\n                  UrlInterpolationService) {\n                var STATE_YAML_URL = UrlInterpolationService.interpolateUrl(\n                  \'/createhandler/state_yaml/<exploration_id>\', {\n                    exploration_id: (\n                      ContextService.getExplorationId())\n                  });\n\n                $scope.headers = headers;\n                $scope.newStateName = newStateName;\n                $scope.oldStateName = oldStateName;\n                /*\n                 * $scope.yamlStrs is an object with keys \'earlierVersion\' and\n                 * \'laterVersion\', whose values are the YAML representations of\n                 * the compared versions.\n                 */\n                $scope.yamlStrs = {};\n\n                if (newState) {\n                  $http.post(STATE_YAML_URL, {\n                    state_dict: newState.toBackendDict(),\n                    width: 50\n                  }).then(function(response) {\n                    $scope.yamlStrs.leftPane = response.data.yaml;\n                  });\n                } else {\n                  // Note: the timeout is needed or the string will be sent\n                  // before codemirror has fully loaded and will not be\n                  // displayed. This causes issues with the e2e tests.\n                  $timeout(function() {\n                    $scope.yamlStrs.leftPane = \'\';\n                  }, 200);\n                }\n\n                if (oldState) {\n                  $http.post(STATE_YAML_URL, {\n                    state_dict: oldState.toBackendDict(),\n                    width: 50\n                  }).then(function(response) {\n                    $scope.yamlStrs.rightPane = response.data.yaml;\n                  });\n                } else {\n                  // Note: the timeout is needed or the string will be sent\n                  // before codemirror has fully loaded and will not be\n                  // displayed. This causes issues with the e2e tests.\n                  $timeout(function() {\n                    $scope.yamlStrs.rightPane = \'\';\n                  }, 200);\n                }\n\n                $scope.cancel = function() {\n                  $uibModalInstance.dismiss(\'cancel\');\n                };\n\n                // Options for the codemirror mergeview.\n                $scope.CODEMIRROR_MERGEVIEW_OPTIONS = {\n                  lineNumbers: true,\n                  readOnly: true,\n                  mode: \'yaml\',\n                  viewportMargin: 20\n                };\n              }\n            ]\n          });\n        };\n      }]\n    };\n  }]);'

blocks = {}
debug_info = ''
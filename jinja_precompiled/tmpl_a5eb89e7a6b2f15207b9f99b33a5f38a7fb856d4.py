from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/editor_tab/ExplorationGraph.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controllers for the exploration graph.\n */\n\noppia.controller(\'ExplorationGraph\', [\n  \'$scope\', \'$uibModal\', \'EditorStateService\', \'AlertsService\',\n  \'ExplorationStatesService\', \'EditabilityService\', \'RouterService\',\n  \'GraphDataService\', \'UrlInterpolationService\',\n  function(\n      $scope, $uibModal, EditorStateService, AlertsService,\n      ExplorationStatesService, EditabilityService, RouterService,\n      GraphDataService, UrlInterpolationService) {\n    $scope.getGraphData = GraphDataService.getGraphData;\n    $scope.isEditable = EditabilityService.isEditable;\n\n    // We hide the graph at the outset in order not to confuse new exploration\n    // creators.\n    $scope.isGraphShown = function() {\n      return Boolean(ExplorationStatesService.isInitialized() &&\n        ExplorationStatesService.getStateNames().length > 1);\n    };\n\n    $scope.deleteState = function(deleteStateName) {\n      ExplorationStatesService.deleteState(deleteStateName);\n    };\n\n    $scope.onClickStateInMinimap = function(stateName) {\n      RouterService.navigateToMainTab(stateName);\n    };\n\n    $scope.getActiveStateName = function() {\n      return EditorStateService.getActiveStateName();\n    };\n\n    $scope.openStateGraphModal = function() {\n      AlertsService.clearWarnings();\n\n      $uibModal.open({\n        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n          \'/pages/exploration_editor/editor_tab/\' +\n          \'exploration_graph_modal_directive.html\'),\n        backdrop: true,\n        resolve: {\n          isEditable: function() {\n            return $scope.isEditable;\n          }\n        },\n        windowClass: \'oppia-large-modal-window\',\n        controller: [\n          \'$scope\', \'$uibModalInstance\', \'EditorStateService\',\n          \'GraphDataService\', \'isEditable\',\n          function($scope, $uibModalInstance, EditorStateService,\n              GraphDataService, isEditable) {\n            $scope.currentStateName = EditorStateService.getActiveStateName();\n            $scope.graphData = GraphDataService.getGraphData();\n            $scope.isEditable = isEditable;\n\n            $scope.deleteState = function(stateName) {\n              $uibModalInstance.close({\n                action: \'delete\',\n                stateName: stateName\n              });\n            };\n\n            $scope.selectState = function(stateName) {\n              $uibModalInstance.close({\n                action: \'navigate\',\n                stateName: stateName\n              });\n            };\n\n            $scope.cancel = function() {\n              $uibModalInstance.dismiss(\'cancel\');\n              AlertsService.clearWarnings();\n            };\n          }\n        ]\n      }).result.then(function(closeDict) {\n        if (closeDict.action === \'delete\') {\n          ExplorationStatesService.deleteState(closeDict.stateName);\n        } else if (closeDict.action === \'navigate\') {\n          $scope.onClickStateInMinimap(closeDict.stateName);\n        } else {\n          console.error(\'Invalid closeDict action: \' + closeDict.action);\n        }\n      });\n    };\n  }\n]);'

blocks = {}
debug_info = ''
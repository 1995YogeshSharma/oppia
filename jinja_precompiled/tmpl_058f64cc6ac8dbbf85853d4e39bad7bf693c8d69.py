from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'services/MessengerService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Service for sending messages to a parent iframe. All outbound\n * communication with a parent iframe should pass through here. (This\n * communication should be outbound only; reverse communication should NOT\n * be attempted due to cross-domain security issues.)\n */\n\noppia.factory(\'MessengerService\', [\'$log\', \'$window\', function($log, $window) {\n  var isPositiveInteger = function(n) {\n    return (typeof n === \'number\' && n % 1 === 0 && n > 0);\n  };\n  var isBoolean = function(b) {\n    return typeof b === \'boolean\';\n  };\n\n  var SUPPORTED_HASHDICT_VERSIONS = [\n    \'0.0.0\', \'0.0.1\', \'0.0.2\', \'0.0.3\'\n  ];\n\n  MESSAGE_VALIDATORS = {\n    heightChange: function(payload) {\n      return isPositiveInteger(payload.height) && isBoolean(payload.scroll);\n    },\n    explorationLoaded: function() {\n      return true;\n    },\n    stateTransition: function(payload) {\n      return Boolean(payload.oldStateName) || Boolean(payload.newStateName);\n    },\n    explorationReset: function(payload) {\n      return Boolean(payload.stateName);\n    },\n    explorationCompleted: function() {\n      return true;\n    }\n  };\n\n  var getPayload = {\n    heightChange: function(data) {\n      return {\n        height: data.height,\n        scroll: data.scroll\n      };\n    },\n    explorationLoaded: function(data) {\n      return {\n        explorationVersion: data.explorationVersion,\n        explorationTitle: data.explorationTitle\n      };\n    },\n    stateTransition: function(data) {\n      return {\n        explorationVersion: data.explorationVersion,\n        oldStateName: data.oldStateName,\n        jsonAnswer: data.jsonAnswer,\n        newStateName: data.newStateName\n      };\n    },\n    explorationCompleted: function(data) {\n      return {\n        explorationVersion: data.explorationVersion\n      };\n    },\n    // DEPRECATED\n    explorationReset: function(data) {\n      return {\n        stateName: data\n      };\n    }\n  };\n\n  var messenger = {\n    HEIGHT_CHANGE: \'heightChange\',\n    EXPLORATION_LOADED: \'explorationLoaded\',\n    STATE_TRANSITION: \'stateTransition\',\n    EXPLORATION_RESET: \'explorationReset\',\n    EXPLORATION_COMPLETED: \'explorationCompleted\',\n    sendMessage: function(messageTitle, messageData) {\n      // TODO(sll): For the stateTransition and explorationCompleted events,\n      // we now send paramValues in the messageData. We should broadcast these\n      // to the parent page as well.\n      // TODO(sll): Delete/deprecate \'reset exploration\' from the list of\n      // events sent to a container page.\n\n      // Run each post-completion hook on exploration completion.\n      if (messageTitle === \'explorationCompleted\') {\n        for (var i = 0; i < GLOBALS.POST_COMPLETION_HOOKS.length; i++) {\n          GLOBALS.POST_COMPLETION_HOOKS[i](messageData);\n        }\n      }\n\n      // Only send a message to the parent if the oppia window is iframed and\n      // a hash is passed in.\n      var rawHash = $window.location.hash.substring(1);\n      if ($window.parent !== $window && rawHash &&\n          MESSAGE_VALIDATORS.hasOwnProperty(messageTitle)) {\n        // Protractor tests may prepend a / to this hash, which we remove:\n        var hash = (rawHash.charAt(0) === \'/\') ? rawHash.substring(1) : rawHash;\n        var hashParts = hash.split(\'&\');\n        var hashDict = {};\n        for (var i = 0; i < hashParts.length; i++) {\n          if (hashParts[i].indexOf(\'=\') === -1) {\n            $log.error(\'Invalid hash for embedding: \' + hash);\n            return;\n          }\n\n          var separatorLocation = hashParts[i].indexOf(\'=\');\n          hashDict[hashParts[i].substring(0, separatorLocation)] = (\n            hashParts[i].substring(separatorLocation + 1));\n        }\n\n        if (!hashDict.version || !hashDict.secret) {\n          $log.error(\'Invalid hash for embedding: \' + hash);\n          return;\n        }\n\n        if (SUPPORTED_HASHDICT_VERSIONS.indexOf(hashDict.version) !== -1) {\n          $log.info(\'Posting message to parent: \' + messageTitle);\n\n          var payload = getPayload[messageTitle](messageData);\n          if (!MESSAGE_VALIDATORS[messageTitle](payload)) {\n            $log.error(\'Error validating payload: \' + payload);\n            return;\n          }\n\n          $log.info(payload);\n\n          var objToSendToParent = {\n            title: messageTitle,\n            payload: payload\n          };\n          if (hashDict.version === \'0.0.0\') {\n            // Ensure backwards-compatibility.\n            objToSendToParent.sourceTagId = hashDict.tagid;\n            objToSendToParent.secret = hashDict.secret;\n          }\n\n          // The targetOrigin needs to be * because any page can iframe an\n          // exploration.\n          $window.parent.postMessage(JSON.stringify(objToSendToParent), \'*\');\n        } else {\n          $log.error(\'Unknown version for embedding: \' + hashDict.version);\n          return;\n        }\n      }\n    }\n  };\n\n  return messenger;\n}]);'

blocks = {}
debug_info = ''
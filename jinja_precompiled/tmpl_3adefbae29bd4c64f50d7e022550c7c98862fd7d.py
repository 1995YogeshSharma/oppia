from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/collection_editor/editor_tab/CollectionNodeEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for displaying and editing a collection node. This\n * directive allows creators to shift nodes to left or right\n * and also delete the collection node represented by this directive.\n */\n\noppia.directive(\'collectionNodeEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        getCollectionNode: \'&collectionNode\',\n        getLinearIndex: \'&linearIndex\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/collection_editor/editor_tab/\' +\n        \'collection_node_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'CollectionEditorStateService\', \'CollectionLinearizerService\',\n        \'CollectionUpdateService\', \'AlertsService\',\n        function(\n            $scope, CollectionEditorStateService, CollectionLinearizerService,\n            CollectionUpdateService, AlertsService) {\n          $scope.collection = CollectionEditorStateService.getCollection();\n\n          // Deletes this collection node from the frontend collection\n          // object and also updates the changelist.\n          $scope.deleteNode = function() {\n            var explorationId = $scope.getCollectionNode().getExplorationId();\n            if (!CollectionLinearizerService.removeCollectionNode(\n              $scope.collection, explorationId)) {\n              AlertsService.fatalWarning(\n                \'Internal collection editor error. Could not delete \' +\n                \'exploration by ID: \' + explorationId);\n            }\n          };\n\n          // Shifts this collection node left in the linearized list of the\n          // collection, if possible.\n          $scope.shiftNodeLeft = function() {\n            var explorationId = $scope.getCollectionNode().getExplorationId();\n            if (!CollectionLinearizerService.shiftNodeLeft(\n              $scope.collection, explorationId)) {\n              AlertsService.fatalWarning(\n                \'Internal collection editor error. Could not shift node left \' +\n                \'with ID: \' + explorationId);\n            }\n          };\n\n          // Shifts this collection node right in the linearized list of the\n          // collection, if possible.\n          $scope.shiftNodeRight = function() {\n            var explorationId = $scope.getCollectionNode().getExplorationId();\n            if (!CollectionLinearizerService.shiftNodeRight(\n              $scope.collection, explorationId)) {\n              AlertsService.fatalWarning(\n                \'Internal collection editor error. Could not shift node \' +\n                \'right with ID: \' + explorationId);\n            }\n          };\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_editor/ExplorationRightsService.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A data service that stores data\n * about the rights for this exploration.\n */\n\noppia.factory(\'ExplorationRightsService\', [\n  \'$http\', \'ExplorationDataService\', \'AlertsService\',\n  function($http, ExplorationDataService, AlertsService) {\n    return {\n      init: function(\n          ownerNames, editorNames, viewerNames, status, clonedFrom,\n          isCommunityOwned, viewableIfPrivate) {\n        this.ownerNames = ownerNames;\n        this.editorNames = editorNames;\n        this.viewerNames = viewerNames;\n        this._status = status;\n        // This is null if the exploration was not cloned from anything,\n        // otherwise it is the exploration ID of the source exploration.\n        this._clonedFrom = clonedFrom;\n        this._isCommunityOwned = isCommunityOwned;\n        this._viewableIfPrivate = viewableIfPrivate;\n      },\n      clonedFrom: function() {\n        return this._clonedFrom;\n      },\n      isPrivate: function() {\n        return this._status === GLOBALS.ACTIVITY_STATUS_PRIVATE;\n      },\n      isPublic: function() {\n        return this._status === GLOBALS.ACTIVITY_STATUS_PUBLIC;\n      },\n      isCloned: function() {\n        return Boolean(this._clonedFrom);\n      },\n      isCommunityOwned: function() {\n        return this._isCommunityOwned;\n      },\n      viewableIfPrivate: function() {\n        return this._viewableIfPrivate;\n      },\n      makeCommunityOwned: function() {\n        var that = this;\n        var requestUrl = (\n          \'/createhandler/rights/\' + ExplorationDataService.explorationId);\n\n        return $http.put(requestUrl, {\n          version: ExplorationDataService.data.version,\n          make_community_owned: true\n        }).then(function(response) {\n          var data = response.data;\n          AlertsService.clearWarnings();\n          that.init(\n            data.rights.owner_names, data.rights.editor_names,\n            data.rights.viewer_names, data.rights.status,\n            data.rights.cloned_from, data.rights.community_owned,\n            data.rights.viewable_if_private);\n        });\n      },\n      setViewability: function(viewableIfPrivate) {\n        var that = this;\n        var requestUrl = (\n          \'/createhandler/rights/\' + ExplorationDataService.explorationId);\n\n        return $http.put(requestUrl, {\n          version: ExplorationDataService.data.version,\n          viewable_if_private: viewableIfPrivate\n        }).then(function(response) {\n          var data = response.data;\n          AlertsService.clearWarnings();\n          that.init(\n            data.rights.owner_names, data.rights.editor_names,\n            data.rights.viewer_names, data.rights.status,\n            data.rights.cloned_from, data.rights.community_owned,\n            data.rights.viewable_if_private);\n        });\n      },\n      saveRoleChanges: function(newMemberUsername, newMemberRole) {\n        var that = this;\n        var requestUrl = (\n          \'/createhandler/rights/\' + ExplorationDataService.explorationId);\n\n        return $http.put(requestUrl, {\n          version: ExplorationDataService.data.version,\n          new_member_role: newMemberRole,\n          new_member_username: newMemberUsername\n        }).then(function(response) {\n          var data = response.data;\n          AlertsService.clearWarnings();\n          that.init(\n            data.rights.owner_names, data.rights.editor_names,\n            data.rights.viewer_names, data.rights.status,\n            data.rights.cloned_from, data.rights.community_owned,\n            data.rights.viewable_if_private);\n        });\n      },\n      publish: function() {\n        var that = this;\n        var requestUrl = (\n          \'/createhandler/status/\' + ExplorationDataService.explorationId);\n\n        return $http.put(requestUrl, {\n          make_public: true\n        }).then(function(response) {\n          var data = response.data;\n          AlertsService.clearWarnings();\n          that.init(\n            data.rights.owner_names, data.rights.editor_names,\n            data.rights.viewer_names, data.rights.status,\n            data.rights.cloned_from, data.rights.community_owned,\n            data.rights.viewable_if_private);\n        });\n      },\n      saveModeratorChangeToBackend: function(emailBody) {\n        var that = this;\n        var explorationModeratorRightsUrl = (\n          \'/createhandler/moderatorrights/\' +\n          ExplorationDataService.explorationId);\n\n        $http.put(explorationModeratorRightsUrl, {\n          email_body: emailBody,\n          version: ExplorationDataService.data.version\n        }).then(function(response) {\n          var data = response.data;\n          AlertsService.clearWarnings();\n          that.init(\n            data.rights.owner_names, data.rights.editor_names,\n            data.rights.viewer_names, data.rights.status,\n            data.rights.cloned_from, data.rights.community_owned,\n            data.rights.viewable_if_private);\n        });\n      }\n    };\n  }\n]);'

blocks = {}
debug_info = ''
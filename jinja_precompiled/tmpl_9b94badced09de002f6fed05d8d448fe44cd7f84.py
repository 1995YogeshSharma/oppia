from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/story_editor/main_editor/StoryNodeEditorDirective.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Controller for the story node editor.\n */\noppia.directive(\'storyNodeEditor\', [\n  \'UrlInterpolationService\', function(UrlInterpolationService) {\n    return {\n      restrict: \'E\',\n      scope: {\n        getId: \'&nodeId\',\n        getOutline: \'&outline\',\n        getExplorationId: \'&explorationId\',\n        isOutlineFinalized: \'&outlineFinalized\',\n        getDestinationNodeIds: \'&destinationNodeIds\'\n      },\n      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n        \'/pages/story_editor/main_editor/story_node_editor_directive.html\'),\n      controller: [\n        \'$scope\', \'$rootScope\', \'$uibModal\', \'StoryEditorStateService\',\n        \'StoryUpdateService\', \'UndoRedoService\', \'EVENT_STORY_INITIALIZED\',\n        \'EVENT_STORY_REINITIALIZED\', \'EVENT_VIEW_STORY_NODE_EDITOR\',\n        function(\n            $scope, $rootScope, $uibModal, StoryEditorStateService,\n            StoryUpdateService, UndoRedoService, EVENT_STORY_INITIALIZED,\n            EVENT_STORY_REINITIALIZED, EVENT_VIEW_STORY_NODE_EDITOR) {\n          var _init = function() {\n            $scope.story = StoryEditorStateService.getStory();\n            $scope.oldOutline = $scope.getOutline();\n            $scope.editableOutline = $scope.getOutline();\n            $scope.explorationId = $scope.getExplorationId();\n            $scope.outlineEditorIsShown = false;\n            $scope.nodeIdEditorIsShown = false;\n            $scope.OUTLINE_SCHEMA = {\n              type: \'html\',\n              ui_config: {\n                rows: 100\n              }\n            };\n          };\n\n          $scope.viewNodeEditor = function(nodeId) {\n            $rootScope.$broadcast(EVENT_VIEW_STORY_NODE_EDITOR, nodeId);\n          };\n\n          $scope.finalizeOutline = function() {\n            StoryUpdateService.finalizeStoryNodeOutline(\n              $scope.story, $scope.getId());\n          };\n\n          $scope.updateExplorationId = function(explorationId) {\n            StoryUpdateService.setStoryNodeExplorationId(\n              $scope.story, $scope.getId(), explorationId);\n          };\n\n          $scope.unfinalizeOutline = function() {\n            StoryUpdateService.unfinalizeStoryNodeOutline(\n              $scope.story, $scope.getId());\n          };\n\n          $scope.addNewDestinationNode = function() {\n            var nextNodeId = $scope.story.getStoryContents().getNextNodeId();\n            StoryUpdateService.addStoryNode($scope.story);\n            StoryUpdateService.addDestinationNodeIdToNode(\n              $scope.story, $scope.getId(), nextNodeId);\n          };\n\n          $scope.addExistingDestinationNode = function(nodeId) {\n            StoryUpdateService.addDestinationNodeIdToNode(\n              $scope.story, $scope.getId(), nodeId);\n            $scope.newDestinationNodeId = \'\';\n            $scope.closeNodeIdEditor();\n          };\n\n          $scope.removeDestinationNodeId = function(nodeId) {\n            StoryUpdateService.removeDestinationNodeIdFromNode(\n              $scope.story, $scope.getId(), nodeId);\n          };\n\n          $scope.openNodeIdEditor = function() {\n            $scope.nodeIdEditorIsShown = true;\n          };\n\n          $scope.closeNodeIdEditor = function() {\n            $scope.nodeIdEditorIsShown = false;\n          };\n\n          $scope.openPreviewOutline = function(outline) {\n            $scope.outlineEditorIsShown = false;\n            $scope.editableOutline = outline;\n          };\n\n          $scope.closePreviewOutline = function(outline) {\n            $scope.outlineEditorIsShown = true;\n            $scope.editableOutline = outline;\n          };\n\n          $scope.isOutlineModified = function(outline) {\n            return ($scope.oldOutline !== outline);\n          };\n\n          $scope.updateOutline = function(newOutline) {\n            if (!$scope.isOutlineModified(newOutline)) {\n              return;\n            }\n            StoryUpdateService.setStoryNodeOutline(\n              $scope.story, $scope.getId(), newOutline);\n            $scope.openPreviewOutline(newOutline);\n          };\n\n          $scope.$on(EVENT_STORY_INITIALIZED, _init);\n          $scope.$on(EVENT_STORY_REINITIALIZED, _init);\n\n          _init();\n        }\n      ]\n    };\n  }]);'

blocks = {}
debug_info = ''
from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound, Namespace
name = 'pages/exploration_player/PlaythroughServiceSpec.js'

def root(context, missing=missing):
    resolve = context.resolve_or_missing
    undefined = environment.undefined
    if 0: yield None
    pass
    yield u'// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS-IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the playthrough service.\n */\n\ndescribe(\'Playthrough service\', function() {\n  beforeEach(module(\'oppia\'));\n\n  describe(\'Test playthrough service functions\', function() {\n    beforeEach(inject(function($injector) {\n      this.expId = \'expId1\';\n      this.expVersion = 1;\n      this.ps = $injector.get(\'PlaythroughService\');\n      this.laof = $injector.get(\'LearnerActionObjectFactory\');\n      this.ps.initSession(this.expId, this.expVersion, 1.0, [this.expId]);\n    }));\n\n    it(\'should initialize a session with correct values.\', function() {\n      var playthrough = this.ps.getPlaythrough();\n\n      expect(playthrough.expId, this.expId);\n      expect(playthrough.expVersion, this.expVersion);\n    });\n\n    it(\'should record exploration start action.\', function() {\n      this.ps.recordExplorationStartAction(\'initStateName1\');\n      var playthrough = this.ps.getPlaythrough();\n\n      expect(playthrough.actions).toEqual(\n        [this.laof.createNew(\n          \'ExplorationStart\', {\n            state_name: {\n              value: \'initStateName1\'\n            }\n          }, 1\n        )]);\n    });\n\n    it(\'should record answer submit action.\', function() {\n      this.ps.recordAnswerSubmitAction(\n        \'stateName1\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n      var playthrough = this.ps.getPlaythrough();\n\n      expect(playthrough.actions).toEqual(\n        [this.laof.createNew(\n          \'AnswerSubmit\', {\n            state_name: {\n              value: \'stateName1\'\n            },\n            dest_state_name: {\n              value: \'stateName2\'\n            },\n            interaction_id: {\n              value: \'TextInput\'\n            },\n            submitted_answer: {\n              value: \'Hello\'\n            },\n            feedback: {\n              value: \'Try again\'\n            },\n            time_spent_state_in_msecs: {\n              value: 30\n            }\n          }, 1\n        )]);\n    });\n\n    it(\'should record exploration quit action.\', function() {\n      this.ps.recordExplorationQuitAction(\'stateName1\', 120);\n      var playthrough = this.ps.getPlaythrough();\n\n      expect(playthrough.actions).toEqual(\n        [this.laof.createNew(\n          \'ExplorationQuit\', {\n            state_name: {\n              value: \'stateName1\'\n            },\n            time_spent_in_state_in_msecs: {\n              value: 120\n            }\n          }, 1\n        )]);\n    });\n\n    it(\n      \'should analyze a playthrough for multiple incorrect submissions issue\',\n      function() {\n        var playthrough = this.ps.getPlaythrough();\n\n        expect(playthrough.playthroughId).toEqual(null);\n        expect(playthrough.issueType).toEqual(null);\n        expect(playthrough.issueCustomizationArgs).toEqual({});\n\n        this.ps.recordExplorationStartAction(\'stateName1\');\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n\n        this.ps.recordPlaythrough();\n\n        var playthrough = this.ps.getPlaythrough();\n\n        expect(playthrough.issueType).toEqual(\'MultipleIncorrectSubmissions\');\n        expect(playthrough.issueCustomizationArgs).toEqual({\n          state_name: {\n            value: \'stateName1\'\n          },\n          num_times_answered_incorrectly: {\n            value: 5\n          }\n        });\n      });\n\n    it(\'should analyze a playthrough for early quit issue\', function() {\n      var playthrough = this.ps.getPlaythrough();\n\n      expect(playthrough.playthroughId).toEqual(null);\n      expect(playthrough.issueType).toEqual(null);\n      expect(playthrough.issueCustomizationArgs).toEqual({});\n\n      this.ps.recordExplorationStartAction(\'stateName1\');\n      this.ps.recordAnswerSubmitAction(\n        \'stateName1\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n      this.ps.recordExplorationQuitAction(\'stateName1\', 60);\n\n      this.ps.recordPlaythrough();\n\n      var playthrough = this.ps.getPlaythrough();\n\n      expect(playthrough.issueType).toEqual(\'EarlyQuit\');\n      // We don\'t check the time spent issue customization arg because it is\n      // flaky between tests.\n      expect(playthrough.issueCustomizationArgs.state_name).toEqual({\n        value: \'stateName1\'\n      });\n    });\n\n    it(\n      \'should analyze a playthrough for cyclic state transitions issue\',\n      function() {\n        var playthrough = this.ps.getPlaythrough();\n\n        expect(playthrough.playthroughId).toEqual(null);\n        expect(playthrough.issueType).toEqual(null);\n        expect(playthrough.issueCustomizationArgs).toEqual({});\n\n        this.ps.recordExplorationStartAction(\'stateName1\');\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName1\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordExplorationQuitAction(\'stateName1\', 30);\n\n        this.ps.recordPlaythrough();\n\n        var playthrough = this.ps.getPlaythrough();\n\n        expect(playthrough.issueType).toEqual(\'CyclicStateTransitions\');\n        // The cycle is stateName1->stateName2->stateName3->stateName1.\n        expect(playthrough.issueCustomizationArgs).toEqual({\n          state_names: {\n            value: [\'stateName1\', \'stateName2\', \'stateName3\', \'stateName1\']\n          },\n        });\n      });\n\n    it(\n      \'should analyze a playthrough for cyclic state transitions issue for a \' +\n        \'cycle starting at a later point in the playthrough.\',\n      function() {\n        this.ps.recordExplorationStartAction(\'stateName1\');\n        this.ps.recordAnswerSubmitAction(\n          \'stateName1\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName2\', \'stateName3\', \'TextInput\', \'Hello\', \'Try again\', 30);\n        this.ps.recordAnswerSubmitAction(\n          \'stateName3\', \'stateName2\', \'TextInput\', \'Hello\', \'Try again\', 30);\n\n        var playthrough = this.ps.getPlaythrough();\n\n        expect(playthrough.playthroughId).toEqual(null);\n        expect(playthrough.issueType).toEqual(null);\n        expect(playthrough.issueCustomizationArgs).toEqual({});\n\n        this.ps.recordExplorationQuitAction(\'stateName2\', 60);\n        this.ps.recordPlaythrough();\n\n        var playthrough = this.ps.getPlaythrough();\n\n        expect(playthrough.issueType).toEqual(\'CyclicStateTransitions\');\n        // The cycle is stateName2->stateName3->stateName2.\n        expect(playthrough.issueCustomizationArgs).toEqual({\n          state_names: {\n            value: [\'stateName2\', \'stateName3\', \'stateName2\']\n          },\n        });\n      });\n  });\n\n  describe(\'Test whitelisting functions\', function() {\n    beforeEach(inject(function($injector) {\n      this.expId = \'expId1\';\n      this.expVersion = 1;\n      this.ps = $injector.get(\'PlaythroughService\');\n      this.laof = $injector.get(\'LearnerActionObjectFactory\');\n      this.ps.initSession(this.expId, this.expVersion, 1.0, [this.expId]);\n    }));\n\n    it(\'should not record learner actions for blacklisted exps\', function() {\n      this.ps.initSession(this.expId, this.expVersion, 1.0, []);\n\n      this.ps.recordExplorationStartAction(\'initStateName1\');\n      var playthrough = this.ps.getPlaythrough();\n\n      expect(playthrough.actions).toEqual([]);\n    });\n  });\n});'

blocks = {}
debug_info = ''